# Copyright 2017 Rice University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import sys
import json
import ijson as ijson
import math
import random
import numpy as np
from itertools import chain
import re

import sys
# sys.path.append('/home/rm38/bayou/src/main/python/')

import bayou.models.mcmc.evidence
from bayou.models.mcmc.utils import gather_calls
import scripts.ast_extractor

HELP = """Use this script to extract evidences from a raw data file with sequences generated by driver.
You can also filter programs based on number and length of sequences, and control the samples from each program."""


def extract_evidence(clargs):
    print('Loading data file...')

    f = open(clargs.input_file[0] , 'rb')
    print('Done')

    programs = []
    f = open(clargs.input_file[0] , 'rb')
    done = 0
    for program in ijson.items(f, 'programs.item'):

        file_name = program['file']

        sample = dict(program)
        del sample['sequences']
        if 'javadoc' in sample:
            del sample['javadoc']
        calls = gather_calls(program['ast'])
        apicalls = list(set(chain.from_iterable([bayou.models.mcmc.evidence.APICalls.from_call(call)
                                                 for call in calls])))
        types = list(set(chain.from_iterable([bayou.models.mcmc.evidence.Types.from_call(call)
                                              for call in calls])))
        keywords = list(set(chain.from_iterable([bayou.models.mcmc.evidence.Keywords.from_call(call)
                                                for call in calls])))
        random.shuffle(apicalls)
        random.shuffle(types)
        random.shuffle(keywords)
        sample['apicalls'] = apicalls
        sample['types'] = types
        sample['keywords'] = keywords

        programs.append(sample)



        done += 1
        print('Extracted evidence [API/Type/Keywords/Sorrounding Evidences] for {} programs'.format(done), end='\r')

    random.shuffle(programs)


    print('\nWriting to {}...'.format(clargs.output_file[0]), end='')
    outFile = clargs.output_file[0]


    with open(outFile, 'w') as f:
        json.dump({'programs': programs}, fp=f, indent=2)


    print('done')



if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=HELP)
    parser.add_argument('input_file', type=str, nargs=1,
                        help='input data file')
    parser.add_argument('output_file', type=str, nargs=1,
                        help='output data file')
    parser.add_argument('--python_recursion_limit', type=int, default=10000,
                        help='set recursion limit for the Python interpreter')
    parser.add_argument('--max_ast_depth', type=int, default=32,
                        help='max ast depth for out program ')


    clargs = parser.parse_args()
    sys.setrecursionlimit(clargs.python_recursion_limit)
    extract_evidence(clargs)
