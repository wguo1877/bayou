{
  "programs": [
    {
      "method": "write@77",
      "body": "/** \n * @see ByteHolder#write\n * @exception IOException\t\tThrown on error\n */\npublic void write(int b) throws IOException {\n  if (SanityManager.DEBUG)   SanityManager.ASSERT(writing == true,\"Writing should be true 1\");\n  if (curBufPos >= curBuf.length)   getNextBuffer_w();\n  curBuf[curBufPos++]=(byte)b;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/derby/java/engine/org/apache/derby/impl/store/raw/data/MemByteHolder.java",
      "types": [
        "Vector",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "size",
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.addElement(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "java",
        "add",
        "element",
        "size",
        "util",
        "vector",
        "object",
        "integer"
      ]
    },
    {
      "method": "ConvertTask@328",
      "formalParam": [
        "List<Track>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Formatter.Formatter(java.lang.Appendable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/musique/musique-core/src/main/java/com/tulskiy/musique/gui/dialogs/ConverterDialog.java",
      "body": "ConvertTask(List<Track> tracks){\n  this.tracks=tracks;\n  sb=new StringBuilder();\n  formatter=new Formatter(sb);\n}\n",
      "types": [
        "Formatter",
        "Appendable",
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.util.Formatter.Formatter(java.lang.Appendable)"
          ]
        }
      ],
      "keywords": [
        "formatter",
        "java",
        "util",
        "builder",
        "appendable",
        "string",
        "lang"
      ]
    },
    {
      "method": "testSerialization@134",
      "body": "/** \n * Serialize an instance, restore it, and check for equality.\n */\npublic void testSerialization(){\n  BorderArrangement b1=new BorderArrangement();\n  BorderArrangement b2=null;\n  try {\n    ByteArrayOutputStream buffer=new ByteArrayOutputStream();\n    ObjectOutput out=new ObjectOutputStream(buffer);\n    out.writeObject(b1);\n    out.close();\n    ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n    b2=(BorderArrangement)in.readObject();\n    in.close();\n  }\n catch (  Exception e) {\n    fail(e.toString());\n  }\n  assertEquals(b1,b2);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.ObjectOutput.writeObject(java.lang.Object)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.ObjectOutput.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.ByteArrayOutputStream.toByteArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              },
              {
                "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Promasi-V2/org.promasi.desktop_swing/Libs/jfreechart-1.0.14/tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
      "types": [
        "IOException",
        "Object",
        "String",
        "ObjectOutput",
        "OutputStream",
        "ByteArrayInputStream",
        "ObjectOutputStream",
        "Throwable",
        "InputStream",
        "ObjectInputStream",
        "Byte",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "writeObject",
        "close",
        "toString",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "java.io.ObjectOutput.close()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)"
          ]
        },
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "java.io.ObjectOutput.close()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
            "java.lang.Throwable.toString()"
          ]
        }
      ],
      "keywords": [
        "byte",
        "lang",
        "string",
        "close",
        "array",
        "java",
        "output",
        "exception",
        "write",
        "object",
        "io",
        "input",
        "throwable",
        "stream"
      ]
    },
    {
      "method": "loadImage@73",
      "body": "/** \n * Helper method to load an image file from the CLASSPATH\n * @param imageName the package and name of the file to load relative to the CLASSPATH\n * @return an ImageIcon instance with the specified image file\n * @throws IllegalArgumentException if the image resource cannot be loaded.\n */\npublic ImageIcon loadImage(String imageName){\n  try {\n    ClassLoader classloader=getClass().getClassLoader();\n    java.net.URL url=classloader.getResource(imageName);\n    if (url != null) {\n      ImageIcon icon=new ImageIcon(url);\n      return icon;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  throw new IllegalArgumentException(\"Unable to load image: \" + imageName);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getClassLoader()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ClassLoader"
              },
              {
                "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.net.URL"
              },
              {
                "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "ImageIcon",
      "file": "./java_projects/rawr/lib/rawr/launch4j/src/net/sf/launch4j/form/SingleInstanceForm.java",
      "types": [
        "Throwable",
        "ClassLoader",
        "String",
        "Class",
        "URL",
        "ImageIcon"
      ],
      "apicalls": [
        "getClassLoader",
        "getResource",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "javax",
        "resource",
        "icon",
        "class",
        "trace",
        "image",
        "swing",
        "java",
        "lang",
        "get",
        "loader",
        "print",
        "throwable",
        "stack",
        "url",
        "string"
      ]
    },
    {
      "method": "bytesRead@46",
      "body": "public void bytesRead(int bytesRead){\n  totalBytesRead=totalBytesRead + bytesRead;\n  updateUploadInfo(\"progress\");\n  try {\n    Thread.sleep(delay);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Thread.sleep(long)",
                "_throws": [
                  "java.lang.InterruptedException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/betterFORM/web/src/main/java/de/betterform/agent/web/upload/UploadListener.java",
      "types": [
        "Throwable",
        "Thread",
        "InterruptedException",
        "System",
        "Long"
      ],
      "apicalls": [
        "printStackTrace",
        "currentTimeMillis",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "stack",
        "time",
        "sleep",
        "system",
        "java",
        "long",
        "trace",
        "millis",
        "print",
        "thread",
        "exception",
        "interrupted",
        "current",
        "throwable"
      ]
    },
    {
      "method": "intervalAdded@45",
      "body": "public void intervalAdded(ListDataEvent arg0){\n  updateDetailPanel();\n}\n",
      "formalParam": [
        "ListDataEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Container.removeAll()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          },
          {
            "_call": "java.awt.Container.validate()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.repaint()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdownloader/trunk/src/org/jdownloader/extensions/omnibox/omni/gui/AwesomeProposalDetailPanel.java",
      "types": [
        "Component",
        "Container"
      ],
      "apicalls": [
        "repaint",
        "add",
        "validate",
        "removeAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.removeAll()",
            "java.awt.Container.add(java.awt.Component)",
            "java.awt.Container.validate()",
            "java.awt.Component.repaint()"
          ]
        }
      ],
      "keywords": [
        "container",
        "validate",
        "add",
        "component",
        "remove",
        "awt",
        "java",
        "repaint"
      ]
    },
    {
      "method": "visit@178",
      "body": "@Override public void visit(Instanceof i){\n  ResolvedType type=(ResolvedType)i.getType();\n  int varType=getVarType((ReflectionVar)i.getVar());\n  if (varType != this.matchVarType) {\n    return;\n  }\n  try {\n    Class typeClass=ClassUtils.forName(type.getName(),this.matchClass.getClassLoader());\n    this.matches=typeClass.isAssignableFrom(this.matchClass);\n  }\n catch (  ClassNotFoundException ex) {\n    this.matches=false;\n  }\n}\n",
      "formalParam": [
        "Instanceof"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader",
            "_throws": []
          },
          {
            "_call": "java.lang.Class.isAssignableFrom(java.lang.Class)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-framework/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java",
      "types": [
        "ClassLoader",
        "Class",
        "Boolean"
      ],
      "apicalls": [
        "getClassLoader",
        "isAssignableFrom"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.Class.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "lang",
        "loader",
        "java",
        "class",
        "assignable",
        "get"
      ]
    },
    {
      "method": "write@40",
      "body": "public void write(OutputNode node,Map map) throws Exception {\n  Set keys=map.keySet();\n  for (  Object key : keys) {\n    OutputNode next=node.getChild(\"entry\");\n    next.setAttribute(\"key\",key.toString());\n    OutputNode value=next.getChild(\"value\");\n    value.setValue(map.get(key).toString());\n  }\n}\n",
      "formalParam": [
        "OutputNode",
        "Map"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/streetlights/streetlights-client-android/simple-xml-2.6.3/test/src/org/simpleframework/xml/strategy/ConverterMapTest.java",
      "types": [
        "Map",
        "Object",
        "Set"
      ],
      "apicalls": [
        "keySet",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.keySet()",
            "java.util.Map.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "set",
        "object",
        "util",
        "key",
        "java",
        "get",
        "map"
      ]
    },
    {
      "method": "testHasWaitersIAE@1139",
      "body": "/** \n * hasWaiters throws IAE if not owned\n */\npublic void testHasWaitersIAE(){\n  final ReentrantReadWriteLock lock=new ReentrantReadWriteLock();\n  final Condition c=lock.writeLock().newCondition();\n  final ReentrantReadWriteLock lock2=new ReentrantReadWriteLock();\n  try {\n    lock2.hasWaiters(c);\n    shouldThrow();\n  }\n catch (  IllegalArgumentException success) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(java.util.concurrent.locks.Condition)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/test/java/tests/api/java/util/concurrent/ReentrantReadWriteLockTest.java",
      "types": [
        "Boolean",
        "concurrent"
      ],
      "apicalls": [
        "writeLock",
        "hasWaiters"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(java.util.concurrent.locks.Condition)"
          ]
        }
      ],
      "keywords": [
        "write",
        "waiters",
        "java",
        "util",
        "read",
        "locks",
        "lock",
        "boolean",
        "reentrant",
        "concurrent"
      ]
    },
    {
      "method": "deepCopy@8478",
      "body": "public GetS4ClusterMessage_result deepCopy(){\n  return new GetS4ClusterMessage_result(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.HashMap<String,Map<String,String>>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.put(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)",
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.String>",
            "_throws": []
          }
        ]
      },
      "returnType": "GetS4ClusterMessage_result",
      "file": "./java_projects/gansenbang/s4-managerV2/src/io/s4/manager/thrift/S4Manager.java",
      "types": [
        "HashMap",
        "Map",
        "String",
        "Set"
      ],
      "apicalls": [
        "put",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.HashMap<String,Map<String,String>>()",
            "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.entrySet()",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.put(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
          ]
        }
      ],
      "keywords": [
        "string",
        "put",
        "util",
        "hash",
        "set",
        "entry",
        "java",
        "map"
      ]
    },
    {
      "method": "getInteger@109",
      "body": "public Integer getInteger(String key){\n  return getInteger(key,null);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "Integer",
      "file": "./java_projects/sothis/sothis-core/src/main/java/org/sothis/core/util/PropertiesConfiguration.java",
      "types": [
        "NumberFormatException",
        "String",
        "Integer",
        "Properties"
      ],
      "apicalls": [
        "parseInt",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "parse",
        "string",
        "java",
        "util",
        "format",
        "get",
        "int",
        "exception",
        "property",
        "number",
        "properties"
      ]
    },
    {
      "method": "readList@249",
      "body": "/** \n * Reads and returns a  {@link List}.\n */\npublic List<Object> readList() throws IOException {\n  return readList(DEFAULT);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collection<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "List<Object>",
      "file": "./java_projects/bee-encode/src/main/java/org/ardverk/coding/BencodingInputStream.java",
      "types": [
        "Collection",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Collection<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "java",
        "collection",
        "list",
        "array",
        "util",
        "boolean",
        "add"
      ]
    },
    {
      "method": "paintTreeCellBorder@996",
      "formalParam": [
        "SynthContext",
        "Graphics",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.ImageIcon.getImage()",
            "node": "DAPICall",
            "_returns": "java.awt.Image",
            "_throws": []
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
            "node": "DAPICall",
            "_returns": "javax.swing.JComponent",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/plaf/synth/ImagePainter.java",
      "body": "public void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paint(context,g,x,y,w,h);\n}\n",
      "types": [
        "Image",
        "plaf",
        "ImageIcon",
        "String",
        "URL",
        "JComponent"
      ],
      "apicalls": [
        "getImage",
        "getComponent"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.ImageIcon.ImageIcon(java.net.URL,java.lang.String)",
            "javax.swing.ImageIcon.getImage()",
            "javax.swing.plaf.synth.SynthContext.getComponent()"
          ]
        }
      ],
      "keywords": [
        "synth",
        "component",
        "javax",
        "string",
        "icon",
        "image",
        "swing",
        "get",
        "plaf",
        "context",
        "url",
        "j"
      ]
    },
    {
      "method": "getFloatAttribute@1036",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Float.toString(float)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Float.parseFloat(java.lang.String)",
            "node": "DAPICall",
            "_returns": "float",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "float",
      "file": "./java_projects/mawLib/src/mxj/trunk/mawLib-mxj/src/net/christopherbaker/xml/XMLElement.java",
      "body": "public float getFloatAttribute(String name){\n  return getFloatAttribute(name,0);\n}\n",
      "types": [
        "NumberFormatException",
        "String",
        "Float"
      ],
      "apicalls": [
        "toString",
        "parseFloat"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Float.toString(float)",
            "java.lang.Float.parseFloat(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "exception",
        "format",
        "number",
        "parse",
        "lang",
        "string",
        "float"
      ]
    },
    {
      "method": "updateData@175",
      "formalParam": [
        "LguiType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ptp/rms/org.eclipse.ptp.rm.lml.core/src/org/eclipse/ptp/rm/lml/internal/core/model/OIDToInformation.java",
      "body": "/** \n * Call this method, if lml-model changed. The new model is passed to this handler. All getter-functions accessing the handler will then return data, which is collected from this new model\n * @param lgui new lml-data-model\n */\npublic void updateData(LguiType lgui){\n  this.lgui=lgui;\n  getInformationFromModel();\n}\n",
      "types": [
        "ArrayList",
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "list",
        "java",
        "array",
        "util",
        "map"
      ]
    },
    {
      "method": "JavaUrlHttpCommandExecutorService@94",
      "body": "@Inject public JavaUrlHttpCommandExecutorService(HttpUtils utils,ContentMetadataCodec contentMetadataCodec,@Named(Constants.PROPERTY_IO_WORKER_THREADS) ExecutorService ioWorkerExecutor,DelegatingRetryHandler retryHandler,IOExceptionRetryHandler ioRetryHandler,DelegatingErrorHandler errorHandler,HttpWire wire,@Named(\"untrusted\") HostnameVerifier verifier,@Named(\"untrusted\") Supplier<SSLContext> untrustedSSLContextProvider) throws SecurityException, NoSuchFieldException {\n  super(utils,contentMetadataCodec,ioWorkerExecutor,retryHandler,ioRetryHandler,errorHandler,wire);\n  if (utils.getMaxConnections() > 0)   System.setProperty(\"http.maxConnections\",String.valueOf(checkNotNull(utils,\"utils\").getMaxConnections()));\n  this.untrustedSSLContextProvider=checkNotNull(untrustedSSLContextProvider,\"untrustedSSLContextProvider\");\n  this.verifier=checkNotNull(verifier,\"verifier\");\n  this.methodField=HttpURLConnection.class.getDeclaredField(\"method\");\n  methodField.setAccessible(true);\n}\n",
      "formalParam": [
        "HttpUtils",
        "ContentMetadataCodec",
        "ExecutorService",
        "DelegatingRetryHandler",
        "IOExceptionRetryHandler",
        "DelegatingErrorHandler",
        "HttpWire",
        "HostnameVerifier",
        "Supplier<SSLContext>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.valueOf(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.System.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)",
            "_throws": [
              "java.lang.NoSuchFieldException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Field"
          },
          {
            "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jclouds/core/src/main/java/org/jclouds/http/internal/JavaUrlHttpCommandExecutorService.java",
      "types": [
        "Boolean",
        "Class",
        "System",
        "SecurityException",
        "NoSuchFieldException",
        "AccessibleObject",
        "String",
        "Character",
        "Field"
      ],
      "apicalls": [
        "setProperty",
        "setAccessible",
        "getDeclaredField",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.valueOf(char[])",
            "java.lang.System.setProperty(java.lang.String,java.lang.String)",
            "java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
          ]
        }
      ],
      "keywords": [
        "declared",
        "system",
        "get",
        "field",
        "security",
        "string",
        "set",
        "value",
        "character",
        "object",
        "java",
        "accessible",
        "property",
        "exception",
        "reflect",
        "lang",
        "boolean",
        "class"
      ]
    },
    {
      "method": "ensureOnScreen@228",
      "body": "/** \n * Modifies the position of rect so that it is completely on screen if that is possible.\n * @param rect The rectangle to move onto a single screen\n * @return rect after its position has been modified\n */\npublic static Rectangle ensureOnScreen(final Rectangle rect){\n  Rectangle localScreenBounds=getLocalScreenBounds();\n  if (localScreenBounds.contains(rect)) {\n    return rect;\n  }\n  Rectangle containgScreen=null;\n  Point rectPos=rect.getLocation();\n  for (  Rectangle screenBounds : SCREENS_WITH_INSETS) {\n    if (screenBounds.contains(rectPos)) {\n      containgScreen=screenBounds;\n      break;\n    }\n  }\n  for (  Rectangle screenBounds : SCREENS_WITH_INSETS) {\n    if (screenBounds.intersects(rect)) {\n      containgScreen=screenBounds;\n      break;\n    }\n  }\n  if (containgScreen == null) {\n    rect.x=(SCREENS_WITH_INSETS[0].width - rect.width) / 2;\n    rect.y=(SCREENS_WITH_INSETS[0].width - rect.width) / 2;\n    return rect;\n  }\n else {\n    Rectangle screenToConsider=containgScreen;\n    int rectRight=rect.x + rect.width;\n    int screenRight=screenToConsider.x + screenToConsider.width;\n    if (rectRight > screenRight) {\n      rect.x=screenRight - rect.width;\n    }\n    if (rect.x < screenToConsider.x)     rect.x=screenToConsider.x;\n    int rectBottom=rect.y + rect.height;\n    int screenBottom=screenToConsider.y + screenToConsider.height;\n    if (rectBottom > screenBottom) {\n      rect.y=screenBottom - rect.height;\n    }\n    if (rect.y < screenToConsider.y)     rect.y=screenToConsider.y;\n    return rect;\n  }\n}\n",
      "formalParam": [
        "Rectangle"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.GraphicsEnvironment"
          },
          {
            "_call": "java.awt.GraphicsEnvironment.getMaximumWindowBounds()",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "java.awt.Rectangle"
          },
          {
            "_call": "java.awt.Rectangle.contains(java.awt.Rectangle)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.Rectangle.getLocation()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Point"
          },
          {
            "_call": "java.awt.Rectangle.contains(java.awt.Point)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.Rectangle.intersects(java.awt.Rectangle)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Rectangle",
      "file": "./java_projects/baralga/baralga-core/src/main/java/org/remast/swing/util/ScreenUtils.java",
      "types": [
        "HeadlessException",
        "Boolean",
        "Rectangle",
        "GraphicsEnvironment",
        "Point",
        "Integer"
      ],
      "apicalls": [
        "getLocation",
        "contains",
        "getLocalGraphicsEnvironment",
        "getMaximumWindowBounds",
        "intersects"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getMaximumWindowBounds()",
            "java.awt.Rectangle.contains(java.awt.Rectangle)",
            "java.awt.Rectangle.getLocation()",
            "java.awt.Rectangle.contains(java.awt.Point)",
            "java.awt.Rectangle.intersects(java.awt.Rectangle)"
          ]
        }
      ],
      "keywords": [
        "get",
        "headless",
        "local",
        "maximum",
        "bounds",
        "rectangle",
        "integer",
        "window",
        "contains",
        "boolean",
        "java",
        "intersects",
        "awt",
        "exception",
        "graphics",
        "point",
        "location",
        "environment"
      ]
    },
    {
      "method": "PreloadUserAgentCallback@293",
      "body": "public PreloadUserAgentCallback(Document dom,File cacheDir,UserAgentCallback callback){\n  this.callback=callback;\n  if (cacheDir != null) {\n    if (!cacheDir.exists()) {\n      cacheDir.mkdirs();\n    }\n  }\n  this.dom=dom;\n  this.cacheDir=cacheDir;\n}\n",
      "formalParam": [
        "Document",
        "File",
        "UserAgentCallback"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.exists()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.mkdirs()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/geoserver-exts/printng/src/main/java/org/geoserver/printng/RenderingSupport.java",
      "types": [
        "Boolean",
        "File"
      ],
      "apicalls": [
        "mkdirs",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "java.io.File.mkdirs()"
          ]
        },
        {
          "calls": [
            "$NOT$java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "exists",
        "mkdirs",
        "io",
        "boolean",
        "java",
        "file"
      ]
    },
    {
      "method": "setUnknownAttribute@105",
      "body": "@SuppressWarnings(\"unused\") @JsonAnySetter public void setUnknownAttribute(String attributeName,Object ignored){\n  if (!alreadySeenAnySetterAttributes.contains(attributeName)) {\n    alreadySeenAnySetterAttributes.add(attributeName);\n    System.err.println(\"In LoggedJob, we saw the unknown attribute \" + attributeName + \".\");\n  }\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20-warehouse/src/tools/org/apache/hadoop/tools/rumen/LoggedJob.java",
      "types": [
        "PrintStream",
        "Boolean",
        "String",
        "Object",
        "Set"
      ],
      "apicalls": [
        "contains",
        "println",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "java.util.Set<java.lang.String>.add(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "add",
        "print",
        "stream",
        "io",
        "set",
        "object",
        "boolean",
        "contains",
        "java",
        "println",
        "util"
      ]
    },
    {
      "method": "testCopyStringToBuffer@569",
      "body": "@TestTargetNew(level=TestLevel.COMPLETE,method=\"copyStringToBuffer\",args={int.class,android.database.CharArrayBuffer.class}) public void testCopyStringToBuffer(){\n  CharArrayBuffer ca=new CharArrayBuffer(1000);\n  mTestAbstractCursor.moveToFirst();\n  mTestAbstractCursor.copyStringToBuffer(0,ca);\n  CursorWindow window=new CursorWindow(false);\n  mTestAbstractCursor.fillWindow(0,window);\n  StringBuffer sb=new StringBuffer();\n  sb.append(window.getString(0,0));\n  String str=mTestAbstractCursor.getString(0);\n  assertEquals(str.length(),ca.sizeCopied);\n  assertEquals(sb.toString(),new String(ca.data,0,ca.sizeCopied));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Object>.get(int)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.String(char[],int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_cts/tests/tests/database/src/android/database/cts/AbstractCursorTest.java",
      "types": [
        "Object",
        "ArrayList",
        "String",
        "StringBuffer",
        "Character",
        "Integer"
      ],
      "apicalls": [
        "get",
        "append",
        "length",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.util.ArrayList<java.lang.Object>.get(int)",
            "java.lang.String.length()",
            "java.lang.StringBuffer.toString()",
            "java.lang.String.String(char[],int,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "object",
        "util",
        "buffer",
        "array",
        "get",
        "append",
        "string",
        "integer",
        "list",
        "java",
        "length",
        "character"
      ]
    },
    {
      "method": "test_3@70",
      "body": "public void test_3() throws Exception {\n  Connection conn=DriverManager.getConnection(\"jdbc:mock:\");\n  Statement stmt=conn.createStatement();\n  ResultSet rs=stmt.executeQuery(\"SELECT NOW() FROM DUAL\");\n  Assert.assertTrue(rs.next());\n  Assert.assertTrue(rs.getObject(1) instanceof Timestamp);\n  rs.close();\n  stmt.close();\n  conn.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.DriverManager.getConnection(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Connection"
          },
          {
            "_call": "java.sql.Connection.createStatement()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Statement"
          },
          {
            "_call": "java.sql.Statement.executeQuery(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          },
          {
            "_call": "java.sql.ResultSet.next()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.ResultSet.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.Connection.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/druid/src/test/java/com/alibaba/druid/bvt/mock/MockExecuteTest.java",
      "types": [
        "DriverManager",
        "SQLException",
        "Statement",
        "ResultSet",
        "Connection",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "close",
        "executeQuery",
        "next",
        "createStatement",
        "getConnection"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.DriverManager.getConnection(java.lang.String)",
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.close()",
            "java.sql.Statement.close()",
            "java.sql.Connection.close()"
          ]
        }
      ],
      "keywords": [
        "statement",
        "java",
        "result",
        "get",
        "driver",
        "manager",
        "set",
        "next",
        "boolean",
        "connection",
        "sql",
        "close",
        "create",
        "query",
        "execute",
        "exception",
        "string"
      ]
    },
    {
      "method": "testConstructor@48",
      "body": "@Test public void testConstructor(){\n  assertNotNull(new EventUtils());\n  Constructor<?>[] cons=EventUtils.class.getDeclaredConstructors();\n  assertEquals(1,cons.length);\n  assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n  assertTrue(Modifier.isPublic(EventUtils.class.getModifiers()));\n  assertFalse(Modifier.isFinal(EventUtils.class.getModifiers()));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getDeclaredConstructors()",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Constructor[]",
            "_throws": [
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.Constructor<Tau_T>.getModifiers()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.Modifier.isPublic(int)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getModifiers()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.Modifier.isPublic(int)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getModifiers()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.Modifier.isFinal(int)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/commons-lang/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java",
      "types": [
        "Class",
        "Modifier",
        "Constructor",
        "Integer",
        "Boolean",
        "SecurityException"
      ],
      "apicalls": [
        "isFinal",
        "isPublic",
        "getDeclaredConstructors",
        "getModifiers"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getDeclaredConstructors()",
            "java.lang.reflect.Constructor<Tau_T>.getModifiers()",
            "java.lang.reflect.Modifier.isPublic(int)",
            "java.lang.Class<Tau_T>.getModifiers()",
            "java.lang.reflect.Modifier.isPublic(int)",
            "java.lang.Class<Tau_T>.getModifiers()",
            "java.lang.reflect.Modifier.isFinal(int)"
          ]
        }
      ],
      "keywords": [
        "class",
        "reflect",
        "exception",
        "declared",
        "java",
        "lang",
        "constructors",
        "modifiers",
        "final",
        "boolean",
        "integer",
        "modifier",
        "security",
        "constructor",
        "get",
        "public"
      ]
    },
    {
      "method": "isHttp@455",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/IDV/src/ucar/unidata/util/ResourceCollection.java",
      "body": "/** \n * Is the given path an http based path\n * @param resource Resource path\n * @return Is it http\n */\npublic boolean isHttp(String resource){\n  return resource.trim().startsWith(\"http://\");\n}\n",
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "trim",
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "starts",
        "string",
        "trim",
        "lang",
        "boolean"
      ]
    },
    {
      "method": "testLogin@36",
      "body": "@Test public void testLogin() throws Exception {\n  Map environment=new HashMap();\n  environment.put(JMXConnector.CREDENTIALS,new String[]{\"system\",\"manager\"});\n  MBeanServerConnection conn=getConnection(environment);\n  System.out.println(conn.getDefaultDomain());\n  assertEquals(\"DefaultDomain\",conn.getDefaultDomain());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geronimo/testsuite/security-testsuite/test-security/src/test/java/org/apache/geronimo/testsuite/security/TestJMXSecurity.java",
      "types": [
        "Map",
        "Object",
        "HashMap",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "put",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "put",
        "hash",
        "util",
        "println",
        "print",
        "string",
        "java",
        "io",
        "object",
        "stream",
        "map"
      ]
    },
    {
      "method": "shortForm@166",
      "body": "@Override public String shortForm(String uri){\n  Map<String,String> map=getNsPrefixMap();\n  for (  Entry<String,String> s : map.entrySet()) {\n    if (uri.startsWith(s.getValue())) {\n      return s.getKey() + \":\" + uri.substring(s.getValue().length());\n    }\n  }\n  return uri;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/agraph-java-client/src/com/franz/agraph/jena/AGPrefixMapping.java",
      "types": [
        "String",
        "Set",
        "Boolean",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "startsWith",
        "put",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "map",
        "starts",
        "entry",
        "util",
        "put",
        "hash",
        "boolean",
        "set",
        "lang"
      ]
    },
    {
      "method": "testOliverTwist@61",
      "body": "@Test public void testOliverTwist() throws IOException {\n  testInit();\n  String file=new File(\"./resources/oliver_twist.txt\").getCanonicalPath();\n  c.setFile(file);\n  c.scan();\n  Assert.assertEquals(43,c.get(\"workhouse\").size());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.File.getCanonicalPath()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Concordance/src/uk/ac/aber/dcs/odj/concordance/tests/TestConcordance.java",
      "types": [
        "File",
        "String",
        "IOException"
      ],
      "apicalls": [
        "getCanonicalPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getCanonicalPath()"
          ]
        }
      ],
      "keywords": [
        "io",
        "path",
        "java",
        "string",
        "get",
        "file",
        "canonical",
        "exception"
      ]
    },
    {
      "method": "emptySearchQueue@73",
      "body": "/** \n * Empty the search queue by processing all messages on the queue.\n * @throws InterruptedException\n */\npublic void emptySearchQueue() throws InterruptedException {\n  long start=System.currentTimeMillis();\n  int count=0;\n  do {\n    count=messageReceiver.triggerFired();\n    System.out.println(\"Emptying the search message queue, there were at least: \" + count + \" messages on the queue\");\n    Thread.yield();\n    long elapse=System.currentTimeMillis() - start;\n    if (elapse > MAX_WAIT * 2)     throw new RuntimeException(\"Timedout waiting process all messages that were on the queue before the tests started.\");\n  }\n while (count > 0);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.yield()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.yield()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Synapse-Repository-Services/services/search/src/test/java/org/sagebionetworks/search/controller/SearchIntegrationTest.java",
      "types": [
        "System",
        "Thread",
        "PrintStream",
        "Long",
        "String"
      ],
      "apicalls": [
        "yield",
        "currentTimeMillis",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Thread.yield()",
            "java.lang.System.currentTimeMillis()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Thread.yield()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "java",
        "stream",
        "yield",
        "string",
        "print",
        "thread",
        "current",
        "println",
        "lang",
        "long",
        "millis",
        "io",
        "system",
        "time"
      ]
    },
    {
      "method": "formatTime@23",
      "body": "public static String formatTime(long timestamp){\n  return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\",Locale.ENGLISH).format(new Date(timestamp));\n}\n",
      "formalParam": [
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/randomizedtesting/junit4-ant/src/main/java/com/carrotsearch/ant/tasks/junit4/FormattingUtils.java",
      "types": [
        "DateFormat",
        "Long",
        "Date",
        "Locale",
        "String",
        "SimpleDateFormat"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)",
            "java.util.Date.Date(long)",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "date",
        "java",
        "format",
        "text",
        "locale",
        "simple",
        "long",
        "util",
        "string"
      ]
    },
    {
      "method": "HotKeyEditor@142",
      "body": "public HotKeyEditor(){\n  super(new JTextField());\n  setClickCountToStart(1);\n  final JTextField textField=(JTextField)editorComponent;\n  textField.setEditable(false);\n  textField.addKeyListener(new KeyAdapter(){\n    @Override public void keyPressed(    KeyEvent e){\n      if (!MODIFIERS.contains(e.getKeyCode())) {\n        textField.setText(KeyStroke.getKeyStrokeForEvent(e).toString().replaceAll(\"pressed \",\"\"));\n        stopCellEditing();\n      }\n    }\n  }\n);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.setEditable(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.addKeyListener(java.awt.event.KeyListener)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/musique/musique-core/src/main/java/com/tulskiy/musique/plugins/hotkeys/GlobalHotKeysSettings.java",
      "types": [
        "JTextComponent",
        "Boolean",
        "Component",
        "KeyListener"
      ],
      "apicalls": [
        "addKeyListener",
        "setEditable"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.setEditable(boolean)",
            "java.awt.Component.addKeyListener(java.awt.event.KeyListener)"
          ]
        }
      ],
      "keywords": [
        "add",
        "component",
        "javax",
        "swing",
        "set",
        "boolean",
        "key",
        "java",
        "text",
        "listener",
        "j",
        "editable",
        "awt"
      ]
    },
    {
      "method": "endContainerLayout@222",
      "formalParam": [
        "JComponent",
        "SwingMetawidget"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Container.getComponentCount()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JPanel.JPanel()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "javax.swing.JComponent.setOpaque(boolean)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.awt.Container.add(java.awt.Component,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/metawidget/modules/swing/core/src/main/java/org/metawidget/swing/layout/GridBagLayout.java",
      "body": "public void endContainerLayout(JComponent container,SwingMetawidget metawidget){\n  State state=getState(container);\n  if (state.needSpacerRow && container.getComponentCount() > 0) {\n    if (state.currentColumn > 0) {\n      state.currentColumn=0;\n      state.currentRow++;\n    }\n    JPanel spacerPanel=new JPanel();\n    spacerPanel.setOpaque(false);\n    GridBagConstraints spacerConstraints=new GridBagConstraints();\n    spacerConstraints.gridy=state.currentRow;\n    spacerConstraints.weighty=1.0f;\n    container.add(spacerPanel,spacerConstraints);\n    state.currentColumn=mNumberOfColumns;\n  }\n}\n",
      "types": [
        "Boolean",
        "JPanel",
        "Component",
        "Object",
        "Container",
        "JComponent",
        "Integer"
      ],
      "apicalls": [
        "getComponentCount",
        "setOpaque",
        "add",
        "putClientProperty"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "java.awt.Container.getComponentCount()",
            "javax.swing.JPanel.JPanel()",
            "javax.swing.JComponent.setOpaque(boolean)",
            "java.awt.Container.add(java.awt.Component,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "java.awt.Container.getComponentCount()"
          ]
        }
      ],
      "keywords": [
        "panel",
        "count",
        "boolean",
        "integer",
        "put",
        "opaque",
        "component",
        "client",
        "container",
        "object",
        "java",
        "swing",
        "set",
        "add",
        "property",
        "get",
        "awt",
        "javax",
        "j"
      ]
    },
    {
      "method": "equals@57",
      "body": "@Override public boolean equals(Object obj){\n  if (this == obj)   return true;\n  if (obj == null)   return false;\n  if (getClass() != obj.getClass())   return false;\n  URLsJaxBean other=(URLsJaxBean)obj;\n  if (nodeName == null) {\n    if (other.nodeName != null)     return false;\n  }\n else   if (!nodeName.equals(other.nodeName))   return false;\n  if (uri == null) {\n    if (other.uri != null)     return false;\n  }\n else   if (!uri.equals(other.uri))   return false;\n  return true;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.net.URI.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/jetty-project/jetty-jmx-ws/src/main/java/org/mortbay/jetty/jmx/ws/domain/jaxb/URLsJaxBean.java",
      "types": [
        "URI",
        "Object",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.net.URI.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "object",
        "uri",
        "lang",
        "equals",
        "boolean",
        "net",
        "java"
      ]
    },
    {
      "method": "getText@69",
      "body": "public String getText(Object element){\n  if (element instanceof ReportDesignHandle) {\n    String fileName=((ReportDesignHandle)element).getFileName();\n    return fileName.substring(fileName.lastIndexOf(\"/\") + 1);\n  }\n  if (element instanceof ResourceEntry) {\n    return ((ResourceEntry)element).getName();\n  }\n  if (element instanceof String) {\n    return element.toString();\n  }\n  return super.getText(element);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/birt/UI/org.eclipse.birt.report.designer.ui.samplesview/src/org/eclipse/birt/report/designer/ui/samplesview/util/SampleReportsExplorerProvider.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "string",
        "last",
        "integer",
        "java",
        "lang",
        "index"
      ]
    },
    {
      "method": "addValidationGroup@155",
      "body": "/** \n * Add a validation group for the specific property.  The properties map to a specific lifecycle event.  To disable validation for a group, set the validation group to null.\n * @param validationGroupName\n * @param vgs\n */\npublic void addValidationGroup(String validationGroupName,Class<?>... vgs){\n  Integer event=findEvent(validationGroupName);\n  if (event != null) {\n    _validationGroups.put(event,vgs);\n    return;\n  }\n else {\n    throw new IllegalArgumentException(_loc.get(\"no-group-events\",validationGroupName).getMessage());\n  }\n}\n",
      "formalParam": [
        "String",
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Integer",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.Integer,java.lang.Class<?>[]>.put(java.lang.Integer,java.lang.Class<?>[])",
            "_throws": [],
            "_returns": "java.lang.Class<?>[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/validation/ValidatorImpl.java",
      "types": [
        "String",
        "Class",
        "Object",
        "Map",
        "Integer",
        "HashMap"
      ],
      "apicalls": [
        "put",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "java.util.Map<java.lang.Integer,java.lang.Class<?>[]>.put(java.lang.Integer,java.lang.Class<?>[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "put",
        "integer",
        "map",
        "class",
        "object",
        "java",
        "hash",
        "string",
        "get"
      ]
    },
    {
      "method": "testFoo@13",
      "body": "@Test @Ignore public void testFoo() throws Exception {\n  URI uri=URI.create(\"file:///Users/brianm/src/atlas/test.txt?user=atlas&pass=atlas\");\n  String content=CharStreams.toString(new InputStreamReader(uri.toURL().openStream()));\n  assertThat(content,equalTo(\"hello world\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URI.create(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          },
          {
            "_call": "java.net.URI.toURL()",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.URL"
          },
          {
            "_call": "java.net.URL.openStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/atlas/src/test/java/TestCruft.java",
      "types": [
        "URL",
        "MalformedURLException",
        "InputStream",
        "InputStreamReader",
        "String",
        "URI",
        "IOException"
      ],
      "apicalls": [
        "toURL",
        "openStream",
        "create"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.create(java.lang.String)",
            "java.net.URI.toURL()",
            "java.net.URL.openStream()",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "malformed",
        "reader",
        "string",
        "exception",
        "open",
        "create",
        "net",
        "url",
        "io",
        "java",
        "input",
        "uri"
      ]
    },
    {
      "method": "onDestroy@285",
      "body": "@Override public void onDestroy(){\n  if (VERBOSE)   Log.e(TAG,\"Map Service onDestroy\");\n  super.onDestroy();\n  if (mWakeLock != null) {\n    mWakeLock.release();\n    mWakeLock=null;\n  }\n  closeService();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.interrupt()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.join()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_packages_apps_Bluetooth/src/com/android/bluetooth/map/BluetoothMasService.java",
      "types": [
        "Thread",
        "Integer",
        "InterruptedException"
      ],
      "apicalls": [
        "interrupt",
        "join"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.interrupt()",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "thread",
        "lang",
        "java",
        "interrupt",
        "integer",
        "interrupted",
        "join",
        "exception"
      ]
    },
    {
      "method": "add@331",
      "body": "/** \n * Modifies this rectangle so that it represents the smallest rectangle that contains both the existing rectangle and the specified point. However, if the point falls on one of the two borders which are not inside the rectangle, a subsequent call to <code>contains</code> may return false.\n * @param x the X coordinate of the point to add to this rectangle\n * @param y the Y coordinate of the point to add to this rectangle\n */\npublic void add(double newx,double newy){\n  double minx=Math.min(getX(),newx);\n  double maxx=Math.max(getMaxX(),newx);\n  double miny=Math.min(getY(),newy);\n  double maxy=Math.max(getMaxY(),newy);\n  setRect(minx,miny,maxx - minx,maxy - miny);\n}\n",
      "formalParam": [
        "double",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.RectangularShape.getX()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.min(double,double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.awt.geom.RectangularShape.getMaxX()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.max(double,double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.awt.geom.RectangularShape.getY()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.min(double,double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.awt.geom.RectangularShape.getMaxY()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.max(double,double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Harpoon/Classpath/java/awt/geom/Rectangle2D.java",
      "types": [
        "RectangularShape",
        "Math",
        "Double"
      ],
      "apicalls": [
        "max",
        "getMaxX",
        "getMaxY",
        "min",
        "getX",
        "getY"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.RectangularShape.getX()",
            "java.lang.Math.min(double,double)",
            "java.awt.geom.RectangularShape.getMaxX()",
            "java.lang.Math.max(double,double)",
            "java.awt.geom.RectangularShape.getY()",
            "java.lang.Math.min(double,double)",
            "java.awt.geom.RectangularShape.getMaxY()",
            "java.lang.Math.max(double,double)"
          ]
        }
      ],
      "keywords": [
        "x",
        "geom",
        "max",
        "y",
        "min",
        "shape",
        "lang",
        "math",
        "get",
        "double",
        "awt",
        "java",
        "rectangular"
      ]
    },
    {
      "method": "toString@3221",
      "body": "public String toString(){\n  StringBuilder sb=new StringBuilder(\"refreshAuthentication_args(\");\n  boolean first=true;\n  sb.append(\"authenticationToken:\");\n  if (this.authenticationToken == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.authenticationToken);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/evernote-sdk-android/src/com/evernote/edam/userstore/UserStore.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "builder",
        "lang",
        "append",
        "java"
      ]
    },
    {
      "method": "setMinutes@376",
      "body": "public void setMinutes(int minutes){\n  iMinutes=minutes;\n  calculateDate();\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date(int,int,int,int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getDate()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getMonth()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getYear()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getHours()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getMinutes()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sandbox/xwiki-calendar/gwt/src/main/java/com/xpn/xwiki/calendar/client/data/XCalendar.java",
      "types": [
        "Date",
        "Integer"
      ],
      "apicalls": [
        "getHours",
        "getYear",
        "getMonth",
        "getDate",
        "getMinutes"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date(int,int,int,int,int,int)",
            "java.util.Date.getDate()",
            "java.util.Date.getMonth()",
            "java.util.Date.getYear()",
            "java.util.Date.getHours()",
            "java.util.Date.getMinutes()"
          ]
        }
      ],
      "keywords": [
        "hours",
        "year",
        "java",
        "util",
        "get",
        "minutes",
        "integer",
        "date",
        "month"
      ]
    },
    {
      "method": "buildPhase@125",
      "body": "/** \n * Starts the buildphase before each wave of monsters.  The loop goes on until the player has no more money to build towers, or the buildingphase gets stopped.\n * @throws InterruptedException \n */\npublic void buildPhase() throws InterruptedException {\n  int index=0;\n  System.out.println(\"BUILD PHASE:\");\n  buildPhase=true;\n  while (buildPhase) {\n    Thread.sleep(200);\n    main.repaint();\n    if (player.getMoney() < 10) {\n      System.out.println(\"NOT ENOUGH MONEY.\");\n      buildPhase=false;\n      break;\n    }\n    index+=1;\n    if (index >= 50) {\n      buildPhase=false;\n      break;\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JonnenTowerDefense/src/jonnentowerdefense/Game.java",
      "types": [
        "InterruptedException",
        "Long",
        "Thread",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "println",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Thread.sleep(long)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "long",
        "lang",
        "thread",
        "java",
        "string",
        "sleep",
        "println",
        "exception",
        "io",
        "print",
        "interrupted",
        "stream"
      ]
    },
    {
      "method": "shutdown@87",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "node": "DAPICall",
                "_returns": "java.lang.Thread",
                "_throws": []
              },
              {
                "_call": "java.lang.Thread.interrupt()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Thread.join()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.InterruptedException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/simjr/com.soartech.simjr.core/src/com/soartech/simjr/sim/SimulationThread.java",
      "body": "public void shutdown(){\nsynchronized (signal) {\n    shutdown=true;\n    signal.notify();\n  }\n  try {\n    logger.info(\"Waiting for simulation thread to exit\");\n    thread.join();\n  }\n catch (  InterruptedException e) {\n    logger.error(\"Interrupted while waiting for sim thread to exit\",e);\n    Thread.currentThread().interrupt();\n  }\n}\n",
      "types": [
        "Thread",
        "InterruptedException",
        "Integer"
      ],
      "apicalls": [
        "interrupt",
        "currentThread",
        "join"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.join()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.join()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "thread",
        "interrupt",
        "java",
        "exception",
        "join",
        "interrupted",
        "integer",
        "current"
      ]
    },
    {
      "method": "getController@60",
      "formalParam": [
        "ResultHandler.Context",
        "ResultHandlerConfig"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getConstructor(java.lang.Class[])",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Constructor",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.Constructor<Tau_T>.newInstance(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "Tau_T",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ]
          }
        ]
      },
      "returnType": "ResultHandler",
      "file": "./java_projects/Possom/result-handler-control-spi/src/main/java/no/sesat/search/result/handler/ResultHandlerFactory.java",
      "body": "/** \n * @param config\n * @return\n */\npublic static ResultHandler getController(final ResultHandler.Context context,final ResultHandlerConfig config){\n  final String name=\"no.sesat.search.result.handler.\" + config.getClass().getAnnotation(Controller.class).value();\n  try {\n    final SiteClassLoaderFactory.Context ctlContext=ContextWrapper.wrap(SiteClassLoaderFactory.Context.class,new BaseContext(){\n      public Spi getSpi(){\n        return Spi.RESULT_HANDLER_CONTROL;\n      }\n    }\n,context);\n    final ClassLoader ctlLoader=SiteClassLoaderFactory.instanceOf(ctlContext).getClassLoader();\n    @SuppressWarnings(\"unchecked\") final Class<? extends ResultHandler> cls=(Class<? extends ResultHandler>)ctlLoader.loadClass(name);\n    final Constructor<? extends ResultHandler> constructor=cls.getConstructor(ResultHandlerConfig.class);\n    return constructor.newInstance(config);\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IllegalArgumentException(ex);\n  }\ncatch (  NoSuchMethodException ex) {\n    throw new IllegalArgumentException(ex);\n  }\ncatch (  InvocationTargetException ex) {\n    throw new IllegalArgumentException(ex);\n  }\ncatch (  InstantiationException ex) {\n    throw new IllegalArgumentException(ex);\n  }\ncatch (  IllegalAccessException ex) {\n    throw new IllegalArgumentException(ex);\n  }\n}\n",
      "types": [
        "InvocationTargetException",
        "NoSuchMethodException",
        "Class",
        "InstantiationException",
        "IllegalAccessException",
        "IllegalArgumentException",
        "SecurityException",
        "Object",
        "Constructor"
      ],
      "apicalls": [
        "newInstance",
        "getConstructor"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getConstructor(java.lang.Class[])",
            "java.lang.reflect.Constructor<Tau_T>.newInstance(java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "method",
        "exception",
        "class",
        "new",
        "lang",
        "object",
        "access",
        "constructor",
        "java",
        "instance",
        "get",
        "reflect",
        "illegal",
        "instantiation",
        "security",
        "invocation",
        "target",
        "argument"
      ]
    },
    {
      "method": "test_size@267",
      "body": "/** \n * @tests java.util.HashSet#size()\n */\n@TestTargetNew(level=TestLevel.COMPLETE,notes=\"\",method=\"size\",args={}) public void test_size(){\n  assertTrue(\"Returned incorrect size\",hs.size() == (objArray.length + 1));\n  hs.clear();\n  assertEquals(\"Cleared set returned non-zero size\",0,hs.size());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/tests/api/java/util/HashSetTest.java",
      "types": [
        "Integer",
        "HashSet"
      ],
      "apicalls": [
        "size",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.size()",
            "java.util.HashSet.clear()",
            "java.util.HashSet.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "size",
        "java",
        "set",
        "clear",
        "integer",
        "hash"
      ]
    },
    {
      "method": "addProperty@62",
      "body": "public ResourceBuilder addProperty(URI theProperty,List<? extends Value> theList){\n  Resource aListRes=mGraph.getValueFactory().createBNode();\n  mGraph.add(getResource(),theProperty,aListRes);\n  Iterator<? extends Value> aResIter=theList.iterator();\n  while (aResIter.hasNext()) {\n    mGraph.add(aListRes,RDF.FIRST,aResIter.next());\n    if (aResIter.hasNext()) {\n      BNode aNextListElem=mGraph.getValueFactory().createBNode();\n      mGraph.add(aListRes,RDF.REST,aNextListElem);\n      aListRes=aNextListElem;\n    }\n else {\n      mGraph.add(aListRes,RDF.REST,RDF.NIL);\n    }\n  }\n  return this;\n}\n",
      "formalParam": [
        "URI",
        "List<? extends Value>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "_returns": "Tau_E",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "ResourceBuilder",
      "file": "./java_projects/cp-openrdf-utils/core/src/com/clarkparsia/openrdf/util/ResourceBuilder.java",
      "types": [
        "Iterator",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "next",
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "boolean",
        "java",
        "iterator",
        "next"
      ]
    },
    {
      "method": "getPropertyNames@612",
      "body": "/** \n * Returns a string array containing names of all the properties under specified section.\n * @param pstrSection the name of the section for which names of properties is to be retrieved.\n * @return the string array of property names.\n */\npublic String[] getPropertyNames(String pstrSection){\n  String[] arrRet=null;\n  INISection objSec=null;\n  objSec=(INISection)this.mhmapSections.get(pstrSection);\n  if (objSec != null) {\n    arrRet=objSec.getPropNames();\n    objSec=null;\n  }\n  return arrRet;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.HashMap.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.LinkedHashMap.keySet()",
                "node": "DAPICall",
                "_returns": "java.util.Set",
                "_throws": []
              },
              {
                "_call": "java.util.Set.iterator()",
                "node": "DAPICall",
                "_returns": "java.util.Iterator",
                "_throws": []
              },
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.util.Iterator.hasNext()",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": []
                  }
                ]
              }
            ]
          }
        ]
      },
      "returnType": "String[]",
      "file": "./java_projects/thera-pi-2/PiTool/src/einzigesPaket/INIFile.java",
      "types": [
        "Boolean",
        "Integer",
        "HashMap",
        "LinkedHashMap",
        "Iterator",
        "Set"
      ],
      "apicalls": [
        "hasNext",
        "iterator",
        "keySet",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.size()"
          ]
        },
        {
          "calls": [
            "java.util.HashMap.size()",
            "java.util.LinkedHashMap.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "set",
        "util",
        "hash",
        "key",
        "next",
        "integer",
        "java",
        "size",
        "boolean",
        "map",
        "linked"
      ]
    },
    {
      "method": "init@57",
      "body": "public void init(){\n  this.setLayout(new BorderLayout());\n  String[] instructions={\" the test is relevant for windows platforms and \",\" mouses with high-resolution wheel, please just press pass if it's not the case \",\" place the mouse cursor above the green panel and rotate the mouse wheel \",\" the test will print all mouse wheel messages into the logging panel, \",\" please make sure that some of the messages have non-zero 'wheelRotation' value \",\" in this case the test passes, otherwise it fails, \",\" please make sure the test works OK if the mouse wheel is rotated very slow  \"};\n  Sysout.createDialogWithInstructions(instructions);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.BorderLayout.BorderLayout()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Frame.Frame()",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Dialog.setVisible(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/java/awt/event/MouseEvent/AWTPanelSmoothWheel/AWTPanelSmoothWheel.java",
      "types": [
        "Dialog",
        "Frame",
        "HeadlessException",
        "BorderLayout",
        "Boolean",
        "Container",
        "LayoutManager"
      ],
      "apicalls": [
        "setVisible",
        "setLayout"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.BorderLayout.BorderLayout()",
            "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "java.awt.Frame.Frame()",
            "java.awt.Dialog.setVisible(boolean)"
          ]
        }
      ],
      "keywords": [
        "manager",
        "visible",
        "dialog",
        "set",
        "container",
        "headless",
        "layout",
        "awt",
        "frame",
        "boolean",
        "exception",
        "border",
        "java"
      ]
    },
    {
      "method": "getAvailableLangs@44",
      "body": "/** \n * List of available Languages as file endings. \n */\npublic Collection<String> getAvailableLangs(){\n  final List<String> list=new LinkedList<String>();\n  for (  Object key : props.keySet()) {\n    String name=key.toString();\n    if (name.startsWith(LANG)) {\n      list.add(name.substring(LANG.length()));\n    }\n  }\n  return list;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Collection<String>",
      "file": "./java_projects/z/src/com/adamldavis/z/ZFactory.java",
      "types": [
        "LinkedList",
        "List",
        "Object",
        "Boolean",
        "Set",
        "String",
        "Integer",
        "Hashtable"
      ],
      "apicalls": [
        "substring",
        "add",
        "length",
        "keySet",
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.keySet()",
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.keySet()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "key",
        "starts",
        "hashtable",
        "list",
        "set",
        "lang",
        "util",
        "linked",
        "boolean",
        "integer",
        "object",
        "java",
        "add",
        "substring",
        "string",
        "length"
      ]
    },
    {
      "method": "getPrimaryAction@31",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/TDA367_1/src/com/github/joakimpersson/tda367/controller/input/osdependant/X360OsDep.java",
      "body": "/** \n * Get the primary action keycode\n * @return The primary action keycode\n */\npublic static int getPrimaryAction(){\n  if (platform.equals(MAC)) {\n    return 11;\n  }\n else   if (platform.startsWith(WINDOWS)) {\n    return 0;\n  }\n  return 0;\n}\n",
      "types": [
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "startsWith",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "boolean",
        "lang",
        "object",
        "equals",
        "java",
        "starts"
      ]
    },
    {
      "method": "ANTLRStringStream@72",
      "body": "/** \n * Copy data in string to a local char array \n */\npublic ANTLRStringStream(String input){\n  this();\n  this.data=input.toCharArray();\n  this.n=input.length();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/antlr/runtime/Java/src/main/java/org/antlr/runtime/ANTLRStringStream.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "toCharArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toCharArray()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "length",
        "java",
        "char",
        "string",
        "integer",
        "array"
      ]
    },
    {
      "method": "getInt@278",
      "body": "public int getInt(String s){\n  return new Integer(getString(s));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.Integer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/candlepin/src/main/java/org/candlepin/config/Config.java",
      "types": [
        "Object",
        "Integer",
        "NumberFormatException",
        "String",
        "TreeMap"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.lang.Integer.Integer(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "number",
        "map",
        "exception",
        "string",
        "integer",
        "get",
        "object",
        "lang",
        "java",
        "format",
        "util",
        "tree"
      ]
    },
    {
      "method": "addAnnotation@51",
      "body": "public void addAnnotation(AnnotationNode value){\n  checkInit();\n  annotations.add(value);\n}\n",
      "formalParam": [
        "AnnotationNode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base/org.codehaus.groovy16/src/org/codehaus/groovy/ast/AnnotatedNode.java",
      "types": [
        "Boolean",
        "Object",
        "ArrayList",
        "List",
        "Integer"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList(int)",
            "java.util.List.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "object",
        "boolean",
        "array",
        "java",
        "add",
        "util",
        "list"
      ]
    },
    {
      "method": "testServersideHandlerFailureInOutboundPhase@270",
      "body": "public void testServersideHandlerFailureInOutboundPhase() throws Exception {\n  System.out.println(\"Starting testServersideHandlerFailureInOutboundPhase\");\n  middleOperationOutHandler.shouldFail(true);\n  try {\n    executeClient();\n    fail(\"An expected handler failure did not occur\");\n  }\n catch (  AxisFault e) {\n  }\n  List expectedExecutionState=Arrays.asList(new String[]{\"In1\",\"In2\",\"In3\",\"In4\",\"In5\",\"In6\",\"Out1\",\"kaboom\",\"FCOut1\",\"FCIn6\",\"FCIn5\",\"FCIn4\",\"FCIn3\",\"FCIn2\",\"FCIn1\"});\n  assertEquals(expectedExecutionState,testResults);\n  middleOperationOutHandler.shouldFail(false);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/axis2-java/modules/integration/test/org/apache/axis2/engine/HandlerExecutionTest.java",
      "types": [
        "PrintStream",
        "String",
        "Arrays",
        "List"
      ],
      "apicalls": [
        "asList",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "arrays",
        "java",
        "print",
        "stream",
        "io",
        "println",
        "string"
      ]
    },
    {
      "method": "analyzeByteCode@329",
      "body": "/** \n * Analyze the byte code of a class file.\n * @throws IOException\n */\npublic static ByteCodeAnalyzer analyzeByteCode(final InputStream in,boolean closeStream) throws IOException {\n  final ByteArrayOutputStream outStream=new ByteArrayOutputStream();\n  copy(in,outStream,closeStream,true);\n  return new ByteCodeAnalyzer(outStream.toByteArray(),ByteCodeAnalyzer.Mode.ALL);\n}\n",
      "formalParam": [
        "InputStream",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.read(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.OutputStream.write(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "ByteCodeAnalyzer",
      "file": "./java_projects/imagej/core/updater/core/src/main/java/imagej/updater/core/Diff.java",
      "types": [
        "Byte",
        "OutputStream",
        "IOException",
        "Integer",
        "ByteArrayOutputStream",
        "InputStream"
      ],
      "apicalls": [
        "close",
        "write",
        "toByteArray",
        "read",
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.InputStream.close()",
            "java.io.OutputStream.flush()",
            "java.io.OutputStream.close()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "array",
        "output",
        "exception",
        "java",
        "read",
        "close",
        "byte",
        "input",
        "io",
        "integer",
        "write",
        "flush",
        "stream"
      ]
    },
    {
      "method": "printElementsByID@176",
      "body": "public void printElementsByID(){\n  DocumentElement element=jsEngine.getDocument().getElementById(\"3246\");\n  System.out.println(\"------Element Start---------\");\n  System.out.print(element);\n  System.out.println(\"------Element End---------\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.print(char[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexowysiwyg/src/examples/java/ReferencingDocumentElements.java",
      "types": [
        "PrintStream",
        "String",
        "Character"
      ],
      "apicalls": [
        "println",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.print(char[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "string",
        "java",
        "io",
        "print",
        "character",
        "stream"
      ]
    },
    {
      "method": "getGraphics@1588",
      "body": "/** \n * Returns a graphics object for this component. Returns <code>null</code> if this component is not currently displayed on the screen.\n * @return a graphics object for this component\n * @see #paint(Graphics)\n */\npublic Graphics getGraphics(){\n  if (peer != null) {\n    Graphics gfx=peer.getGraphics();\n    if (gfx != null)     return gfx;\n    Container parent=getParent();\n    if (parent != null) {\n      gfx=parent.getGraphics();\n      Rectangle bounds=getBounds();\n      gfx.setClip(bounds);\n      gfx.translate(bounds.x,bounds.y);\n      return gfx;\n    }\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.peer.ComponentPeer.getGraphics()",
            "_throws": [],
            "_returns": "java.awt.Graphics",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Rectangle.Rectangle(int,int,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Graphics.setClip(java.awt.Shape)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Graphics.translate(int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Graphics",
      "file": "./java_projects/Harpoon/Classpath/java/awt/Component.java",
      "types": [
        "Integer",
        "Graphics",
        "ComponentPeer",
        "Shape",
        "Rectangle"
      ],
      "apicalls": [
        "getGraphics",
        "setClip",
        "translate"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.peer.ComponentPeer.getGraphics()",
            "java.awt.Rectangle.Rectangle(int,int,int,int)",
            "java.awt.Graphics.setClip(java.awt.Shape)",
            "java.awt.Graphics.translate(int,int)"
          ]
        }
      ],
      "keywords": [
        "component",
        "java",
        "rectangle",
        "shape",
        "clip",
        "peer",
        "awt",
        "graphics",
        "set",
        "integer",
        "get",
        "translate"
      ]
    },
    {
      "method": "test_newInstance@687",
      "body": "/** \n * @tests java.lang.Class#newInstance()\n */\npublic void test_newInstance() throws Exception {\n  Class<?> clazz=null;\n  clazz=Class.forName(\"java.lang.Object\");\n  assertNotNull(\"new object instance was null\",clazz.newInstance());\n  clazz=Class.forName(\"java.lang.Throwable\");\n  assertSame(\"new Throwable instance was not a throwable\",clazz,clazz.newInstance().getClass());\n  clazz=Class.forName(\"java.lang.Integer\");\n  try {\n    clazz.newInstance();\n    fail(\"Exception for instantiating a newInstance with no default constructor is not thrown\");\n  }\n catch (  InstantiationException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.forName(java.lang.String)",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.lang.Class<Tau_T>.newInstance()",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException"
            ],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.Class.forName(java.lang.String)",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.lang.Class<Tau_T>.newInstance()",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException"
            ],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.Class.forName(java.lang.String)",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.lang.Class<Tau_T>.newInstance()",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException"
            ],
            "node": "DAPICall",
            "_returns": "Tau_T"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/ClassTest.java",
      "types": [
        "String",
        "ClassNotFoundException",
        "IllegalAccessException",
        "Class",
        "InstantiationException"
      ],
      "apicalls": [
        "newInstance",
        "forName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class<Tau_T>.newInstance()",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class<Tau_T>.newInstance()",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class<Tau_T>.newInstance()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "illegal",
        "new",
        "exception",
        "instance",
        "string",
        "found",
        "class",
        "instantiation",
        "name",
        "access"
      ]
    },
    {
      "method": "ReInit@373",
      "body": "/** \n * Reinitialise. \n */\npublic void ReInit(java.io.InputStream dstream,String encoding) throws java.io.UnsupportedEncodingException {\n  ReInit(dstream,encoding,1,1,4096);\n}\n",
      "formalParam": [
        "java.io.InputStream",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gs-core/src/org/graphstream/util/parser/SimpleCharStream.java",
      "types": [
        "InputStreamReader",
        "UnsupportedEncodingException",
        "InputStream",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "exception",
        "unsupported",
        "encoding",
        "input",
        "io",
        "stream",
        "reader"
      ]
    },
    {
      "method": "runLayoutOnNodes@671",
      "formalParam": [
        "Collection<Node>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/biomixer/biomixer/src/org/thechiselgroup/biomixer/client/visualization_component/graph/svg_widget/GraphDisplayController.java",
      "body": "@Override public void runLayoutOnNodes(final Collection<Node> nodes) throws LayoutException {\n  final List<String> unselectedNodeIds=new ArrayList<String>();\n  unselectedNodeIds.addAll(layoutGraph.getAllNodeIds());\n  for (  Node node : nodes) {\n    unselectedNodeIds.remove(node.getId());\n  }\n  for (  String nodeId : unselectedNodeIds) {\n    layoutGraph.getIdentifiableLayoutNode(nodeId).setAnchored(true);\n  }\n  layoutManager.addLayoutComputationFinishedHandler(new LayoutComputationFinishedHandler(){\n    @Override public void onLayoutComputationFinished(    LayoutComputationFinishedEvent e){\n      for (      String nodeId : unselectedNodeIds) {\n        layoutGraph.getIdentifiableLayoutNode(nodeId).setAnchored(false);\n      }\n    }\n  }\n);\n  runLayout();\n}\n",
      "types": [
        "Boolean",
        "ArrayList",
        "Object",
        "String",
        "List",
        "Collection"
      ],
      "apicalls": [
        "remove",
        "addAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "java.util.List<java.lang.String>.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "array",
        "string",
        "list",
        "remove",
        "java",
        "add",
        "util",
        "boolean",
        "object",
        "collection"
      ]
    },
    {
      "method": "toRawString@1429",
      "body": "public String toRawString(){\n  Formatter f=new Formatter();\n  showRawPds(pdsv,f);\n  return f.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Formatter.Formatter()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Formatter.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/thredds/ui/src/main/java/ucar/nc2/ui/GribOldRawPanel.java",
      "types": [
        "String",
        "Formatter"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Formatter.Formatter()",
            "java.util.Formatter.toString()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "formatter",
        "string"
      ]
    },
    {
      "method": "layoutContainer@59",
      "body": "public void layoutContainer(Container container){\n  if (container.getComponentCount() > 0) {\n    Component c=container.getComponent(0);\n    Dimension pref=c.getPreferredSize();\n    int containerWidth=container.getWidth();\n    int containerHeight=container.getHeight();\n    Insets containerInsets=container.getInsets();\n    containerWidth-=containerInsets.left + containerInsets.right;\n    containerHeight-=containerInsets.top + containerInsets.bottom;\n    int left=(containerWidth - pref.width) / 2 + containerInsets.left;\n    int right=(containerHeight - pref.height) / 2 + containerInsets.top;\n    c.setBounds(left,right,pref.width,pref.height);\n  }\n}\n",
      "formalParam": [
        "Container"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Container.getComponentCount()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.awt.Container.getComponent(int)",
                "node": "DAPICall",
                "_returns": "java.awt.Component",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.getPreferredSize()",
                "node": "DAPICall",
                "_returns": "java.awt.Dimension",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.getWidth()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.getHeight()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.awt.Container.getInsets()",
                "node": "DAPICall",
                "_returns": "java.awt.Insets",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.setBounds(int,int,int,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/basic/CenterLayout.java",
      "types": [
        "Dimension",
        "Component",
        "Insets",
        "Integer",
        "Container"
      ],
      "apicalls": [
        "getPreferredSize",
        "getComponent",
        "getHeight",
        "getInsets",
        "getComponentCount",
        "setBounds",
        "getWidth"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.getComponentCount()"
          ]
        },
        {
          "calls": [
            "java.awt.Container.getComponentCount()",
            "java.awt.Container.getComponent(int)",
            "java.awt.Component.getPreferredSize()",
            "java.awt.Component.getWidth()",
            "java.awt.Component.getHeight()",
            "java.awt.Container.getInsets()",
            "java.awt.Component.setBounds(int,int,int,int)"
          ]
        }
      ],
      "keywords": [
        "height",
        "container",
        "width",
        "count",
        "set",
        "bounds",
        "awt",
        "size",
        "java",
        "component",
        "integer",
        "insets",
        "dimension",
        "get",
        "preferred"
      ]
    },
    {
      "method": "createClassInstance@42",
      "body": "/** \n * Creates a class instance from a string of the full class name including packages. This is how you dynamically make objects at runtime if you don't know which\\ class beforehand.\n */\npublic static Object createClassInstance(String className) throws InvocationTargetException {\n  return createClassInstance(className,null,null);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList<java.lang.Object>.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList<java.lang.String>.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.Class.forName(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList<java.lang.Object>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.Class.forName(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.Class",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ]
          },
          {
            "_call": "java.lang.Class.getConstructor(java.lang.Class[])",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Constructor",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.Constructor.newInstance(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/openquake-packages/openshalite/src/org/opensha/commons/metadata/MetadataLoader.java",
      "types": [
        "Class",
        "Integer",
        "ArrayList",
        "InvocationTargetException",
        "ClassNotFoundException",
        "IllegalArgumentException",
        "SecurityException",
        "NoSuchMethodException",
        "Constructor",
        "String",
        "InstantiationException",
        "IllegalAccessException",
        "Object"
      ],
      "apicalls": [
        "newInstance",
        "getConstructor",
        "get",
        "forName",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Object>.size()",
            "java.util.ArrayList<java.lang.Object>.get(int)",
            "java.util.ArrayList<java.lang.String>.get(int)",
            "java.lang.Class.forName(java.lang.String)",
            "java.util.ArrayList<java.lang.Object>.size()",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class.getConstructor(java.lang.Class[])",
            "java.lang.reflect.Constructor.newInstance(java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "security",
        "access",
        "target",
        "lang",
        "list",
        "util",
        "new",
        "class",
        "java",
        "found",
        "argument",
        "integer",
        "instantiation",
        "size",
        "object",
        "instance",
        "invocation",
        "illegal",
        "constructor",
        "method",
        "string",
        "array",
        "name",
        "exception",
        "reflect",
        "get"
      ]
    },
    {
      "method": "completeQualifiedName_Remaining@160",
      "formalParam": [
        "EObject",
        "Assignment",
        "ContentAssistContext",
        "ICompletionProposalAcceptor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Package.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.toLowerCase()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.contains(java.lang.CharSequence)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Package.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.Package.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ju4pa/org.eclipse.papyrus.uml.textedit.property.xtext.ui/src/org/eclipse/papyrus/uml/textedit/property/xtext/ui/contentassist/UmlPropertyProposalProvider.java",
      "body": "/** \n * Provides custom completion for a path, taking into account the path which has already been specified\n * @see org.eclipse.papyrus.uml.textedit.property.xtext.ui.contentassist.AbstractUmlPropertyProposalProvider#completeQualifiedName_Remaining(org.eclipse.emf.ecore.EObject,org.eclipse.xtext.Assignment,org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)\n */\n@Override public void completeQualifiedName_Remaining(EObject model,Assignment assignment,ContentAssistContext context,ICompletionProposalAcceptor acceptor){\n  QualifiedName path=(QualifiedName)model;\n  for (  NamedElement n : path.getPath().getOwnedMembers()) {\n    if (n instanceof Package) {\n      if (n.getName().toLowerCase().contains(context.getPrefix().toLowerCase())) {\n        String completionString=n.getName() + \"::\";\n        String displayString=n.getName() + \"::\";\n        CustomCompletionProposal completionProposal=CompletionProposalUtils.createCompletionProposalWithReplacementOfPrefix(n,completionString,displayString,context);\n        acceptor.accept(completionProposal);\n      }\n    }\n  }\n  for (  Package p : path.getPath().getImportedPackages()) {\n    if (p.getName().toLowerCase().contains(context.getPrefix().toLowerCase())) {\n      String completionString=p.getName() + \"::\";\n      String displayString=p.getName() + \"::\";\n      CustomCompletionProposal completionProposal=CompletionProposalUtils.createCompletionProposalWithReplacementOfPrefix(p,completionString,displayString,context);\n      acceptor.accept(completionProposal);\n    }\n  }\n}\n",
      "types": [
        "CharSequence",
        "String",
        "Package",
        "Boolean"
      ],
      "apicalls": [
        "contains",
        "toLowerCase",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Package.getName()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        },
        {
          "calls": [
            "java.lang.Package.getName()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.Package.getName()",
            "java.lang.Package.getName()"
          ]
        }
      ],
      "keywords": [
        "java",
        "char",
        "name",
        "lower",
        "contains",
        "string",
        "lang",
        "sequence",
        "boolean",
        "case",
        "get",
        "package"
      ]
    },
    {
      "method": "injectInto@764",
      "body": "public double injectInto(double injectedValue,DoubleObjectToDoubleFunction<? super T> function){\n  this.acquireReadLock();\n  try {\n    return this.getDelegate().injectInto(injectedValue,function);\n  }\n  finally {\n    this.unlockReadLock();\n  }\n}\n",
      "formalParam": [
        "double",
        "DoubleObjectToDoubleFunction<? super T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.readLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.Lock"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.readLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.Lock"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/gs-collections/collections/src/main/java/com/gs/collections/impl/collection/mutable/AbstractMultiReaderMutableCollection.java",
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "lock",
        "readLock",
        "unlock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReadWriteLock.readLock()",
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.ReadWriteLock.readLock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "unlock",
        "read",
        "util",
        "write",
        "lock",
        "locks",
        "java",
        "concurrent"
      ]
    },
    {
      "method": "shareAverage@156",
      "formalParam": [
        "StackMatTimer",
        "StackMatSessionTimes",
        "int",
        "int",
        "boolean",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Class<Tau_T>.getSimpleName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.valueOf(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.valueOf(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.valueOf(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.Class<Tau_T>.getSimpleName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/stackmattimer/src/com/rubikaz/cisco/android/stackmattimer/social/FacebookManager.java",
      "body": "public static void shareAverage(final StackMatTimer timer,final StackMatSessionTimes times,final int ntimes,final int offset,final boolean rolling,final boolean best){\n  fb=getFacebookInstance(timer);\n  final StackMatTime blablabla;\n  if (best)   blablabla=new StackMatTime(ntimes == 12 ? times.getBRAvg12() : times.getBRAvg5());\n else   if (rolling)   blablabla=new StackMatTime(ntimes == 12 ? times.getRAvg12() : times.getRAvg5());\n else   blablabla=new StackMatTime(times.getAvg());\n  final Runnable errorToastRunnable=new Runnable(){\n    @Override public void run(){\n      Toast.makeText(timer,R.string.facebook_error,Toast.LENGTH_LONG).show();\n    }\n  }\n;\n  if (fb.isSessionValid()) {\n    final ProgressDialog pd=ProgressDialog.show(timer,timer.getString(R.string.facebook_sharing),timer.getString(R.string.facebook_sharing_average).replaceAll(\"\\\\#\\\\{time\\\\}\",blablabla.toString()).replaceAll(\"\\\\#\\\\{n\\\\}\",String.valueOf(ntimes)),true);\n    final Runnable successToastRunnable=new Runnable(){\n      @Override public void run(){\n        Toast.makeText(timer,timer.getString(R.string.facebook_shared_average).replaceAll(\"\\\\#\\\\{time\\\\}\",blablabla.toString()).replaceAll(\"\\\\#\\\\{n\\\\}\",String.valueOf(ntimes)),Toast.LENGTH_LONG).show();\n      }\n    }\n;\n    final Bundle parameters=new Bundle();\n    parameters.putString(\"access_token\",fb.getAccessToken());\n    String subject=timer.getString(R.string.facebook_average_subject).replaceAll(\"\\\\#\\\\{time\\\\}\",blablabla.toString()).replaceAll(\"\\\\#\\\\{n\\\\}\",String.valueOf(ntimes)).replaceAll(\"\\\\#\\\\{puzzle\\\\}\",timer.getPuzzleType());\n    Log.d(\"XXX\",\"sharing in fb, \" + subject);\n    String message=timer.getString(R.string.facebook_average_message);\n    Log.d(\"XXX\",\"sharing in fb, ntimes=\" + String.valueOf(ntimes) + \", offset=\"+ String.valueOf(offset));\n    for (int i=ntimes + 5 + offset - 1; i >= 5 + offset; i--) {\n      StackMatTime time=times.getTime(i);\n      message+=timer.getString(R.string.facebook_average_message_each_time).replaceAll(\"\\\\#\\\\{time\\\\}\",time.toString()).replaceAll(\"\\\\#\\\\{scramble\\\\}\",time.getScramble());\n      Log.d(\"XXX\",\"sharing in fb, \" + message);\n    }\n    parameters.putString(\"subject\",subject);\n    parameters.putString(\"message\",message);\n    Log.d(FacebookManager.class.getSimpleName(),\"Posting \" + blablabla.toString() + \" average of \"+ String.valueOf(ntimes)+ \" in Facebook wall...\");\n    AsyncFacebookRunner fbr=new AsyncFacebookRunner(fb);\n    RequestListener listener=new RequestListener(){\n      @Override public void onComplete(      String json){\n        Log.d(FacebookManager.class.getSimpleName(),blablabla.toString() + \" average of \" + String.valueOf(ntimes)+ \" posted in Facebook wall. Response was \"+ json);\n        timer.runOnUiThread(successToastRunnable);\n        timer.runOnUiThread(new Runnable(){\n          @Override public void run(){\n            pd.dismiss();\n          }\n        }\n);\n      }\n      @Override public void onFacebookError(      FacebookError e){\n        onError(e);\n      }\n      @Override public void onFileNotFoundException(      FileNotFoundException e){\n        onError(e);\n      }\n      @Override public void onIOException(      IOException e){\n        onError(e);\n      }\n      @Override public void onMalformedURLException(      MalformedURLException e){\n        onError(e);\n      }\n      private void onError(      Throwable e){\n        Log.d(FacebookManager.class.getSimpleName(),\"Facebook publishing error\",e);\n        timer.runOnUiThread(errorToastRunnable);\n        timer.runOnUiThread(new Runnable(){\n          @Override public void run(){\n            pd.dismiss();\n          }\n        }\n);\n      }\n    }\n;\n    fbr.request(\"me/notes\",parameters,\"POST\",listener);\n  }\n else {\n    Log.d(FacebookManager.class.getSimpleName(),\"Authorizing in Facebook...\");\n    DialogListener listener=new DialogListener(){\n      @Override public void onCancel(){\n      }\n      @Override public void onComplete(      Bundle values){\n        Log.d(FacebookManager.class.getSimpleName(),\"Authorization in Facebook completed ? \" + String.valueOf(fb.isSessionValid()));\n        if (fb.isSessionValid()) {\n          Editor editor=timer.getSharedPreferences(\"facebook\",Context.MODE_PRIVATE).edit();\n          editor.putString(\"access_token\",fb.getAccessToken());\n          editor.putLong(\"expires\",fb.getAccessExpires());\n          editor.commit();\n          shareAverage(timer,times,ntimes,offset,rolling,best);\n        }\n else {\n          timer.runOnUiThread(errorToastRunnable);\n        }\n      }\n      @Override public void onError(      DialogError e){\n        Log.d(FacebookManager.class.getSimpleName(),\"Facebook authentication error\",e);\n        timer.runOnUiThread(errorToastRunnable);\n      }\n      @Override public void onFacebookError(      FacebookError e){\n        Log.d(FacebookManager.class.getSimpleName(),\"Facebook authentication error\",e);\n        timer.runOnUiThread(errorToastRunnable);\n      }\n    }\n;\n    fb.authorize(timer,\"154620441238349\",new String[]{\"publish_stream\"},listener);\n  }\n}\n",
      "types": [
        "Class",
        "String",
        "Integer"
      ],
      "apicalls": [
        "getSimpleName",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.valueOf(int)",
            "java.lang.String.valueOf(int)",
            "java.lang.String.valueOf(int)",
            "java.lang.Class<Tau_T>.getSimpleName()"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getSimpleName()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "value",
        "integer",
        "name",
        "class",
        "get",
        "lang",
        "simple"
      ]
    },
    {
      "method": "getAttributeNames@333",
      "body": "public Enumeration<String> getAttributeNames(){\n  checkActive();\n  return new Vector<String>(this.attributes.keySet()).elements();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Vector<java.lang.String>.Vector<String>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector<java.lang.String>.elements()",
            "node": "DAPICall",
            "_returns": "java.util.Enumeration",
            "_throws": []
          }
        ]
      },
      "returnType": "Enumeration<String>",
      "file": "./java_projects/spring-framework/spring-test/src/main/java/org/springframework/mock/web/portlet/MockPortletRequest.java",
      "types": [
        "Collection",
        "Enumeration",
        "Vector",
        "Set",
        "Map",
        "Object",
        "String"
      ],
      "apicalls": [
        "elements",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "java.util.Vector<java.lang.String>.Vector<String>(java.util.Collection)",
            "java.util.Vector<java.lang.String>.elements()"
          ]
        }
      ],
      "keywords": [
        "object",
        "enumeration",
        "util",
        "string",
        "key",
        "java",
        "elements",
        "map",
        "set",
        "vector",
        "collection"
      ]
    },
    {
      "method": "testMaximumStackedRangeValue@659",
      "body": "/** \n * Test for a bug reported in the forum: http://www.jfree.org/phpBB2/viewtopic.php?t=7903\n */\npublic void testMaximumStackedRangeValue(){\n  double v1=24.3;\n  double v2=14.2;\n  double v3=33.2;\n  double v4=32.4;\n  double v5=26.3;\n  double v6=22.6;\n  Number answer=new Double(Math.max(v1 + v2 + v3,v4 + v5 + v6));\n  DefaultCategoryDataset d=new DefaultCategoryDataset();\n  d.addValue(v1,\"Row 0\",\"Column 0\");\n  d.addValue(v2,\"Row 1\",\"Column 0\");\n  d.addValue(v3,\"Row 2\",\"Column 0\");\n  d.addValue(v4,\"Row 0\",\"Column 1\");\n  d.addValue(v5,\"Row 1\",\"Column 1\");\n  d.addValue(v6,\"Row 2\",\"Column 1\");\n  Number max=DatasetUtilities.findMaximumStackedRangeValue(d);\n  assertTrue(max.equals(answer));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.max(double,double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Double.Double(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Promasi-V2/org.promasi.desktop_swing/Libs/jfreechart-1.0.14/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
      "types": [
        "Math",
        "Double"
      ],
      "apicalls": [
        "max"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.max(double,double)",
            "java.lang.Double.Double(double)"
          ]
        }
      ],
      "keywords": [
        "max",
        "lang",
        "java",
        "double",
        "math"
      ]
    },
    {
      "method": "selectionForKey@56",
      "body": "public int selectionForKey(char aKey,ComboBoxModel model){\n  int index=0;\n  long delta=System.currentTimeMillis() - lastKeyTime;\n  if (delta < 3000) {\n    pattern+=(\"\" + aKey).toLowerCase();\n  }\n else {\n    pattern=(\"\" + aKey).toLowerCase();\n  }\n  for (int i=0; i < model.getSize(); i++) {\n    String s=model.getElementAt(i).toString().toLowerCase();\n    if (s.startsWith(pattern)) {\n      index=i;\n      break;\n    }\n  }\n  if (index == 0) {\n    pattern=\"\";\n  }\n  lastKeyTime=System.currentTimeMillis();\n  return index;\n}\n",
      "formalParam": [
        "char",
        "ComboBoxModel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.ListModel.getElementAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.ListModel.getSize()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/KanonProject/ui/src/main/java/com/projity/pm/graphic/MultipleKeyJComboBox.java",
      "types": [
        "ListModel",
        "String",
        "Object",
        "Integer",
        "Long",
        "System",
        "Boolean"
      ],
      "apicalls": [
        "getSize",
        "currentTimeMillis",
        "startsWith",
        "getElementAt",
        "toLowerCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.String.toLowerCase()",
            "javax.swing.ListModel.getSize()",
            "javax.swing.ListModel.getElementAt(int)",
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith(java.lang.String)",
            "javax.swing.ListModel.getSize()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "time",
        "millis",
        "model",
        "integer",
        "string",
        "starts",
        "case",
        "size",
        "swing",
        "long",
        "current",
        "system",
        "object",
        "java",
        "boolean",
        "element",
        "get",
        "list",
        "javax",
        "lower",
        "lang"
      ]
    },
    {
      "method": "setExpandedIcon@102",
      "body": "/** \n * Sets the tree branch's expanded icon by  {@linkplain ClassLoader#getResource(String) resource name}.\n * @param expandedIconName The resource name of the expanded icon to set.\n * @see #setExpandedIcon(URL)\n */\npublic void setExpandedIcon(String expandedIconName){\n  if (expandedIconName == null) {\n    throw new IllegalArgumentException(\"expandedIconName is null.\");\n  }\n  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();\n  URL url=classLoader.getResource(expandedIconName.substring(1));\n  if (url == null) {\n    throw new IllegalArgumentException(\"cannot find expandedIcon resource \" + expandedIconName);\n  }\n  setExpandedIcon(url);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "node": "DAPICall",
            "_returns": "java.lang.Thread",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.net.URL",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pivot/wtk/src/org/apache/pivot/wtk/content/TreeBranch.java",
      "types": [
        "ClassLoader",
        "String",
        "Thread",
        "Integer",
        "URL"
      ],
      "apicalls": [
        "substring",
        "getResource",
        "currentThread",
        "getContextClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.String.substring(int)",
            "java.lang.ClassLoader.getResource(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "substring",
        "thread",
        "url",
        "loader",
        "resource",
        "java",
        "class",
        "current",
        "integer",
        "context",
        "lang",
        "get"
      ]
    },
    {
      "method": "getSystemTypeDescription@698",
      "body": "/** \n * Type description for a file, directory, or folder as it would be displayed in a system file browser. Example from Windows: the \"Desktop\" folder is desribed as \"Desktop\". The Windows implementation gets information from the ShellFolder class.\n */\npublic String getSystemTypeDescription(File f){\n  if (f == null) {\n    return null;\n  }\n  try {\n    return getShellFolder(f).getFolderType();\n  }\n catch (  FileNotFoundException e) {\n    return null;\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/filechooser/FileSystemView.java",
      "types": [
        "String",
        "Throwable",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "println",
        "string",
        "java",
        "lang",
        "stream",
        "trace",
        "io",
        "print",
        "stack",
        "throwable"
      ]
    },
    {
      "method": "reset@93",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.Reader.reset()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.lang.StringBuffer.setLength(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bleeding_edge/dart/editor/tools/plugins/com.google.dart.tools.ui/src/com/google/dart/tools/ui/internal/text/html/SubstitutionTextReader.java",
      "body": "/** \n * @see Reader#reset()\n */\n@Override public void reset() throws IOException {\n  fReader.reset();\n  fWasWhiteSpace=true;\n  fCharAfterWhiteSpace=-1;\n  fBuffer.setLength(0);\n  fIndex=0;\n}\n",
      "types": [
        "IOException",
        "Integer",
        "Reader",
        "StringBuffer"
      ],
      "apicalls": [
        "setLength",
        "reset"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.Reader.reset()",
            "java.lang.StringBuffer.setLength(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "set",
        "buffer",
        "length",
        "reset",
        "exception",
        "string",
        "io",
        "reader",
        "java"
      ]
    },
    {
      "method": "initializeMaxLocals@441",
      "body": "public void initializeMaxLocals(MethodBinding methodBinding){\n  super.initializeMaxLocals(methodBinding);\n  if (this.framePositions == null) {\n    this.framePositions=new HashMap();\n  }\n else {\n    this.framePositions.clear();\n  }\n}\n",
      "formalParam": [
        "MethodBinding"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.HashMap.clear()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.HashMap.HashMap()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/jdt-patch/e37/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java",
      "types": [
        "HashMap"
      ],
      "apicalls": [
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.clear()"
          ]
        },
        {
          "calls": [
            "java.util.HashMap.HashMap()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "map",
        "hash",
        "clear"
      ]
    },
    {
      "method": "flush@56",
      "body": "public void flush() throws IOException {\n  writer.flush();\n  if (bean.usesBody()) {\n    body.flush();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.Writer.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/struts2/core/src/main/java/org/apache/struts2/views/freemarker/tags/CallbackWriter.java",
      "types": [
        "Writer",
        "StringWriter",
        "IOException"
      ],
      "apicalls": [
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.Writer.flush()",
            "java.io.StringWriter.flush()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "java",
        "string",
        "writer",
        "io",
        "flush"
      ]
    },
    {
      "method": "read@79",
      "body": "public int read(long position,byte[] dst,int offset,int length) throws IOException {\n  try {\n    mLock.acquireWriteLock();\n    if (position != mPosition) {\n      mRAF.seek(position);\n      mPosition=position;\n    }\n    int amt=mRAF.read(dst,offset,length);\n    if (amt > 0) {\n      mPosition+=amt;\n    }\n    return amt;\n  }\n catch (  InterruptedException e) {\n    throw new InterruptedIOException();\n  }\n finally {\n    mLock.releaseLock();\n  }\n}\n",
      "formalParam": [
        "long",
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.RandomAccessFile.seek(long)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.RandomAccessFile.read(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/teatrove/trove/src/main/java/org/teatrove/trove/file/RandomAccessFileBuffer.java",
      "types": [
        "Byte",
        "RandomAccessFile",
        "IOException",
        "Long",
        "Integer"
      ],
      "apicalls": [
        "seek",
        "read"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.RandomAccessFile.seek(long)",
            "java.io.RandomAccessFile.read(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "access",
        "java",
        "byte",
        "read",
        "long",
        "io",
        "file",
        "random",
        "seek",
        "exception"
      ]
    },
    {
      "method": "main@43",
      "body": "public static void main(String[] args) throws NoSuchFieldException {\n  Type t=new A<Integer>().o.getClass().getField(\"t\").getGenericType();\n  if (!(t instanceof TypeVariable))   throw new Error(\"\" + t);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getField(java.lang.String)",
            "_throws": [
              "java.lang.NoSuchFieldException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Field"
          },
          {
            "_call": "java.lang.reflect.Field.getGenericType()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Type"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/lang/Class/getEnclosingClass/T4992170.java",
      "types": [
        "String",
        "NoSuchFieldException",
        "Field",
        "Type",
        "SecurityException",
        "Class"
      ],
      "apicalls": [
        "getField",
        "getGenericType"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getField(java.lang.String)",
            "java.lang.reflect.Field.getGenericType()"
          ]
        }
      ],
      "keywords": [
        "generic",
        "java",
        "class",
        "field",
        "get",
        "reflect",
        "type",
        "lang",
        "string",
        "exception",
        "security"
      ]
    },
    {
      "method": "openConnection@125",
      "body": "public Connection openConnection(String databaseName,String user,String password) throws SQLException {\n  return openConnection(databaseName,user,password,null);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.SQLException.getSQLState()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap.putAll(java.util.Map)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Connection",
      "file": "./java_projects/derby/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java",
      "types": [
        "Boolean",
        "Map",
        "SQLException",
        "HashMap",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals",
        "putAll",
        "getSQLState"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.SQLException.getSQLState()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.HashMap.putAll(java.util.Map)"
          ]
        }
      ],
      "keywords": [
        "map",
        "equals",
        "put",
        "string",
        "exception",
        "util",
        "java",
        "lang",
        "object",
        "hash",
        "boolean",
        "state",
        "get",
        "sql"
      ]
    },
    {
      "method": "setMinutes@825",
      "body": "/** \n * Sets the minutes of this <tt>Date</tt> object to the specified value. This <tt>Date</tt> object is modified so that it represents a point in time within the specified minute of the hour, with the year, month, date, hour, and second the same as before, as interpreted in the local time zone.\n * @param minutes   the value of the minutes.\n * @see java.util.Calendar\n * @deprecated As of JDK version 1.1,replaced by <code>Calendar.set(Calendar.MINUTE, int minutes)</code>.\n */\n@Deprecated public void setMinutes(int minutes){\n  getCalendarDate().setMinutes(minutes);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TimeZone.getDefaultRef()",
            "_throws": [],
            "_returns": "java.util.TimeZone",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TimeZone.getOffset(long)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/java/util/Date.java",
      "types": [
        "Long",
        "TimeZone",
        "Integer"
      ],
      "apicalls": [
        "getDefaultRef",
        "getOffset"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TimeZone.getDefaultRef()",
            "java.util.TimeZone.getOffset(long)"
          ]
        }
      ],
      "keywords": [
        "offset",
        "get",
        "zone",
        "integer",
        "default",
        "java",
        "long",
        "util",
        "ref",
        "time"
      ]
    },
    {
      "method": "COLLECTION_ITEM_BINDING_DEFINITION@312",
      "body": "public WKFBindingDefinition COLLECTION_ITEM_BINDING_DEFINITION(){\n  if (getProject() != null) {\n    WKFBindingDefinition returned=WKFBindingDefinition.get(this,COLLECTION_ITEM,Object.class,BindingDefinitionType.GET_SET,false);\n    if (logger.isLoggable(Level.FINE)) {\n      logger.fine(\"Returned WKFBindingDefinition : \" + returned);\n    }\n    return returned;\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "WKFBindingDefinition",
      "file": "./java_projects/openflexo/flexodesktop/model/flexofoundation/src/main/java/org/openflexo/foundation/wkf/node/LoopSubProcessNode.java",
      "types": [
        "Boolean",
        "Logger",
        "String",
        "Level"
      ],
      "apicalls": [
        "isLoggable",
        "fine"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "logging",
        "level",
        "util",
        "loggable",
        "boolean",
        "string",
        "logger",
        "java",
        "fine"
      ]
    },
    {
      "method": "attach@69",
      "body": "public void attach(Context cx,boolean startSuspended){\n  isStartSuspended=startSuspended;\n  jsDebugger=new JsDebugger(this);\n  isAttached=true;\n  factoryListener=new ContextFactory.Listener(){\n    public void contextCreated(    Context cx){\n      JsContextData cxData=new JsContextData();\n      cx.setDebugger(jsDebugger,cxData);\n      cx.setGeneratingDebug(true);\n      cx.setOptimizationLevel(-1);\n    }\n    public void contextReleased(    Context cx){\n      cx.setDebugger(null,null);\n    }\n  }\n;\n  if (cx.getDebugger() == null) {\n    JsContextData cxData=new JsContextData();\n    cx.setDebugger(jsDebugger,cxData);\n    cx.setGeneratingDebug(true);\n    cx.setOptimizationLevel(-1);\n    addDeferredBreakPoints();\n  }\n  if (startSuspended) {\n    currentVMState=VM_SUSPEND;\n    Object cxData=cx.getDebuggerContextData();\n    if (cxData instanceof JsContextData) {\n      ((JsContextData)cxData).setBreakOnStart(true);\n    }\n  }\n else {\n    currentVMState=VM_STARTED;\n    dispatchEvent(VM_STARTED,null);\n  }\n}\n",
      "formalParam": [
        "Context",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/birt/UI/org.eclipse.birt.report.debug.core/src/org/eclipse/birt/report/debug/internal/core/vm/ReportVM.java",
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()",
            "java.util.List.clear()"
          ]
        }
      ],
      "keywords": [
        "java",
        "clear",
        "size",
        "list",
        "util",
        "integer"
      ]
    },
    {
      "method": "failAll@548",
      "body": "/** \n * Fails (completes) all requests by setting the same cause of the failure on all associated futures. Any callers/threads waiting for completion will be signaled. Also, since this frees up all slots in the window, all callers/threads blocked with pending offers will be signaled to continue.\n * @param t The throwable to set as the failure cause on all associated futures.Null values are not accepted (use cancelAll()) instead.\n * @return A list of all futures that were failed.\n * @throws InterruptedException Thrown if the calling thread is interruptedand we're currently waiting to acquire the internal \"windowLock\".\n */\npublic List<WindowFuture<K,R,P>> failAll(Throwable t) throws InterruptedException {\n  if (this.futures.size() <= 0) {\n    return null;\n  }\n  List<WindowFuture<K,R,P>> failed=new ArrayList<WindowFuture<K,R,P>>();\n  long now=System.currentTimeMillis();\n  this.lock.lock();\n  try {\n    for (    DefaultWindowFuture<K,R,P> future : this.futures.values()) {\n      failed.add(future);\n      future.failedHelper(t,now);\n    }\n    if (failed.size() > 0) {\n      this.futures.clear();\n      this.completedCondition.signalAll();\n    }\n  }\n  finally {\n    this.lock.unlock();\n  }\n  return failed;\n}\n",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.lock()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.locks.Condition.signalAll()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.unlock()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "List<WindowFuture<K,R,P>>",
      "file": "./java_projects/cloudhopper-commons-util/src/main/java/com/cloudhopper/commons/util/windowing/Window.java",
      "types": [
        "Long",
        "System",
        "ArrayList",
        "concurrent"
      ],
      "apicalls": [
        "unlock",
        "currentTimeMillis",
        "signalAll",
        "lock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.System.currentTimeMillis()",
            "java.util.concurrent.locks.ReentrantLock.lock()",
            "java.util.concurrent.locks.Condition.signalAll()",
            "java.util.concurrent.locks.ReentrantLock.unlock()"
          ]
        }
      ],
      "keywords": [
        "locks",
        "unlock",
        "array",
        "list",
        "concurrent",
        "lock",
        "reentrant",
        "time",
        "signal",
        "java",
        "condition",
        "system",
        "current",
        "util",
        "millis",
        "long",
        "lang"
      ]
    },
    {
      "method": "match@19",
      "body": "@Override public boolean match(ExecutionContext context){\n  TargetContent content=context.getTargetContent();\n  if (content.size() != 4) {\n    return false;\n  }\n  Block block=content.getBlock(1);\n  if (block.getType() != ContentType.LEGACY_HASH) {\n    return false;\n  }\n  block=content.getBlock(0);\n  if (block.getType() != ContentType.NDEF) {\n    return false;\n  }\n  NdefBlock ndef=(NdefBlock)block;\n  NdefParsedMessage message=ndef.getNdef();\n  if (message.size() != 1) {\n    return false;\n  }\n  NdefParsedRecord record=message.getRecord(0);\n  if (!\"urn:nfc:wkt:U\".equals(record.getRTD())) {\n    return false;\n  }\n  URI uri=null;\n  try {\n    uri=URI.create(record.getContent());\n    if (!\"www.ttag.be\".equals(uri.getHost())) {\n      return false;\n    }\n  }\n catch (  RuntimeException e) {\n    return false;\n  }\n  return true;\n}\n",
      "formalParam": [
        "ExecutionContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.net.URI.create(java.lang.String)",
            "_throws": [],
            "_returns": "java.net.URI",
            "node": "DAPICall"
          },
          {
            "_call": "java.net.URI.getHost()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/iotope-node/iotope-node/src/main/java/org/iotope/node/apps/filter/TouchatagFilter.java",
      "types": [
        "URI",
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "getHost",
        "equals",
        "create"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.net.URI.create(java.lang.String)",
            "java.net.URI.getHost()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "host",
        "get",
        "string",
        "create",
        "lang",
        "net",
        "boolean",
        "equals",
        "java",
        "uri"
      ]
    },
    {
      "method": "addPlugin@54",
      "body": "public void addPlugin(Object[] infos){\n  model.addRow(infos);\n  updateTable();\n}\n",
      "formalParam": [
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.table.AbstractTableModel.fireTableDataChanged()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.table.AbstractTableModel.fireTableStructureChanged()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Bukkitmanager/src/org/efreak1996/Bukkitmanager/Swing/Local/Frames/PluginListFrame.java",
      "types": [
        "AbstractTableModel"
      ],
      "apicalls": [
        "fireTableStructureChanged",
        "fireTableDataChanged"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.table.AbstractTableModel.fireTableDataChanged()",
            "javax.swing.table.AbstractTableModel.fireTableStructureChanged()"
          ]
        }
      ],
      "keywords": [
        "model",
        "swing",
        "fire",
        "data",
        "javax",
        "table",
        "structure",
        "changed",
        "abstract"
      ]
    },
    {
      "method": "run@35",
      "body": "public void run(){\n  try {\n    client.setSoLinger(true,0);\n    client.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.net.Socket.setSoLinger(boolean,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.SocketException"
                ]
              },
              {
                "_call": "java.net.Socket.close()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/net/Socket/RST.java",
      "types": [
        "IOException",
        "Socket",
        "Integer",
        "Boolean",
        "Throwable",
        "SocketException"
      ],
      "apicalls": [
        "printStackTrace",
        "close",
        "setSoLinger"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.Socket.setSoLinger(boolean,int)",
            "java.net.Socket.close()"
          ]
        },
        {
          "calls": [
            "java.net.Socket.setSoLinger(boolean,int)",
            "java.net.Socket.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "print",
        "throwable",
        "trace",
        "exception",
        "stack",
        "integer",
        "linger",
        "lang",
        "net",
        "close",
        "java",
        "socket",
        "set",
        "boolean",
        "io"
      ]
    },
    {
      "method": "markUnspecdUsage@108",
      "body": "public void markUnspecdUsage(String page,String parentCmp,String unspecdCmp){\n  Map<String,Set<String>> pageInfo=getPageInfo(page);\n  Set<String> info=pageInfo.get(parentCmp);\n  if (info == null) {\n    info=new HashSet<String>();\n    pageInfo.put(parentCmp,info);\n  }\n  info.add(unspecdCmp);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>>.ConcurrentHashMap<String,Map<String,Set<String>>>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>"
          },
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.util.Set<java.lang.String>>.ConcurrentHashMap<String,Set<String>>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>>.put(java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set<java.lang.String>"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.put(java.lang.String,java.util.Set<java.lang.String>)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set<java.lang.String>"
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/vjet/core/web/org.ebayopensource.vjet.web.kernel/src/org/ebayopensource/dsf/common/statistics/UnspecdCmpStatistics.java",
      "types": [
        "String",
        "Boolean",
        "ConcurrentHashMap",
        "Object",
        "Set",
        "Map",
        "HashSet"
      ],
      "apicalls": [
        "get",
        "put",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>>.ConcurrentHashMap<String,Map<String,Set<String>>>()",
            "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>>.get(java.lang.Object)",
            "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.util.Set<java.lang.String>>.ConcurrentHashMap<String,Set<String>>()",
            "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>>.put(java.lang.String,java.util.Map<java.lang.String,java.util.Set<java.lang.String>>)",
            "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.get(java.lang.Object)",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.put(java.lang.String,java.util.Set<java.lang.String>)",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "set",
        "java",
        "add",
        "get",
        "concurrent",
        "put",
        "util",
        "object",
        "string",
        "map",
        "hash",
        "boolean"
      ]
    },
    {
      "method": "setCachedPassPhrase@239",
      "body": "public static void setCachedPassPhrase(long keyId,String passPhrase){\n  mPassPhraseCache.put(keyId,new CachedPassPhrase(new Date().getTime(),passPhrase));\n}\n",
      "formalParam": [
        "long",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/apg/src/org/thialfihar/android/apg/Apg.java",
      "types": [
        "Date",
        "Long"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "date",
        "long",
        "time",
        "util",
        "get",
        "java"
      ]
    },
    {
      "method": "containsAll@74",
      "body": "@Override public boolean containsAll(Collection<?> c){\n  return map.keySet().containsAll(c);\n}\n",
      "formalParam": [
        "Collection<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.containsAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ardverk-commons/src/main/java/org/ardverk/collection/IdentityHashSet.java",
      "types": [
        "Map",
        "Set",
        "Boolean",
        "Collection"
      ],
      "apicalls": [
        "keySet",
        "containsAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.keySet()",
            "java.util.Set.containsAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "key",
        "boolean",
        "map",
        "collection",
        "set",
        "contains"
      ]
    },
    {
      "method": "visitTree@1277",
      "body": "@Override public boolean visitTree(VisitContext visitContext,VisitCallback callback){\n  if (!isVisitable(visitContext)) {\n    return false;\n  }\n  FacesContext facesContext=visitContext.getFacesContext();\n  boolean visitRows=requiresRowIteration(facesContext);\n  Object oldRowKey=null;\n  if (visitRows) {\n    captureOrigValue(facesContext);\n    oldRowKey=getRowKey();\n    setRowKey(facesContext,null);\n  }\n  pushComponentToEL(facesContext,null);\n  try {\n    VisitResult result=visitContext.invokeVisitCallback(this,callback);\n    if (result == VisitResult.COMPLETE) {\n      return true;\n    }\n    if ((result == VisitResult.ACCEPT) && doVisitChildren(visitContext,visitRows)) {\n      if (visitRows) {\n        setRowKey(facesContext,null);\n      }\n      if (visitFixedChildren(visitContext,callback)) {\n        return true;\n      }\n      if (visitContext instanceof ExtendedVisitContext) {\n        ExtendedVisitContext extendedVisitContext=(ExtendedVisitContext)visitContext;\n        Collection<String> directSubtreeIdsToVisit=extendedVisitContext.getDirectSubtreeIdsToVisit(this);\n        if (directSubtreeIdsToVisit != VisitContext.ALL_IDS) {\n          if (directSubtreeIdsToVisit.isEmpty()) {\n            return false;\n          }\n else {\n            VisitContext directChildrenVisitContext=extendedVisitContext.createNamingContainerVisitContext(this,directSubtreeIdsToVisit);\n            if (visitRows) {\n              setRowKey(facesContext,null);\n            }\n            if (visitFixedChildren(directChildrenVisitContext,STUB_CALLBACK)) {\n              return false;\n            }\n          }\n        }\n      }\n      if (visitDataChildren(visitContext,callback,visitRows)) {\n        return true;\n      }\n    }\n  }\n  finally {\n    popComponentFromEL(facesContext);\n    if (visitRows) {\n      try {\n        setRowKey(facesContext,oldRowKey);\n        restoreOrigValue(facesContext);\n      }\n catch (      Exception e) {\n        LOG.error(e.getMessage(),e);\n      }\n    }\n  }\n  return false;\n}\n",
      "formalParam": [
        "VisitContext",
        "VisitCallback"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.String>.isEmpty()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/components_1/common/ui/src/main/java/org/richfaces/component/UIDataAdaptor.java",
      "types": [
        "String",
        "Throwable",
        "Collection",
        "Boolean"
      ],
      "apicalls": [
        "isEmpty",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.String>.isEmpty()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "collection",
        "string",
        "get",
        "message",
        "throwable",
        "empty",
        "java",
        "lang"
      ]
    },
    {
      "method": "toString@472",
      "body": "public String toString(){\n  StringBuffer buffer=new StringBuffer();\n  buffer.append(\"Built delta:\\n\");\n  buffer.append(this.delta.toString());\n  return buffer.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/studio3-php/plugins/com.aptana.editor.php/src/com/aptana/editor/php/internal/model/impl/ModelElementDeltaBuilder.java",
      "types": [
        "StringBuffer",
        "String",
        "Object"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "java",
        "lang",
        "append",
        "object",
        "string"
      ]
    },
    {
      "method": "shouldSkipDisabledPlugin@68",
      "body": "@Test public void shouldSkipDisabledPlugin() throws IOException {\n  DefaultServerPluginRepository repository=mock(DefaultServerPluginRepository.class);\n  PluginMetadata sqale=newMetadata(\"sqale\");\n  PluginMetadata checkstyle=newMetadata(\"checkstyle\");\n  when(repository.getMetadata()).thenReturn(Arrays.asList(sqale,checkstyle));\n  when(repository.isDisabled(\"checkstyle\")).thenReturn(true);\n  new GeneratePluginIndex(fileSystem,repository).start();\n  List<String> lines=FileUtils.readLines(index);\n  assertThat(lines.size(),Is.is(1));\n  assertThat(lines.get(0),containsString(\"sqale\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sonar/sonar-server/src/test/java/org/sonar/server/startup/GeneratePluginIndexTest.java",
      "types": [
        "Integer",
        "List",
        "Object",
        "Arrays",
        "String"
      ],
      "apicalls": [
        "asList",
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(java.lang.Object[])",
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": [
        "util",
        "size",
        "get",
        "integer",
        "object",
        "list",
        "java",
        "string",
        "arrays"
      ]
    },
    {
      "method": "arrangeOperators@43",
      "body": "public void arrangeOperators(){\n  Iterator i=iterators.iterator();\n  while (i != null && i.hasNext()) {\n    ((ParsedVariableDeclaration)i.next()).arrangeOperators();\n  }\n  resultVar.arrangeOperators();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/opaeum/opaeum-metamodels/org.opaeum.metamodels.ocl/src/nl/klasse/octopus/expressions/internal/parser/parsetree/ParsedIterators.java",
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "util",
        "java",
        "boolean",
        "next"
      ]
    },
    {
      "method": "userHome@197",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
            "node": "DAPICall",
            "_returns": "Tau_T",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsoluteFile()",
            "node": "DAPICall",
            "_returns": "java.io.File",
            "_throws": []
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/jgit_1/org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
      "body": "/** \n * Determine the user's home directory (location where preferences are). <p> This method can be expensive on the first invocation if path name translation is required. Subsequent invocations return a cached result. <p> Not all platforms and JREs require path name translation. Currently only Cygwin on Win32 requires translation of the Cygwin HOME directory.\n * @return the user's home directory; null if the user does not have one.\n */\npublic File userHome(){\n  Holder<File> p=userHome;\n  if (p == null) {\n    p=new Holder<File>(userHomeImpl());\n    userHome=p;\n  }\n  return p.value;\n}\n",
      "types": [
        "Integer",
        "PrivilegedAction",
        "File",
        "String",
        "AccessController"
      ],
      "apicalls": [
        "getAbsoluteFile",
        "length",
        "doPrivileged"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
            "java.lang.String.length()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsoluteFile()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "access",
        "controller",
        "file",
        "action",
        "string",
        "get",
        "java",
        "io",
        "absolute",
        "privileged",
        "security",
        "lang",
        "length"
      ]
    },
    {
      "method": "updateControlsState@418",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "node": "DAPICall",
            "_returns": "java.util.Date",
            "_throws": []
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AnCal-Extended/src/pl/magot/vetch/widgets/DateWidget.java",
      "body": "public void updateControlsState(){\n  final boolean bDaySelected=(calSelected.getTimeInMillis() != 0);\n  btnNone.setEnabled(bDaySelected);\n  if (bDaySelected) {\n    String s=dateFull.format(calSelected.getTime());\n    setTitle(sStrSelected + \" \" + s);\n  }\n else {\n    setTitle(sStrSelect);\n  }\n}\n",
      "types": [
        "DateFormat",
        "String",
        "Date",
        "Calendar",
        "Long"
      ],
      "apicalls": [
        "format",
        "getTime",
        "getTimeInMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getTimeInMillis()",
            "java.util.Calendar.getTime()",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "util",
        "long",
        "format",
        "string",
        "calendar",
        "text",
        "millis",
        "get",
        "date",
        "java",
        "time"
      ]
    },
    {
      "method": "toString@16927",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"updateAgentLiveStatus_result(\");\n  boolean first=true;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/cloumon/src/thrift/gen-java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "string",
        "builder",
        "java",
        "lang"
      ]
    },
    {
      "method": "testRepositoryEventsSuccessfulLocal@419",
      "body": "@Test public void testRepositoryEventsSuccessfulLocal() throws ArtifactResolutionException, IOException {\n  RecordingRepositoryListener listener=new RecordingRepositoryListener();\n  session.setRepositoryListener(listener);\n  File tmpFile=TestFileUtils.createTempFile(\"tmp\");\n  Map<String,String> properties=new HashMap<String,String>();\n  properties.put(ArtifactProperties.LOCAL_PATH,tmpFile.getAbsolutePath());\n  artifact=artifact.setProperties(properties);\n  ArtifactRequest request=new ArtifactRequest(artifact,null,\"\");\n  resolver.resolveArtifact(session,request);\n  List<EventWrapper> events=listener.getEvents();\n  assertEquals(2,events.size());\n  EventWrapper event=events.get(0);\n  assertEquals(RecordingRepositoryListener.Type.ARTIFACT_RESOLVING,event.getType());\n  assertNull(event.getEvent().getException());\n  assertEquals(artifact,event.getEvent().getArtifact());\n  event=events.get(1);\n  assertEquals(RecordingRepositoryListener.Type.ARTIFACT_RESOLVED,event.getType());\n  assertNull(event.getEvent().getException());\n  assertEquals(artifact,event.getEvent().getArtifact().setFile(null));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/aether-core/aether-impl/src/test/java/org/eclipse/aether/internal/impl/DefaultArtifactResolverTest.java",
      "types": [
        "HashMap",
        "Map",
        "File",
        "String"
      ],
      "apicalls": [
        "put",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.io.File.getAbsolutePath()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "path",
        "put",
        "get",
        "absolute",
        "string",
        "map",
        "io",
        "java",
        "file",
        "util"
      ]
    },
    {
      "method": "testChangesSinceStatic@70",
      "body": "public void testChangesSinceStatic(){\n  Date ifModifiedSince=new Date();\n  ListOptions options=changesSince(ifModifiedSince);\n  assertEquals(ImmutableList.of(ifModifiedSince.getTime() / 1000 + \"\"),options.buildQueryParameters().get(\"changes-since\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jclouds/apis/nova/src/test/java/org/jclouds/openstack/nova/options/ListOptionsTest.java",
      "types": [
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "get",
        "long",
        "time",
        "java",
        "date",
        "util"
      ]
    },
    {
      "method": "getAcceleration@905",
      "body": "/** \n * Return acceleration from current station to down station\n * @param lastSampleIndex\n * @return \n */\npublic double getAcceleration(){\n  double u2=this.getAggregatedSpeed();\n  StationState downStationState=getDownstreamStationState(idx);\n  if (downStationState == null) {\n    return 0;\n  }\n  double u1=downStationState.getAggregatedSpeed();\n  return (u1 * u1 - u2 * u2) / (2 * TMO.getDistanceInMile(this.rnode,downStationState.rnode));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList<Tau_E>.get(int)",
                "node": "DAPICall",
                "_returns": "Tau_E",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/TICAS/src/edu/umn/natsrl/ticas/plugin/metering/MeteringSectionHelper.java",
      "types": [
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.get(int)",
            "java.util.ArrayList<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "java",
        "list",
        "array",
        "integer",
        "get"
      ]
    },
    {
      "method": "getServletURL@115",
      "body": "/** \n * Return the full URL (including protocol, host, port, context path, servlet path) for a servlet path.\n * @param servletPath the path which will be expanded to a full URL.\n * @return URL to the servlet.\n */\npublic String getServletURL(String servletPath){\n  String path=servletPath;\n  if (path.endsWith(\"*\")) {\n    path=path.substring(0,path.length() - 1);\n  }\n  return getContextURL() + path;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/oozie/core/src/main/java/org/apache/oozie/test/EmbeddedServletContainer.java",
      "types": [
        "String",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "length",
        "endsWith",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "ends",
        "integer",
        "string",
        "lang",
        "substring",
        "java",
        "length",
        "boolean"
      ]
    },
    {
      "method": "formatImport@194",
      "body": "public static List<JavaType> formatImport(JavaType type){\n  Set<JavaType> set=type.getDependents();\n  ArrayList<JavaType> list=new ArrayList<JavaType>(set.size() * 2);\n  if (set.size() > 0) {\n    JavaType[] ary=set.toArray(new JavaType[set.size()]);\n    Arrays.sort(ary);\n    for (int i=0; i < (ary.length - 1); i++) {\n      JavaType me=ary[i];\n      if (me instanceof JavaPrimitiveType)       continue;\n      if (me instanceof JavaTemplateType)       continue;\n      if (me.getPackage().equals(\"java.lang\"))       continue;\n      if (type.getPackage().equals(me.getPackage()))       continue;\n      JavaType next=ary[i + 1];\n      list.add(me);\n      if (me.getPackage().match(next.getPackage()) < 2)       list.add(null);\n    }\n    list.add(ary[ary.length - 1]);\n  }\n  return list;\n}\n",
      "formalParam": [
        "JavaType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Arrays.sort(int[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "List<JavaType>",
      "file": "./java_projects/nutzlib/Nutz-Aop-Cglib/src/org/nutz/java/Java.java",
      "types": [
        "Integer",
        "Arrays",
        "ArrayList",
        "Collection"
      ],
      "apicalls": [
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Arrays.sort(int[])"
          ]
        }
      ],
      "keywords": [
        "collection",
        "arrays",
        "java",
        "list",
        "integer",
        "sort",
        "util",
        "array"
      ]
    },
    {
      "method": "addContentRelations@565",
      "body": "public List<PSAaRelationship> addContentRelations(Integer contentID,List<Integer> relatedIds,String slot,String template,Integer index) throws Exception {\n  AddContentRelationsRequest request=new AddContentRelationsRequest();\n  Guid guid=new Guid();\n  guid.setGuid(contentID);\n  request.setId(guid.getGuid());\n  request.setSlot(slot);\n  request.setRelatedId(convertIds(relatedIds));\n  request.setTemplate(template);\n  request.setIndex(index);\n  request.setRelationshipConfig(\"ActiveAssembly\");\n  PSAaRelationship[] relationships=context.getContentService().addContentRelations(request);\n  return Arrays.asList(relationships);\n}\n",
      "formalParam": [
        "Integer",
        "List<Integer>",
        "String",
        "String",
        "Integer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.Integer>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "returnType": "List<PSAaRelationship>",
      "file": "./java_projects/PSOBatchImporter/main/src/com/percussion/pso/rxws/item/RxWsContentHelper.java",
      "types": [
        "List",
        "Arrays",
        "Integer"
      ],
      "apicalls": [
        "asList",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Integer>.get(int)",
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "get",
        "java",
        "arrays",
        "integer"
      ]
    },
    {
      "method": "addFlag@73",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.String>.TreeMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AGE/src/uk/ac/ebi/age/parser/ClassReference.java",
      "body": "public void addFlag(String nm,String vl){\n  if (flags == null)   flags=new TreeMap<String,String>();\n  flags.put(nm,vl);\n}\n",
      "types": [
        "TreeMap",
        "String",
        "Map"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeMap<java.lang.String,java.lang.String>.TreeMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "tree",
        "util",
        "put",
        "map",
        "string",
        "java"
      ]
    },
    {
      "method": "getUploadDirectory@1211",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Path",
      "file": "./java_projects/Bianca/bianca/src/main/java/com/clevercloud/bianca/env/Env.java",
      "body": "/** \n * Returns the upload directory.\n */\npublic Path getUploadDirectory(){\n  if (_uploadPath == null) {\n    String realPath=getIniString(\"upload_tmp_dir\");\n    if (realPath != null) {\n    }\n else     if (getRequest() != null) {\n      realPath=\"WEB-INF/upload\";\n    }\n else {\n      realPath=WorkDir.getTmpWorkDir().lookup(\"upload\").getNativePath();\n    }\n    _uploadPath=_bianca.getPwd().lookup(realPath);\n    try {\n      if (!_uploadPath.isDirectory()) {\n        _uploadPath.mkdirs();\n      }\n    }\n catch (    IOException e) {\n      log.log(Level.FINE,e.toString(),e);\n    }\n    _uploadPath=_uploadPath.createRoot();\n  }\n  return _uploadPath;\n}\n",
      "types": [
        "Throwable",
        "String",
        "Logger",
        "Level"
      ],
      "apicalls": [
        "toString",
        "log"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.toString()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "logger",
        "util",
        "logging",
        "level",
        "java",
        "throwable",
        "string",
        "log"
      ]
    },
    {
      "method": "getParameterValue@79",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Seam2.3/jboss-seam/src/main/java/org/jboss/seam/navigation/NaturalConversationIdParameter.java",
      "body": "public String getParameterValue(String value){\n  return value.startsWith(name + \":\") ? value.substring(name.length() + 1) : value;\n}\n",
      "types": [
        "Integer",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "length",
        "startsWith",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "string",
        "integer",
        "starts",
        "substring",
        "length",
        "boolean"
      ]
    },
    {
      "method": "putToSuccess@4815",
      "body": "public void putToSuccess(String key,String val){\n  if (this.success == null) {\n    this.success=new HashMap<String,String>();\n  }\n  this.success.put(key,val);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "String",
        "HashMap",
        "Map"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "map",
        "put",
        "string",
        "java",
        "util"
      ]
    },
    {
      "method": "addCashDrop@323",
      "body": "public void addCashDrop(CashDropTransaction t){\n  int size=cashDropList.size();\n  cashDropList.add(t);\n  fireTableRowsInserted(size,size);\n  Rectangle cellRect=tableCashDrops.getCellRect(size,0,false);\n  tableCashDrops.scrollRectToVisible(cellRect);\n  selectionModel.setLeadSelectionIndex(size);\n}\n",
      "formalParam": [
        "CashDropTransaction"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JTable.getCellRect(int,int,boolean)",
            "node": "DAPICall",
            "_returns": "java.awt.Rectangle",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AndroidPOS/floreantpos/src/com/floreantpos/ui/dialog/CashDropDialog.java",
      "types": [
        "JComponent",
        "Rectangle",
        "AbstractTableModel",
        "JTable",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "scrollRectToVisible",
        "fireTableRowsInserted",
        "getCellRect"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)",
            "javax.swing.JTable.getCellRect(int,int,boolean)",
            "javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"
          ]
        }
      ],
      "keywords": [
        "cell",
        "fire",
        "javax",
        "rows",
        "integer",
        "component",
        "j",
        "get",
        "model",
        "visible",
        "swing",
        "inserted",
        "scroll",
        "abstract",
        "table",
        "boolean",
        "rect",
        "rectangle"
      ]
    },
    {
      "method": "writeCoverageData@44",
      "body": "public void writeCoverageData(@Observes AfterSuite arqEvent) throws Exception {\n  IRuntime runtime=runtimeInst.get();\n  if (runtime != null) {\n    ByteArrayOutputStream coverageOutputStream=null;\n    try {\n      coverageOutputStream=new ByteArrayOutputStream();\n      ExecutionDataWriter writer=new ExecutionDataWriter(coverageOutputStream);\n      runtime.collect(writer,writer,true);\n    }\n  finally {\n      runtime.shutdown();\n      if (coverageOutputStream != null) {\n        try {\n          coverageOutputStream.close();\n        }\n catch (        Exception e) {\n          throw new RuntimeException(\"Could not close coverage file\",e);\n        }\n      }\n    }\n    getCommandService().execute(new CoverageDataCommand(coverageOutputStream.toByteArray()));\n  }\n}\n",
      "formalParam": [
        "AfterSuite"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/arquillian-extension-jacoco/src/main/java/org/jboss/arquillian/extension/jacoco/container/ShutdownCoverageData.java",
      "types": [
        "ByteArrayOutputStream",
        "IOException"
      ],
      "apicalls": [
        "close",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.close()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "io",
        "byte",
        "array",
        "java",
        "stream",
        "close",
        "output"
      ]
    },
    {
      "method": "endDraw@203",
      "body": "public void endDraw(){\n  if (primarySurface) {\n    if (canvas != null) {\n      System.out.println(canvas);\n      canvas.repaint();\n    }\n else {\nsynchronized (image) {\n        image.getGraphics().drawImage(offscreen,0,0,null);\n      }\n    }\n  }\n else {\n    loadPixels();\n  }\n  setModified();\n  super.updatePixels();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.image.BufferedImage.getRaster()",
                "node": "DAPICall",
                "_returns": "java.awt.image.WritableRaster",
                "_throws": []
              },
              {
                "_call": "java.awt.image.Raster.getDataElements(int,int,int,int,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/processing-scala-sbt/processing-core-src/src/processing/core/PGraphicsJava2D.java",
      "types": [
        "Integer",
        "Raster",
        "WritableRaster",
        "Character",
        "Object",
        "BufferedImage",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "getRaster",
        "getDataElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.BufferedImage.getRaster()",
            "java.awt.image.Raster.getDataElements(int,int,int,int,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "object",
        "writable",
        "get",
        "raster",
        "println",
        "image",
        "elements",
        "java",
        "io",
        "integer",
        "data",
        "stream",
        "awt",
        "print",
        "buffered",
        "character"
      ]
    },
    {
      "method": "getTeilnehmerliste@516",
      "body": "/** \n * getTeilnehmerliste(String,boolean) Gibt Liste von Namen(Studenten) einer Lehrveranstaltung zur\u00fcck\n * @param id - String id der Lehrveranstaltung\n * @param a - Zugelassen oder Angemeldet.\n * @return Vector<Vector<String>> Teilnehmerliste\n */\npublic Vector<Vector> getTeilnehmerliste(String id,boolean a){\n  LOG.entering(this.getClass().getName(),\"getTeilnehmerliste\",new Object[]{id,a});\n  LOG.info(\"Lade Teilnehmerliste von \" + id + \".\");\n  LOG.exiting(this.getClass().getName(),\"getTeilnehmerliste\",datenbank.getTeilnehmerlisteGUI(id,a));\n  return datenbank.getTeilnehmerlisteGUI(id,a);\n}\n",
      "formalParam": [
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.info(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.exiting(java.lang.String,java.lang.String,java.lang.Object)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Vector<Vector>",
      "file": "./java_projects/se2_lups/src/lups/Controller.java",
      "types": [
        "Object",
        "Class",
        "String",
        "Logger"
      ],
      "apicalls": [
        "exiting",
        "entering",
        "info",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object[])",
            "java.util.logging.Logger.info(java.lang.String)",
            "java.lang.Class.getName()",
            "java.util.logging.Logger.exiting(java.lang.String,java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "info",
        "name",
        "util",
        "logger",
        "get",
        "string",
        "logging",
        "exiting",
        "class",
        "object",
        "lang",
        "java",
        "entering"
      ]
    },
    {
      "method": "actionPerformed@1979",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.EventObject.getSource()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComboBox.getSelectedIndex()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geogebra/desktop/geogebra/gui/dialog/PropertiesPanel.java",
      "body": "/** \n * action listener implementation for label mode combobox\n */\npublic void actionPerformed(ActionEvent e){\n  Object source=e.getSource();\n  if (source == layerModeCB) {\n    GeoElement geo;\n    int layer=layerModeCB.getSelectedIndex();\n    for (int i=0; i < geos.length; i++) {\n      geo=(GeoElement)geos[i];\n      geo.setLayer(layer);\n      geo.updateRepaint();\n    }\n  }\n}\n",
      "types": [
        "Integer",
        "EventObject",
        "Object",
        "JComboBox"
      ],
      "apicalls": [
        "getSelectedIndex",
        "getSource"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.EventObject.getSource()",
            "javax.swing.JComboBox.getSelectedIndex()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "object",
        "util",
        "source",
        "java",
        "javax",
        "j",
        "index",
        "selected",
        "combo",
        "get",
        "box",
        "event",
        "swing"
      ]
    },
    {
      "method": "ElementProxy@184",
      "body": "/** \n * Constructor ElementProxy\n * @param element\n * @param BaseURI\n * @throws XMLSecurityException\n */\npublic ElementProxy(Element element,String BaseURI) throws XMLSecurityException {\n  if (element == null) {\n    throw new XMLSecurityException(\"ElementProxy.nullElement\");\n  }\n  if (log.isLoggable(java.util.logging.Level.FINE)) {\n    log.log(java.util.logging.Level.FINE,\"setElement(\\\"\" + element.getTagName() + \"\\\", \\\"\"+ BaseURI+ \"\\\")\");\n  }\n  this._doc=element.getOwnerDocument();\n  this._constructionElement=element;\n  this._baseURI=BaseURI;\n  this.guaranteeThatElementInCorrectSpace();\n}\n",
      "formalParam": [
        "Element",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/com/sun/org/apache/xml/internal/security/utils/ElementProxy.java",
      "types": [
        "Boolean",
        "Logger",
        "Level",
        "String"
      ],
      "apicalls": [
        "log",
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "util",
        "level",
        "boolean",
        "loggable",
        "string",
        "java",
        "logging",
        "logger",
        "log"
      ]
    },
    {
      "method": "numToString@78",
      "body": "public static String numToString(double num,int significantdigits){\n  String formatString=\"###,###\";\n  if (significantdigits > 0) {\n    formatString+=\".\";\n    for (int i=0; i < significantdigits; i++) {\n      formatString+=\"#\";\n    }\n  }\n  DecimalFormat df=new DecimalFormat(formatString);\n  return df.format(num);\n}\n",
      "formalParam": [
        "double",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.DecimalFormat.DecimalFormat(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.text.NumberFormat.format(double)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/medsavant/MedSavantShared/src/org/ut/biolab/medsavant/util/MiscUtils.java",
      "types": [
        "DecimalFormat",
        "String",
        "Double",
        "NumberFormat"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.DecimalFormat.DecimalFormat(java.lang.String)",
            "java.text.NumberFormat.format(double)"
          ]
        }
      ],
      "keywords": [
        "string",
        "decimal",
        "format",
        "double",
        "number",
        "java",
        "text"
      ]
    },
    {
      "method": "remove@195",
      "body": "public V remove(Object key){\n  V value=null;\n  if (forwardMap.containsKey(key)) {\n    value=forwardMap.remove(key);\n    inverseMap.remove(value);\n  }\n  return value;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.containsKey(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "Tau_V",
                "_throws": []
              },
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "Tau_V",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "V",
      "file": "./java_projects/geogebra/common/src/org/apache/commons/collections15/bidimap/AbstractDualBidiMap.java",
      "types": [
        "Object",
        "Map",
        "Boolean"
      ],
      "apicalls": [
        "containsKey",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.containsKey(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.containsKey(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "util",
        "java",
        "map",
        "contains",
        "remove",
        "key"
      ]
    },
    {
      "method": "testConstructor1@433",
      "body": "/** \n * Constructor throws if corePoolSize argument is less than zero \n */\npublic void testConstructor1(){\n  try {\n    new ThreadPoolExecutor(-1,1,LONG_DELAY_MS,TimeUnit.MILLISECONDS,new ArrayBlockingQueue<Runnable>(10));\n    shouldThrow();\n  }\n catch (  IllegalArgumentException success) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>.ArrayBlockingQueue<Runnable>(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/scala-parallel/jsr166/src/test/tck/ThreadPoolExecutorTest.java",
      "types": [
        "Integer",
        "Runnable",
        "Long",
        "BlockingQueue",
        "TimeUnit",
        "ThreadPoolExecutor",
        "ArrayBlockingQueue"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>.ArrayBlockingQueue<Runnable>(int)",
            "java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)"
          ]
        }
      ],
      "keywords": [
        "time",
        "runnable",
        "long",
        "integer",
        "util",
        "executor",
        "array",
        "blocking",
        "concurrent",
        "pool",
        "java",
        "queue",
        "thread",
        "unit"
      ]
    },
    {
      "method": "execute@239",
      "body": "@Override public void execute(IContext context){\n  BPMN2Editor editor=(BPMN2Editor)getFeatureProvider().getDiagramTypeProvider().getDiagramEditor();\n  PictogramElement pe=((ICustomContext)context).getPictogramElements()[0];\n  final Task task=(Task)Graphiti.getLinkService().getBusinessObjectForLinkedPictogramElement(pe);\n  String taskName=\"\";\n  List<EStructuralFeature> features=ModelUtil.getAnyAttributes(task);\n  for (  EStructuralFeature f : features) {\n    if (\"taskName\".equals(f.getName())) {\n      taskName=(String)task.eGet(f);\n      break;\n    }\n  }\n  IBpmn2RuntimeExtension rte=editor.getTargetRuntime().getRuntimeExtension();\n  WorkItemDefinition workItemDefinition=((JBPM5RuntimeExtension)rte).getWorkItemDefinition(taskName);\n  WorkDefinitionImpl wd=new WorkDefinitionImpl();\n  for (  String name : workItemDefinition.getParameters().keySet()) {\n    String type=workItemDefinition.getParameters().get(name);\n    DataTypeFactory factory=DataTypeRegistry.getFactory(type);\n    wd.addParameter(new ParameterDefinitionImpl(name,factory.createDataType()));\n  }\n  WorkImpl w=new WorkImpl();\n  w.setName(taskName);\n  w.setParameterDefinitions(wd.getParameters());\n  for (  DataInputAssociation dia : task.getDataInputAssociations()) {\n    DataInput dataInput=(DataInput)dia.getTargetRef();\n    if (dataInput != null) {\n      String name=dataInput.getName();\n      ItemDefinition itemDefinition=dataInput.getItemSubjectRef();\n      if (itemDefinition != null) {\n        Object structureRef=itemDefinition.getStructureRef();\n        if (ModelUtil.isStringWrapper(structureRef)) {\n          ParameterDefinition parameterDefinition=w.getParameterDefinition(name);\n          try {\n            Object value=parameterDefinition.getType().readValue(ModelUtil.getStringWrapperValue(structureRef));\n            w.setParameter(name,value);\n          }\n catch (          Exception e) {\n          }\n        }\n      }\n    }\n  }\n  SampleCustomEditor dialog=new SampleCustomEditor(editor.getSite().getShell());\n  dialog.setWorkDefinition(wd);\n  dialog.setWork(w);\n  dialog.show();\n  hasChanges=dialog.getWork() != w;\n  if (hasChanges) {\n    w=(WorkImpl)dialog.getWork();\n    for (    DataInputAssociation dia : task.getDataInputAssociations()) {\n      DataInput dataInput=(DataInput)dia.getTargetRef();\n      if (dataInput != null) {\n        String name=dataInput.getName();\n        ItemDefinition itemDefinition=dataInput.getItemSubjectRef();\n        String value=(String)w.getParameter(name);\n        if (value != null && !value.isEmpty()) {\n          EObject structureRef=ModelUtil.createStringWrapper(value);\n          if (itemDefinition == null) {\n            itemDefinition=Bpmn2ModelerFactory.create(ItemDefinition.class);\n            ModelUtil.getDefinitions(task).getRootElements().add(itemDefinition);\n            ModelUtil.setID(itemDefinition);\n          }\n          itemDefinition.setItemKind(ItemKind.PHYSICAL);\n          itemDefinition.setStructureRef(structureRef);\n          dataInput.setItemSubjectRef(itemDefinition);\n        }\n else         if (itemDefinition != null) {\n          dataInput.setItemSubjectRef(null);\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "IContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.lang.String.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bpmn2-modeler/org.eclipse.bpmn2.modeler.runtime.jboss.jbpm5/src/org/eclipse/bpmn2/modeler/runtime/jboss/jbpm5/features/JbpmCustomTaskFeatureContainer.java",
      "types": [
        "Object",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "isEmpty",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "$NOT$java.lang.String.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "equals",
        "object",
        "empty",
        "boolean",
        "java"
      ]
    },
    {
      "method": "narExecute@42",
      "body": "public final void narExecute() throws MojoExecutionException, MojoFailureException {\n  List narArtifacts=getNarManager().getNarDependencies(\"compile\");\n  if (classifiers == null) {\n    getNarManager().unpackAttachedNars(narArtifacts,archiverManager,null,getOS(),getLayout(),getUnpackDirectory());\n  }\n else {\n    for (Iterator j=classifiers.iterator(); j.hasNext(); ) {\n      getNarManager().unpackAttachedNars(narArtifacts,archiverManager,(String)j.next(),getOS(),getLayout(),getUnpackDirectory());\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/maven-nar-plugin/src/main/java/org/apache/maven/plugin/nar/NarUnpackMojo.java",
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "next",
        "iterator",
        "util",
        "java"
      ]
    },
    {
      "method": "addDiscriminatorClass@39",
      "formalParam": [
        "Class<?>",
        "String",
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Class<?>>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.Class<?>>",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Class<?>>.HashMap<String,Class<?>>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Class<?>>>.put(java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Class<?>>)",
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.Class<?>>",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Class<?>>.put(java.lang.String,java.lang.Class<?>)",
            "node": "DAPICall",
            "_returns": "java.lang.Class<?>",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xmlfoo/src/com/cafbit/xmlfoo/XmlFoo.java",
      "body": "public void addDiscriminatorClass(Class<?> baseClass,String discriminator,Class<?> concreteClass){\n  Map<String,Class<?>> classMap=discriminatorClassMap.get(baseClass);\n  if (classMap == null) {\n    classMap=new HashMap<String,Class<?>>();\n    discriminatorClassMap.put(baseClass,classMap);\n  }\n  classMap.put(discriminator,concreteClass);\n}\n",
      "types": [
        "Class",
        "String",
        "HashMap",
        "Map",
        "Object"
      ],
      "apicalls": [
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Class<?>>>.get(java.lang.Object)",
            "java.util.HashMap<java.lang.String,java.lang.Class<?>>.HashMap<String,Class<?>>()",
            "java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Class<?>>>.put(java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Class<?>>)",
            "java.util.Map<java.lang.String,java.lang.Class<?>>.put(java.lang.String,java.lang.Class<?>)"
          ]
        }
      ],
      "keywords": [
        "get",
        "object",
        "map",
        "string",
        "java",
        "util",
        "hash",
        "put",
        "class"
      ]
    },
    {
      "method": "writeValueDelete@55",
      "body": "public void writeValueDelete(Object value){\n  Object[] taxcustcat=(Object[])value;\n  m_oId=taxcustcat[0];\n  m_jName.setText(Formats.STRING.formatValue(taxcustcat[1]));\n  m_jName.setEnabled(false);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.setEnabled(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pos_1/src-pos/com/openbravo/pos/inventory/TaxCustCategoriesEditor.java",
      "types": [
        "String",
        "JComponent",
        "Boolean",
        "JTextComponent"
      ],
      "apicalls": [
        "setText",
        "setEnabled"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.JComponent.setEnabled(boolean)"
          ]
        }
      ],
      "keywords": [
        "enabled",
        "component",
        "text",
        "string",
        "swing",
        "set",
        "boolean",
        "javax",
        "j"
      ]
    },
    {
      "method": "key@193",
      "body": "/** \n * Append a key. The key will be associated with the next value. In an object, every value must be preceded by a key.\n * @param string A key string.\n * @return this\n * @throws JSONException If the key is out of place. For example, keysdo not belong in arrays or if the key is null.\n */\npublic JSONWriter key(String string) throws JSONException {\n  if (string == null) {\n    throw new JSONException(\"Null key.\");\n  }\n  if (this.mode == 'k') {\n    try {\n      stack[top - 1].putOnce(string,Boolean.TRUE);\n      if (this.comma) {\n        this.writer.write(',');\n      }\n      this.writer.write(JSONObject.quote(string));\n      this.writer.write(':');\n      this.comma=false;\n      this.mode='o';\n      return this;\n    }\n catch (    IOException e) {\n      throw new JSONException(e);\n    }\n  }\n  throw new JSONException(\"Misplaced key.\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.Writer.write(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.Writer.write(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.Writer.write(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "JSONWriter",
      "file": "./java_projects/gl4j-library/src/org/json/JSONWriter.java",
      "types": [
        "Integer",
        "Writer",
        "IOException",
        "Character"
      ],
      "apicalls": [
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.Writer.write(int)",
            "java.io.Writer.write(char[])",
            "java.io.Writer.write(int)"
          ]
        }
      ],
      "keywords": [
        "character",
        "java",
        "write",
        "integer",
        "exception",
        "io",
        "writer"
      ]
    },
    {
      "method": "writeExternal@638",
      "body": "public void writeExternal(ObjectOutput out) throws IOException {\n  super.writeExternal(out);\n  out.writeUTF(method);\n  out.writeInt(args.length);\n  for (int i=0; i < args.length; ++i)   out.writeObject(args[i]);\n}\n",
      "formalParam": [
        "ObjectOutput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataOutput.writeUTF(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.DataOutput.writeInt(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/riftsaw-ode/jacob/src/main/java/org/apache/ode/jacob/vpu/ExecutionQueueImpl.java",
      "types": [
        "IOException",
        "ObjectOutput",
        "String",
        "DataOutput",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "writeInt",
        "writeUTF",
        "writeObject"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.DataOutput.writeUTF(java.lang.String)",
            "java.io.DataOutput.writeInt(int)",
            "java.io.ObjectOutput.writeObject(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "utf",
        "data",
        "io",
        "integer",
        "string",
        "exception",
        "int",
        "object",
        "output",
        "write"
      ]
    },
    {
      "method": "doLogin@40",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.set(int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/contactlist/src/main/java/com/huangzhimin/contacts/email/OneSixThreeImporter.java",
      "body": "/** \n * \u767b\u5f55163\u90ae\u7bb1\n * @throws ContactsException\n */\npublic void doLogin() throws ContactsException {\n  try {\n    NameValuePair params[]={new NameValuePair(\"verifycookie\",\"1\"),new NameValuePair(\"product\",\"mail163\"),new NameValuePair(\"username\",getUsername(email)),new NameValuePair(\"password\",password),new NameValuePair(\"selType\",\"jy\")};\n    Calendar calendar=Calendar.getInstance();\n    calendar.set(2099,11,31);\n    client.getState().addCookies(new Cookie[]{new Cookie(\".163.com\",\"ntes_mail_firstpage\",\"normal\",\"/\",calendar.getTime(),false),new Cookie(\".163.com\",\"loginType\",\"js\",\"/\",calendar.getTime(),false)});\n    String responseStr=doPost(loginUrl,params,\"http://mail.163.com/\");\n    String redirectUrl=getJSRedirectLocation(responseStr);\n    redirectUrl+=\"%26verifycookie%3D1%26language%3D-1%26style%3D35\";\n    doGet(redirectUrl,loginUrl);\n  }\n catch (  Exception e) {\n    throw new ContactsException(\"163 protocol has changed\",e);\n  }\n}\n",
      "types": [
        "Integer",
        "Calendar"
      ],
      "apicalls": [
        "set",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.set(int,int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "instance",
        "util",
        "java",
        "get",
        "set",
        "calendar"
      ]
    },
    {
      "method": "parse@122",
      "body": "@Override public Query parse() throws ParseException {\n  final Version version=req.getCore().getSolrConfig().luceneMatchVersion;\n  final Analyzer nqAnalyzer=this.initAnalyzer();\n  final DefaultOperatorAttribute.Operator defaultOp=this.getDefaultOperator();\n  if (boosts.size() == 1) {\n    final String field=boosts.keySet().iterator().next();\n    final Map<String,Analyzer> datatypeConfig=this.initDatatypeConfig(field);\n    return parseTupleQuery(qstr,version,field,nqAnalyzer,datatypeConfig,defaultOp);\n  }\n else {\n    final Map<String,Map<String,Analyzer>> datatypeConfigs=this.initDatatypeConfigs(boosts);\n    return parseTupleQuery(qstr,version,boosts,nqAnalyzer,datatypeConfigs,defaultOp);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Float>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Float>.keySet()",
                "node": "DAPICall",
                "_returns": "java.util.Set",
                "_throws": []
              },
              {
                "_call": "java.util.Set.iterator()",
                "node": "DAPICall",
                "_returns": "java.util.Iterator",
                "_throws": []
              },
              {
                "_call": "java.util.Iterator.next()",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Query",
      "file": "./java_projects/SIREn/siren-solr/src/main/java/org/sindice/siren/solr/qparser/tuple/TupleQParser.java",
      "types": [
        "Iterator",
        "Integer",
        "Float",
        "Map",
        "Object",
        "Set",
        "String"
      ],
      "apicalls": [
        "size",
        "keySet",
        "iterator",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Float>.size()",
            "java.util.Map<java.lang.String,java.lang.Float>.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.next()"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Float>.size()"
          ]
        }
      ],
      "keywords": [
        "string",
        "next",
        "size",
        "set",
        "float",
        "map",
        "object",
        "key",
        "integer",
        "java",
        "iterator",
        "util"
      ]
    },
    {
      "method": "toString@71",
      "body": "/** \n * Returns a string representation of the first argument in the radix specified by the second argument. <p>If the radix is smaller than  {@code Character.MIN_RADIX}or larger than  {@code Character.MAX_RADIX}, then the radix {@code 10} is used instead.<p>If the first argument is negative, the first element of the result is the ASCII minus sign  {@code '-'}(<code>'&#92;u002d'</code>). If the first argument is not negative, no sign character appears in the result. <p>The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character  {@code '0'}(<code>'&#92;u0030'</code>); otherwise, the first character of the representation of the magnitude will not be the zero character.  The following ASCII characters are used as digits: <blockquote> {@code 0123456789abcdefghijklmnopqrstuvwxyz}</blockquote> These are <code>'&#92;u0030'</code> through <code>'&#92;u0039'</code> and <code>'&#92;u0061'</code> through <code>'&#92;u007a'</code>. If  {@code radix} is<var>N</var>, then the first <var>N</var> of these characters are used as radix-<var>N</var> digits in the order shown. Thus, the digits for hexadecimal (radix 16) are {@code 0123456789abcdef}. If uppercase letters are desired, the  {@link java.lang.String#toUpperCase()} method maybe called on the result: <blockquote> {@code Long.toString(n, 16).toUpperCase()}</blockquote>\n * @param i       a {@code long} to be converted to a string.\n * @param radix   the radix to use in the string representation.\n * @return  a string representation of the argument in the specified radix.\n * @see java.lang.Character#MAX_RADIX\n * @see java.lang.Character#MIN_RADIX\n */\npublic static String toString(long i,int radix){\n  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)   radix=10;\n  if (radix == 10)   return toString(i);\n  char[] buf=new char[65];\n  int charPos=64;\n  boolean negative=(i < 0);\n  if (!negative) {\n    i=-i;\n  }\n  while (i <= -radix) {\n    buf[charPos--]=Integer.digits[(int)(-(i % radix))];\n    i=i / radix;\n  }\n  buf[charPos]=Integer.digits[(int)(-i)];\n  if (negative) {\n    buf[--charPos]='-';\n  }\n  return new String(buf,charPos,(65 - charPos));\n}\n",
      "formalParam": [
        "long",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.String()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.String(char[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/lang/Long.java",
      "types": [
        "String",
        "Integer",
        "Character"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.String()",
            "java.lang.String.String(char[],int,int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "integer",
        "lang",
        "character"
      ]
    },
    {
      "method": "call@40",
      "body": "@Override public String call() throws Exception {\n  String result;\n  Thread.sleep(1200);\n  if (\"MBP-17\".equals(itemId)) {\n    result=\"No\";\n  }\n else {\n    result=\"Yes\";\n  }\n  WorkToken token=new WorkToken();\n  token.getData().put(\"Out of stock?\",result);\n  token.getData().put(\"itemId\",itemId);\n  tokenOut(token);\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/worktoken/engine/src/test/com/worktoken/engine/test/servicetask/CheckStock.java",
      "types": [
        "Thread",
        "Long",
        "Object",
        "String",
        "Boolean",
        "InterruptedException"
      ],
      "apicalls": [
        "equals",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "boolean",
        "exception",
        "lang",
        "equals",
        "java",
        "interrupted",
        "object",
        "long",
        "thread",
        "string"
      ]
    },
    {
      "method": "main@45",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Timer.Timer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Timer.cancel()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gridgain/examples/java/org/gridgain/examples/realtime/GridPopularNumbersRealTimeExample.java",
      "body": "/** \n * Starts counting numbers.\n * @param args Command line arguments.\n * @throws Exception If failed.\n */\npublic static void main(String[] args) throws Exception {\n  Timer popularNumbersQryTimer=new Timer(\"numbers-query-worker\");\n  final Grid g=G.start(\"examples/config/spring-cache-popularcounts.xml\");\n  try {\n    TimerTask task=scheduleQuery(g,popularNumbersQryTimer,POPULAR_NUMBERS_CNT);\n    realTimePopulate(g);\n    task.run();\n    popularNumbersQryTimer.cancel();\n    g.run(GridClosureCallMode.BROADCAST,new Runnable(){\n      @Override public void run(){\n        if (g.cache() == null)         X.error(\"Default cache not found (is spring-cache-popularcounts.xml \" + \"configuration used on all nodes?)\");\n else {\n          X.println(\"Clearing keys from cache: \" + g.cache().keySize());\n          g.cache().clearAll();\n        }\n      }\n    }\n);\n  }\n  finally {\n    G.stop(true,true);\n  }\n}\n",
      "types": [
        "String",
        "Timer"
      ],
      "apicalls": [
        "cancel"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Timer.Timer(java.lang.String)",
            "java.util.Timer.cancel()"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "string",
        "timer",
        "cancel"
      ]
    },
    {
      "method": "afterClass@86",
      "body": "@AfterClass public static void afterClass(){\n  InfinispanTestUtil.afterClassShutdown(cacheManager);\n  org.infinispan.test.TestingUtil.recursiveFileRemove(new File(System.getProperty(\"java.io.tmpdir\"),\"InfinispanTestUtil\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/modeshape/modeshape-jcr/src/test/java/org/modeshape/jcr/InfinispanUtilTest.java",
      "types": [
        "System",
        "File",
        "String"
      ],
      "apicalls": [
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "io",
        "string",
        "system",
        "get",
        "property",
        "file"
      ]
    },
    {
      "method": "getHitRate@173",
      "body": "/** \n * \ufffd\u00f5\ufffd\u00ff\ufffd\ufffd\ufffd\ufffd\ufffd\u0434\ufffd\ufffd\ufffd\n * @return\n */\npublic double getHitRate(){\n  return this.hits.get() * 1000.0 / (System.currentTimeMillis() - this.startTime);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicLong.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/sothis/sothis-core/src/main/java/org/sothis/core/cache/CacheStat.java",
      "types": [
        "System",
        "Long",
        "concurrent"
      ],
      "apicalls": [
        "currentTimeMillis",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicLong.get()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "long",
        "time",
        "atomic",
        "millis",
        "util",
        "java",
        "lang",
        "current",
        "system",
        "get"
      ]
    },
    {
      "method": "getServiceNames@206",
      "body": "public List<String> getServiceNames(BusinessService service){\n  List<String> serviceNameList=new ArrayList<String>();\n  if (service.getCategoryBag() != null && service.getCategoryBag().getKeyedReference() != null) {\n    for (    KeyedReference reference : service.getCategoryBag().getKeyedReference()) {\n      String keyName=reference.getTModelKey();\n      String keyValue=reference.getKeyValue();\n      if (keyName.equals(UDD_SERVICE_NAMES_KEY)) {\n        serviceNameList.add(keyValue);\n      }\n    }\n  }\n  return serviceNameList;\n}\n",
      "formalParam": [
        "BusinessService"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_then": [
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/CONNECT/Product/Production/Common/CONNECTCoreLib/src/main/java/gov/hhs/fha/nhinc/connectmgr/ConnectionManagerCacheHelper.java",
      "types": [
        "Boolean",
        "ArrayList",
        "List",
        "Object",
        "String"
      ],
      "apicalls": [
        "add",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "lang",
        "object",
        "array",
        "list",
        "java",
        "string",
        "equals",
        "util",
        "add"
      ]
    },
    {
      "method": "writeExternal@147",
      "body": "public void writeExternal(ObjectOutput out) throws IOException {\n  out.writeLong(processInstanceId);\n  out.writeUTF(type);\n  out.writeBoolean(event != null);\n  if (event != null) {\n    out.writeObject(event);\n  }\n}\n",
      "formalParam": [
        "ObjectOutput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataOutput.writeLong(long)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataOutput.writeUTF(java.lang.String)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataOutput.writeBoolean(boolean)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java",
      "types": [
        "Object",
        "IOException",
        "ObjectOutput",
        "DataOutput",
        "String",
        "Boolean",
        "Long"
      ],
      "apicalls": [
        "writeUTF",
        "writeObject",
        "writeLong",
        "writeBoolean"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.DataOutput.writeLong(long)",
            "java.io.DataOutput.writeUTF(java.lang.String)",
            "java.io.DataOutput.writeBoolean(boolean)",
            "java.io.ObjectOutput.writeObject(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "output",
        "object",
        "write",
        "io",
        "data",
        "java",
        "string",
        "long",
        "boolean",
        "utf"
      ]
    },
    {
      "method": "removeSeries@269",
      "body": "/** \n * Removes a series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @since 1.0.10\n */\npublic void removeSeries(int series){\n  if ((series < 0) || (series >= getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds.\");\n  }\n  XIntervalSeries ts=(XIntervalSeries)this.data.get(series);\n  ts.removeChangeListener(this);\n  this.data.remove(series);\n  fireDatasetChanged();\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List.remove(int)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JobScheduler/prathamesh-sonpatki-JobScheduler-7abfc2a/src/org/jfree/data/xy/XIntervalSeriesCollection.java",
      "types": [
        "List",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "size",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.remove(int)"
          ]
        }
      ],
      "keywords": [
        "size",
        "remove",
        "util",
        "object",
        "java",
        "integer",
        "list"
      ]
    },
    {
      "method": "updateClob@3630",
      "body": "/** \n * {@inheritDoc}\n */\npublic void updateClob(int columnIndex,Reader reader,long length) throws SQLException {\n  ResultSet resultSet=getUnderlyingResultSet();\n  try {\n    if (spy)     spyLogger.debugf(\"%s [%s] updateClob(%s, %s, %s)\",jndiName,Constants.SPY_LOGGER_PREFIX_RESULTSET,columnIndex,reader,length);\n    resultSet.updateClob(columnIndex,reader,length);\n  }\n catch (  Throwable t) {\n    throw checkException(t);\n  }\n}\n",
      "formalParam": [
        "int",
        "Reader",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicBoolean.get()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.ResultSet.updateClob(int,java.io.Reader,long)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/IronJacamar/adapters/src/main/java/org/jboss/jca/adapters/jdbc/WrappedResultSet.java",
      "types": [
        "Boolean",
        "Integer",
        "Long",
        "concurrent",
        "SQLException",
        "ResultSet",
        "Reader"
      ],
      "apicalls": [
        "updateClob",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.sql.ResultSet.updateClob(int,java.io.Reader,long)"
          ]
        }
      ],
      "keywords": [
        "atomic",
        "boolean",
        "integer",
        "util",
        "sql",
        "long",
        "reader",
        "update",
        "exception",
        "get",
        "java",
        "result",
        "set",
        "clob",
        "concurrent"
      ]
    },
    {
      "method": "readBytes@51",
      "body": "/** \n * Read all bytes from the input stream. <p/> Note that using this method to read very large streams could cause out-of-memory exceptions and/or block for large periods of time.\n */\npublic static byte[] readBytes(InputStream in) throws IOException {\n  final int bufsize=8192;\n  byte[] buf=new byte[bufsize];\n  ByteArrayOutputStream out=new ByteArrayOutputStream(bufsize);\n  int count;\n  while (true) {\n    count=in.read(buf,0,bufsize);\n    if (count < 0) {\n      break;\n    }\n    out.write(buf,0,count);\n  }\n  return out.toByteArray();\n}\n",
      "formalParam": [
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.read(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.write(byte[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/jython-on-android/src/org/python/core/util/FileUtil.java",
      "types": [
        "Byte",
        "Integer",
        "InputStream",
        "IOException",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray",
        "read",
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)",
            "java.io.InputStream.read(byte[],int,int)",
            "java.io.ByteArrayOutputStream.write(byte[],int,int)",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "write",
        "java",
        "output",
        "io",
        "byte",
        "array",
        "stream",
        "exception",
        "input",
        "integer",
        "read"
      ]
    },
    {
      "method": "MemcachedConnection@40",
      "body": "public MemcachedConnection(MemcachedServer server) throws IOException {\n  closed=false;\n  if (server.getBucket().getPassword().length() > 0) {\n    authenticated=false;\n  }\n else {\n    authenticated=true;\n  }\n  header=new byte[24];\n  input=ByteBuffer.wrap(header);\n  protocolHandler=server.getProtocolHandler();\n  output=new LinkedList<ByteBuffer>();\n}\n",
      "formalParam": [
        "MemcachedServer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "_returns": "java.nio.ByteBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.LinkedList<java.nio.ByteBuffer>.LinkedList<ByteBuffer>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/CouchbaseMock/src/main/java/org/couchbase/mock/memcached/MemcachedConnection.java",
      "types": [
        "ByteBuffer",
        "Byte",
        "LinkedList"
      ],
      "apicalls": [
        "wrap"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.util.LinkedList<java.nio.ByteBuffer>.LinkedList<ByteBuffer>()"
          ]
        }
      ],
      "keywords": [
        "java",
        "byte",
        "wrap",
        "buffer",
        "linked",
        "util",
        "nio",
        "list"
      ]
    },
    {
      "method": "createTestFile@43",
      "body": "public static File createTestFile(String name) throws IOException {\n  testFile=new File(name);\n  PrintWriter output=new PrintWriter(new FileWriter(testFile));\n  output.println(\"aaa\");\n  output.close();\n  return testFile;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.FileWriter.FileWriter(java.io.File)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintWriter.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintWriter.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/eeg-database_1/src/test/java/cz/zcu/kiv/eegdatabase/perf/persistentLayer/helper/DateFormater.java",
      "types": [
        "File",
        "IOException",
        "String",
        "Writer",
        "FileWriter",
        "PrintWriter"
      ],
      "apicalls": [
        "println",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.FileWriter.FileWriter(java.io.File)",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "java.io.PrintWriter.println(java.lang.String)",
            "java.io.PrintWriter.close()"
          ]
        }
      ],
      "keywords": [
        "java",
        "close",
        "file",
        "println",
        "exception",
        "print",
        "string",
        "writer",
        "io"
      ]
    },
    {
      "method": "onTestFailure@33",
      "body": "@Override public void onTestFailure(final ITestResult tr){\n  fail(testMethod(tr),execTime(tr),tr.getThrowable().getMessage());\n}\n",
      "formalParam": [
        "ITestResult"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jclouds-abiquo/core/src/test/java/org/jclouds/abiquo/testng/TestOutputListener.java",
      "types": [
        "String",
        "PrintStream",
        "Character",
        "Object"
      ],
      "apicalls": [
        "format",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "java",
        "stream",
        "object",
        "println",
        "format",
        "print",
        "io",
        "character",
        "lang",
        "string"
      ]
    },
    {
      "method": "filter@23",
      "body": "public String filter(String content,String path){\n  Object lock=null;\nsynchronized (lockMap) {\n    lock=lockMap.get(path);\n    if (lock == null) {\n      lock=new Object();\n      lockMap.put(path,lock);\n    }\n  }\nsynchronized (lock) {\n    long currentTimestamp=resourceLoader.getTimestamp(path);\n    CacheEntry cacheEntry=cache.get(path);\n    if (cacheEntry == null || currentTimestamp != cacheEntry.timestamp) {\n      cacheEntry=new CacheEntry(_runFilter(content,path),currentTimestamp);\n      cache.put(path,cacheEntry);\n    }\n    return cacheEntry.filteredContents;\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/serverutils/org.dojotoolkit.server.util/src/org/dojotoolkit/server/util/resource/CachingContentFilter.java",
      "types": [
        "Object",
        "Map",
        "String"
      ],
      "apicalls": [
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "put",
        "string",
        "get",
        "util",
        "object",
        "java",
        "map"
      ]
    },
    {
      "method": "streamAppended@380",
      "formalParam": [
        "String",
        "IStreamMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.delete(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/grails-ide/org.grails.ide.eclipse.core/src/org/grails/ide/eclipse/core/launch/SynchLaunch.java",
      "body": "public void streamAppended(String text,IStreamMonitor monitor){\n  refreshTimeLimit();\n  this.buffer.append(text);\n  if (outputLimit > 0) {\n    if (buffer.length() > outputLimit + outputLimit / 10) {\n      buffer.delete(0,buffer.length() - outputLimit);\n    }\n  }\n}\n",
      "types": [
        "Integer",
        "Long",
        "StringBuffer",
        "String",
        "System"
      ],
      "apicalls": [
        "delete",
        "length",
        "currentTimeMillis",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.delete(int,int)"
          ]
        }
      ],
      "keywords": [
        "long",
        "time",
        "length",
        "integer",
        "java",
        "string",
        "current",
        "append",
        "delete",
        "buffer",
        "millis",
        "lang",
        "system"
      ]
    },
    {
      "method": "test0173_Method@11587",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "node": "DAPICall",
            "_returns": "char[]",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java",
      "body": "public void test0173_Method(){\n  String str=\"public class Y {\\n\" + \"\\n\" + \"\tint foo(){\\n\"+ \"\t\\n\"+ \"\t\\n\"+ \"\tint bar() {\t\\n\"+ \"\t\\n\"+ \"\tpublic int x = new Object(;\\n\"+ \"\t/*<CODE ASSIST>*/\\n\"+ \"\t}\\n\"+ \"\t}\\n\"+ \"}\\n\"+ \"}\\n\";\n  String completeBehind=\"\";\n  int cursorLocation=str.lastIndexOf(\"/*<CODE ASSIST>*/\") + completeBehind.length() - 1;\n  String expectedCompletionNodeToString=\"<CompleteOnType:>\";\n  String expectedParentNodeToString=\"<NONE>\";\n  String completionIdentifier=\"\";\n  String expectedReplacedSource=\"\";\n  String expectedUnitDisplayString=\"public class Y {\\n\" + \"  public int x;\\n\" + \"  <CompleteOnType:>;\\n\"+ \"  public Y() {\\n\"+ \"  }\\n\"+ \"  int foo() {\\n\"+ \"  }\\n\"+ \"  int bar() {\\n\"+ \"  }\\n\"+ \"}\\n\";\n  checkMethodParse(str.toCharArray(),cursorLocation,expectedCompletionNodeToString,expectedParentNodeToString,expectedUnitDisplayString,completionIdentifier,expectedReplacedSource,\"full ast\");\n}\n",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "toCharArray",
        "lastIndexOf",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.toCharArray()"
          ]
        }
      ],
      "keywords": [
        "index",
        "array",
        "length",
        "char",
        "lang",
        "java",
        "string",
        "last",
        "integer"
      ]
    },
    {
      "method": "PriorityQueue@130",
      "body": "/** \n * Constructs a priority queue that contains the elements of a sorted set. The constructed priority queue has the initial capacity of 110% of the size of the sorted set. The priority queue will have the same comparator as the sorted set.\n * @param c the sorted set whose elements will be added to the priority queue to be constructed.\n */\npublic PriorityQueue(SortedSet<? extends E> c){\n  getFromSortedSet(c);\n}\n",
      "formalParam": [
        "SortedSet<? extends E>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<Tau_E>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Set<Tau_E>.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "node": "DAPICall",
                "_returns": "Tau_E",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/main/java/java/util/PriorityQueue.java",
      "types": [
        "Set",
        "Iterator",
        "Collection",
        "Boolean"
      ],
      "apicalls": [
        "iterator",
        "next",
        "hasNext",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Set<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "set",
        "java",
        "iterator",
        "empty",
        "next",
        "collection",
        "util"
      ]
    },
    {
      "method": "testDeclaration@91",
      "body": "@Test public void testDeclaration(){\n  final Package pkg=new Package(\"org.store\");\n  final FieldTemplate cheeseName=new FieldTemplateImpl(\"name\",0,String.class);\n  final FieldTemplate cheesePrice=new FieldTemplateImpl(\"price\",1,Integer.class);\n  final FieldTemplate[] fields=new FieldTemplate[]{cheeseName,cheesePrice};\n  final FactTemplate cheese=new FactTemplateImpl(pkg,\"Cheese\",fields);\n  final InternalReadAccessor extractName=new FactTemplateFieldExtractor(cheese,0);\n  final Pattern pattern=new Pattern(0,new FactTemplateObjectType(cheese));\n  final Declaration declaration=new Declaration(\"typeOfCheese\",extractName,pattern);\n  final Fact brie=cheese.createFact(12);\n  brie.setFieldValue(\"name\",\"brie\");\n  brie.setFieldValue(\"price\",new Integer(55));\n  assertEquals(\"brie\",declaration.getValue(null,brie));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Package.Package(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/drools/drools-core/src/test/java/org/drools/facttemplates/FactTemplateFieldExtractorTest.java",
      "types": [
        "ClassLoader",
        "Integer",
        "String",
        "Package",
        "Manifest",
        "URL"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Package.Package(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "class",
        "integer",
        "loader",
        "manifest",
        "package",
        "string",
        "url"
      ]
    },
    {
      "method": "DatePickerDialogFragment@54",
      "body": "/** \n * Overloaded constructor\n * @param callback Listener to notify when the date is set and the dialog is closed\n * @param dateMillis Time in milliseconds to which to initialize the dialog\n */\npublic DatePickerDialogFragment(OnDateSetListener callback,long dateMillis){\n  mDateSetListener=(OnDateSetListener)callback;\n  if (dateMillis > 0) {\n    mDate=new GregorianCalendar();\n    mDate.setTimeInMillis(dateMillis);\n  }\n}\n",
      "formalParam": [
        "OnDateSetListener",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.GregorianCalendar.GregorianCalendar()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.setTimeInMillis(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/GnucashMobile/GnucashMobile/src/org/gnucash/android/ui/DatePickerDialogFragment.java",
      "types": [
        "GregorianCalendar",
        "Calendar",
        "Long"
      ],
      "apicalls": [
        "setTimeInMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.GregorianCalendar.GregorianCalendar()",
            "java.util.Calendar.setTimeInMillis(long)"
          ]
        }
      ],
      "keywords": [
        "gregorian",
        "java",
        "millis",
        "util",
        "calendar",
        "set",
        "long",
        "time"
      ]
    },
    {
      "method": "clearCustomOptions@81",
      "body": "public void clearCustomOptions(){\n  while (getItemCount() > customOptionStart)   removeItemAt(customOptionStart);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.JComboBox.removeItemAt(int)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.JComboBox.getItemCount()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/imagej/ui/swing/updater/src/main/java/imagej/updater/gui/ViewOptions.java",
      "types": [
        "JComboBox",
        "Integer"
      ],
      "apicalls": [
        "removeItemAt",
        "getItemCount"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComboBox.getItemCount()",
            "javax.swing.JComboBox.removeItemAt(int)",
            "javax.swing.JComboBox.getItemCount()"
          ]
        }
      ],
      "keywords": [
        "swing",
        "count",
        "remove",
        "j",
        "item",
        "integer",
        "combo",
        "get",
        "javax",
        "box"
      ]
    },
    {
      "method": "hashCode@76",
      "body": "@Override public int hashCode(){\n  int result=id.hashCode();\n  result=31 * result + callback.hashCode();\n  result=31 * result + (localOrigin ? 1 : 0);\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.net.URL.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/cling/bridge/src/main/java/org/fourthline/cling/bridge/link/Endpoint.java",
      "types": [
        "URL",
        "String",
        "Integer"
      ],
      "apicalls": [
        "hashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.hashCode()",
            "java.net.URL.hashCode()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "string",
        "lang",
        "code",
        "java",
        "url",
        "net",
        "integer"
      ]
    },
    {
      "method": "deepCopy@2730",
      "body": "public shardClusterList_result deepCopy(){\n  return new shardClusterList_result(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "shardClusterList_result",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "Boolean",
        "List",
        "String",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "java",
        "string",
        "list",
        "add",
        "util",
        "array"
      ]
    },
    {
      "method": "testListWithEnums@21",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.PreparedStatement.executeQuery()",
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.sql.ResultSet.next()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": [
                  "java.sql.SQLException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sproc-spring-mapper/src/test/java/com/typemapper/namedresult/CollectionWithEnumsTest.java",
      "body": "@Test public void testListWithEnums() throws Exception {\n  final PreparedStatement ps=connection.prepareStatement(\"SELECT 'str' as str, ARRAY['VALUE_1'::enumeration, 'VALUE_2'::enumeration]::enumeration[] as enum_arr\");\n  final ResultSet rs=ps.executeQuery();\n  final TypeMapper<ClassWithListOfEnums> mapper=TypeMapperFactory.createTypeMapper(ClassWithListOfEnums.class);\n  int i=0;\n  while (rs.next()) {\n    final ClassWithListOfEnums result=(ClassWithListOfEnums)mapper.mapRow(rs,i++);\n    Assert.assertNotNull(result);\n    Assert.assertNotNull(result.getEnumList());\n    Assert.assertTrue(result.getEnumList().size() == 2);\n    Assert.assertNotNull(result.getEnumList().get(0));\n    Assert.assertNotNull(result.getEnumList().get(1));\n    final Enumeration enum1=result.getEnumList().get(0);\n    Assert.assertEquals(Enumeration.VALUE_1,enum1);\n    final Enumeration enum2=result.getEnumList().get(1);\n    Assert.assertEquals(Enumeration.VALUE_2,enum2);\n    Assert.assertEquals(\"str\",result.getStr());\n  }\n}\n",
      "types": [
        "PreparedStatement",
        "ResultSet",
        "Boolean",
        "SQLException"
      ],
      "apicalls": [
        "executeQuery",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.PreparedStatement.executeQuery()",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.next()"
          ]
        }
      ],
      "keywords": [
        "prepared",
        "query",
        "boolean",
        "sql",
        "execute",
        "statement",
        "result",
        "next",
        "exception",
        "java",
        "set"
      ]
    },
    {
      "method": "getElements@66",
      "body": "/** \n * {@inheritDoc}\n */\npublic Object[] getElements(Object inputElement){\n  return getChildren(inputElement);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Set.toArray()",
            "node": "DAPICall",
            "_returns": "java.lang.Object[]",
            "_throws": []
          },
          {
            "_call": "java.util.Collection.toArray()",
            "node": "DAPICall",
            "_returns": "java.lang.Object[]",
            "_throws": []
          }
        ]
      },
      "returnType": "Object[]",
      "file": "./java_projects/sonar-eclipse/org.sonar.ide.eclipse.ui/src/org/sonar/ide/eclipse/internal/ui/views/MapContentProvider.java",
      "types": [
        "Collection",
        "Object",
        "Set",
        "Map"
      ],
      "apicalls": [
        "toArray",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.entrySet()",
            "java.util.Set.toArray()",
            "java.util.Collection.toArray()"
          ]
        }
      ],
      "keywords": [
        "java",
        "map",
        "util",
        "object",
        "array",
        "set",
        "entry",
        "collection"
      ]
    },
    {
      "method": "onStart@74",
      "body": "/** \n * Initialize the SOAP Message.\n */\npublic void onStart(){\n  super.onStart();\n  if (this.log != null) {\n    this.log.log(\"AS2 Message Client init at \" + new Date().toString());\n    this.log.log(\"----------------------------------------------------\");\n    this.log.log(\"Partnership Data using: \");\n    this.log.log(\"----------------------------------------------------\");\n    if (this.ps != null) {\n      this.log.log(this.ps.toString());\n    }\n    this.log.log(\"\");\n    this.log.log(\"----------------------------------------------------\");\n    this.log.log(\"Configuration Data using: \");\n    this.log.log(\"----------------------------------------------------\");\n    if (this.properties != null) {\n      this.log.log(this.properties.toString());\n    }\n    this.log.log(\"----------------------------------------------------\");\n  }\n  try {\n    this.initializeMessage();\n    this.setRequestDirty(false);\n  }\n catch (  Exception e) {\n    if (this.log != null)     this.log.log(\"Unable to initialize the SOAP Message\");\n    this.onError(e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jentrata-msh/Clients/Corvus.WSClient/src/main/java/hk/hku/cecid/corvus/ws/AS2MessageSender.java",
      "types": [
        "Date",
        "String"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "util",
        "date"
      ]
    },
    {
      "method": "asElement@80",
      "body": "public Element asElement(TypeMirror t){\n  Type type=cast(Type.class,t);\n  if (type.tag != TypeTags.CLASS && type.tag != TypeTags.TYPEVAR)   return null;\n  return type.asElement();\n}\n",
      "formalParam": [
        "TypeMirror"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class<Tau_T>.isInstance(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class<Tau_T>.cast(java.lang.Object)",
            "_throws": [],
            "_returns": "Tau_T",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Element",
      "file": "./java_projects/fiji/src-plugins/javac/src/main/java/com/sun/tools/javac/model/JavacTypes.java",
      "types": [
        "Class",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "isInstance",
        "cast"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class<Tau_T>.isInstance(java.lang.Object)",
            "java.lang.Class<Tau_T>.cast(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "instance",
        "java",
        "cast",
        "boolean",
        "object",
        "lang",
        "class"
      ]
    },
    {
      "method": "removeInvalidComponentInstances@77",
      "body": "@Override public void removeInvalidComponentInstances(){\n  if (logger.isLoggable(Level.WARNING)) {\n    logger.warning(\"Implement me!!! please\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.warning(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openflexo/flexodesktop/model/flexofoundation/src/main/java/org/openflexo/foundation/ie/widget/InnerTableReusableWidget.java",
      "types": [
        "Boolean",
        "Level",
        "Logger",
        "String"
      ],
      "apicalls": [
        "isLoggable",
        "warning"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.warning(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "java",
        "loggable",
        "level",
        "logging",
        "string",
        "boolean",
        "util",
        "warning",
        "logger"
      ]
    },
    {
      "method": "output@87",
      "body": "public static void output(final File to,final Element xml,final String encoding) throws CruiseControlException {\n  try {\n    final Format format=Format.getPrettyFormat();\n    if (encoding != null) {\n      format.setEncoding(encoding);\n    }\n    final XMLOutputter outputter=new XMLOutputter(format);\n    final OutputStream logStream=new BufferedOutputStream(new FileOutputStream(to));\n    try {\n      outputter.output(new Document(xml),logStream);\n    }\n  finally {\n      close(logStream);\n    }\n  }\n catch (  IOException e) {\n    throw new CruiseControlException(e);\n  }\n}\n",
      "formalParam": [
        "File",
        "Element",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cruisecontrol/main/src/net/sourceforge/cruisecontrol/util/IO.java",
      "types": [
        "BufferedOutputStream",
        "OutputStream",
        "File",
        "IOException",
        "FileOutputStream",
        "FileNotFoundException"
      ],
      "apicalls": [
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "close",
        "output",
        "stream",
        "io",
        "buffered",
        "file",
        "java",
        "exception",
        "found"
      ]
    },
    {
      "method": "close@90",
      "body": "public void close() throws IOException {\n  dest.flush();\n  dest.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/classpath/gnu/javax/crypto/sasl/SaslOutputStream.java",
      "types": [
        "OutputStream",
        "IOException"
      ],
      "apicalls": [
        "flush",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.flush()",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "output",
        "flush",
        "close",
        "exception",
        "stream",
        "io",
        "java"
      ]
    },
    {
      "method": "testWriteObjectOrdinary@652",
      "body": "@Test public void testWriteObjectOrdinary() throws Exception {\n  Serializer serializer=new Serializer();\n  Date date=new Date(123456);\n  serializer.writeObject(date);\n  ByteBuffer byteBuffer=serializer.toByteBuffer();\n  UnsyncByteArrayInputStream unsyncByteArrayInputStream=new UnsyncByteArrayInputStream(byteBuffer.array(),6,byteBuffer.remaining());\n  ObjectInputStream objectInputStream=new ObjectInputStream(unsyncByteArrayInputStream);\n  Object object=objectInputStream.readObject();\n  Assert.assertTrue(object instanceof Date);\n  Assert.assertEquals(date,object);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.ByteBuffer.array()",
            "_throws": [],
            "_returns": "byte[]",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.Buffer.remaining()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ObjectInputStream.readObject()",
            "_throws": [
              "java.io.IOException",
              "java.lang.ClassNotFoundException"
            ],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/liferay-portal/portal-service/test/unit/com/liferay/portal/kernel/io/SerializerTest.java",
      "types": [
        "ByteBuffer",
        "Integer",
        "Object",
        "ClassNotFoundException",
        "Buffer",
        "InputStream",
        "Date",
        "ObjectInputStream",
        "Long",
        "IOException"
      ],
      "apicalls": [
        "remaining",
        "array",
        "readObject"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date(long)",
            "java.nio.ByteBuffer.array()",
            "java.nio.Buffer.remaining()",
            "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
            "java.io.ObjectInputStream.readObject()"
          ]
        }
      ],
      "keywords": [
        "java",
        "found",
        "class",
        "util",
        "object",
        "nio",
        "exception",
        "input",
        "remaining",
        "io",
        "buffer",
        "byte",
        "stream",
        "read",
        "long",
        "array",
        "integer",
        "date"
      ]
    },
    {
      "method": "CategoryExplorerTree@66",
      "body": "/** \n * Construct a CategoryExplorerTree and create a default CategoryExplorerModel.\n */\npublic CategoryExplorerTree(){\n  super();\n  CategoryNode rootNode=new CategoryNode(\"Categories\");\n  _model=new CategoryExplorerModel(rootNode);\n  setModel(_model);\n  init();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTree.setModel(javax.swing.tree.TreeModel)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JTree.setEditable(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JTree.setCellEditor(javax.swing.tree.TreeCellEditor)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JTree.setShowsRootHandles(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.setToolTipText(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/des/daemon/lib/apache-log4j-1.2.16/src/main/java/org/apache/log4j/lf5/viewer/categoryexplorer/CategoryExplorerTree.java",
      "types": [
        "TreeCellEditor",
        "JComponent",
        "JTree",
        "String",
        "TreeModel",
        "Boolean",
        "Object",
        "TreeCellRenderer"
      ],
      "apicalls": [
        "setModel",
        "putClientProperty",
        "setToolTipText",
        "setEditable",
        "setCellEditor",
        "setCellRenderer",
        "setShowsRootHandles"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTree.setModel(javax.swing.tree.TreeModel)",
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "javax.swing.JTree.setEditable(boolean)",
            "javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)",
            "javax.swing.JTree.setCellEditor(javax.swing.tree.TreeCellEditor)",
            "javax.swing.JTree.setShowsRootHandles(boolean)",
            "javax.swing.JComponent.setToolTipText(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "put",
        "j",
        "property",
        "tool",
        "cell",
        "editable",
        "string",
        "object",
        "javax",
        "shows",
        "renderer",
        "editor",
        "tip",
        "text",
        "swing",
        "client",
        "tree",
        "model",
        "boolean",
        "handles",
        "set",
        "root",
        "component"
      ]
    },
    {
      "method": "onBorrow@76",
      "body": "public void onBorrow(JDBCDataStore store,Connection cx) throws SQLException {\n  if (sqlOnBorrow != null && !\"\".equals(sqlOnBorrow)) {\n    String command=sqlOnBorrow.evaluate(null,String.class);\n    Statement st=null;\n    try {\n      st=cx.createStatement();\n      st.execute(command);\n    }\n  finally {\n      store.closeSafe(st);\n    }\n  }\n}\n",
      "formalParam": [
        "JDBCDataStore",
        "Connection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.sql.Connection.createStatement()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.Statement"
              },
              {
                "_call": "java.sql.Statement.execute(java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geotools/modules/library/jdbc/src/main/java/org/geotools/jdbc/SessionCommandsListener.java",
      "types": [
        "Connection",
        "Statement",
        "Boolean",
        "SQLException",
        "String",
        "Object"
      ],
      "apicalls": [
        "execute",
        "equals",
        "createStatement"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.execute(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "execute",
        "string",
        "lang",
        "java",
        "object",
        "statement",
        "exception",
        "connection",
        "sql",
        "equals",
        "create"
      ]
    },
    {
      "method": "m@4",
      "body": "public void m(){\n  Integer i=3;\n  System.out.println(i.doubleValue());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.doubleValue()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(double)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/eclipse.jdt.ui/org.eclipse.jdt.ui.tests.refactoring/resources/InlineTemp/canInline/A_test34_in.java",
      "types": [
        "PrintStream",
        "Integer",
        "Double"
      ],
      "apicalls": [
        "println",
        "doubleValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.doubleValue()",
            "java.io.PrintStream.println(double)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "double",
        "value",
        "println",
        "integer",
        "print",
        "io",
        "java",
        "stream"
      ]
    },
    {
      "method": "getBase@30",
      "body": "public int getBase(NodeIdentifier id){\n  if (!map.containsKey(id))   return 0;\n  return map.get(id);\n}\n",
      "formalParam": [
        "NodeIdentifier"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.HashMap<java.lang.Integer,java.lang.Integer>.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.Integer,java.lang.Integer>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/DimaX/vieux_dcop/dcop_old/algo/topt/RewardMatrix.java",
      "types": [
        "HashMap",
        "Object",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "containsKey",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.HashMap<java.lang.Integer,java.lang.Integer>.containsKey(java.lang.Object)",
            "java.util.HashMap<java.lang.Integer,java.lang.Integer>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "contains",
        "hash",
        "util",
        "integer",
        "map",
        "key",
        "get",
        "java",
        "object",
        "boolean"
      ]
    },
    {
      "method": "apply@39",
      "body": "@Override public Hardware apply(OfferStruct from){\n  HardwareBuilder builder=new HardwareBuilder();\n  builder.ids(from.getName());\n  builder.name(from.getName());\n  builder.processors(ImmutableList.of(new Processor(Double.valueOf(from.getCores()),1.0)));\n  builder.ram(Integer.valueOf(from.getRam()));\n  builder.volumes(ImmutableList.<Volume>of(new VolumeImpl(Float.valueOf(from.getDiskSize()),true,false)));\n  return builder.build();\n}\n",
      "formalParam": [
        "OfferStruct"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Double.valueOf(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Double"
          },
          {
            "_call": "java.lang.Integer.valueOf(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.lang.Float.valueOf(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Float"
          }
        ]
      },
      "returnType": "Hardware",
      "file": "./java_projects/jclouds-ovh-compute/src/main/java/org/jclouds/ovh/compute/functions/OfferStructToHardware.java",
      "types": [
        "Double",
        "Integer",
        "String",
        "NumberFormatException",
        "Float"
      ],
      "apicalls": [
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.valueOf(java.lang.String)",
            "java.lang.Integer.valueOf(java.lang.String)",
            "java.lang.Float.valueOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "format",
        "number",
        "java",
        "lang",
        "double",
        "value",
        "exception",
        "float",
        "integer",
        "string"
      ]
    },
    {
      "method": "printAsXml@76",
      "body": "public static void printAsXml(Object o) throws JAXBException {\n  Writer sw=new StringWriter();\n  Marshaller marshaller=getJaxbContext().createMarshaller();\n  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);\n  marshaller.marshal(o,sw);\n  System.out.println(sw);\n  System.out.flush();\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.bind.JAXBContext"
          },
          {
            "_call": "javax.xml.bind.JAXBContext.createMarshaller()",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.bind.Marshaller"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/nuxeo-filesystem-connectors/nuxeo-webdav/src/main/java/org/nuxeo/ecm/webdav/Util.java",
      "types": [
        "PrintStream",
        "StringWriter",
        "Object",
        "JAXBContext",
        "JAXBException",
        "Marshaller",
        "Class"
      ],
      "apicalls": [
        "flush",
        "createMarshaller",
        "newInstance",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])",
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "java.io.PrintStream.println(java.lang.Object)",
            "java.io.PrintStream.flush()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "context",
        "new",
        "println",
        "writer",
        "io",
        "bind",
        "stream",
        "object",
        "instance",
        "create",
        "javax",
        "xml",
        "class",
        "java",
        "marshaller",
        "flush",
        "jaxb",
        "string",
        "print"
      ]
    },
    {
      "method": "stop@64",
      "body": "public void stop(){\n  if (invalidate_time == 0) {\n    invalidate_time=System.currentTimeMillis();\n    try {\n      Thread.sleep(10);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/felix/ipojo/tests/handler/whiteboard/src/main/java/org/apache/felix/ipojo/test/FooWhiteBoardPattern.java",
      "types": [
        "Thread",
        "Long",
        "InterruptedException",
        "System"
      ],
      "apicalls": [
        "currentTimeMillis",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "interrupted",
        "thread",
        "long",
        "system",
        "time",
        "sleep",
        "java",
        "millis",
        "exception",
        "lang",
        "current"
      ]
    },
    {
      "method": "createResponse@171",
      "formalParam": [
        "HTTPResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.String(byte[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "WFSResponse",
      "file": "./java_projects/geotools/modules/unsupported/wfs-ng/src/main/java/org/geotools/data/wfs/internal/WFSRequest.java",
      "body": "@Override public WFSResponse createResponse(HTTPResponse response) throws IOException {\n  final String contentType=response.getContentType();\n  if (contentType == null) {\n    Logging.getLogger(WFSRequest.class).warning(this.getOperation() + \" request returned null content type for URL \" + getFinalURL());\n  }\n  WFSResponseFactory responseFactory;\n  try {\n    responseFactory=WFSExtensions.findResponseFactory(this,contentType);\n  }\n catch (  FactoryNotFoundException fnf) {\n    Loggers.MODULE.log(Level.WARNING,fnf.getMessage());\n    try {\n      if (contentType != null && contentType.startsWith(\"text\")) {\n        byte buff[]=new byte[1024];\n        response.getResponseStream().read(buff);\n        Loggers.MODULE.info(\"Failed response snippet: \" + new String(buff));\n      }\n      throw fnf;\n    }\n catch (    Exception ignore) {\n      throw fnf;\n    }\n  }\n  WFSResponse wfsResponse=responseFactory.createResponse(this,response);\n  return wfsResponse;\n}\n",
      "types": [
        "Byte",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.String(byte[])"
          ]
        }
      ],
      "keywords": [
        "starts",
        "string",
        "boolean",
        "lang",
        "java",
        "byte"
      ]
    },
    {
      "method": "extend@15",
      "body": "public TypeEnvironment extend(Vector<String> vs,Vector<Type> ts){\n  Enumeration<String> ev=vs.elements();\n  Enumeration<Type> et=ts.elements();\n  TypeEnvironment e=this;\n  while (ev.hasMoreElements())   e=e.extend(ev.nextElement(),et.nextElement());\n  return e;\n}\n",
      "formalParam": [
        "Vector<String>",
        "Vector<Type>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<java.lang.String>.elements()",
            "_throws": [],
            "_returns": "java.util.Enumeration",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration<java.lang.String>.nextElement()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration<java.lang.String>.hasMoreElements()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "TypeEnvironment",
      "file": "./java_projects/NUS/CS4215/cs4215_week_6/simPL/TypeEnvironment.java",
      "types": [
        "Enumeration",
        "Boolean",
        "String",
        "Vector"
      ],
      "apicalls": [
        "hasMoreElements",
        "elements",
        "nextElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<java.lang.String>.elements()",
            "java.util.Enumeration<java.lang.String>.hasMoreElements()",
            "java.util.Enumeration<java.lang.String>.nextElement()",
            "java.util.Enumeration<java.lang.String>.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "elements",
        "enumeration",
        "boolean",
        "element",
        "string",
        "java",
        "vector",
        "util",
        "next"
      ]
    },
    {
      "method": "sendNotification@88",
      "body": "/** \n * sendNotification\n * @param eventType\n * @param data\n * @param msg\n */\npublic void sendNotification(String eventType,Object data,String msg){\n  Notification notif=new Notification(eventType,this,sequenceNumber.incrementAndGet(),System.currentTimeMillis(),msg);\n  if (data != null) {\n    notif.setUserData(data);\n  }\n  emitter.sendNotification(notif);\n}\n",
      "formalParam": [
        "String",
        "Object",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicLong.incrementAndGet()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hibernate-orm/hibernate-ehcache/src/main/java/org/hibernate/cache/ehcache/management/impl/BaseEmitterBean.java",
      "types": [
        "concurrent",
        "Long",
        "System"
      ],
      "apicalls": [
        "currentTimeMillis",
        "incrementAndGet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicLong.incrementAndGet()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "atomic",
        "system",
        "current",
        "millis",
        "long",
        "concurrent",
        "increment",
        "get",
        "java",
        "util",
        "time",
        "lang"
      ]
    },
    {
      "method": "shouldParseDECIMAL@551",
      "body": "@Test public void shouldParseDECIMAL(){\n  printTest(\"shouldParseDECIMAL()\");\n  String typeString=getDataTypeString(DataTypes.DTYPE_DECIMAL);\n  String content=typeString;\n  DdlTokenStream tokens=getTokens(content);\n  DataType dType=parser.parse(tokens);\n  Assert.assertNotNull(\"DataType was NOT found for Type = \" + typeString,dType);\n  Assert.assertEquals(\"Wrong DataType found\",typeString,dType.getName());\n  content=typeString + \" (5)\";\n  tokens=getTokens(content);\n  dType=parser.parse(tokens);\n  Assert.assertNotNull(\"DataType was NOT found for Type = \" + typeString,dType);\n  Assert.assertEquals(\"Wrong DataType found\",typeString,dType.getName());\n  Assert.assertEquals(\"DataType length is not correct\",5,dType.getPrecision());\n  content=typeString + \" (5, 2)\";\n  tokens=getTokens(content);\n  dType=parser.parse(tokens);\n  Assert.assertNotNull(\"DataType was NOT found for Type = \" + typeString,dType);\n  Assert.assertEquals(\"Wrong DataType found\",typeString,dType.getName());\n  Assert.assertEquals(\"DataType length is not correct\",5,dType.getPrecision());\n  Assert.assertEquals(\"DataType length is not correct\",2,dType.getScale());\n  content=typeString + \" (5  2)\";\n  tokens=getTokens(content);\n  dType=null;\n  try {\n    dType=parser.parse(tokens);\n  }\n catch (  ParsingException e) {\n  }\n  Assert.assertNull(\"DataType should NOT have been found for Type = \" + content,dType);\n  content=typeString + \" (5  A)\";\n  tokens=getTokens(content);\n  dType=null;\n  try {\n    dType=parser.parse(tokens);\n  }\n catch (  ParsingException e) {\n  }\n  Assert.assertNull(\"DataType should NOT have been found for Type = \" + content,dType);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/modeshape/sequencers/modeshape-sequencer-ddl/src/test/java/org/modeshape/sequencer/ddl/datatype/DataTypeParserTest.java",
      "types": [
        "String",
        "Object",
        "PrintStream",
        "StringBuffer"
      ],
      "apicalls": [
        "toString",
        "println",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "buffer",
        "string",
        "print",
        "object",
        "lang",
        "println",
        "io",
        "append",
        "java"
      ]
    },
    {
      "method": "generateUID@36",
      "body": "static public String generateUID(){\n  return (\"uid-\" + fourHex() + \"-\"+ fourHex()+ \"-\"+ fourHex()+ \"-\"+ fourHex());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toHexString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/NetMash/src/netmash/forest/UID.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "substring",
        "toHexString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toHexString(int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "substring",
        "java",
        "hex",
        "length",
        "string"
      ]
    },
    {
      "method": "empty@15",
      "body": "public static final <T>Iterator<T> empty(){\n  final Set<T> empty=Collections.emptySet();\n  return empty.iterator();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.emptySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Set<Tau_E>.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          }
        ]
      },
      "returnType": "Iterator<T>",
      "file": "./java_projects/jtoolkit/common/src/main/java/com/github/zhongl/jtoolkit/RecurseTree.java",
      "types": [
        "Set",
        "Iterator",
        "Collections"
      ],
      "apicalls": [
        "iterator",
        "emptySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.emptySet()",
            "java.util.Set<Tau_E>.iterator()"
          ]
        }
      ],
      "keywords": [
        "java",
        "collections",
        "set",
        "empty",
        "iterator",
        "util"
      ]
    },
    {
      "method": "process@69",
      "body": "public void process(final HttpRequest req,final HttpContext context) throws HttpException, IOException {\n  String encoding=getContentEncoding();\n  if (!req.containsHeader(ACCEPT_ENC_HDR))   req.addHeader(ACCEPT_ENC_HDR,encoding);\n else {\n    StringBuilder values=new StringBuilder();\n    for (    Header h : req.getHeaders(ACCEPT_ENC_HDR))     values.append(h.getValue()).append(\",\");\n    String encList=(!values.toString().contains(encoding)) ? values.append(encoding).toString() : values.toString().substring(0,values.lastIndexOf(\",\"));\n    req.setHeader(ACCEPT_ENC_HDR,encList);\n  }\n}\n",
      "formalParam": [
        "HttpRequest",
        "HttpContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.StringBuilder.lastIndexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.StringBuilder.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.contains(java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              },
              {
                "_call": "java.lang.StringBuilder.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/rest-assured/rest-assured/src/main/java/com/jayway/restassured/internal/http/ContentEncoding.java",
      "types": [
        "Object",
        "CharSequence",
        "Integer",
        "Boolean",
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "append",
        "lastIndexOf",
        "contains",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()",
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.StringBuilder.toString()",
            "java.lang.StringBuilder.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()",
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "substring",
        "java",
        "char",
        "sequence",
        "builder",
        "string",
        "index",
        "object",
        "contains",
        "boolean",
        "append",
        "last",
        "lang",
        "integer"
      ]
    },
    {
      "method": "merge@560",
      "body": "/** \n * {@inheritDoc}\n * @see org.jboss.shrinkwrap.api.Archive#merge(org.jboss.shrinkwrap.api.Archive,org.jboss.shrinkwrap.api.Path,org.jboss.shrinkwrap.api.Filter)\n */\n@Override public T merge(Archive<?> source,ArchivePath path,Filter<ArchivePath> filter) throws IllegalArgumentException {\n  Validate.notNull(source,\"No source archive was specified\");\n  Validate.notNull(path,\"No path was specified\");\n  Validate.notNull(filter,\"No filter was specified\");\n  final Map<ArchivePath,Node> sourceContent=source.getContent();\n  Validate.notNull(sourceContent,\"Source archive content can not be null.\");\n  for (  final Entry<ArchivePath,Node> contentEntry : sourceContent.entrySet()) {\n    final Node node=contentEntry.getValue();\n    ArchivePath nodePath=new BasicPath(path,contentEntry.getKey());\n    if (!filter.include(nodePath)) {\n      continue;\n    }\n    if (node.getAsset() == null) {\n      addAsDirectory(nodePath);\n    }\n else {\n      add(node.getAsset(),nodePath);\n    }\n  }\n  return covariantReturn();\n}\n",
      "formalParam": [
        "Archive<?>",
        "ArchivePath",
        "Filter<ArchivePath>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.cast(java.lang.Object)",
                "_throws": [],
                "_returns": "Tau_T",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "T",
      "file": "./java_projects/shrinkwrap/impl-base/src/main/java/org/jboss/shrinkwrap/impl/base/ArchiveBase.java",
      "types": [
        "Object",
        "String",
        "Level",
        "Logger",
        "Class"
      ],
      "apicalls": [
        "cast",
        "log"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.cast(java.lang.Object)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.cast(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "cast",
        "logger",
        "log",
        "string",
        "level",
        "logging",
        "object",
        "class",
        "lang",
        "java",
        "util"
      ]
    },
    {
      "method": "testPropertiesSeries@27",
      "body": "public void testPropertiesSeries(){\n  File workspaceDirFile=new File(\"target/test-classes/\");\n  FilePath workspaceRootDir=new FilePath(workspaceDirFile);\n  System.out.println(\"workspace path path: \" + workspaceDirFile.getAbsolutePath());\n  PropertiesSeries propSeries=new PropertiesSeries(files[0],labels[0]);\n  testSeries(propSeries,files[0],labels[0],\"properties\");\n  PlotPoint[] points=propSeries.loadSeries(workspaceRootDir,System.err);\n  testPlotPoints(points,1);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/plot-plugin/src/test/java/hudson/plugins/plot/PropertiesSeriesTest.java",
      "types": [
        "String",
        "PrintStream",
        "File"
      ],
      "apicalls": [
        "println",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "path",
        "io",
        "print",
        "file",
        "println",
        "java",
        "string",
        "absolute",
        "get"
      ]
    },
    {
      "method": "print@575",
      "body": "public void print(final Icon icon){\n  if (icon == null) {\n    return;\n  }\n  invokeAndWait(new Runnable(){\n    public void run(){\n      text.insertIcon(icon);\n      resetCommandStart();\n      text.setCaretPosition(cmdStart);\n    }\n  }\n);\n}\n",
      "formalParam": [
        "Icon"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "node": "DExcept",
                "_catch": [
                  {
                    "_call": "java.lang.Throwable.printStackTrace()",
                    "_throws": [],
                    "_returns": "void",
                    "node": "DAPICall"
                  }
                ],
                "_try": [
                  {
                    "_call": "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)",
                    "_throws": [
                      "java.lang.InterruptedException",
                      "java.lang.reflect.InvocationTargetException"
                    ],
                    "_returns": "void",
                    "node": "DAPICall"
                  }
                ]
              }
            ],
            "_else": [
              {
                "_call": "java.lang.Runnable.run()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$javax.swing.SwingUtilities.isEventDispatchThread()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/clj-swingrepl/src/jvm/bsh/util/JConsole.java",
      "types": [
        "Throwable",
        "InterruptedException",
        "SwingUtilities",
        "Runnable",
        "InvocationTargetException",
        "Boolean"
      ],
      "apicalls": [
        "printStackTrace",
        "invokeAndWait",
        "isEventDispatchThread",
        "run"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Runnable.run()"
          ]
        }
      ],
      "keywords": [
        "stack",
        "utilities",
        "invocation",
        "swing",
        "wait",
        "boolean",
        "event",
        "exception",
        "trace",
        "target",
        "runnable",
        "interrupted",
        "run",
        "thread",
        "java",
        "lang",
        "throwable",
        "invoke",
        "dispatch",
        "javax",
        "print"
      ]
    },
    {
      "method": "create@25",
      "body": "public void create(T entity){\n  try {\n    getEntityManager().persist(entity);\n  }\n catch (  EJBException e) {\n    Logger.getLogger(AbstractVersionedFacade.class.getName()).log(Level.SEVERE,null,e);\n  }\n}\n",
      "formalParam": [
        "T"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.logging.Logger.getLogger(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.logging.Logger"
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Graneles-SRL/GranelesWeb/src/main/java/com/orco/graneles/model/AbstractFacade.java",
      "types": [
        "String",
        "Logger",
        "Class",
        "Level",
        "Object"
      ],
      "apicalls": [
        "getName",
        "log",
        "getLogger"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.util.logging.Logger.getLogger(java.lang.String)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "log",
        "java",
        "class",
        "util",
        "logging",
        "object",
        "name",
        "string",
        "level",
        "lang",
        "logger"
      ]
    },
    {
      "method": "run@50",
      "body": "@Override public void run(){\n  if (debug)   steamID=sr.getDB().getPlayerSteam(debugName);\n else   steamID=sr.getDB().getPlayerSteam(player.getName());\n  if (steamID == null) {\n    if (Properties.showNoSteamID) {\n      sendMessage(Properties.noSteamIDMsg,player);\n      SeedReward.log(Level.INFO,\"No steamID found for \" + player.getName());\n    }\n    taskCleanup();\n    return;\n  }\n  if (steamID.equals(\"Database access error\")) {\n    if (Properties.showDBError) {\n      sendMessage(Properties.DBErrorMsg,player);\n      SeedReward.log(Level.INFO,\"SteamID access error on lookup for \" + player.getName());\n    }\n    taskCleanup();\n    return;\n  }\n  if (!steamID.matches(\"STEAM_\\\\d:\\\\d:\\\\d+?\")) {\n    if (Properties.showNoSteamID) {\n      sendMessage(Properties.noSteamIDMsg,player);\n      SeedReward.log(Level.INFO,\"Malformed steamID for \" + player.getName() + \": \"+ steamID);\n    }\n    taskCleanup();\n    return;\n  }\n  sr.getDB().connectToDB();\n  dbRecord=sr.getDB().getPlayerReward(steamID);\n  reward=dbRecord.getReward();\n  if (reward == null) {\n    if (Properties.showDBError) {\n      sendMessage(Properties.DBErrorMsg,player);\n      SeedReward.log(Level.INFO,\"DB Error, null reward for \" + player.getName());\n    }\n    taskCleanup();\n    return;\n  }\n  if (reward == 0) {\n    SeedReward.log(Level.INFO,\"Found no reward for \" + player.getName());\n    if (Properties.showNoRewardMsg)     sendMessage(Properties.noRewardMsg,player,reward);\n    if (Properties.showNoRewardServerMsg)     sendMessage(Properties.noRewardServerMsg,player,reward,true);\n    taskCleanup();\n    return;\n  }\n  if (sr.getDB().rewardPlayer(player,reward)) {\n    if (sr.getDB().resetPlayerReward(steamID)) {\n      if (Properties.showRewardMsg)       sendMessage(Properties.rewardMsg,player,reward);\n      if (Properties.showRewardServerMsg)       sendMessage(Properties.rewardServerMsg,player,reward,true);\n      if (dbRecord.getName() == null)       SeedReward.log(Level.INFO,\"Player \" + player.getName() + \" awarded \"+ reward.toString()+ \" ducats for seeding (\"+ steamID+ \")\");\n else       SeedReward.log(Level.INFO,\"Player \" + player.getName() + \" awarded \"+ reward.toString()+ \" ducats for seeding (\"+ steamID+ \": \"+ dbRecord.getName()+ \")\");\n    }\n else {\n      if (sr.getDB().chargePlayer(player,reward)) {\n        SeedReward.log(Level.WARNING,\"Rewarded player successfully but DB reset failed: \" + player.getName());\n        if (Properties.showDBError)         sendMessage(Properties.DBErrorMsg,player,reward);\n      }\n else {\n        SeedReward.log(Level.WARNING,\"Player \" + player.getName() + \" received his seeding reward when the reward database reset failed.\");\n      }\n    }\n  }\n else {\n    SeedReward.log(Level.WARNING,\"Failed to reward player, database reset not attempted for \" + player.getName());\n    if (Properties.showDBError)     sendMessage(Properties.DBErrorMsg,player);\n  }\n  taskCleanup();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.lang.String.matches(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SeedReward/src/main/java/com/noheroes/seedreward/internals/PlayerLookupThread.java",
      "types": [
        "Object",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "matches",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "$NOT$java.lang.String.matches(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "equals",
        "lang",
        "object",
        "matches",
        "string",
        "boolean"
      ]
    },
    {
      "method": "endSession@93",
      "body": "public static void endSession(){\n  if (sKeyLocationFile == null) {\n    return;\n  }\n  try {\n    sKeyLocationFile.close();\n    String out=DateFormat.format(\"MM:dd hh:mm:ss\",Calendar.getInstance().getTime()).toString() + \" BS: \" + sBackspaceCount+ \" auto: \"+ sAutoSuggestCount+ \" manual: \"+ sManualSuggestCount+ \" typed: \"+ sWordNotInDictionaryCount+ \" undone: \"+ sAutoSuggestUndoneCount+ \" saved: \"+ ((float)(sActualChars - sTypedChars) / sActualChars)+ \"\\n\";\n    sUserActionFile.write(out.getBytes());\n    sUserActionFile.close();\n    sKeyLocationFile=null;\n    sUserActionFile=null;\n  }\n catch (  IOException ioe) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileOutputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "node": "DAPICall",
            "_returns": "java.util.Date",
            "_throws": []
          },
          {
            "_call": "java.lang.String.getBytes()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.FileOutputStream.write(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.FileOutputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Gingerbread-Keyboard/src/com/android/inputmethod/latin/TextEntryState.java",
      "types": [
        "Calendar",
        "IOException",
        "String",
        "FileOutputStream",
        "Byte",
        "Date"
      ],
      "apicalls": [
        "getBytes",
        "close",
        "getTime",
        "write",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileOutputStream.close()",
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()",
            "java.lang.String.getBytes()",
            "java.io.FileOutputStream.write(byte[])",
            "java.io.FileOutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "string",
        "close",
        "time",
        "stream",
        "bytes",
        "exception",
        "instance",
        "java",
        "io",
        "date",
        "output",
        "get",
        "byte",
        "lang",
        "write",
        "file",
        "calendar",
        "util"
      ]
    },
    {
      "method": "toString@219",
      "body": "public String toString(){\n  String idsFileStr=getString((int)idsFile) + \" / \";\n  Object o=idsMap.get(idsValue);\n  if (o == null)   return idsFileStr + \"Unknown value - \" + idsValue;\n else   if (o instanceof IdsMapEntry)   return idsFileStr + idsMap.get(idsValue).toString();\n else   return idsFileStr + idsMap.get(idsValue).toString() + \" - \"+ idsValue;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(int)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/NearInfinity/infinity/datatype/IDSTargetEffect.java",
      "types": [
        "Object",
        "String",
        "StringBuffer",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "toString",
        "append",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(int)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "append",
        "integer",
        "lang",
        "boolean",
        "object",
        "string",
        "buffer",
        "equals"
      ]
    },
    {
      "method": "deepCopy@9721",
      "body": "public queryStatusIdList_result deepCopy(){\n  return new queryStatusIdList_result(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Long>.ArrayList<Long>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.Long>.add(java.lang.Long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "queryStatusIdList_result",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "List",
        "Long",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Long>.ArrayList<Long>()",
            "java.util.List<java.lang.Long>.add(java.lang.Long)"
          ]
        }
      ],
      "keywords": [
        "array",
        "list",
        "util",
        "java",
        "add",
        "boolean",
        "long"
      ]
    },
    {
      "method": "accept@54",
      "body": "public boolean accept(File dir,String name){\n  if (newerThan > 0 && newerThan > new File(dir,name).lastModified())   return false;\n  if (pattern.matcher(name).matches()) {\n    lastMatch=name;\n    return true;\n  }\n  lastMatch=null;\n  return false;\n}\n",
      "formalParam": [
        "File",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.lastModified()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Matcher.matches()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/fiji/src-plugins/fake/src/main/java/fiji/build/GlobFilter.java",
      "types": [
        "CharSequence",
        "Long",
        "Pattern",
        "String",
        "File",
        "Boolean",
        "Matcher"
      ],
      "apicalls": [
        "matches",
        "lastModified",
        "matcher"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.lastModified()",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "pattern",
        "char",
        "io",
        "long",
        "java",
        "util",
        "file",
        "modified",
        "string",
        "matcher",
        "regex",
        "last",
        "matches",
        "sequence",
        "boolean"
      ]
    },
    {
      "method": "setBlogfeedUrl@894",
      "body": "public void setBlogfeedUrl(String blogfeedUrl){\n  ListField photo=getListFieldWithType(BLOGFEED_TYPE,getPhotos());\n  if (photo != null) {\n    photo.setValue(blogfeedUrl);\n  }\n else {\n    setPhotos(addListField(new ListFieldImpl(BLOGFEED_TYPE,blogfeedUrl),getPhotos()));\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sandbox/opensocial/xwiki-shindig-samplesmock/src/main/java/org/xwiki/opensocial/social/mock/model/PersonXW.java",
      "types": [
        "String",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "equalsIgnoreCase",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "ignore",
        "add",
        "case",
        "string",
        "boolean",
        "java",
        "util",
        "equals",
        "lang",
        "list"
      ]
    },
    {
      "method": "ImageProcessingThread@136",
      "body": "public ImageProcessingThread(GraphicSet objects,LaserProfile p){\n  this.set=objects;\n  this.p=p;\n  bb=set.getBoundingBox();\n  if (bb == null || bb.getWidth() == 0 || bb.getHeight() == 0) {\n    logger.log(Level.SEVERE,\"invalid BoundingBox\");\n    throw new IllegalArgumentException(\"Boundingbox zero\");\n  }\n}\n",
      "formalParam": [
        "GraphicSet",
        "LaserProfile"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.geom.RectangularShape.getWidth()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.awt.geom.RectangularShape.getHeight()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/VisiCut/src/com/t_oster/visicut/gui/beans/PreviewPanel.java",
      "types": [
        "Logger",
        "String",
        "Level",
        "Double",
        "RectangularShape"
      ],
      "apicalls": [
        "log",
        "getWidth",
        "getHeight"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.RectangularShape.getWidth()",
            "java.awt.geom.RectangularShape.getHeight()"
          ]
        },
        {
          "calls": [
            "java.awt.geom.RectangularShape.getWidth()",
            "java.awt.geom.RectangularShape.getHeight()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "logger",
        "java",
        "get",
        "log",
        "double",
        "level",
        "width",
        "height",
        "util",
        "shape",
        "rectangular",
        "string",
        "logging",
        "awt",
        "geom"
      ]
    },
    {
      "method": "createWriter@1549",
      "formalParam": [
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "PrintWriter",
      "file": "./java_projects/mawLib/src/mxj/trunk/mawLib-mxj/src/net/christopherbaker/xml/XMLElement.java",
      "body": "/** \n * I want to print lines to a file. Why am I always explaining myself? It's the JavaSoft API engineers who need to explain themselves.\n */\nstatic public PrintWriter createWriter(OutputStream output){\n  try {\n    OutputStreamWriter osw=new OutputStreamWriter(output,\"UTF-8\");\n    return new PrintWriter(osw);\n  }\n catch (  UnsupportedEncodingException e) {\n  }\n  return null;\n}\n",
      "types": [
        "String",
        "OutputStream",
        "PrintWriter",
        "OutputStreamWriter",
        "Writer",
        "UnsupportedEncodingException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "string",
        "encoding",
        "exception",
        "writer",
        "output",
        "print",
        "io",
        "java",
        "stream"
      ]
    },
    {
      "method": "getAvailableIDs@165",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.TreeSet<java.lang.String>.TreeSet<String>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Set<String>",
      "file": "./java_projects/joda-time/src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
      "body": "/** \n * Gets a list of all the available zone ids.\n * @return the zone ids\n */\npublic Set<String> getAvailableIDs(){\n  return new TreeSet<String>(iZoneInfoMap.keySet());\n}\n",
      "types": [
        "Collection",
        "Set",
        "String",
        "Map",
        "Object",
        "TreeSet"
      ],
      "apicalls": [
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "java.util.TreeSet<java.lang.String>.TreeSet<String>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "java",
        "tree",
        "key",
        "string",
        "util",
        "set",
        "object",
        "map"
      ]
    },
    {
      "method": "updateDatabaseQuery@153",
      "body": "/** \n * Update a database, connected with c, with given request.\n * @param c\n * @param query\n * @throws SQLException\n */\npublic static void updateDatabaseQuery(Connection c,String query) throws SQLException {\n  Statement stmt=c.createStatement();\n  stmt.execute(query);\n  stmt.close();\n}\n",
      "formalParam": [
        "Connection",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.createStatement()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "java.sql.Statement",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.Statement.execute(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/db2triples/src/main/java/net/antidot/sql/model/core/SQLConnector.java",
      "types": [
        "SQLException",
        "String",
        "Connection",
        "Statement",
        "Boolean"
      ],
      "apicalls": [
        "execute",
        "close",
        "createStatement"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.execute(java.lang.String)",
            "java.sql.Statement.close()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "connection",
        "statement",
        "create",
        "java",
        "exception",
        "execute",
        "string",
        "close",
        "sql"
      ]
    },
    {
      "method": "getSuffix@929",
      "body": "public String getSuffix(){\n  StringBuffer sb=new StringBuffer();\n  for (Iterator<String> iter=suffixes.iterator(); iter.hasNext(); ) {\n    sb.append(iter.next());\n  }\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<java.lang.String>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/JGit/org.spearce.egit.ui/src/org/spearce/egit/ui/internal/preferences/GitDecoratorPreferencePage.java",
      "types": [
        "List",
        "String",
        "Iterator",
        "Boolean",
        "StringBuffer"
      ],
      "apicalls": [
        "hasNext",
        "append",
        "iterator",
        "toString",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.util.List<java.lang.String>.iterator()",
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.next()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "next",
        "iterator",
        "append",
        "buffer",
        "list",
        "java",
        "util",
        "boolean"
      ]
    },
    {
      "method": "setUnfocusedTextColor@72",
      "body": "public void setUnfocusedTextColor(int[] col){\n  System.arraycopy(col,0,mUnfocusedTextColor,0,3);\n  mNext.setTextColor(Color.argb(255,col[0],col[1],col[2]));\n  mPrevious.setTextColor(Color.argb(255,col[0],col[1],col[2]));\n  updateColor(0);\n}\n",
      "formalParam": [
        "int[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Math.abs(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Math.min(float,float)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "float"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Eco-Metrics/src/com/bbmcsolutions/ecometrics/metrics.java",
      "types": [
        "Integer",
        "System",
        "Math",
        "Float",
        "Object"
      ],
      "apicalls": [
        "arraycopy",
        "min",
        "abs"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.Math.abs(int)",
            "java.lang.Math.min(float,float)"
          ]
        }
      ],
      "keywords": [
        "abs",
        "lang",
        "java",
        "system",
        "min",
        "object",
        "arraycopy",
        "float",
        "integer",
        "math"
      ]
    },
    {
      "method": "getFeedEntries@51",
      "body": "public List<FeedEntryDTO> getFeedEntries(String feedURL){\n  try {\n    List<FeedEntryDTO> feedEntryDTOs=new ArrayList<FeedEntryDTO>();\n    log.debug(\"connecting to feed URL: \" + feedURL);\n    URL feedSource=new URL(feedURL);\n    SyndFeedInput input=new SyndFeedInput();\n    SyndFeed syndFeed=input.build(new XmlReader(feedSource));\n    log.debug(\"starting conversion from feed URL: \" + feedURL);\n    Feed feed=convertSyndFeed(syndFeed);\n    for (    Object o : syndFeed.getEntries()) {\n      SyndEntry syndEntry=(SyndEntry)o;\n      FeedEntry fe=convertSyndEntry(syndEntry);\n      fe.setTitlePrefix(\"(\" + feed.getTitle() + \") \");\n      feed.getFeedEntries().add(fe);\n      FeedEntryDTO dto=new FeedEntryDTO(feed,fe);\n      feedEntryDTOs.add(dto);\n    }\n    log.debug(\"retrieved feed entries: \" + feedEntryDTOs.size());\n    return feedEntryDTOs;\n  }\n catch (  SocketTimeoutException timeoutEx) {\n    log.warn(\"timeout connecting to feed: \" + feedURL + \", \"+ timeoutEx.getMessage());\n  }\ncatch (  IllegalArgumentException iaEx) {\n    log.warn(\"could not connect to feed: \" + feedURL + \", \"+ iaEx.getMessage());\n  }\ncatch (  MalformedURLException urlEx) {\n    log.warn(\"URL is not valid: \" + feedURL + \", \"+ urlEx.getMessage());\n  }\ncatch (  IOException ioEx) {\n    log.warn(\"could not connect to feed: \" + feedURL + \", \"+ ioEx.getMessage());\n  }\ncatch (  FeedException fex) {\n    log.warn(\"could not marshall feed data: \" + feedURL + \", \"+ fex.getMessage());\n  }\n  return Collections.EMPTY_LIST;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.net.MalformedURLException"
            ]
          }
        ]
      },
      "returnType": "List<FeedEntryDTO>",
      "file": "./java_projects/Seam_2_3/examples/wiki/src/main/org/jboss/seam/wiki/connectors/feed/RomeFeedConnector.java",
      "types": [
        "MalformedURLException",
        "URL",
        "ArrayList",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.net.URL.URL(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "url",
        "net",
        "util",
        "malformed",
        "exception",
        "java",
        "string",
        "list",
        "array"
      ]
    },
    {
      "method": "withAlarmNames@92",
      "body": "/** \n * The names of the alarms to enable actions for. <p> Returns a reference to this object so that method calls can be chained together. <p> <b>Constraints:</b><br/> <b>Length: </b>0 - 100<br/>\n * @param alarmNames The names of the alarms to enable actions for.\n * @return A reference to this updated object so that method calls can be chained together. \n */\npublic EnableAlarmActionsRequest withAlarmNames(java.util.Collection<String> alarmNames){\n  if (alarmNames == null) {\n    this.alarmNames=null;\n  }\n else {\n    java.util.List<String> alarmNamesCopy=new java.util.ArrayList<String>(alarmNames.size());\n    alarmNamesCopy.addAll(alarmNames);\n    this.alarmNames=alarmNamesCopy;\n  }\n  return this;\n}\n",
      "formalParam": [
        "java.util.Collection<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "EnableAlarmActionsRequest",
      "file": "./java_projects/aws-sdk-for-android/src/com/amazonaws/services/cloudwatch/model/EnableAlarmActionsRequest.java",
      "types": [
        "Boolean",
        "Collection",
        "ArrayList",
        "String",
        "Integer",
        "List"
      ],
      "apicalls": [
        "addAll",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.String>.size()",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "java.util.List<java.lang.String>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "array",
        "collection",
        "size",
        "integer",
        "java",
        "add",
        "util",
        "string",
        "list"
      ]
    },
    {
      "method": "getDouble@243",
      "body": "/** \n * Get a double value from the metadata using the key (key=value)\n * @param key\n * @return\n */\npublic double getDouble(String key){\n  String metadata=getMetaDataStartsWith(key + \"=\");\n  if (metadata == null) {\n    return 0;\n  }\n  return Double.parseDouble(metadata.substring((key + \"=\").length()));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Double.parseDouble(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/LWC/src/main/java/com/griefcraft/model/History.java",
      "types": [
        "Integer",
        "Double",
        "Boolean",
        "String",
        "NumberFormatException"
      ],
      "apicalls": [
        "parseDouble",
        "substring",
        "length",
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.Double.parseDouble(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "double",
        "format",
        "length",
        "substring",
        "java",
        "starts",
        "exception",
        "number",
        "lang",
        "integer",
        "string",
        "parse",
        "boolean"
      ]
    },
    {
      "method": "main@8",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.nanoTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.nanoTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.nanoTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.nanoTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/scala-parallel/jsr166/src/test/loops/Sync100M.java",
      "body": "public static void main(String[] args) throws Exception {\n  int x=loop((int)System.nanoTime(),100000);\n  x=loop(x,100000);\n  x=loop(x,100000);\n  long start=System.nanoTime();\n  x=loop(x,100000000);\n  if (x == 0)   System.out.print(\" \");\n  long time=System.nanoTime() - start;\n  double secs=(double)time / 1000000000.0;\n  System.out.println(\"time: \" + secs);\n  start=System.nanoTime();\n  x=loop(x,100000000);\n  if (x == 0)   System.out.print(\" \");\n  time=System.nanoTime() - start;\n  secs=(double)time / 1000000000.0;\n  System.out.println(\"time: \" + secs);\n}\n",
      "types": [
        "PrintStream",
        "System",
        "Long",
        "String"
      ],
      "apicalls": [
        "println",
        "nanoTime",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.nanoTime()",
            "java.io.PrintStream.print(java.lang.String)",
            "java.lang.System.nanoTime()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.System.nanoTime()",
            "java.io.PrintStream.print(java.lang.String)",
            "java.lang.System.nanoTime()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "system",
        "println",
        "java",
        "long",
        "string",
        "io",
        "time",
        "lang",
        "stream",
        "nano"
      ]
    },
    {
      "method": "clone@1877",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "isSuccess_result",
      "file": "./java_projects/Flume-Hive/src/gen-java/com/cloudera/flume/conf/thrift/FlumeMasterAdminServer.java",
      "body": "@Deprecated public isSuccess_result clone(){\n  return new isSuccess_result(this);\n}\n",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "or",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "clear",
        "set",
        "bit",
        "java",
        "util"
      ]
    },
    {
      "method": "start@70",
      "body": "/** \n * starts a specific screen using its identifier\n * @param id the screen identifier (or location)\n */\npublic void start(int id){\n  Screen screen=screens.get(id);\n  if (screen != null && !screen.isRunning()) {\n    Thread thread=new Thread(screen);\n    thread.start();\n    add(screen.getContentPane());\n  }\n else {\n    Logger.getLogger(ScreenManager.class).error(\"screen \" + id + \" is not available.\");\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/OlympicPhoneBox/src/olympic/screens/ScreenManager.java",
      "types": [
        "Component",
        "Container",
        "Thread",
        "Runnable"
      ],
      "apicalls": [
        "start",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.awt.Container.add(java.awt.Component)"
          ]
        }
      ],
      "keywords": [
        "thread",
        "lang",
        "container",
        "java",
        "runnable",
        "awt",
        "start",
        "add",
        "component"
      ]
    },
    {
      "method": "testReadLineCancelling@277",
      "body": "public void testReadLineCancelling() throws Exception {\n  final CyclicBarrier syncA=new CyclicBarrier(2);\n  final CyclicBarrier syncB=new CyclicBarrier(2);\n  final AtomicReference<String> line=new AtomicReference<String>();\n  processor.addListener(term);\n  term.publish(TermEvent.readLine(\"foo\"));\n  shell.publish(new ShellRunnable(){\n    public void run(    ShellProcessContext context) throws Exception {\n      try {\n        syncA.await();\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n      String s=context.readLine(\"hello\",true);\n      if (s == null) {\n        s=\"cancelled\";\n      }\n      line.set(s);\n      try {\n        syncB.await();\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n      context.write(new Text(\"foo\"));\n      context.end(ShellResponse.ok());\n    }\n  }\n);\n  syncA.await();\n  while (!processor.isWaitingEvent()) {\n  }\n  term.publish(TermEvent.brk());\n  syncB.await();\n  assertEquals(\"cancelled\",line.get());\n  term.publish(TermEvent.close());\n  assertJoin(thread);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicReference<java.lang.String>.AtomicReference<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicReference<java.lang.String>.get()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/crash/shell/core/src/test/java/org/crsh/processor/term/AbstractProcessorTestCase.java",
      "types": [
        "concurrent",
        "String"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicReference<java.lang.String>.AtomicReference<String>()",
            "java.util.concurrent.atomic.AtomicReference<java.lang.String>.get()"
          ]
        }
      ],
      "keywords": [
        "atomic",
        "concurrent",
        "util",
        "string",
        "get",
        "reference",
        "java"
      ]
    },
    {
      "method": "BrokerItem@47",
      "body": "/** \n * Used where registering item\n * @param item\n * @param price\n * @param seller\n * @param sellerId\n * @param sold\n * @param itemBrokerRace\n */\npublic BrokerItem(Item item,long price,String seller,int sellerId,BrokerRace itemBrokerRace){\n  this.item=item;\n  this.itemId=item.getItemTemplate().getTemplateId();\n  this.itemUniqueId=item.getObjectId();\n  this.itemCount=item.getItemCount();\n  this.price=price;\n  this.seller=seller;\n  this.sellerId=sellerId;\n  this.itemBrokerRace=itemBrokerRace;\n  this.isSold=false;\n  this.isSettled=false;\n  this.expireTime=new Timestamp(Calendar.getInstance().getTimeInMillis() + 691200000);\n  this.settleTime=new Timestamp(Calendar.getInstance().getTimeInMillis());\n  this.state=PersistentState.NEW;\n}\n",
      "formalParam": [
        "Item",
        "long",
        "String",
        "int",
        "BrokerRace"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.sql.Timestamp.Timestamp(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.sql.Timestamp.Timestamp(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/aion_ext/gameserver/src/org/openaion/gameserver/model/gameobjects/BrokerItem.java",
      "types": [
        "Long",
        "Timestamp",
        "Calendar"
      ],
      "apicalls": [
        "getTimeInMillis",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.sql.Timestamp.Timestamp(long)",
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.sql.Timestamp.Timestamp(long)"
          ]
        }
      ],
      "keywords": [
        "time",
        "long",
        "get",
        "instance",
        "util",
        "java",
        "sql",
        "millis",
        "calendar",
        "timestamp"
      ]
    },
    {
      "method": "testGetConnection@30",
      "body": "public void testGetConnection() throws Exception {\n  this.init();\n  Connection con=this.datasource.getConnection();\n  assertTrue(\"Connection should implement javax.sql.PooledConnection\",con instanceof PooledConnection);\n  Connection actual=((PooledConnection)con).getConnection();\n  assertNotNull(\"Connection delegate should not be null.\",actual);\n  System.out.println(\"Actual connection:\" + actual.getClass().getName());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/tomcat70/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestGetConnection.java",
      "types": [
        "String",
        "PrintStream",
        "Class"
      ],
      "apicalls": [
        "getName",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "get",
        "println",
        "name",
        "class",
        "stream",
        "print",
        "io",
        "string"
      ]
    },
    {
      "method": "lastModified@381",
      "body": "public long lastModified(){\n  return (isFileSystem() ? super.lastModified() : 0L);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/awt/shell/ShellFolder.java",
      "types": [
        "Boolean",
        "File",
        "String"
      ],
      "apicalls": [
        "startsWith",
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getPath()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "path",
        "boolean",
        "string",
        "starts",
        "file",
        "io",
        "get",
        "lang",
        "java"
      ]
    },
    {
      "method": "convertToString@14",
      "body": "public static String convertToString(InputStream is) throws Exception {\n  BufferedReader reader=new BufferedReader(new InputStreamReader(is),8192);\n  StringBuffer sb=new StringBuffer();\n  String line=null;\n  try {\n    while ((line=reader.readLine()) != null) {\n      sb.append(line + \"\\n\");\n    }\n  }\n  finally {\n    is.close();\n  }\n  return sb.toString();\n}\n",
      "formalParam": [
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.BufferedReader.readLine()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/PearsonDictionaryAndroid/src/com/pearson/pandpsample/dictionary/remote/InputStreamConverter.java",
      "types": [
        "Reader",
        "Integer",
        "InputStreamReader",
        "InputStream",
        "IOException",
        "String",
        "BufferedReader",
        "StringBuffer"
      ],
      "apicalls": [
        "readLine",
        "append",
        "close",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader,int)",
            "java.lang.StringBuffer.StringBuffer()",
            "java.io.BufferedReader.readLine()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.io.BufferedReader.readLine()",
            "java.io.InputStream.close()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffered",
        "stream",
        "buffer",
        "append",
        "read",
        "integer",
        "io",
        "string",
        "close",
        "input",
        "exception",
        "line",
        "reader",
        "java",
        "lang"
      ]
    },
    {
      "method": "toSet@136",
      "body": "/** \n * To set.\n * @param < T > the generic type\n * @param objects the objects\n * @return the sets the\n */\npublic static <T>Set<T> toSet(final T... objects){\n  return set(objects);\n}\n",
      "formalParam": [
        "T"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Set<T>",
      "file": "./java_projects/turmeric-eclipse/plugins/org.ebayopensource.turmeric.eclipse.utils/src/org/ebayopensource/turmeric/eclipse/utils/collections/SetUtil.java",
      "types": [
        "HashSet",
        "Boolean",
        "Set"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Set<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "set",
        "util",
        "java",
        "add",
        "hash"
      ]
    },
    {
      "method": "debugPageFormat@90",
      "body": "public String debugPageFormat(){\n  String returned=\"Page format \";\n  returned+=\"Paper=\" + debugPaper(_pageFormat.getPaper()) + \" \";\n  returned+=\"Orientation=\" + (_pageFormat.getOrientation() == PageFormat.PORTRAIT ? \"PORTRAIT\" : \"\") + (_pageFormat.getOrientation() == PageFormat.LANDSCAPE ? \"LANDSCAPE\" : \"\")+ (_pageFormat.getOrientation() == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" : \"\")+ \" \";\n  returned+=\"Dimensions=(\" + _pageFormat.getWidth() + \"x\"+ _pageFormat.getHeight()+ \",[\"+ _pageFormat.getImageableWidth()+ \"x\"+ _pageFormat.getImageableHeight()+ \",\"+ _pageFormat.getImageableX()+ \",\"+ _pageFormat.getImageableY()+ \"])\";\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(returned);\n  }\n  return returned;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexo/src/main/java/org/openflexo/print/PrintManager.java",
      "types": [
        "String",
        "Logger",
        "Level",
        "Boolean"
      ],
      "apicalls": [
        "isLoggable",
        "fine"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "fine",
        "logger",
        "string",
        "boolean",
        "loggable",
        "logging",
        "java",
        "util",
        "level"
      ]
    },
    {
      "method": "getPayload@138",
      "body": "/** \n * Gets the payload.\n * @param request the request\n * @param response the response\n * @return the payload\n * @throws IOException Signals that an I/O exception has occurred.\n */\n@RequestMapping(method=RequestMethod.GET,params={\"seqNumber\"}) public String getPayload(final HttpServletRequest request,final HttpServletResponse response) throws IOException {\n  final Locale locale=request.getLocale();\n  if ((request.getParameter(\"card\") == null) || (request.getParameter(\"case\") == null)) {\n    this.saveError(request,this.getText(\"payloadVersions.cardNotFound\",locale));\n    return \"\";\n  }\n  final String cardId=request.getParameter(\"card\");\n  final String caseId=request.getParameter(\"case\");\n  final AlphaCard currentCard=this.alphaCardManager.get(new AlphaCardIdentifier(caseId,cardId));\n  final Payload payload=this.payloadManager.getVersion(new PayloadIdentifier(currentCard.getPayload().getPayloadIdentifier().getPayloadId(),Long.parseLong(request.getParameter(\"seqNumber\"))));\n  if (payload != null) {\n    final BufferedInputStream in=new BufferedInputStream(new ByteArrayInputStream(payload.getContent()));\n    response.setBufferSize(payload.getContent().length);\n    response.setContentType(payload.getMimeType());\n    response.setHeader(\"Content-Disposition\",\"attachment; filename=\\\"\" + payload.getFilename() + \"\\\"\");\n    response.setContentLength(payload.getContent().length);\n    FileCopyUtils.copy(in,response.getOutputStream());\n    in.close();\n    response.getOutputStream().flush();\n    response.getOutputStream().close();\n  }\n  return \"redirect:/payloadVersions?case=\" + currentCard.getAlphaCardIdentifier().getCaseId() + \"&card=\"+ currentCard.getAlphaCardIdentifier().getCardId();\n}\n",
      "formalParam": [
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.BufferedInputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/alphaportal_dev/sys-src/alphaportal/web/src/main/java/alpha/portal/webapp/controller/PayloadVersionsController.java",
      "types": [
        "NumberFormatException",
        "ByteArrayInputStream",
        "String",
        "BufferedInputStream",
        "InputStream",
        "IOException",
        "Long",
        "Byte"
      ],
      "apicalls": [
        "parseLong",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.parseLong(java.lang.String)",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "java.io.BufferedInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "format",
        "input",
        "long",
        "stream",
        "parse",
        "buffered",
        "array",
        "exception",
        "close",
        "string",
        "java",
        "io",
        "number",
        "byte"
      ]
    },
    {
      "method": "toArrayType@967",
      "body": "public TypeDesc toArrayType(){\n  if (mArrayType == null) {\n    int length=mDescriptor.length();\n    char[] buf=new char[length + 1];\n    buf[0]='[';\n    mDescriptor.getChars(0,length,buf,1);\n    mArrayType=intern(new ArrayType(new String(buf),this));\n  }\n  return mArrayType;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.getChars(int,int,char[],int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.String(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.concat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "TypeDesc",
      "file": "./java_projects/teatrove/trove/src/main/java/org/teatrove/trove/classfile/TypeDesc.java",
      "types": [
        "Integer",
        "String",
        "Character"
      ],
      "apicalls": [
        "concat",
        "getChars",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.getChars(int,int,char[],int)",
            "java.lang.String.String(char[])",
            "java.lang.String.concat(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "concat",
        "chars",
        "length",
        "integer",
        "character",
        "get",
        "java"
      ]
    },
    {
      "method": "getShort@104",
      "body": "public static short getShort(Map<String,?> map,String key,short defaultValue){\n  return GetterUtil.getShort(getString(map,key,String.valueOf(defaultValue)),defaultValue);\n}\n",
      "formalParam": [
        "Map<String,?>",
        "String",
        "short"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.valueOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.lang.String.valueOf(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "short",
      "file": "./java_projects/liferay-portal/portal-service/src/com/liferay/portal/kernel/util/MapUtil.java",
      "types": [
        "Map",
        "String",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "get",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.valueOf(int)",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.lang.String.valueOf(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "util",
        "map",
        "integer",
        "java",
        "object",
        "get",
        "string",
        "value"
      ]
    },
    {
      "method": "fromString@363",
      "body": "public static ENTITY fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,java.lang.String content){\n  if (content.indexOf(\":\") > -1) {\n    java.lang.String prefix=content.substring(0,content.indexOf(\":\"));\n    java.lang.String namespaceUri=xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);\n    return ENTITY.Factory.fromString(content,namespaceUri);\n  }\n else {\n    return ENTITY.Factory.fromString(content,\"\");\n  }\n}\n",
      "formalParam": [
        "javax.xml.stream.XMLStreamReader",
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "javax.xml.stream.XMLStreamReader.getNamespaceContext()",
                "node": "DAPICall",
                "_returns": "javax.xml.namespace.NamespaceContext",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "ENTITY",
      "file": "./java_projects/axis2-java/modules/adb/src/org/apache/axis2/databinding/types/xsd/ENTITY.java",
      "types": [
        "Integer",
        "NamespaceContext",
        "String",
        "XMLStreamReader"
      ],
      "apicalls": [
        "indexOf",
        "substring",
        "getNamespaceContext"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "javax.xml.stream.XMLStreamReader.getNamespaceContext()"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "index",
        "get",
        "xml",
        "string",
        "lang",
        "integer",
        "java",
        "context",
        "namespace",
        "stream",
        "reader",
        "substring"
      ]
    },
    {
      "method": "parse@79",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated modifiable\n */\npublic Object parse(ElementInstance instance,Node node,Object value) throws Exception {\n  DescribeVersionedFeatureTypeType describeFeatureType=wfsvFactory.createDescribeVersionedFeatureTypeType();\n  WFSBindingUtils.service(describeFeatureType,node);\n  WFSBindingUtils.version(describeFeatureType,node);\n  WFSBindingUtils.outputFormat(describeFeatureType,node,\"XMLSCHEMA\");\n  if (\"1.0.0\".equals(describeFeatureType.getVersion()))   describeFeatureType.setOutputFormat(\"XMLSCHEMA\");\n  describeFeatureType.getTypeName().addAll(node.getChildValues(QName.class));\n  if (node.hasAttribute(\"versioned\"))   describeFeatureType.setVersioned(((Boolean)node.getAttributeValue(\"versioned\")).booleanValue());\n  return describeFeatureType;\n}\n",
      "formalParam": [
        "ElementInstance",
        "Node",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Boolean.booleanValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/geoserver/src/community/wfsv/src/main/java/org/geoserver/wfsv/xml/v1_1_0/DescribeVersionedFeatureTypeTypeBinding.java",
      "types": [
        "Object",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals",
        "booleanValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Boolean.booleanValue()"
          ]
        }
      ],
      "keywords": [
        "object",
        "string",
        "value",
        "boolean",
        "lang",
        "java",
        "equals"
      ]
    },
    {
      "method": "before@42",
      "body": "@BeforeClass public static void before() throws Exception {\n  ModelUtils.createWorkflowProject(\"workflows\",ResourcesPlugin.getWorkspace().getRoot(),true,null);\n  DataProjectUtils.createDataProject(\"data\",ResourcesPlugin.getWorkspace().getRoot(),true,null);\n  ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());\n  final IProject data=ResourcesPlugin.getWorkspace().getRoot().getProject(\"data\");\n  final File dir=new File(System.getProperty(\"org.dawb.large.folder\"));\n  if (!dir.exists())   throw new Exception(\"Please set the large files folder system property and ensure it exists, 'org.dawb.large.folder'\");\n  final IFolder folder=data.getFolder(dir.getName());\n  folder.createLink(dir.toURI(),IResource.DEPTH_ONE,null);\n  folder.refreshLocal(IResource.DEPTH_ONE,null);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.toURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/dawn-ui/org.dawb.workbench.ui.test/src/org/dawb/workbench/ui/editors/test/LargeFilesTest.java",
      "types": [
        "String",
        "System",
        "URI",
        "Boolean",
        "File"
      ],
      "apicalls": [
        "getProperty",
        "getName",
        "exists",
        "toURI"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "java.io.File.getName()",
            "java.io.File.toURI()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "file",
        "property",
        "uri",
        "name",
        "java",
        "system",
        "io",
        "exists",
        "get",
        "boolean"
      ]
    },
    {
      "method": "containsEntity@66",
      "body": "/** \n * Determine if this meta model contains the described persistent class.\n * @param entityClass class that we are looking for\n * @return {@code true} if it is contained, else {@code false}\n */\npublic boolean containsEntity(Class<?> entityClass){\n  boolean found=entityDefinitionsMap.containsKey(entityClass);\n  if (!found && entityClass.getSuperclass() != null) {\n    found=containsEntity(entityClass.getSuperclass());\n  }\n  return found;\n}\n",
      "formalParam": [
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.getSuperclass()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Class"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.getSuperclass()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Class"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/jarb/jarb-populator-excel/src/main/java/org/jarbframework/populator/excel/metamodel/MetaModel.java",
      "types": [
        "Class"
      ],
      "apicalls": [
        "getSuperclass"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getSuperclass()"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getSuperclass()",
            "java.lang.Class<Tau_T>.getSuperclass()"
          ]
        }
      ],
      "keywords": [
        "get",
        "class",
        "lang",
        "superclass",
        "java"
      ]
    },
    {
      "method": "test_Expression_Constructor_OneArgument_senario1@1206",
      "body": "public void test_Expression_Constructor_OneArgument_senario1() throws Exception {\n  Object[] arguments=new Object[]{\"test\"};\n  Expression expression=new Expression(SampleObject.class,\"new\",arguments);\n  assertTrue(expression.getValue() instanceof SampleObject);\n  SampleObject.assertCalled(\"string\",arguments);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Object>.toArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object[]"
          },
          {
            "_call": "java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Object>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/ExpressionTest.java",
      "types": [
        "Object",
        "Boolean",
        "ArrayList",
        "Arrays"
      ],
      "apicalls": [
        "clear",
        "toArray",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Object>.toArray()",
            "java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])",
            "java.util.ArrayList<java.lang.Object>.clear()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "equals",
        "arrays",
        "list",
        "array",
        "clear",
        "java",
        "util",
        "object"
      ]
    },
    {
      "method": "testDoFilterAuthenticatedInvalidType@552",
      "body": "public void testDoFilterAuthenticatedInvalidType() throws Exception {\n  AuthenticationFilter filter=new AuthenticationFilter();\n  try {\n    FilterConfig config=Mockito.mock(FilterConfig.class);\n    Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn(DummyAuthenticationHandler.class.getName());\n    Mockito.when(config.getInitParameterNames()).thenReturn(new Vector(Arrays.asList(AuthenticationFilter.AUTH_TYPE)).elements());\n    filter.init(config);\n    HttpServletRequest request=Mockito.mock(HttpServletRequest.class);\n    Mockito.when(request.getRequestURL()).thenReturn(new StringBuffer(\"http://foo:8080/bar\"));\n    AuthenticationToken token=new AuthenticationToken(\"u\",\"p\",\"invalidtype\");\n    token.setExpires(System.currentTimeMillis() + 1000);\n    Signer signer=new Signer(\"alfredo\".getBytes());\n    String tokenSigned=signer.sign(token.toString());\n    Cookie cookie=new Cookie(AuthenticatedURL.AUTH_COOKIE,tokenSigned);\n    Mockito.when(request.getCookies()).thenReturn(new Cookie[]{cookie});\n    HttpServletResponse response=Mockito.mock(HttpServletResponse.class);\n    FilterChain chain=Mockito.mock(FilterChain.class);\n    Mockito.doAnswer(new Answer(){\n      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {\n        fail();\n        return null;\n      }\n    }\n).when(chain).doFilter(Mockito.<ServletRequest>anyObject(),Mockito.<ServletResponse>anyObject());\n    final Cookie[] setCookie=new Cookie[1];\n    Mockito.doAnswer(new Answer(){\n      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {\n        Object[] args=invocation.getArguments();\n        setCookie[0]=(Cookie)args[0];\n        return null;\n      }\n    }\n).when(response).addCookie(Mockito.<Cookie>anyObject());\n    filter.doFilter(request,response,chain);\n    Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_UNAUTHORIZED),Mockito.anyString());\n    assertNotNull(setCookie[0]);\n    assertEquals(AuthenticatedURL.AUTH_COOKIE,setCookie[0].getName());\n    assertEquals(\"\",setCookie[0].getValue());\n  }\n  finally {\n    filter.destroy();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.Vector.Vector(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cdh3u3-with-mesos/hadoop-0.20.2-cdh3u3/src/test/org/apache/hadoop/security/authentication/server/TestAuthenticationFilter.java",
      "types": [
        "List",
        "Arrays",
        "Long",
        "Enumeration",
        "String",
        "Class",
        "Collection",
        "Vector",
        "StringBuffer",
        "System"
      ],
      "apicalls": [
        "currentTimeMillis",
        "getBytes",
        "elements",
        "asList",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.util.Arrays.asList(T[])",
            "java.util.Vector.Vector(java.util.Collection)",
            "java.util.Vector.elements()",
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.System.currentTimeMillis()",
            "java.lang.String.getBytes()"
          ]
        }
      ],
      "keywords": [
        "get",
        "string",
        "elements",
        "class",
        "arrays",
        "millis",
        "buffer",
        "lang",
        "current",
        "time",
        "vector",
        "name",
        "enumeration",
        "system",
        "long",
        "util",
        "collection",
        "list",
        "bytes",
        "java"
      ]
    },
    {
      "method": "ltrim@56",
      "body": "/** \n * Trims specified string from left.\n * @param s\n */\npublic static String ltrim(String s){\n  if (s == null) {\n    return null;\n  }\n  int index=0;\n  int len=s.length();\n  while (index < len && Character.isWhitespace(s.charAt(index))) {\n    index++;\n  }\n  return (index >= len) ? \"\" : s.substring(index);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              },
              {
                "_call": "java.lang.Character.isWhitespace(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/kolmafia/lib/org/htmlcleaner/Utils.java",
      "types": [
        "Integer",
        "Character",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "substring",
        "charAt",
        "length",
        "isWhitespace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Character.isWhitespace(char)",
            "java.lang.String.charAt(int)",
            "java.lang.Character.isWhitespace(char)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "whitespace",
        "java",
        "character",
        "length",
        "boolean",
        "string",
        "lang",
        "substring",
        "char"
      ]
    },
    {
      "method": "ProgressPopup@37",
      "formalParam": [
        "String",
        "ActionListener",
        "JFrame"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.GridBagLayout.GridBagLayout()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JButton.JButton(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/QuakeInjector/src/de/haukerehfeld/quakeinjector/gui/ProgressPopup.java",
      "body": "public ProgressPopup(String description,ActionListener cancel,JFrame frame){\n  super(frame,description,true);\n  setLocationRelativeTo(frame);\n  this.description=description;\n  setLayout(new GridBagLayout());\n  progress=new JProgressBar();\n  progress.setString(description);\n  progress.setValue(0);\n  progress.setIndeterminate(true);\n  progress.setStringPainted(true);\n  add(progress,new GridBagConstraints(){\n{\n      anchor=CENTER;\n      gridx=0;\n      fill=BOTH;\n      weightx=1;\n    }\n  }\n);\n  JButton cancelButton;\n  cancelButton=new JButton(\"Cancel\");\n  cancelButton.addActionListener(cancel);\n  add(cancelButton,new GridBagConstraints(){\n{\n      anchor=CENTER;\n      fill=BOTH;\n      gridy=1;\n    }\n  }\n);\n}\n",
      "types": [
        "Container",
        "Window",
        "ActionListener",
        "JButton",
        "AbstractButton",
        "String",
        "Object",
        "Component",
        "GridBagLayout"
      ],
      "apicalls": [
        "addActionListener",
        "add",
        "setLocationRelativeTo"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
            "java.awt.GridBagLayout.GridBagLayout()",
            "java.awt.Container.add(java.awt.Component,java.lang.Object)",
            "javax.swing.JButton.JButton(java.lang.String)",
            "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "java.awt.Container.add(java.awt.Component,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "add",
        "action",
        "java",
        "awt",
        "component",
        "listener",
        "relative",
        "location",
        "bag",
        "j",
        "swing",
        "container",
        "string",
        "javax",
        "set",
        "object",
        "grid",
        "window",
        "abstract",
        "layout",
        "button"
      ]
    },
    {
      "method": "hashCode@141",
      "body": "@Override public int hashCode(){\n  return Integer.valueOf(id).hashCode();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.valueOf(int)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/soarrobot/SoarRobotServer/src/main/java/edu/umich/robot/metamap/VirtualObjectImpl.java",
      "types": [
        "Integer"
      ],
      "apicalls": [
        "hashCode",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.valueOf(int)",
            "java.lang.Integer.hashCode()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "lang",
        "value",
        "java",
        "integer",
        "code"
      ]
    },
    {
      "method": "undoOrRedo@356",
      "body": "/** \n * Convenience method that invokes one of <code>undo</code> or <code>redo</code>. If any edits have been undone (the index of the next edit is less than the length of the edits list) this invokes <code>redo</code>, otherwise it invokes <code>undo</code>.\n * @see #canUndoOrRedo\n * @see #getUndoOrRedoPresentationName\n * @throws CannotUndoException if one of the edits throws<code>CannotUndoException</code>\n * @throws CannotRedoException if one of the edits throws<code>CannotRedoException</code>\n */\npublic synchronized void undoOrRedo() throws CannotRedoException, CannotUndoException {\n  if (indexOfNextAdd == edits.size()) {\n    undo();\n  }\n else {\n    redo();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.Vector.elementAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Vector.elementAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Vector.elementAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Vector.elementAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/undo/UndoManager.java",
      "types": [
        "Object",
        "Integer",
        "Vector"
      ],
      "apicalls": [
        "elementAt",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.elementAt(int)",
            "java.util.Vector.elementAt(int)"
          ]
        },
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.size()",
            "java.util.Vector.elementAt(int)",
            "java.util.Vector.elementAt(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "object",
        "element",
        "vector",
        "util",
        "size",
        "java"
      ]
    },
    {
      "method": "addImageColumn@176",
      "body": "public FastReportBuilder addImageColumn(String title,String property,int width,boolean fixedWidth,ImageScaleMode imageScaleMode) throws ColumnBuilderException, ClassNotFoundException {\n  String className=InputStream.class.getName();\n  AbstractColumn column=ColumnBuilder.getNew().setColumnProperty(property,className).setWidth(new Integer(width)).setTitle(title).setFixedWidth(Boolean.valueOf(fixedWidth)).setColumnType(ColumnBuilder.COLUMN_TYPE_IMAGE).setImageScaleMode(imageScaleMode).build();\n  guessStyle(className,column);\n  addColumn(column);\n  return this;\n}\n",
      "formalParam": [
        "String",
        "String",
        "int",
        "boolean",
        "ImageScaleMode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Boolean.valueOf(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Boolean"
          }
        ]
      },
      "returnType": "FastReportBuilder",
      "file": "./java_projects/DynamicJasper/src/main/java/ar/com/fdvs/dj/domain/builders/FastReportBuilder.java",
      "types": [
        "String",
        "Integer",
        "Class",
        "Boolean"
      ],
      "apicalls": [
        "valueOf",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Integer.Integer(int)",
            "java.lang.Boolean.valueOf(boolean)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "string",
        "name",
        "value",
        "integer",
        "class",
        "java",
        "get"
      ]
    },
    {
      "method": "HistoryAction@260",
      "body": "public HistoryAction(int testingSessionIndex,ITestingSession testingSession){\n  super(\"\",AS_RADIO_BUTTON);\n  this.testingSession=testingSession;\n  String label=testingSession.getName();\n  if (testingSessionIndex < 10) {\n    label=new StringBuilder().append('&').append(testingSessionIndex).append(' ').append(label).toString();\n  }\n  setText(label);\n}\n",
      "formalParam": [
        "int",
        "ITestingSession"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(int)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/cdt/testsrunner/org.eclipse.cdt.testsrunner/src/org/eclipse/cdt/testsrunner/internal/ui/view/actions/HistoryDropDownAction.java",
      "types": [
        "StringBuilder",
        "Integer",
        "String",
        "Character"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "append",
        "integer",
        "builder",
        "character",
        "java"
      ]
    },
    {
      "method": "refreshFont@120",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.diagram.ui/src/org/teiid/designer/diagram/ui/notation/uml/part/UmlClassifierContainerEditPart.java",
      "body": "/** \n * Update the positions of the association's labels\n */\n@Override public void refreshFont(boolean refreshChildren){\n  if (refreshChildren) {\n    List editPartChildren=getChildren();\n    Iterator iter=editPartChildren.iterator();\n    EditPart nextEP=null;\n    while (iter.hasNext()) {\n      nextEP=(EditPart)iter.next();\n      if (nextEP instanceof DiagramEditPart)       ((DiagramEditPart)nextEP).refreshFont(refreshChildren);\n    }\n  }\n  if (getDiagramFigure() != null) {\n    getDiagramFigure().refreshFont();\n    getDiagramFigure().layoutFigure();\n    ((DiagramModelNode)getModel()).setSize(getFigure().getSize());\n    ((DiagramModelNode)getModel()).setPosition(new Point(getFigure().getBounds().x,getFigure().getBounds().y));\n  }\n  refreshAllLabels();\n}\n",
      "types": [
        "Iterator",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "next",
        "iterator",
        "boolean",
        "list",
        "util"
      ]
    },
    {
      "method": "exists@189",
      "body": "public boolean exists(){\n  return new File(path).exists();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/TouchDB-Android/TouchDB-Android/src/com/couchbase/touchdb/TDDatabase.java",
      "types": [
        "Boolean",
        "String",
        "File"
      ],
      "apicalls": [
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "exists",
        "io",
        "file",
        "java",
        "boolean",
        "string"
      ]
    },
    {
      "method": "addParameter@54",
      "body": "@Override public final void addParameter(String name,String... values){\n  Validate.notNull(values,\"values can not be null\");\n  String[] valuesList=this.parameters.get(name);\n  if (valuesList == null) {\n    valuesList=Arrays.copyOf(values,values.length);\n  }\n else {\n    valuesList=ObjectArrays.concat(valuesList,values,String.class);\n  }\n  this.parameters.put(name,valuesList);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String[]>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.copyOf(T[],int)",
            "node": "DAPICall",
            "_returns": "T[]",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String[]>.put(java.lang.String,java.lang.String[])",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/uPortal/uportal-war/src/main/java/org/jasig/portal/url/AbstractUrlBuilder.java",
      "types": [
        "String",
        "Object",
        "Map",
        "Arrays",
        "Integer"
      ],
      "apicalls": [
        "get",
        "copyOf",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String[]>.get(java.lang.Object)",
            "java.util.Arrays.copyOf(T[],int)",
            "java.util.Map<java.lang.String,java.lang.String[]>.put(java.lang.String,java.lang.String[])"
          ]
        }
      ],
      "keywords": [
        "integer",
        "map",
        "string",
        "put",
        "arrays",
        "object",
        "get",
        "util",
        "java",
        "copy"
      ]
    },
    {
      "method": "cancel@65",
      "body": "public void cancel() throws WrongStateException, SystemException {\n  System.out.println(this.getClass().getName() + \".cancel for \" + this);\n  if (!_completed)   throw new SystemException();\n  if (_outcome == CANCEL)   _passed=true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/narayana/XTS/localjunit/WSTX/src/main/java/com/arjuna/wst/tests/common/DemoBusinessParticipantWithComplete.java",
      "types": [
        "PrintStream",
        "String",
        "Class"
      ],
      "apicalls": [
        "getName",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "class",
        "lang",
        "stream",
        "name",
        "io",
        "print",
        "get",
        "java",
        "println"
      ]
    },
    {
      "method": "remove@188",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.indexOf(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List.remove(int)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/PDF-to-unusual-HTML/PDF-to-unusual-HTML/src/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
      "body": "/** \n * {@inheritDoc}\n */\npublic boolean remove(Object o){\n  boolean retval=true;\n  int index=actual.indexOf(o);\n  if (index >= 0) {\n    actual.remove(index);\n    array.remove(index);\n  }\n else {\n    retval=false;\n  }\n  return retval;\n}\n",
      "types": [
        "Object",
        "List",
        "Integer"
      ],
      "apicalls": [
        "remove",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.indexOf(java.lang.Object)",
            "java.util.List.remove(int)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "java",
        "list",
        "integer",
        "index",
        "util",
        "object"
      ]
    },
    {
      "method": "sortChildren@233",
      "body": "public void sortChildren(){\n  Object[] childrenArray=children.toArray();\n  java.util.Arrays.sort(childrenArray);\n  removeAllChildren();\n  for (int i=0; i < childrenArray.length; i++)   add((JreepadNode)childrenArray[i]);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.toArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object[]"
          },
          {
            "_call": "java.util.Arrays.sort(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.tree.DefaultMutableTreeNode.removeAllChildren()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.tree.DefaultMutableTreeNode.add(javax.swing.tree.MutableTreeNode)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jreepad/src/jreepad/JreepadNode.java",
      "types": [
        "Vector",
        "DefaultMutableTreeNode",
        "Arrays",
        "MutableTreeNode",
        "Object"
      ],
      "apicalls": [
        "removeAllChildren",
        "toArray",
        "add",
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.toArray()",
            "java.util.Arrays.sort(java.lang.Object[])",
            "javax.swing.tree.DefaultMutableTreeNode.removeAllChildren()",
            "javax.swing.tree.DefaultMutableTreeNode.add(javax.swing.tree.MutableTreeNode)"
          ]
        }
      ],
      "keywords": [
        "swing",
        "array",
        "javax",
        "add",
        "java",
        "arrays",
        "default",
        "mutable",
        "vector",
        "node",
        "tree",
        "object",
        "util",
        "remove",
        "children",
        "sort"
      ]
    },
    {
      "method": "put@2376",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.String.valueOf(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/Json-lib/src/main/jdk15/net/sf/json/JSONObject.java",
      "body": "public Object put(String key,Object value){\n  if (key == null) {\n    throw new IllegalArgumentException(\"key is null.\");\n  }\n  Object previous=properties.get(key);\n  element(String.valueOf(key),value);\n  return previous;\n}\n",
      "types": [
        "Object",
        "Map",
        "String"
      ],
      "apicalls": [
        "get",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.get(java.lang.Object)",
            "java.lang.String.valueOf(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "value",
        "util",
        "java",
        "get",
        "map",
        "string",
        "object",
        "lang"
      ]
    },
    {
      "method": "print@39",
      "body": "public StringBuffer print(int tab,StringBuffer output,boolean withOnDemand){\n  printIndent(tab,output).append(\"<SelectOnPackage:\");\n  for (int i=0; i < this.tokens.length; i++) {\n    if (i > 0)     output.append('.');\n    output.append(this.tokens[i]);\n  }\n  return output.append('>');\n}\n",
      "formalParam": [
        "int",
        "StringBuffer",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          }
        ]
      },
      "returnType": "StringBuffer",
      "file": "./java_projects/groovy-eclipse/jdt-patch/e42/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnPackageReference.java",
      "types": [
        "StringBuffer",
        "Character",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(char)"
          ]
        }
      ],
      "keywords": [
        "append",
        "string",
        "java",
        "buffer",
        "object",
        "character",
        "lang"
      ]
    },
    {
      "method": "testStore@102",
      "body": "@Test public void testStore() throws Exception {\n  config.update(new String[]{});\n  config.add(\"x\",new OpenersConfig.Opener(\"aa\",true,null));\n  config.add(\"x y z\",new OpenersConfig.Opener(\"a a\",true,new File(\"zzz z\")));\n  config.store();\n  assertEquals(\"x###aa@@@1@@@###x y z###a a@@@1@@@zzz z\",preferences.get(PREFERENCE_NAME,\"\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.prefs.Preferences.get(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ipscan/test/net/azib/ipscan/config/OpenersConfigTest.java",
      "types": [
        "String",
        "Preferences",
        "File"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.prefs.Preferences.get(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "util",
        "file",
        "prefs",
        "io",
        "get",
        "preferences"
      ]
    },
    {
      "method": "resolveIdent@654",
      "body": "/** \n * Resolve an identifier.\n * @param name      The identifier to resolve\n */\npublic Symbol resolveIdent(String name){\n  if (name.equals(\"\"))   return syms.errSymbol;\n  JavaFileObject prev=log.useSource(null);\n  try {\n    JCExpression tree=null;\n    for (    String s : name.split(\"\\\\.\",-1)) {\n      if (!SourceVersion.isIdentifier(s))       return syms.errSymbol;\n      tree=(tree == null) ? make.Ident(names.fromString(s)) : make.Select(tree,names.fromString(s));\n    }\n    JCCompilationUnit toplevel=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());\n    toplevel.packge=syms.unnamedPackage;\n    return attr.attribIdent(tree,toplevel);\n  }\n  finally {\n    log.useSource(prev);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.split(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          }
        ]
      },
      "returnType": "Symbol",
      "file": "./java_projects/openjdk7-langtools/src/share/classes/com/sun/tools/javac/main/JavaCompiler.java",
      "types": [
        "Object",
        "Integer",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "split",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.split(java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "boolean",
        "equals",
        "object",
        "java",
        "split",
        "string",
        "lang"
      ]
    },
    {
      "method": "main@39",
      "body": "public static void main(String[] args){\n  try {\n    XDocReportRegistry.getRegistry().setDebugger(SysOutDebugger.INSTANCE);\n    IXDocReport report=XDocReportRegistry.getRegistry().loadReport(DocXHelloWordWithVelocity.class.getResourceAsStream(\"DocXHelloWordWithVelocity.docx\"),TemplateEngineKind.Velocity);\n    IContext context=report.createContext();\n    context.put(\"name\",\"world\");\n    Options options=Options.getTo(ConverterTypeTo.FO);\n    report.convert(context,options,System.err);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  XDocConverterException e) {\n    e.printStackTrace();\n  }\ncatch (  XDocReportException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.io.InputStream",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xdocreport/sandbox/fr.opensagres.xdocreport.examples/src/main/java/fr/opensagres/xdocreport/examples/msword/docx/converter/fo/DocXHelloWordWithVelocity2FO.java",
      "types": [
        "Class",
        "String",
        "Throwable",
        "InputStream"
      ],
      "apicalls": [
        "printStackTrace",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "throwable",
        "string",
        "lang",
        "stack",
        "print",
        "input",
        "trace",
        "java",
        "get",
        "class",
        "resource"
      ]
    },
    {
      "method": "run@51",
      "body": "public void run(){\n  for (; ; ) {\n    try {\n      final Boolean command=commands.take();\n      if (!command) {\n        return;\n      }\n      Thread.sleep(PROCESSING_WAIT_SLEEPING);\n    }\n catch (    InterruptedException e) {\n      LOG.trace(\"Processing thread interrupted, now exiting\");\n      Thread.currentThread().interrupt();\n      return;\n    }\n    processPendingOperations();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Thread"
              },
              {
                "_call": "java.lang.Thread.interrupt()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.BlockingQueue<java.lang.Boolean>.take()",
                "_throws": [
                  "java.lang.InterruptedException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Boolean"
              },
              {
                "_call": "java.lang.Thread.sleep(long)",
                "_throws": [
                  "java.lang.InterruptedException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/java-maven-tests/src/thread-tx-test/src/main/java/net/threadtxtest/service/internal/impl/ProcessingServiceImpl.java",
      "types": [
        "Long",
        "InterruptedException",
        "Thread",
        "BlockingQueue",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "interrupt",
        "sleep",
        "currentThread",
        "take"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.BlockingQueue<java.lang.Boolean>.take()",
            "java.lang.Thread.sleep(long)"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.BlockingQueue<java.lang.Boolean>.take()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()"
          ]
        }
      ],
      "keywords": [
        "take",
        "queue",
        "current",
        "sleep",
        "long",
        "boolean",
        "concurrent",
        "java",
        "integer",
        "util",
        "exception",
        "lang",
        "thread",
        "blocking",
        "interrupted",
        "interrupt"
      ]
    },
    {
      "method": "copy@61",
      "body": "/** \n * @apilevel internal\n */\n@SuppressWarnings({\"unchecked\",\"cast\"}) public ArrayInit copy(){\n  try {\n    ArrayInit node=(ArrayInit)clone();\n    if (children != null)     node.children=(ASTNode[])children.clone();\n    return node;\n  }\n catch (  CloneNotSupportedException e) {\n  }\n  System.err.println(\"Error: Could not clone node of type \" + getClass().getName() + \"!\");\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "ArrayInit",
      "file": "./java_projects/soot/generated/jastadd/soot/JastAddJ/ArrayInit.java",
      "types": [
        "PrintStream",
        "String",
        "Class"
      ],
      "apicalls": [
        "println",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "get",
        "name",
        "lang",
        "string",
        "print",
        "io",
        "println",
        "class",
        "java",
        "stream"
      ]
    },
    {
      "method": "testListIteratorReverse@140",
      "body": "public void testListIteratorReverse(){\n  for (int i=0; i < _lists.length; i++) {\n    ListIterator itr=_lists[i].listIterator(100);\n    int count=99;\n    for (; itr.hasPrevious(); count--) {\n      assertEquals(count,itr.previousIndex());\n      assertEquals(String.valueOf(count),itr.previous());\n    }\n    assertEquals(-1,count);\n    try {\n      itr.previous();\n      fail(\"Before first.\");\n    }\n catch (    IndexOutOfBoundsException ioob) {\n    }\ncatch (    NoSuchElementException nse) {\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ListIterator.previousIndex()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.valueOf(int)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.ListIterator.previous()",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ListIterator.hasPrevious()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          },
          {
            "_call": "java.util.ListIterator.previous()",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java",
      "types": [
        "ListIterator",
        "String",
        "Integer",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "hasPrevious",
        "valueOf",
        "previousIndex",
        "previous"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ListIterator.hasPrevious()",
            "java.util.ListIterator.previousIndex()",
            "java.lang.String.valueOf(int)",
            "java.util.ListIterator.previous()",
            "java.util.ListIterator.hasPrevious()",
            "java.util.ListIterator.previous()"
          ]
        }
      ],
      "keywords": [
        "string",
        "previous",
        "lang",
        "list",
        "boolean",
        "index",
        "value",
        "iterator",
        "object",
        "util",
        "integer",
        "java"
      ]
    },
    {
      "method": "run@97",
      "formalParam": [
        "HttpComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fed4j/src/main/java/com/jute/fed4j/engine/component/http/HttpDispatcherImpl_Jakarta.java",
      "body": "public void run(HttpComponent component){\n  this.commponent=component;\n  HttpParams params=new BasicHttpParams();\n  HttpConnectionParams.setConnectionTimeout(params,component.connectTimeout);\n  HttpConnectionParams.setSoTimeout(params,component.readTimeout);\n  try {\n    this.init(component);\n    HttpClient httpclient=new MyHttpClient(getConnectionManager(params,component.enablePersistentConnection),params);\n    if (component.enableProxy && \"http\".equals(component.proxyType)) {\n      HttpHost proxy=new HttpHost(component.proxyHost,component.proxyPort,component.proxyType);\n      httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);\n    }\n    HttpUriRequest request=new HttpRequest(component.method,component.uri);\n    MyHttpResponseHandler responseHandler=new MyHttpResponseHandler(component.responseCharset);\n    String body=httpclient.execute(request,responseHandler);\n    this.onResponse(component,responseHandler.code,body);\n  }\n catch (  SocketTimeoutException e) {\n    onException(component,-2,\" socket timeout error occurs: \" + e.getMessage());\n  }\ncatch (  ClientProtocolException e) {\n    onException(component,-3,\" error resposed from server: \" + e.getMessage());\n  }\ncatch (  IOException e) {\n    onException(component,-4,\" error occurs during dispatch: \" + e.getMessage());\n  }\ncatch (  Exception e) {\n    onException(component,-5,\"error occurs during parsing xml:\" + e.getMessage());\n  }\n}\n",
      "types": [
        "Throwable",
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "message",
        "object",
        "throwable",
        "string",
        "get",
        "java",
        "boolean",
        "equals",
        "lang"
      ]
    },
    {
      "method": "run@190",
      "body": "@Override public int run(String[] args) throws Exception {\n  parseParameters(args);\n  try {\n    run();\n    return 0;\n  }\n  finally {\n    if (jt != null) {\n      jt.getTaskScheduler().terminate();\n    }\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/hadoop-20/src/contrib/mumak/src/java/org/apache/hadoop/mapred/SimulatorEngine.java",
      "types": [
        "String",
        "Character",
        "PrintStream",
        "System",
        "Class",
        "Long"
      ],
      "apicalls": [
        "getName",
        "getProperty",
        "currentTimeMillis",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "current",
        "long",
        "java",
        "time",
        "class",
        "print",
        "stream",
        "system",
        "lang",
        "string",
        "character",
        "property",
        "name",
        "get",
        "millis",
        "println",
        "io"
      ]
    },
    {
      "method": "getWord@28",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.toUpperCase(char)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/AnySoftKeyboardTools/DictionaryCreator/src/com/anysoftkeyboard/dictionarycreator/ParserThread.java",
      "body": "public String getWord(){\n  if ((mFreq * 0.90) < mCapitalFreq)   return Character.toUpperCase(mWord.charAt(0)) + mWord.substring(1);\n else   return mWord;\n}\n",
      "types": [
        "String",
        "Character",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "toUpperCase",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.charAt(int)",
            "java.lang.Character.toUpperCase(char)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "lang",
        "string",
        "integer",
        "char",
        "character",
        "upper",
        "case",
        "java"
      ]
    },
    {
      "method": "toString@158",
      "body": "/** \n * Provides a more user readable string for TestResult, if possible \n */\n@Override public String toString(){\n  StringBuilder output=new StringBuilder();\n  if (mTestClass != null) {\n    output.append(mTestClass);\n    output.append('#');\n  }\n  if (mTestName != null) {\n    output.append(mTestName);\n  }\n  if (output.length() > 0) {\n    return output.toString();\n  }\n  return \"unknown result\";\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuilder.toString()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuilder.length()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/platform_cts/tools/tradefed-host/src/com/android/cts/tradefed/testtype/GeeTestResultParser.java",
      "types": [
        "String",
        "StringBuilder",
        "Character",
        "Integer"
      ],
      "apicalls": [
        "append",
        "length",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.length()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "java",
        "append",
        "length",
        "builder",
        "integer",
        "character"
      ]
    },
    {
      "method": "done@46",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet<java.lang.Runnable>.HashSet<Runnable>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Runnable.run()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.Runnable>.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/org.openscada.aurora/org.openscada.utils/src/org/openscada/utils/concurrent/internal/FutureTaskNotifier.java",
      "body": "public void done(){\n  Set<FutureListener<T>> listeners;\n  final Set<Runnable> runnables;\nsynchronized (this.lock) {\n    if (this.done) {\n      return;\n    }\n    this.done=true;\n    listeners=new HashSet<FutureListener<T>>(this.listeners);\n    runnables=new HashSet<Runnable>(this.runnables);\n  }\n  for (  final FutureListener<T> listener : listeners) {\n    try {\n      listener.complete(this.future);\n    }\n catch (    final Throwable e) {\n    }\n  }\n  for (  final Runnable runnable : runnables) {\n    try {\n      runnable.run();\n    }\n catch (    final Throwable e) {\n    }\n  }\n  this.listeners.clear();\n  this.runnables.clear();\n}\n",
      "types": [
        "Collection",
        "Set",
        "Runnable",
        "HashSet"
      ],
      "apicalls": [
        "clear",
        "run"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)",
            "java.util.HashSet<java.lang.Runnable>.HashSet<Runnable>(java.util.Collection)",
            "java.lang.Runnable.run()",
            "java.util.Set<java.lang.Runnable>.clear()"
          ]
        }
      ],
      "keywords": [
        "clear",
        "hash",
        "collection",
        "lang",
        "runnable",
        "run",
        "set",
        "java",
        "util"
      ]
    },
    {
      "method": "simpleWriteObject@119",
      "body": "/** \n * Override the actions of the final method \"writeObject()\" in ObjectOutputStream.\n * @since     JDK1.1.6\n */\npublic final void simpleWriteObject(Object obj,byte formatVersion){\n  byte oldStreamFormatVersion=streamFormatVersion;\n  streamFormatVersion=formatVersion;\n  Object prevObject=currentObject;\n  ObjectStreamClass prevClassDesc=currentClassDesc;\n  simpleWriteDepth++;\n  try {\n    outputObject(obj);\n  }\n catch (  IOException ee) {\n    if (abortIOException == null)     abortIOException=ee;\n  }\n finally {\n    streamFormatVersion=oldStreamFormatVersion;\n    simpleWriteDepth--;\n    currentObject=prevObject;\n    currentClassDesc=prevClassDesc;\n  }\n  IOException pending=abortIOException;\n  if (simpleWriteDepth == 0)   abortIOException=null;\n  if (pending != null) {\n    bridge.throwException(pending);\n  }\n}\n",
      "formalParam": [
        "Object",
        "byte"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Stack.push(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.InvocationTargetException.getTargetException()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.reflect.InvocationTargetException.getTargetException()",
                "node": "DAPICall",
                "_returns": "java.lang.Throwable",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.Vector.setSize(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cobertura/javancss/test/Test76.java",
      "types": [
        "Stack",
        "Vector",
        "Object",
        "Integer",
        "InvocationTargetException",
        "Throwable"
      ],
      "apicalls": [
        "setSize",
        "getTargetException",
        "size",
        "push"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Stack.push(java.lang.Object)",
            "java.lang.reflect.InvocationTargetException.getTargetException()",
            "java.util.Vector.size()",
            "java.lang.reflect.InvocationTargetException.getTargetException()",
            "java.util.Vector.size()",
            "java.util.Vector.setSize(int)"
          ]
        }
      ],
      "keywords": [
        "reflect",
        "integer",
        "vector",
        "target",
        "object",
        "push",
        "invocation",
        "java",
        "util",
        "size",
        "lang",
        "throwable",
        "exception",
        "set",
        "get",
        "stack"
      ]
    },
    {
      "method": "run@240",
      "body": "/** \n * Returns true if the given string is accepted by this automaton. \n */\npublic boolean run(String s){\n  int p=initial;\n  int l=s.length();\n  for (int i=0; i < l; i++) {\n    p=step(p,s.charAt(i));\n    if (p == -1)     return false;\n  }\n  return accept[p];\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/dk.brics.automaton/src/dk/brics/automaton/RunAutomaton.java",
      "types": [
        "Character",
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "character",
        "integer",
        "length",
        "string",
        "java",
        "char",
        "lang"
      ]
    },
    {
      "method": "endProgram@171",
      "body": "public static final synchronized void endProgram(){\n  int ans=JOptionPane.showConfirmDialog(null,\"Do you wish to end the program\",\"End Program\",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);\n  if (ans == 0) {\n    System.exit(0);\n  }\n else {\n    JOptionPane.showMessageDialog(null,\"Now you must press the appropriate escape key/s, e.g. Ctrl C, to exit this program\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.lang.System.exit(int)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)",
                "_throws": [
                  "java.awt.HeadlessException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/flanagan/src/main/java/flanagan/io/FileNameSelector.java",
      "types": [
        "Component",
        "Object",
        "JOptionPane",
        "System",
        "HeadlessException",
        "Integer",
        "String"
      ],
      "apicalls": [
        "showMessageDialog",
        "showConfirmDialog",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "swing",
        "headless",
        "javax",
        "pane",
        "option",
        "string",
        "system",
        "message",
        "show",
        "confirm",
        "lang",
        "exception",
        "exit",
        "component",
        "integer",
        "dialog",
        "j",
        "java"
      ]
    },
    {
      "method": "isOpenJDK@110",
      "body": "/** \n * Checks whether the current Java implementation is OpenJDK \n */\npublic static boolean isOpenJDK(){\n  return vm.toLowerCase().contains(\"openjdk\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.contains(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/esmska/src/esmska/utils/RuntimeUtils.java",
      "types": [
        "CharSequence",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "contains",
        "toLowerCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "lower",
        "string",
        "contains",
        "sequence",
        "java",
        "boolean",
        "case",
        "char",
        "lang"
      ]
    },
    {
      "method": "matches@404",
      "body": "public final boolean matches(Object a){\n  if (a instanceof CharSegment) {\n    CharSegment cb=(CharSegment)a;\n    if (_length != cb._length)     return false;\n    int offset=_offset;\n    int bOffset=cb._offset;\n    char[] buffer=_buffer;\n    char[] cbBuffer=cb._buffer;\n    for (int i=_length - 1; i >= 0; i--)     if (buffer[offset + i] != cbBuffer[bOffset + i])     return false;\n    return true;\n  }\n else   if (a instanceof String) {\n    String sa=(String)a;\n    if (_length != sa.length())     return false;\n    int offset=_offset;\n    char[] buffer=_buffer;\n    for (int i=_length - 1; i >= 0; i--)     if (buffer[i + offset] != sa.charAt(i))     return false;\n    return true;\n  }\n else   return false;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "_returns": "char",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/quercus-gae/src/main/java/com/caucho/util/CharSegment.java",
      "types": [
        "Character",
        "String",
        "Integer"
      ],
      "apicalls": [
        "charAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "char",
        "integer",
        "lang",
        "string",
        "character",
        "length",
        "java"
      ]
    },
    {
      "method": "getWidgetIncludes@548",
      "body": "/** \n * Generates the HTML include tags for external JavaScripts files of the used widgets.<p>\n * @return the HTML include tags for external JavaScripts files of the used widgets\n * @throws JspException if an error occurs during JavaScript generation\n */\npublic String getWidgetIncludes() throws JspException {\n  StringBuffer result=new StringBuffer(32);\n  try {\n    Iterator<CmsWidgetDialogParameter> i=getWidgets().iterator();\n    Set<I_CmsWidget> set=new HashSet<I_CmsWidget>();\n    while (i.hasNext()) {\n      I_CmsWidget widget=i.next().getWidget();\n      if (!set.contains(widget)) {\n        result.append(widget.getDialogIncludes(getCms(),this));\n        result.append('\\n');\n        set.add(widget);\n      }\n    }\n  }\n catch (  Throwable e) {\n    includeErrorpage(this,e);\n  }\n  return result.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/opencms-core/src/org/opencms/workplace/CmsWidgetDialog.java",
      "types": [
        "StringBuffer",
        "HashSet",
        "String",
        "Object",
        "Integer",
        "Character"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(int)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "hash",
        "character",
        "set",
        "string",
        "object",
        "util",
        "lang",
        "java",
        "buffer",
        "integer"
      ]
    },
    {
      "method": "getNumberOfTransitions@535",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.codePointCount(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/lucene-solr/lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.java",
      "body": "/** \n * Returns the number of transitions in this automaton. This number is counted as the total number of edges, where one edge may be a character interval.\n */\npublic int getNumberOfTransitions(){\n  if (isSingleton())   return singleton.codePointCount(0,singleton.length());\n  int c=0;\n  for (  State s : getNumberedStates())   c+=s.numTransitions();\n  return c;\n}\n",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "codePointCount",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.codePointCount(int,int)"
          ]
        }
      ],
      "keywords": [
        "code",
        "length",
        "integer",
        "string",
        "lang",
        "java",
        "count",
        "point"
      ]
    },
    {
      "method": "testHashedWheelRequestTimeout@33",
      "body": "@Test public void testHashedWheelRequestTimeout() throws Exception {\n  test();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/http-client/src/test/java/com/biasedbit/http/timeout/HashedWheelTimeoutManagerTest.java",
      "types": [
        "PrintStream",
        "InterruptedException",
        "Long",
        "Thread",
        "Character"
      ],
      "apicalls": [
        "sleep",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "exception",
        "sleep",
        "interrupted",
        "thread",
        "print",
        "println",
        "java",
        "lang",
        "io",
        "long",
        "stream",
        "character"
      ]
    },
    {
      "method": "test_logrbLLevel_LString_LString_LObject_Security@2730",
      "body": "/** \n * @tests java.util.logging.Logger#logrb(Level, String, String, String,String, Object)\n */\npublic void test_logrbLLevel_LString_LString_LObject_Security() throws Exception {\n  SecurityManager originalSecurityManager=System.getSecurityManager();\n  try {\n    System.setSecurityManager(new SecurityManager());\n    Logger.global.logrb(Level.OFF,null,null,\"abc\",\"def\");\n  }\n  finally {\n    System.setSecurityManager(originalSecurityManager);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getSecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.SecurityManager"
          },
          {
            "_call": "java.lang.SecurityManager.SecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.setSecurityManager(java.lang.SecurityManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.setSecurityManager(java.lang.SecurityManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
      "types": [
        "String",
        "Logger",
        "System",
        "SecurityManager",
        "Level"
      ],
      "apicalls": [
        "getSecurityManager",
        "setSecurityManager",
        "logrb"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.lang.SecurityManager.SecurityManager()",
            "java.lang.System.setSecurityManager(java.lang.SecurityManager)",
            "java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "java.lang.System.setSecurityManager(java.lang.SecurityManager)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "logging",
        "system",
        "logger",
        "set",
        "manager",
        "java",
        "security",
        "string",
        "level",
        "util",
        "get",
        "logrb"
      ]
    },
    {
      "method": "removeCategories@636",
      "body": "/** \n * removeCategories\n * @param categoryNames\n */\npublic void removeCategories(String... categoryNames){\n  this.enterWrite();\n  try {\n    this.memoryIndex.removeCategories(categoryNames);\n    this.diskIndex=this.diskIndex.removeCategories(categoryNames,this.memoryIndex);\n  }\n catch (  IOException e) {\n    IdeLog.logError(IndexPlugin.getDefault(),\"An error occurred while removing categories from the index\",e);\n  }\n finally {\n    this.exitWrite();\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.Lock"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.Lock"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/studio3/plugins/com.aptana.index.core/src/com/aptana/index/core/Index.java",
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "unlock",
        "lock",
        "writeLock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "unlock",
        "write",
        "java",
        "lock",
        "util",
        "read",
        "concurrent",
        "locks"
      ]
    },
    {
      "method": "clone@297",
      "body": "/** \n * {@inheritDoc}\n */\n@Override public PhotoFeature clone(){\n  PhotoType cloned=new PhotoType();\n  if (photoBytes != null) {\n    byte[] clonedBytes=Arrays.copyOf(photoBytes,photoBytes.length);\n    cloned.setPhoto(clonedBytes);\n  }\n  if (photoUri != null) {\n    try {\n      cloned.setPhotoURI(new URI(photoUri.getPath()));\n    }\n catch (    URISyntaxException e) {\n      cloned.setPhotoURI(null);\n    }\n  }\n  if (photoParameterType != null) {\n    cloned.setPhotoParameterType(photoParameterType);\n  }\n  if (imageMediaType != null) {\n    cloned.setImageMediaType(imageMediaType);\n  }\n  cloned.setCompression(isSetCompression);\n  cloned.setParameterTypeStyle(getParameterTypeStyle());\n  cloned.setEncodingType(getEncodingType());\n  cloned.setID(getID());\n  return cloned;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.copyOf(byte[],int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.net.URI.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.net.URI.URI(java.lang.String)",
            "_throws": [
              "java.net.URISyntaxException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "PhotoFeature",
      "file": "./java_projects/milton2/external/cardme/src/main/java/info/ineighborhood/cardme/vcard/types/PhotoType.java",
      "types": [
        "URI",
        "String",
        "Integer",
        "Arrays",
        "URISyntaxException",
        "Byte"
      ],
      "apicalls": [
        "getPath",
        "copyOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.copyOf(byte[],int)",
            "java.net.URI.getPath()",
            "java.net.URI.URI(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "path",
        "util",
        "get",
        "integer",
        "java",
        "copy",
        "net",
        "byte",
        "syntax",
        "string",
        "exception",
        "arrays",
        "uri"
      ]
    },
    {
      "method": "queryForDeferredQueueSelected@313",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "List<AsyncMsgRecord>",
      "file": "./java_projects/CONNECT/Product/Production/Common/CONNECTCoreLib/src/main/java/gov/hhs/fha/nhinc/asyncmsgs/dao/AsyncMsgRecordDao.java",
      "body": "/** \n * Query for all records that are already selected. This will occur if a prior process was interrupted before all selected records processing was complete.\n * @return matching records\n */\npublic List<AsyncMsgRecord> queryForDeferredQueueSelected(){\n  log.debug(\"Performing database record retrieve for deferred queue manager selected.\");\n  List<AsyncMsgRecord> asyncMsgRecs=null;\n  Session sess=null;\n  try {\n    SessionFactory fact=HibernateUtil.getSessionFactory();\n    if (fact != null) {\n      sess=fact.openSession();\n      if (sess != null) {\n        Criteria criteria=sess.createCriteria(AsyncMsgRecord.class);\n        criteria.add(Restrictions.eq(\"Direction\",QUEUE_DIRECTION_INBOUND));\n        criteria.add(Restrictions.eq(\"ResponseType\",QUEUE_RESPONSE_TYPE_AUTO));\n        criteria.add(Restrictions.eq(\"Status\",QUEUE_STATUS_RSPSELECT));\n        asyncMsgRecs=criteria.list();\n      }\n else {\n        log.error(\"Failed to obtain a session from the sessionFactory\");\n      }\n    }\n else {\n      log.error(\"Session factory was null\");\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Completed database record retrieve for deferred queue manager selected. Results found: \" + ((asyncMsgRecs == null) ? \"0\" : Integer.toString(asyncMsgRecs.size())));\n    }\n  }\n  finally {\n    if (sess != null) {\n      try {\n        sess.close();\n      }\n catch (      Throwable t) {\n        log.error(\"Failed to close session: \" + t.getMessage(),t);\n      }\n    }\n  }\n  return asyncMsgRecs;\n}\n",
      "types": [
        "String",
        "Throwable",
        "Integer"
      ],
      "apicalls": [
        "getMessage",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "message",
        "java",
        "string",
        "lang",
        "throwable",
        "integer",
        "get"
      ]
    },
    {
      "method": "equals@103",
      "body": "@Override public boolean equals(Object o){\n  if (this.getClass() != o.getClass())   return false;\n  MultiFloatFunction other=(MultiFloatFunction)o;\n  return this.name().equals(other.name()) && Arrays.equals(this.sources,other.sources);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.equals(long[],long[])",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/lucene-solr/lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction.java",
      "types": [
        "Arrays",
        "Long",
        "Object",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Arrays.equals(long[],long[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "long",
        "string",
        "object",
        "boolean",
        "java",
        "equals",
        "arrays",
        "lang"
      ]
    },
    {
      "method": "test_toString@2243",
      "body": "/** \n * @tests java.io.File#toString()\n */\n@TestTargetNew(level=TestLevel.COMPLETE,notes=\"Verifies toString() method.\",method=\"toString\",args={}) public void test_toString(){\n  String fileName=System.getProperty(\"java.io.tmpdir\") + slash + \"input.tst\";\n  File f=new File(fileName);\n  assertTrue(\"Incorrect string returned\",f.toString().equals(fileName));\n  if (File.separatorChar == '\\\\') {\n    String result=new File(\"c:\\\\\").toString();\n    assertTrue(\"Removed backslash: \" + result,result.equals(\"c:\\\\\"));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/tests/api/java/io/FileTest.java",
      "types": [
        "Object",
        "System",
        "Boolean",
        "String",
        "File"
      ],
      "apicalls": [
        "toString",
        "getProperty",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.toString()",
            "java.lang.String.equals(java.lang.Object)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.toString()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "property",
        "equals",
        "file",
        "boolean",
        "string",
        "object",
        "java",
        "system",
        "io"
      ]
    },
    {
      "method": "getSelectedRoisAsArray@1591",
      "body": "/** \n * Returns the selected ROIs as an array, or all the ROIs if none are selected. \n */\npublic Roi[] getSelectedRoisAsArray(){\n  int[] indexes=getSelectedIndexes();\n  if (indexes.length == 0)   indexes=getAllIndexes();\n  int n=indexes.length;\n  Roi[] array=new Roi[n];\n  for (int i=0; i < n; i++) {\n    String label=(String)listModel.getElementAt(indexes[i]);\n    array[i]=(Roi)rois.get(label);\n  }\n  return array;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JList.getSelectedIndices()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int[]"
          },
          {
            "_call": "javax.swing.DefaultListModel.getSize()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "Roi[]",
      "file": "./java_projects/ImageJA/src/main/java/ij/plugin/frame/RoiManager.java",
      "types": [
        "Integer",
        "DefaultListModel",
        "JList"
      ],
      "apicalls": [
        "getSize",
        "getSelectedIndices"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JList.getSelectedIndices()",
            "javax.swing.DefaultListModel.getSize()"
          ]
        }
      ],
      "keywords": [
        "size",
        "list",
        "j",
        "default",
        "javax",
        "swing",
        "integer",
        "indices",
        "model",
        "selected",
        "get"
      ]
    },
    {
      "method": "oneFunctionCall@103",
      "body": "@Test public void oneFunctionCall() throws Exception {\n  statements.add(list(\"id\",\"call\",\"testSlim\",\"returnString\"));\n  respondsWith(list(list(\"id\",\"string\")));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.Object>.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Object>.addAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fitnesse/src/fitnesse/slim/ListExecutorTestBase.java",
      "types": [
        "List",
        "Object",
        "Boolean",
        "Collection"
      ],
      "apicalls": [
        "add",
        "addAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Object>.add(java.lang.Object)",
            "java.util.List<java.lang.Object>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "add",
        "util",
        "list",
        "collection",
        "object",
        "java",
        "boolean"
      ]
    },
    {
      "method": "toString@38",
      "body": "public String toString(String name,String tab){\n  if (name == null || name.trim().length() == 0)   name=NAME;\n  return super.toString(name,tab);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/smartworksV3/src/net/smartworks/server/engine/infowork/form/model/SwfFieldRef.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "trim",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "length",
        "trim",
        "integer",
        "java",
        "string",
        "lang"
      ]
    },
    {
      "method": "isTargetPlatform@630",
      "body": "/** \n * Determines whether specified platform is the target database platform in use by the test framework.\n * @param target platform name (derby, db2, oracle, etc.)\n * @return true if the specified platform matches the platform in use\n */\npublic boolean isTargetPlatform(String target){\n  String url=getPlatform();\n  return url != null && url.indexOf(target) != -1;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java",
      "types": [
        "Integer",
        "System",
        "String"
      ],
      "apicalls": [
        "getProperty",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String,java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "system",
        "string",
        "property",
        "lang",
        "get",
        "index"
      ]
    },
    {
      "method": "getOutputReader@43",
      "body": "@Override public final Reader getOutputReader(String outputPath,String scriptPackage,String scriptName,String extension) throws IOException {\n  File dir=new File(outputPath);\n  File javaFile=new File(dir,scriptPackage + \"/\" + scriptName+ extension);\n  FileReader fo=new FileReader(javaFile);\n  return fo;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileReader.FileReader(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Reader",
      "file": "./java_projects/navajo/core/com.dexels.navajo.core/src/com/dexels/navajo/server/FileNavajoConfig.java",
      "types": [
        "FileReader",
        "File",
        "String",
        "FileNotFoundException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.FileReader.FileReader(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "java",
        "reader",
        "string",
        "io",
        "found",
        "exception",
        "file"
      ]
    },
    {
      "method": "getAvailableResidentialSkills@894",
      "body": "/** \n * @param residenceId the id of the Castle, Fort, Territory.\n * @return all the available Residential skills for a given {@code residenceId}.\n */\npublic FastList<L2SkillLearn> getAvailableResidentialSkills(int residenceId){\n  final FastList<L2SkillLearn> result=new FastList<L2SkillLearn>();\n  final FastMap<Integer,L2SkillLearn> skills=_pledgeSkillTree;\n  if (skills == null) {\n    _log.warning(getClass().getSimpleName() + \": No residential skills defined!\");\n    return new FastList<L2SkillLearn>();\n  }\n  for (  L2SkillLearn temp : skills.values()) {\n    if (temp.isResidencialSkill() && (temp.getRecidenceIds() != null) && Util.contains(temp.getRecidenceIds(),residenceId)) {\n      result.add(temp);\n    }\n  }\n  return result;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getSimpleName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.warning(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "FastList<L2SkillLearn>",
      "file": "./java_projects/l2adena-l2j-core/java/com/l2jserver/gameserver/datatables/SkillTreesData.java",
      "types": [
        "String",
        "Logger",
        "Class"
      ],
      "apicalls": [
        "warning",
        "getSimpleName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getSimpleName()",
            "java.util.logging.Logger.warning(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "warning",
        "name",
        "simple",
        "java",
        "lang",
        "get",
        "class",
        "logging",
        "string",
        "logger",
        "util"
      ]
    },
    {
      "method": "getArrayLength@124",
      "body": "/** \n * Get the length of the given array. This is a helper method for  {@link Array#getLength(Object)}. If the array is not actually an array, then  {@link IllegalArgumentException} is thrown.\n * @param array The array to get the length from\n * @return The length of the array\n */\npublic int getArrayLength(Object array){\n  if (!isArray(array)) {\n    return -1;\n  }\n  return Array.getLength(array);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class.isArray()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.reflect.Array.getLength(java.lang.Object)",
            "_throws": [
              "java.lang.IllegalArgumentException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/teatrove/teaapps/src/main/java/org/teatrove/teaapps/contexts/ArrayContext.java",
      "types": [
        "IllegalArgumentException",
        "Array",
        "Integer",
        "Class",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "getLength",
        "isArray"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class.isArray()",
            "java.lang.reflect.Array.getLength(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "illegal",
        "java",
        "get",
        "argument",
        "length",
        "boolean",
        "object",
        "reflect",
        "exception",
        "lang",
        "class",
        "integer",
        "array"
      ]
    },
    {
      "method": "getLexiconEntries@80",
      "body": "public List<LexiconEntry> getLexiconEntries(){\n  List<LexiconEntry> entries=new ArrayList<LexiconEntry>();\n  if (word != null) {\n    entries.add(LexiconEntry.createNounSgEntry(getNoun(),getNoun(),Gender.UNDEF));\n  }\n  return entries;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "List<LexiconEntry>",
      "file": "./java_projects/AceWiki/src/ch/uzh/ifi/attempto/acewiki/aceowl/OfRelation.java",
      "types": [
        "String",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "list",
        "length",
        "util",
        "substring",
        "integer",
        "array",
        "string"
      ]
    },
    {
      "method": "test_ConstructorLjava_io_OutputStreamZ@103",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.PrintStream(java.io.OutputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(double)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/test/java/tests/api/java/io/PrintStreamTest.java",
      "body": "/** \n * @tests java.io.PrintStream#PrintStream(java.io.OutputStream, boolean)\n */\npublic void test_ConstructorLjava_io_OutputStreamZ(){\n  PrintStream os=new PrintStream(bos);\n  os.println(2345.76834720202);\n  os.flush();\n  assertTrue(\"Bytes not written\",bos.size() > 0);\n  os.close();\n}\n",
      "types": [
        "Double",
        "OutputStream",
        "Integer",
        "PrintStream",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "close",
        "size",
        "flush",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.PrintStream(java.io.OutputStream)",
            "java.io.PrintStream.println(double)",
            "java.io.PrintStream.flush()",
            "java.io.ByteArrayOutputStream.size()",
            "java.io.PrintStream.close()"
          ]
        }
      ],
      "keywords": [
        "print",
        "size",
        "println",
        "byte",
        "io",
        "flush",
        "java",
        "stream",
        "array",
        "output",
        "close",
        "integer",
        "double"
      ]
    },
    {
      "method": "addTrayIcon@68",
      "body": "public static final void addTrayIcon(){\n  if (SystemTrayFrame.icon != null) {\n    return;\n  }\n  FileUtilities.loadLibrary(UtilityConstants.IMAGE_LOCATION,\"\",\"TrayIcon12.gif\");\n  try {\n    File iconfile=new File(UtilityConstants.IMAGE_LOCATION,\"TrayIcon12.dll\");\n    System.load(iconfile.getCanonicalPath());\n    WindowsTrayIcon.initTrayIcon(\"KoLmafia\");\n    ImageIcon image=JComponentUtilities.getImage(\"\",\"TrayIcon12.gif\");\n    SystemTrayFrame.icon=new WindowsTrayIcon(image.getImage(),16,16);\n    SystemTrayFrame.icon.addMouseListener(new SetVisibleListener());\n    TrayIconPopup popup=new TrayIconPopup();\n    popup.addMenuItem(new ShowMainWindowPopupItem());\n    popup.addMenuItem(new ConstructFramePopupItem(\"Graphical CLI\",\"CommandDisplayFrame\"));\n    popup.addMenuItem(new ConstructFramePopupItem(\"Preferences\",\"OptionsFrame\"));\n    popup.addMenuItem(new ConstructFramePopupItem(\"Relay Browser\",\"LocalRelayServer\"));\n    popup.addMenuItem(new ConstructFramePopupItem(\"KoLmafia Chat\",\"ChatManager\"));\n    popup.addMenuItem(new LogoutPopupItem());\n    popup.addMenuItem(new EndSessionPopupItem());\n    SystemTrayFrame.icon.setPopup(popup);\n    SystemTrayFrame.updateToolTip();\n  }\n catch (  Exception e) {\n    StaticEntity.printStackTrace(e);\n    return;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.File.getCanonicalPath()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.load(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.ImageIcon.getImage()",
            "_throws": [],
            "_returns": "java.awt.Image",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/kolmafia/src/net/sourceforge/kolmafia/swingui/SystemTrayFrame.java",
      "types": [
        "System",
        "Image",
        "IOException",
        "String",
        "File",
        "ImageIcon"
      ],
      "apicalls": [
        "load",
        "getImage",
        "getCanonicalPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.getCanonicalPath()",
            "java.lang.System.load(java.lang.String)",
            "javax.swing.ImageIcon.getImage()"
          ]
        }
      ],
      "keywords": [
        "file",
        "path",
        "canonical",
        "swing",
        "get",
        "image",
        "io",
        "java",
        "exception",
        "lang",
        "icon",
        "javax",
        "system",
        "load",
        "string"
      ]
    },
    {
      "method": "testOverloaded2@399",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/ide-test/org.codehaus.groovy.eclipse.tests/src/org/codehaus/groovy/eclipse/ui/search/FindOccurrencesTests.java",
      "body": "public void testOverloaded2() throws Exception {\n  String contents=\"class LotsOfMethods { \\n\" + \"    def meth() { }\\n\" + \"    def meth(int a) { }\\n\"+ \"    def meth(String a, LotsOfMethods b) { }\\n\"+ \"}\\n\"+ \"new LotsOfMethods().meth()\\n\"+ \"new LotsOfMethods().meth(\\\"\\\", null)\\n\"+ \"new LotsOfMethods().meth(1)\\n\";\n  int start=contents.indexOf(\"meth\",contents.indexOf(\"meth\") + 1);\n  int len=\"meth\".length();\n  int start1=start;\n  int start2=contents.lastIndexOf(\"meth\");\n  doTest(contents,start,len,start1,len,start2,len);\n}\n",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "length",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.length()",
            "java.lang.String.lastIndexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "java",
        "string",
        "last",
        "index",
        "length"
      ]
    },
    {
      "method": "equals@37",
      "body": "/** \n * Compares the specified object to this Set and returns true if they are equal. The object must be an instance of Set and contain the same objects.\n * @param object the object to compare with this set.\n * @return {@code true} if the specified object is equal to this set,{@code false} otherwise\n * @see #hashCode\n */\n@Override public boolean equals(Object object){\n  if (this == object) {\n    return true;\n  }\n  if (object instanceof Set) {\n    Set<?> s=(Set<?>)object;\n    try {\n      return size() == s.size() && containsAll(s);\n    }\n catch (    NullPointerException ignored) {\n      return false;\n    }\ncatch (    ClassCastException ignored) {\n      return false;\n    }\n  }\n  return false;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.AbstractCollection<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Set<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.AbstractCollection<Tau_E>.containsAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/android_libcore/luni/src/main/java/java/util/AbstractSet.java",
      "types": [
        "Set",
        "Integer",
        "AbstractCollection",
        "Collection",
        "Boolean"
      ],
      "apicalls": [
        "containsAll",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.AbstractCollection<Tau_E>.size()",
            "java.util.Set<Tau_E>.size()",
            "java.util.AbstractCollection<Tau_E>.containsAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "boolean",
        "set",
        "util",
        "abstract",
        "java",
        "contains",
        "collection",
        "size"
      ]
    },
    {
      "method": "getLastChild@907",
      "formalParam": [
        "Element",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "Element",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-eclipse/org.eclipse.webdav/src/interface/org/eclipse/webdav/dom/ElementEditor.java",
      "body": "/** \n * Returns the last child of the given parent that is a WebDAV element with the given name, or <code>null</code> if no such child exists. <p> The search starts at the parent's last child. The parent must not be <code>null</code> and must be a DAV: namespace element. The name of the child to search for must not be <code>null</code>.\n * @param parent      the parent of the child to search.\n * @param name        the name of the child to search for.\n * @return            the specified child of the parent, or <code>null</code> if no such child exists.\n */\npublic static Element getLastChild(Element parent,String name){\n  Assert.isNotNull(name);\n  return getChild(parent,new String[]{name},false);\n}\n",
      "types": [
        "Boolean",
        "String",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "equals",
        "length",
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.equals(java.lang.Object)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "substring",
        "lang",
        "length",
        "string",
        "equals",
        "java",
        "object",
        "last",
        "integer",
        "index"
      ]
    },
    {
      "method": "insertBetween@74",
      "body": "/** \n * Will slip in a fixture after the specified one, but before the next execution trace.\n */\npublic void insertBetween(Fixture fix,Fixture toAdd){\n  boolean inserted=false;\n  int start=(fix == null) ? 0 : fixtures.indexOf(fix) + 1;\n  for (int j=start; j < fixtures.size(); j++) {\n    Fixture f=(Fixture)fixtures.get(j);\n    if (f instanceof ExecutionTrace) {\n      fixtures.add(j,toAdd);\n      return;\n    }\n  }\n  if (!inserted) {\n    fixtures.add(toAdd);\n  }\n}\n",
      "formalParam": [
        "Fixture",
        "Fixture"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.indexOf(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.add(int,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-compiler/src/main/java/org/drools/guvnor/client/modeldriven/testing/Scenario.java",
      "types": [
        "List",
        "Object",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "indexOf",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.indexOf(java.lang.Object)",
            "java.util.List.size()",
            "java.util.List.add(int,java.lang.Object)",
            "java.util.List.size()",
            "java.util.List.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "index",
        "list",
        "util",
        "java",
        "size",
        "add",
        "boolean",
        "object"
      ]
    },
    {
      "method": "destroySubcontext@89",
      "body": "@Override public void destroySubcontext(Name name) throws NamingException {\n  checkForBlankName(name);\n  final String localName=(String)name.remove(0);\n  final Object objectRef=bindingsMap.get(localName);\n  if (objectRef instanceof Context) {\n    if (!name.isEmpty()) {\n      ((Context)objectRef).destroySubcontext(name);\n    }\n else {\n      bindingsMap.remove(localName);\n      ((Context)objectRef).close();\n    }\n  }\n else {\n    throw new NameNotFoundException(\"Unable to locate sub-context, \\\"\" + getNameInNamespace() + \"/\"+ localName+ \"\\\" for destruction\");\n  }\n}\n",
      "formalParam": [
        "Name"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.naming.Name.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "javax.naming.Context.close()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "javax.naming.NamingException"
                ]
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$javax.naming.Name.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "javax.naming.Context.destroySubcontext(javax.naming.Name)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "javax.naming.NamingException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/repose/project-set/core/core-lib/src/main/java/com/rackspace/papi/service/naming/ServiceContext.java",
      "types": [
        "Name",
        "Boolean",
        "Context",
        "Object",
        "NamingException",
        "String",
        "Map"
      ],
      "apicalls": [
        "destroySubcontext",
        "close",
        "remove",
        "isEmpty",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "javax.naming.Name.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "$NOT$javax.naming.Name.isEmpty()",
            "javax.naming.Context.destroySubcontext(javax.naming.Name)"
          ]
        },
        {
          "calls": [
            "javax.naming.Name.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "$NOT$javax.naming.Name.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "javax.naming.Context.close()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "empty",
        "string",
        "naming",
        "context",
        "util",
        "java",
        "name",
        "object",
        "subcontext",
        "map",
        "boolean",
        "destroy",
        "close",
        "javax",
        "get",
        "exception"
      ]
    },
    {
      "method": "getNumShopItemsInThisOrigin@81",
      "body": "public int getNumShopItemsInThisOrigin(Origin origin){\n  if (isFilteredByAnUserWithoutShopItems()) {\n    return 0;\n  }\n  Criteria articleCriteria=createArticleCriteria();\n  if (filteredPlatform != null) {\n    articleCriteria=addPlatformCriteria(articleCriteria,filteredPlatform);\n  }\n  articleCriteria=addOriginCriteria(articleCriteria,origin);\n  List articles=articleCriteria.list();\n  if (articles.isEmpty()) {\n    return 0;\n  }\n  Criteria criteria=createShopItemCriteria().setProjection(countDistinct(\"id\"));\n  criteria=addUserFilter(criteria);\n  criteria=addSoldFilter(criteria);\n  return ((Long)criteria.add(in(\"article.id\",articles)).uniqueResult()).intValue();\n}\n",
      "formalParam": [
        "Origin"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Long.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/ngdb.com/src/main/java/com/ngdb/entities/MarketFilter.java",
      "types": [
        "List",
        "Long",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "isEmpty",
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.isEmpty()",
            "java.lang.Long.intValue()"
          ]
        }
      ],
      "keywords": [
        "list",
        "value",
        "java",
        "long",
        "empty",
        "boolean",
        "int",
        "integer",
        "util",
        "lang"
      ]
    },
    {
      "method": "check@83",
      "body": "@Override public boolean check(OperatorPlan matched) throws FrontendException {\n  LOForEach foreach=(LOForEach)matched.getSources().get(0);\n  LOGenerate gen=(LOGenerate)foreach.getInnerPlan().getSinks().get(0);\n  List<LogicalExpressionPlan> expPlans=gen.getOutputPlans();\n  boolean[] flattens=gen.getFlattenFlags();\n  List<Long> uidSeen=new ArrayList<Long>();\n  for (int i=0; i < expPlans.size(); i++) {\n    LogicalExpressionPlan expPlan=expPlans.get(i);\n    boolean flatten=flattens[i];\n    LogicalExpression exp=(LogicalExpression)expPlan.getSources().get(0);\n    if (exp.getFieldSchema() != null) {\n      if (flatten && (exp.getFieldSchema().type == DataType.BAG || exp.getFieldSchema().type == DataType.TUPLE)) {\n        List<LogicalFieldSchema> innerFieldSchemas=null;\n        if (exp.getFieldSchema().type == DataType.BAG) {\n          if (exp.getFieldSchema().schema != null) {\n            if (exp.getFieldSchema().type == DataType.BAG) {\n              if (exp.getFieldSchema().schema.getField(0).schema != null)               innerFieldSchemas=exp.getFieldSchema().schema.getField(0).schema.getFields();\n            }\n else {\n              if (exp.getFieldSchema().schema != null)               innerFieldSchemas=exp.getFieldSchema().schema.getFields();\n            }\n          }\n        }\n else {\n          if (exp.getFieldSchema().schema != null)           innerFieldSchemas=exp.getFieldSchema().schema.getFields();\n        }\n        if (innerFieldSchemas != null) {\n          for (          LogicalFieldSchema innerFieldSchema : innerFieldSchemas) {\n            long uid=innerFieldSchema.uid;\n            if (checkAndAdd(uid,uidSeen)) {\n              expPlansToInsertIdentity.add(expPlan);\n              break;\n            }\n          }\n        }\n      }\n else {\n        long uid=exp.getFieldSchema().uid;\n        if (checkAndAdd(uid,uidSeen)) {\n          expPlansToInsertIdentity.add(expPlan);\n        }\n      }\n    }\n  }\n  if (expPlansToInsertIdentity.isEmpty())   return false;\n  return true;\n}\n",
      "formalParam": [
        "OperatorPlan"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Long>.ArrayList<Long>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<java.lang.Long>.contains(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.util.List<java.lang.Long>.add(java.lang.Long)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.List<java.lang.Long>.contains(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.util.List<java.lang.Long>.add(java.lang.Long)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/pig/src/org/apache/pig/newplan/logical/rules/DuplicateForEachColumnRewrite.java",
      "types": [
        "ArrayList",
        "Boolean",
        "Long",
        "List",
        "Object"
      ],
      "apicalls": [
        "add",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Long>.ArrayList<Long>()",
            "java.util.List<java.lang.Long>.contains(java.lang.Object)",
            "java.util.List<java.lang.Long>.add(java.lang.Long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "long",
        "contains",
        "list",
        "add",
        "array",
        "boolean",
        "object"
      ]
    },
    {
      "method": "testCertStoreException06@119",
      "body": "/** \n * Test for <code>CertStoreException(String, Throwable)</code> constructor Assertion: constructs CertStoreException when <code>cause</code> is null <code>msg</code> is null\n */\npublic void testCertStoreException06(){\n  CertStoreException tE=new CertStoreException(null,null);\n  assertNull(\"getMessage() must return null\",tE.getMessage());\n  assertNull(\"getCause() must return null\",tE.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertStoreExceptionTest.java",
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getMessage",
        "getCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "cause",
        "lang",
        "throwable",
        "message",
        "get",
        "java",
        "string"
      ]
    },
    {
      "method": "getView@299",
      "formalParam": [
        "int",
        "View",
        "ViewGroup"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "View",
      "file": "./java_projects/GeekAlarm/android/src/com/lamerman/FileDialog.java",
      "body": "@Override public View getView(int position,View convertView,ViewGroup parent){\n  View v=super.getView(position,convertView,parent);\n  Map<String,Object> item=(Map)getItem(position);\n  boolean selected=selectedFile != null && selectedFile.getName().equals(item.get(ITEM_KEY));\n  v.setBackgroundColor(!selected ? Color.BLACK : Color.BLUE);\n  return v;\n}\n",
      "types": [
        "Object",
        "Boolean",
        "Map",
        "String",
        "File"
      ],
      "apicalls": [
        "getName",
        "equals",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getName()",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "string",
        "boolean",
        "map",
        "java",
        "get",
        "name",
        "file",
        "equals",
        "lang",
        "util",
        "io"
      ]
    },
    {
      "method": "countByUUID_G@2462",
      "body": "/** \n * Counts all the asset vocabularies where uuid = &#63; and groupId = &#63;.\n * @param uuid the uuid to search with\n * @param groupId the group ID to search with\n * @return the number of matching asset vocabularies\n * @throws SystemException if a system exception occurred\n */\npublic int countByUUID_G(String uuid,long groupId) throws SystemException {\n  Object[] finderArgs=new Object[]{uuid,groupId};\n  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_BY_UUID_G,finderArgs,this);\n  if (count == null) {\n    StringBundler query=new StringBundler(3);\n    query.append(_SQL_COUNT_ASSETVOCABULARY_WHERE);\n    if (uuid == null) {\n      query.append(_FINDER_COLUMN_UUID_G_UUID_1);\n    }\n else {\n      if (uuid.equals(StringPool.BLANK)) {\n        query.append(_FINDER_COLUMN_UUID_G_UUID_3);\n      }\n else {\n        query.append(_FINDER_COLUMN_UUID_G_UUID_2);\n      }\n    }\n    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);\n    String sql=query.toString();\n    Session session=null;\n    try {\n      session=openSession();\n      Query q=session.createQuery(sql);\n      QueryPos qPos=QueryPos.getInstance(q);\n      if (uuid != null) {\n        qPos.add(uuid);\n      }\n      qPos.add(groupId);\n      count=(Long)q.uniqueResult();\n    }\n catch (    Exception e) {\n      throw processException(e);\n    }\n finally {\n      if (count == null) {\n        count=Long.valueOf(0);\n      }\n      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_UUID_G,finderArgs,count);\n      closeSession(session);\n    }\n  }\n  return count.intValue();\n}\n",
      "formalParam": [
        "String",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Long.valueOf(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Long"
          },
          {
            "_call": "java.lang.Long.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/liferay-portal-trunk/portal-impl/src/com/liferay/portlet/asset/service/persistence/AssetVocabularyPersistenceImpl.java",
      "types": [
        "Long",
        "String",
        "Integer",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "intValue",
        "valueOf",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Long.valueOf(long)",
            "java.lang.Long.intValue()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "value",
        "equals",
        "int",
        "string",
        "boolean",
        "java",
        "lang",
        "long",
        "object"
      ]
    },
    {
      "method": "values@122",
      "body": "public Collection values(){\n  Collection result=new LinkedList();\n  int count=0;\n  for (int i=0; i < segments.length; i++) {\n    segments[i].lock();\n    try {\n      for (int j=0; j < segments[i].table.length; j++) {\n        Object o=segments[i].table[j];\n        if (o != null) {\n          if (o instanceof Entry) {\n            Entry e=(Entry)o;\n            if (e.isValid())             result.add(e);\n          }\n else {\n            Object arr[]=(Object[])o;\n            for (int k=0; k < arr.length; k++) {\n              Entry info=(Entry)arr[k];\n              if (info != null && info.isValid())               result.add(info);\n            }\n          }\n        }\n      }\n    }\n  finally {\n      segments[i].unlock();\n    }\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList.LinkedList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.util.Collection.add(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.util.Collection.add(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "Collection",
      "file": "./java_projects/groovy-core/src/main/org/codehaus/groovy/util/AbstractConcurrentMapBase.java",
      "types": [
        "Boolean",
        "LinkedList",
        "Object",
        "Collection"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList.LinkedList()",
            "java.util.Collection.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "java",
        "list",
        "add",
        "collection",
        "util",
        "linked",
        "object"
      ]
    },
    {
      "method": "close@109",
      "body": "public void close() throws IOException {\n  if (this.session != null) {\n    this.session.close();\n  }\n  if (this.byteArrayOutputStream != null) {\n    this.byteArrayOutputStream.close();\n  }\n  if (this.printStream != null) {\n    printStream.close();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.PrintStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/karaf/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/WatchAction.java",
      "types": [
        "IOException",
        "ByteArrayOutputStream",
        "PrintStream"
      ],
      "apicalls": [
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.close()",
            "java.io.PrintStream.close()"
          ]
        }
      ],
      "keywords": [
        "java",
        "exception",
        "byte",
        "close",
        "output",
        "io",
        "stream",
        "array",
        "print"
      ]
    },
    {
      "method": "executeQuery@113",
      "body": "@Override public ResultSet executeQuery(String sql) throws SQLException {\n  if (execute(sql)) {\n    return resultSet;\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.sql.SQLException.SQLException(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "returnType": "ResultSet",
      "file": "./java_projects/cloudata/src/java/org/cloudata/jdbc/CloudataStatement.java",
      "types": [
        "Throwable",
        "SQLException",
        "String"
      ],
      "apicalls": [
        "getMessage",
        "initCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.sql.SQLException.SQLException(java.lang.String)",
            "java.lang.Throwable.initCause(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "string",
        "throwable",
        "cause",
        "init",
        "sql",
        "get",
        "message",
        "exception"
      ]
    },
    {
      "method": "consume@38",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/rmq/src/test/java/redis/rmq/benchmarks/PublishConsumeBenchmarkTest.java",
      "body": "@Test public void consume(){\n  final String topic=\"foo\";\n  final String message=\"hello world!\";\n  final int MESSAGES=10000;\n  Producer p=new Producer(new Jedis(\"localhost\"),topic);\n  Consumer c=new Consumer(new Jedis(\"localhost\"),\"consumer\",topic);\n  for (int n=0; n < MESSAGES; n++) {\n    p.publish(message);\n  }\n  long start=Calendar.getInstance().getTimeInMillis();\n  String m=null;\n  do {\n    m=c.consume();\n  }\n while (m != null);\n  long elapsed=Calendar.getInstance().getTimeInMillis() - start;\n  System.out.println(((1000 * MESSAGES) / elapsed) + \" ops\");\n}\n",
      "types": [
        "String",
        "Long",
        "PrintStream",
        "Calendar"
      ],
      "apicalls": [
        "getTimeInMillis",
        "getInstance",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "io",
        "java",
        "print",
        "util",
        "long",
        "instance",
        "calendar",
        "get",
        "println",
        "time",
        "string",
        "millis"
      ]
    },
    {
      "method": "wrapEObjects@164",
      "body": "/** \n * @generated\n */\npublic Object[] wrapEObjects(Object[] objects,Object parentElement){\n  Collection result=new ArrayList();\n  for (int i=0; i < objects.length; i++) {\n    if (objects[i] instanceof EObject) {\n      result.add(new UimDomainNavigatorItem((EObject)objects[i],parentElement,myAdapterFctoryContentProvier));\n    }\n  }\n  return result.toArray();\n}\n",
      "formalParam": [
        "Object[]",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collection.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Collection.toArray()",
            "node": "DAPICall",
            "_returns": "java.lang.Object[]",
            "_throws": []
          }
        ]
      },
      "returnType": "Object[]",
      "file": "./java_projects/opaeum/opeum-papyrus-uim/org.opaeum.uimodeler.abstractactionbar.diagram/src/org/opaeum/uimodeler/abstractactionbar/diagram/navigator/UimDomainNavigatorContentProvider.java",
      "types": [
        "Object",
        "ArrayList",
        "Boolean",
        "Collection"
      ],
      "apicalls": [
        "toArray",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Collection.add(java.lang.Object)",
            "java.util.Collection.toArray()"
          ]
        }
      ],
      "keywords": [
        "object",
        "list",
        "boolean",
        "array",
        "add",
        "util",
        "java",
        "collection"
      ]
    },
    {
      "method": "getAsString@186",
      "body": "public String getAsString(FacesContext facesContext,UIComponent component,Object object){\n  if (object == null) {\n    return null;\n  }\n  if (object instanceof List) {\n    List o=(List)object;\n    return getStringKey(o.getId());\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [
        "FacesContext",
        "UIComponent",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Graneles-SRL/GranelesWeb/src/main/java/com/orco/graneles/jsf/miscelaneos/ListController.java",
      "types": [
        "String",
        "Object",
        "StringBuffer"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "append",
        "buffer",
        "java",
        "lang",
        "object"
      ]
    },
    {
      "method": "isClosed@122",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.isClosed()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": [
                  "java.sql.SQLException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/oozie/core/src/main/java/org/apache/oozie/store/Store.java",
      "body": "public boolean isClosed(){\n  OpenJPAEntityManager kem=OpenJPAPersistence.cast(entityManager);\n  Connection conn=(Connection)kem.getConnection();\n  try {\n    return conn.isClosed();\n  }\n catch (  SQLException e) {\n    XLog.getLog(getClass()).info(XLog.STD,e.getMessage(),e);\n  }\n  return true;\n}\n",
      "types": [
        "Throwable",
        "Connection",
        "SQLException",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "isClosed",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.isClosed()",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.isClosed()"
          ]
        }
      ],
      "keywords": [
        "sql",
        "connection",
        "string",
        "closed",
        "java",
        "message",
        "boolean",
        "throwable",
        "exception",
        "lang",
        "get"
      ]
    },
    {
      "method": "getItems@131",
      "body": "public Iterator<DiscoItem> getItems(String name,String node,JID senderJID){\n  List<DiscoItem> answer=new ArrayList<DiscoItem>();\n  if (!NAMESPACE.equals(node)) {\n    answer=Collections.emptyList();\n  }\n else {\n    for (    AdHocCommand command : manager.getCommands()) {\n      if (command.hasPermission(senderJID)) {\n        final DiscoItem item=new DiscoItem(new JID(serverName),command.getLabel(),command.getCode(),null);\n        answer.add(item);\n      }\n    }\n  }\n  return answer.iterator();\n}\n",
      "formalParam": [
        "String",
        "String",
        "JID"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_then": [
              {
                "_call": "java.util.Collections.emptyList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "Iterator<DiscoItem>",
      "file": "./java_projects/Openfire/src/java/org/jivesoftware/openfire/commands/AdHocCommandHandler.java",
      "types": [
        "Boolean",
        "List",
        "ArrayList",
        "Object",
        "Collections",
        "String"
      ],
      "apicalls": [
        "emptyList",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.Collections.emptyList()"
          ]
        }
      ],
      "keywords": [
        "equals",
        "lang",
        "boolean",
        "string",
        "java",
        "array",
        "object",
        "list",
        "collections",
        "empty",
        "util"
      ]
    },
    {
      "method": "drawScreen@89",
      "body": "/** \n * Draws the screen and all the components in it.\n */\npublic void drawScreen(int par1,int par2,float par3){\n  drawGradientRect(0,0,width,height,0x60500000,0xa0803030);\n  GL11.glPushMatrix();\n  GL11.glScalef(2.0F,2.0F,2.0F);\n  if (mc.theWorld.getWorldInfo().isHardcoreModeEnabled()) {\n    drawCenteredString(fontRenderer,StatCollector.translateToLocal(\"deathScreen.title.hardcore\"),width / 2 / 2,30,0xffffff);\n  }\n else {\n    drawCenteredString(fontRenderer,StatCollector.translateToLocal(\"deathScreen.title\"),width / 2 / 2,30,0xffffff);\n  }\n  GL11.glPopMatrix();\n  if (mc.theWorld.getWorldInfo().isHardcoreModeEnabled()) {\n    drawCenteredString(fontRenderer,StatCollector.translateToLocal(\"deathScreen.hardcoreInfo\"),width / 2,144,0xffffff);\n  }\n  drawCenteredString(fontRenderer,(new StringBuilder()).append(StatCollector.translateToLocal(\"deathScreen.score\")).append(\": \\247e\").append(mc.thePlayer.getScore()).toString(),width / 2,100,0xffffff);\n  super.drawScreen(par1,par2,par3);\n}\n",
      "formalParam": [
        "int",
        "int",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/NarnaCraft/minecraft/net/minecraft/src/GuiGameOver.java",
      "types": [
        "StringBuilder",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "java",
        "builder",
        "object",
        "append"
      ]
    },
    {
      "method": "main@41",
      "body": "public static void main(String[] args) throws Exception {\n  String[] urls={\"rmi://[0000:0000:0000:0000:0000:0000:0000:0001]/foo\",\"//[0:0:0:0:0:0:0:1]:88/foo\",\"rmi://[0::0:0:0:1]/foo:bar\",\"//[::1]:88\"};\n  for (int i=0; i < urls.length; i++) {\n    try {\n      Naming.lookup(urls[i]);\n    }\n catch (    MalformedURLException ex) {\n      throw ex;\n    }\ncatch (    Exception ex) {\n    }\n  }\n  InetAddress localAddr=InetAddress.getAllByName(null)[0];\n  if (localAddr instanceof Inet6Address) {\n    System.out.println(\"IPv6 detected\");\n    Registry reg;\n    try {\n      reg=LocateRegistry.createRegistry(Registry.REGISTRY_PORT);\n    }\n catch (    Exception ex) {\n      reg=LocateRegistry.getRegistry();\n    }\n    reg.rebind(\"foo\",reg);\n    Naming.lookup(\"rmi://[\" + localAddr.getHostAddress() + \"]/foo\");\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.InetAddress.getHostAddress()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/rmi/Naming/LookupIPv6.java",
      "types": [
        "String",
        "InetAddress",
        "PrintStream"
      ],
      "apicalls": [
        "getHostAddress",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.net.InetAddress.getHostAddress()"
          ]
        }
      ],
      "keywords": [
        "get",
        "stream",
        "host",
        "inet",
        "io",
        "address",
        "net",
        "java",
        "print",
        "string",
        "println"
      ]
    },
    {
      "method": "getObject@114",
      "body": "/** \n * Gets the serializable object containing this message's data. The default value is null.\n * @return the serializable object containing this message's data\n * @throws OpenwireException\n */\npublic Serializable getObject() throws OpenwireException {\n  if (object == null && getContent() != null) {\n    try {\n      Buffer content=getContent();\n      InputStream is=new ByteArrayInputStream(content);\n      if (isCompressed()) {\n        is=new InflaterInputStream(is);\n      }\n      DataInputStream dataIn=new DataInputStream(is);\n      ClassLoadingAwareObjectInputStream objIn=new ClassLoadingAwareObjectInputStream(dataIn);\n      try {\n        object=(Serializable)objIn.readObject();\n      }\n catch (      ClassNotFoundException ce) {\n        throw new OpenwireException(\"Failed to build body from content. Serializable class not available to broker. Reason: \" + ce,ce);\n      }\n finally {\n        dataIn.close();\n      }\n    }\n catch (    IOException e) {\n      throw new OpenwireException(\"Failed to build body from bytes. Reason: \" + e,e);\n    }\n  }\n  return this.object;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.FilterInputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "Serializable",
      "file": "./java_projects/activemq-apollo/apollo-openwire/src/main/scala/org/apache/activemq/apollo/openwire/command/ActiveMQObjectMessage.java",
      "types": [
        "FilterInputStream",
        "IOException",
        "DataInputStream",
        "InputStream"
      ],
      "apicalls": [
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.FilterInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "io",
        "close",
        "stream",
        "java",
        "filter",
        "exception",
        "data",
        "input"
      ]
    },
    {
      "method": "setColdColor@268",
      "body": "public void setColdColor(Color coldColor){\n  this.coldColor=coldColor;\n  createColorArray();\n}\n",
      "formalParam": [
        "Color"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Color.HSBtoRGB(float,float,float)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Color.Color(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Pipeline/src/gui/figure/heatMapFigure/HeatMapElement.java",
      "types": [
        "Integer",
        "Color",
        "Float",
        "HSBtoRGB"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Color.HSBtoRGB(float,float,float)",
            "java.awt.Color.Color(int)"
          ]
        }
      ],
      "keywords": [
        "float",
        "awt",
        "rgb",
        "integer",
        "hs",
        "java",
        "bto",
        "color"
      ]
    },
    {
      "method": "GouldToNative@139",
      "body": "/** \n * Convert a Gould format floating point number to native double format\n * @param inVal - input Gould value\n * @return - the input value converted to double floating point\n */\npublic static double GouldToNative(int inVal){\n  int sign;\n  int exponent;\n  float mant;\n  int byte0;\n  int byte1;\n  int byte2;\n  double dblMant;\n  double tempVal;\n  double nativeVal;\n  byte0=(inVal & 0x000000FF);\n  byte1=((inVal >> 8) & 0x000000FF);\n  byte2=((inVal >> 16) & 0x000000FF);\n  sign=1;\n  if ((inVal & 0x80000000) != 0) {\n    sign=-1;\n    inVal=-inVal;\n  }\n  exponent=((inVal & 0x7F000000) >> 24);\n  if (exponent == 0) {\n    exponent=64;\n  }\n  mant=(float)(byte0 + (byte1 * 256) + (byte2 * 65536));\n  mant=Math.abs(mant);\n  dblMant=(double)mant;\n  tempVal=Math.pow((double)16,(double)(70 - exponent));\n  nativeVal=dblMant / tempVal;\n  nativeVal=nativeVal * sign;\n  return nativeVal;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.abs(float)",
            "node": "DAPICall",
            "_returns": "float",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.pow(double,double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/VisAD/src/main/java/edu/wisc/ssec/mcidas/ConversionUtility.java",
      "types": [
        "Float",
        "Double",
        "Math"
      ],
      "apicalls": [
        "pow",
        "abs"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.abs(float)",
            "java.lang.Math.pow(double,double)"
          ]
        }
      ],
      "keywords": [
        "java",
        "abs",
        "float",
        "math",
        "double",
        "lang",
        "pow"
      ]
    },
    {
      "method": "terminate@567",
      "body": "public void terminate() throws DebugException {\n  if (isTerminating()) {\n    if (session == null && STATE_TERMINATING == targetState) {\n      terminateDebugTarget(true);\n    }\n    return;\n  }\n  DBGpSessionHandler.getInstance().removeSessionListener(this);\n  if (STATE_STARTED_SUSPENDED == targetState) {\nsynchronized (sessionMutex) {\n      if (session != null) {\n        setState(STATE_TERMINATING);\n        session.sendAsyncCmd(DBGpCommand.stop);\n      }\n else {\n        terminateDebugTarget(true);\n      }\n    }\n  }\n else {\n    terminateDebugTarget(true);\n    if (isWebLaunch()) {\n      sendStopDebugURL();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              },
              {
                "_call": "java.net.URL.openConnection()",
                "node": "DAPICall",
                "_returns": "java.net.URLConnection",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.net.URLConnection.connect()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/studio3-php/plugins/com.aptana.php.debug.epl/pdt/org2/eclipse/php/internal/debug/core/xdebug/dbgp/model/DBGpTarget.java",
      "types": [
        "URLConnection",
        "MalformedURLException",
        "URL",
        "String",
        "IOException"
      ],
      "apicalls": [
        "connect",
        "openConnection"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.openConnection()",
            "java.net.URLConnection.connect()"
          ]
        }
      ],
      "keywords": [
        "java",
        "open",
        "connection",
        "exception",
        "string",
        "malformed",
        "url",
        "connect",
        "net",
        "io"
      ]
    },
    {
      "method": "testUninstallListeners@133",
      "body": "public void testUninstallListeners(){\n  frame.setUI(ui);\n  ui.uninstallListeners();\n  frame.putClientProperty(MetalInternalFrameUI.IS_PALETTE,Boolean.TRUE);\n  assertFalse(\"isPalette of titlePane is false\",((MetalInternalFrameTitlePane)ui.getNorthPane()).isPalette);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JInternalFrame.setUI(javax.swing.plaf.InternalFrameUI)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/plaf/metal/MetalInternalFrameUITest.java",
      "types": [
        "JInternalFrame",
        "JComponent",
        "Object",
        "InternalFrameUI"
      ],
      "apicalls": [
        "setUI",
        "putClientProperty"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JInternalFrame.setUI(javax.swing.plaf.InternalFrameUI)",
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "put",
        "client",
        "swing",
        "javax",
        "j",
        "component",
        "set",
        "property",
        "frame",
        "ui",
        "object",
        "internal"
      ]
    },
    {
      "method": "a@2378",
      "body": "public boolean a(boolean flag){\n  int i=this.H.size();\n  if (i != this.I.size()) {\n    throw new IllegalStateException(\"TickNextTick list out of synch\");\n  }\n else {\n    if (i > 1000) {\n      if (i > 20 * 1000) {\n        i=i / 20;\n      }\n else {\n        i=1000;\n      }\n    }\n    for (int j=0; j < i; ++j) {\n      NextTickListEntry nextticklistentry=(NextTickListEntry)this.H.first();\n      if (!flag && nextticklistentry.e > this.worldData.getTime()) {\n        break;\n      }\n      this.H.remove(nextticklistentry);\n      this.I.remove(nextticklistentry);\n      byte b0=8;\n      if (this.a(nextticklistentry.a - b0,nextticklistentry.b - b0,nextticklistentry.c - b0,nextticklistentry.a + b0,nextticklistentry.b + b0,nextticklistentry.c + b0)) {\n        int k=this.getTypeId(nextticklistentry.a,nextticklistentry.b,nextticklistentry.c);\n        if (k == nextticklistentry.d && k > 0) {\n          Block.byId[k].a(this,nextticklistentry.a,nextticklistentry.b,nextticklistentry.c,this.random);\n        }\n      }\n    }\n    return this.H.size() != 0;\n  }\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeSet.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.util.TreeSet.remove(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Set.remove(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.TreeSet.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Set.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Project-Farmcraft/CraftBukkit/src/main/java/net/minecraft/server/World.java",
      "types": [
        "Integer",
        "Object",
        "Set",
        "TreeSet",
        "Boolean"
      ],
      "apicalls": [
        "remove",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet.size()",
            "java.util.Set.size()"
          ]
        },
        {
          "calls": [
            "java.util.TreeSet.size()",
            "java.util.Set.size()",
            "java.util.TreeSet.remove(java.lang.Object)",
            "java.util.Set.remove(java.lang.Object)",
            "java.util.TreeSet.size()"
          ]
        }
      ],
      "keywords": [
        "object",
        "tree",
        "java",
        "remove",
        "set",
        "size",
        "boolean",
        "util",
        "integer"
      ]
    },
    {
      "method": "updateEnvironment@259",
      "body": "/** \n * Sets the environment of the server and notifies observers of the change. Use  {@link IDatabaseConstants ENV_XXX}\n * @param environment the environment of the server\n */\npublic void updateEnvironment(String environment){\n  this.environment=environment;\n  setChanged();\n  notifyServerObservers(IServerConstants.UPDATE);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Observable.setChanged()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/radrails/plugins/org.radrails.server.core/src/org/radrails/server/core/Server.java",
      "types": [
        "Collection",
        "Observer",
        "HashSet",
        "Observable"
      ],
      "apicalls": [
        "setChanged"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Observable.setChanged()",
            "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "set",
        "collection",
        "observable",
        "observer",
        "java",
        "changed",
        "util",
        "hash"
      ]
    },
    {
      "method": "setSystemProperties@413",
      "body": "public void setSystemProperties(Map newProperties){\n  if (newProperties == null)   systemProperties.clear();\n else   systemProperties.putAll(newProperties);\n}\n",
      "formalParam": [
        "Map"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.HashMap.clear()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.util.HashMap.putAll(java.util.Map)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.runtime/tests/org.eclipse.core.tests.harness/src/org/eclipse/core/tests/session/Setup.java",
      "types": [
        "HashMap",
        "Map"
      ],
      "apicalls": [
        "clear",
        "putAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.clear()"
          ]
        },
        {
          "calls": [
            "java.util.HashMap.putAll(java.util.Map)"
          ]
        }
      ],
      "keywords": [
        "util",
        "hash",
        "map",
        "clear",
        "java",
        "put"
      ]
    },
    {
      "method": "findSatisfactionPlace@185",
      "body": "@Override public EcoAgent findSatisfactionPlace(){\n  final EcoNPuzzle etq=this.place.owner;\n  final Vector list=etq.nearestAdjacentPlaces(this.place,(EcoPlace)this.goalAgent);\n  final Vector l=new Vector();\n  for (int i=0; i < list.size(); i++) {\n    final EcoPlace ec=(EcoPlace)list.elementAt(i);\n    if (!ec.tile.isSatisfied()) {\n      l.addElement(ec);\n    }\n  }\n  final EcoPlace ec=l.isEmpty() ? (EcoPlace)list.firstElement() : (EcoPlace)l.firstElement();\n  return ec;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.Vector.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "EcoAgent",
      "file": "./java_projects/DimaX/src/examples/EcoResolution/EcoTile.java",
      "types": [
        "Integer",
        "Object",
        "Vector",
        "Boolean"
      ],
      "apicalls": [
        "isEmpty",
        "addElement",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.size()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.size()",
            "java.util.Vector.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "empty",
        "element",
        "integer",
        "boolean",
        "object",
        "vector",
        "util",
        "add",
        "size",
        "java"
      ]
    },
    {
      "method": "J3dQueryProps@46",
      "body": "/** \n * Constructs a new J3dQueryProps object using the specified array of keys and the specified values.  The arrays must be the same size.\n */\nJ3dQueryProps(ArrayList<String> keys,ArrayList<Object> values){\n  table=new Hashtable();\n  for (int i=0; i < keys.size(); i++) {\n    table.put(keys.get(i),values.get(i));\n  }\n}\n",
      "formalParam": [
        "ArrayList<String>",
        "ArrayList<Object>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.Hashtable()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.ArrayList<java.lang.Object>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/java3d-core/src/classes/share/javax/media/j3d/J3dQueryProps.java",
      "types": [
        "Object",
        "String",
        "Integer",
        "ArrayList",
        "Hashtable"
      ],
      "apicalls": [
        "size",
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.Hashtable()",
            "java.util.ArrayList<java.lang.String>.size()",
            "java.util.ArrayList<java.lang.String>.get(int)",
            "java.util.ArrayList<java.lang.Object>.get(int)",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.util.ArrayList<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "object",
        "size",
        "get",
        "util",
        "java",
        "string",
        "hashtable",
        "array",
        "integer",
        "list",
        "put"
      ]
    },
    {
      "method": "add@338",
      "body": "/** \n * Registers a new  {@link Dockable} at this manager. If there is alreadymode-information for <code>key</code> present, then <code>dockable</code> inherits this information.\n * @param key the unique key of <code>dockable</code>\n * @param dockable the new element\n * @throws NullPointerException if either <code>key</code> or <code>dockable</code>is <code>null</code>\n * @throws IllegalArgumentException if there is already a dockable registeredwith <code>key</code>\n */\npublic void add(String key,Dockable dockable){\n  if (key == null)   throw new NullPointerException(\"key must not be null\");\n  if (dockable == null)   throw new NullPointerException(\"dockable must not be null\");\n  DockableHandle entry=entries.get(key);\n  if (entry != null && entry.dockable != null)   throw new IllegalArgumentException(\"There is already a dockable registered with the key: \" + key);\n  if (entry == null) {\n    entry=new DockableHandle(dockable,key);\n    entries.put(entry.id,entry);\n  }\n else {\n    entry.dockable=dockable;\n  }\n  dockables.put(dockable,entry);\n  entry.putMode(access(getCurrentMode(dockable)));\n  fireAdded(dockable);\n  rebuild(dockable);\n}\n",
      "formalParam": [
        "String",
        "Dockable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/DockingFrames/docking-frames-common/src/bibliothek/gui/dock/support/mode/ModeManager.java",
      "types": [
        "Map",
        "Object"
      ],
      "apicalls": [
        "put",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "object",
        "get",
        "map",
        "put"
      ]
    },
    {
      "method": "reset@227",
      "body": "/** \n * Resets the Loader ready to read a new data set\n * @throws Exception if an error occurs while disconnecting from the database\n */\npublic void reset() throws Exception {\n  resetStructure();\n  if (m_DataBaseConnection != null && m_DataBaseConnection.isConnected())   m_DataBaseConnection.disconnectFromDatabase();\n  m_DataBaseConnection=new DatabaseConnection();\n  if (m_URL != null)   m_DataBaseConnection.setDatabaseURL(m_URL);\n  if (m_User != null)   m_DataBaseConnection.setUsername(m_User);\n  if (m_Password != null)   m_DataBaseConnection.setPassword(m_Password);\n  m_orderBy=new ArrayList<String>();\n  if (m_Keys != null)   setKeys(m_Keys);\n  m_inc=false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.StringTokenizer.nextToken()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.StringTokenizer.hasMoreTokens()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/weka/weka/src/main/java/weka/core/converters/DatabaseLoader.java",
      "types": [
        "StringTokenizer",
        "String",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "replaceAll",
        "hasMoreTokens",
        "add",
        "clear",
        "nextToken"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<java.lang.String>.clear()",
            "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()"
          ]
        }
      ],
      "keywords": [
        "array",
        "tokenizer",
        "lang",
        "list",
        "replace",
        "boolean",
        "java",
        "next",
        "token",
        "add",
        "clear",
        "string",
        "util",
        "tokens"
      ]
    },
    {
      "method": "testSetAsciiStream@1200",
      "body": "public void testSetAsciiStream() throws Exception {\n  crset=newNoInitialInstance();\n  crset.setCommand(\"update STREAM set LONGVARCHAR_T=? where ID= ?\");\n  String value=\"It's    is a very very very long long long story\";\n  byte[] bytes=value.getBytes(\"ISO-8859-1\");\n  crset.setAsciiStream(1,new ByteArrayInputStream(bytes),bytes.length);\n  crset.setInt(2,1);\n  if (\"true\".equals(System.getProperty(\"Testing Harmony\"))) {\n    crset.execute(conn);\n    rs=st.executeQuery(\"select * from STREAM where ID = 1\");\n    assertTrue(rs.next());\n    assertEquals(1,rs.getInt(1));\n    assertEquals(value,rs.getString(2));\n  }\n else {\n    try {\n      crset.execute(conn);\n      fail(\"Should throw SQLException\");\n    }\n catch (    SQLException e) {\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/sql/src/test/java/org/apache/harmony/sql/tests/internal/rowset/CachedRowSetStreamTest.java",
      "types": [
        "Byte",
        "ByteArrayInputStream",
        "Boolean",
        "String",
        "UnsupportedEncodingException",
        "System",
        "Object"
      ],
      "apicalls": [
        "equals",
        "getProperty",
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.lang.System.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "encoding",
        "unsupported",
        "get",
        "java",
        "byte",
        "system",
        "array",
        "equals",
        "bytes",
        "exception",
        "property",
        "object",
        "stream",
        "input",
        "io",
        "lang",
        "boolean",
        "string"
      ]
    },
    {
      "method": "fullyRendersWrong_noActualIfDisplayActualIsFalse_errorsDisplayedIfAny@160",
      "body": "@Test public void fullyRendersWrong_noActualIfDisplayActualIsFalse_errorsDisplayedIfAny(){\n  formatter.setDisplayActual(false);\n  RestDataTypeAdapter typeAdapter=mock(RestDataTypeAdapter.class,\"typeAdapter\");\n  when(typeAdapter.toString()).thenReturn(\"actual\");\n  List<String> errors=new ArrayList<String>();\n  errors.add(\"err1\");\n  when(typeAdapter.getErrors()).thenReturn(errors);\n  formatter.wrong(new FitCell(dummyParse),typeAdapter);\n  verify(mockDelegate).wrong(dummyParse);\n  verify(typeAdapter).getErrors();\n  assertTrue(\"does not display expected content\",dummyParse.body.indexOf(\"somebody\") >= 0);\n  assertFalse(\"does display expected\",dummyParse.body.indexOf(\"expected\") >= 0);\n  assertTrue(\"does not display errors\",dummyParse.body.indexOf(\"err1\") >= 0);\n  assertTrue(\"does not display errors label\",dummyParse.body.indexOf(\"errors\") >= 0);\n  assertFalse(\"does display actual\",dummyParse.body.indexOf(\"actual\") >= 0);\n  verifyNoMoreInteractions(mockDelegate);\n  verifyNoMoreInteractions(typeAdapter);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/RestFixture/src/test/java/smartrics/rest/fitnesse/fixture/FitFormatterTest.java",
      "types": [
        "Boolean",
        "String",
        "List",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "array",
        "util",
        "add",
        "boolean",
        "list",
        "string"
      ]
    },
    {
      "method": "create@63",
      "body": "public static CLForkJoinPool create(Collection<? extends CLDevice> devices,CLCommandQueue.Mode... modes){\n  List<CLCommandQueue> queues=new ArrayList<CLCommandQueue>(devices.size());\n  for (  CLDevice device : devices) {\n    queues.add(device.createCommandQueue(modes));\n  }\n  return create(queues);\n}\n",
      "formalParam": [
        "Collection<? extends CLDevice>",
        "CLCommandQueue.Mode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "CLForkJoinPool",
      "file": "./java_projects/jocl/src/com/jogamp/opencl/util/concurrent/CLForkJoinPool.java",
      "types": [
        "Integer",
        "ArrayList",
        "Collection"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.ArrayList(int)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "java",
        "util",
        "size",
        "integer",
        "list",
        "array"
      ]
    },
    {
      "method": "testEmpty003@2067",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.html.parser.ContentModel.ContentModel()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.text.html.parser.ContentModel.ContentModel(int,javax.swing.text.html.parser.ContentModel)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.text.html.parser.ContentModel.empty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java",
      "body": "/** \n * Test method for 'org.apache.harmony.swing.tests.javax.swing.text.parser.ContentModel.empty()' ContentModel(0,cm2) Expected result is false\n */\npublic void testEmpty003(){\n  ContentModel cm2=new ContentModel();\n  cm=new ContentModel(0,cm2);\n  assertFalse(cm.empty());\n}\n",
      "types": [
        "Integer",
        "Boolean",
        "text"
      ],
      "apicalls": [
        "empty"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.html.parser.ContentModel.ContentModel()",
            "javax.swing.text.html.parser.ContentModel.ContentModel(int,javax.swing.text.html.parser.ContentModel)",
            "javax.swing.text.html.parser.ContentModel.empty()"
          ]
        }
      ],
      "keywords": [
        "parser",
        "empty",
        "text",
        "integer",
        "content",
        "boolean",
        "javax",
        "model",
        "swing",
        "html"
      ]
    },
    {
      "method": "put@627",
      "body": "/** \n * Put a value in the JSONArray, where the value will be a JSONObject which is produced from a Map.\n * @param value A Map value.\n * @return      this.\n */\npublic JSONArray put(Map value){\n  this.put(new JSONObject(value));\n  return this;\n}\n",
      "formalParam": [
        "Map"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collection.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "JSONArray",
      "file": "./java_projects/mpd-2012-i41N/aula24-mvc/src/main/java/org/json/JSONArray.java",
      "types": [
        "Iterator",
        "Collection",
        "ArrayList",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "iterator",
        "hasNext",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "collection",
        "iterator",
        "java",
        "object",
        "list",
        "add",
        "array",
        "next"
      ]
    },
    {
      "method": "getDefaultMerge@402",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/spring-ide/plugins/org.springframework.ide.eclipse.beans.core/src/org/springframework/ide/eclipse/beans/core/internal/model/AbstractBeansConfig.java",
      "body": "/** \n * {@inheritDoc}\n */\npublic String getDefaultMerge(){\n  readConfig();\n  try {\n    r.lock();\n    return (defaults != null && defaults.getMerge() != null && defaults.getMerge().length() > 0 ? defaults.getMerge() : DEFAULT_MERGE);\n  }\n  finally {\n    r.unlock();\n  }\n}\n",
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "lock",
        "unlock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "unlock",
        "util",
        "locks",
        "lock",
        "concurrent",
        "java"
      ]
    },
    {
      "method": "open@65",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "JobEntryInterface",
      "file": "./java_projects/spoon-plugins/job/ecllimit/src/main/java/org/hpccsystems/pentaho/job/ecllimit/ECLLimitDialog.java",
      "body": "public JobEntryInterface open(){\n  Shell parentShell=getParent();\n  Display display=parentShell.getDisplay();\n  shell=new Shell(parentShell,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MIN| SWT.MAX);\n  props.setLook(shell);\n  JobDialog.setShellImage(shell,jobEntry);\n  ModifyListener lsMod=new ModifyListener(){\n    public void modifyText(    ModifyEvent e){\n      jobEntry.setChanged();\n    }\n  }\n;\n  String datasets[]=null;\n  AutoPopulate ap=new AutoPopulate();\n  try {\n    datasets=ap.parseDatasetsRecordsets(this.jobMeta.getJobCopies());\n  }\n catch (  Exception e) {\n    System.out.println(\"Error Parsing existing Datasets\");\n    System.out.println(e.toString());\n    datasets=new String[]{\"\"};\n  }\n  backupChanged=jobEntry.hasChanged();\n  FormLayout formLayout=new FormLayout();\n  formLayout.marginWidth=Const.FORM_MARGIN;\n  formLayout.marginHeight=Const.FORM_MARGIN;\n  shell.setLayout(formLayout);\n  shell.setText(\"Limit\");\n  int middle=props.getMiddlePct();\n  int margin=Const.MARGIN;\n  shell.setLayout(formLayout);\n  shell.setText(\"Define an ECL Limit\");\n  FormLayout groupLayout=new FormLayout();\n  groupLayout.marginWidth=10;\n  groupLayout.marginHeight=10;\n  Group generalGroup=new Group(shell,SWT.SHADOW_NONE);\n  props.setLook(generalGroup);\n  generalGroup.setText(\"General Details\");\n  generalGroup.setLayout(groupLayout);\n  FormData generalGroupFormat=new FormData();\n  generalGroupFormat.top=new FormAttachment(0,margin);\n  generalGroupFormat.width=400;\n  generalGroupFormat.height=100;\n  generalGroupFormat.left=new FormAttachment(middle,0);\n  generalGroup.setLayoutData(generalGroupFormat);\n  jobEntryName=buildText(\"Job Entry Name\",null,lsMod,middle,margin,generalGroup);\n  Group limitGroup=new Group(shell,SWT.SHADOW_NONE);\n  props.setLook(limitGroup);\n  limitGroup.setText(\"Limit Details\");\n  limitGroup.setLayout(groupLayout);\n  FormData limitGroupFormat=new FormData();\n  limitGroupFormat.top=new FormAttachment(generalGroup,margin);\n  limitGroupFormat.width=400;\n  limitGroupFormat.height=300;\n  limitGroupFormat.left=new FormAttachment(middle,0);\n  limitGroup.setLayoutData(limitGroupFormat);\n  recordsetName=buildText(\"Result Recordset\",null,lsMod,middle,margin,limitGroup);\n  recordset=buildCombo(\"Recordset\",recordsetName,lsMod,middle,margin,limitGroup,datasets);\n  maxRecs=buildText(\"Maximum Records\",recordset,lsMod,middle,margin,limitGroup);\n  failClause=buildText(\"FAIL(<clause>)\",maxRecs,lsMod,middle,margin,limitGroup);\n  keyed=buildCombo(\"KEYED\",failClause,lsMod,middle,margin,limitGroup,new String[]{\"false\",\"true\"});\n  count=buildCombo(\"COUNT\",keyed,lsMod,middle,margin,limitGroup,new String[]{\"false\",\"true\"});\n  skip=buildCombo(\"SKIP\",count,lsMod,middle,margin,limitGroup,new String[]{\"false\",\"true\"});\n  onFailTransform=buildText(\"ONFAIL(<transform>)\",skip,lsMod,middle,margin,limitGroup);\n  wOK=new Button(shell,SWT.PUSH);\n  wOK.setText(\"OK\");\n  wCancel=new Button(shell,SWT.PUSH);\n  wCancel.setText(\"Cancel\");\n  BaseStepDialog.positionBottomButtons(shell,new Button[]{wOK,wCancel},margin,limitGroup);\n  Listener cancelListener=new Listener(){\n    public void handleEvent(    Event e){\n      cancel();\n    }\n  }\n;\n  Listener okListener=new Listener(){\n    public void handleEvent(    Event e){\n      ok();\n    }\n  }\n;\n  wCancel.addListener(SWT.Selection,cancelListener);\n  wOK.addListener(SWT.Selection,okListener);\n  lsDef=new SelectionAdapter(){\n    public void widgetDefaultSelected(    SelectionEvent e){\n      ok();\n    }\n  }\n;\n  shell.addShellListener(new ShellAdapter(){\n    public void shellClosed(    ShellEvent e){\n      cancel();\n    }\n  }\n);\n  if (jobEntry.getName() != null) {\n    jobEntryName.setText(jobEntry.getName());\n  }\n  if (jobEntry.getRecordsetName() != null) {\n    recordsetName.setText(jobEntry.getRecordsetName());\n  }\n  if (jobEntry.getRecordset() != null) {\n    recordset.setText(jobEntry.getRecordset());\n  }\n  if (jobEntry.getMaxRecs() != null) {\n    maxRecs.setText(jobEntry.getMaxRecs());\n  }\n  if (jobEntry.getFailClause() != null) {\n    failClause.setText(jobEntry.getFailClause());\n  }\n  if (jobEntry.getKeyedString() != null) {\n    keyed.setText(jobEntry.getKeyedString());\n  }\n  if (jobEntry.getCountString() != null) {\n    count.setText(jobEntry.getCountString());\n  }\n  if (jobEntry.getSkipString() != null) {\n    skip.setText(jobEntry.getSkipString());\n  }\n  if (jobEntry.getOnFailTransform() != null) {\n    onFailTransform.setText(jobEntry.getOnFailTransform());\n  }\n  shell.pack();\n  shell.open();\n  while (!shell.isDisposed()) {\n    if (!display.readAndDispatch()) {\n      display.sleep();\n    }\n  }\n  return jobEntry;\n}\n",
      "types": [
        "PrintStream",
        "String",
        "Throwable"
      ],
      "apicalls": [
        "println",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.toString()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "println",
        "stream",
        "lang",
        "throwable",
        "print",
        "string",
        "io"
      ]
    },
    {
      "method": "getTitleMapping@716",
      "body": "/** \n * @see org.opencms.xml.content.I_CmsXmlContentHandler#getTitleMapping(org.opencms.file.CmsObject,org.opencms.xml.content.CmsXmlContent,java.util.Locale)\n */\npublic String getTitleMapping(CmsObject cms,CmsXmlContent document,Locale locale){\n  String result=null;\n  if (m_titleMappings.size() > 0) {\n    String xpath=m_titleMappings.get(0);\n    result=document.getStringValue(cms,xpath,locale);\n  }\n  return result;\n}\n",
      "formalParam": [
        "CmsObject",
        "CmsXmlContent",
        "Locale"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.String>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.List<java.lang.String>.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/opencms-core/src/org/opencms/xml/content/CmsDefaultXmlContentHandler.java",
      "types": [
        "String",
        "List",
        "Integer"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.get(int)"
          ]
        },
        {
          "calls": [
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "list",
        "integer",
        "size",
        "util",
        "java",
        "get",
        "string"
      ]
    },
    {
      "method": "overwrite_original@908",
      "body": "/** \n * Add option -overwrite_original to the exiftool commandline (see the documentation of exiftool for details).\n */\npublic ETOps overwrite_original(){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-overwrite_original\");\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "ETOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/ETOps.java",
      "types": [
        "StringBuffer",
        "Integer",
        "String"
      ],
      "apicalls": [
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "java",
        "length",
        "integer",
        "string",
        "lang"
      ]
    },
    {
      "method": "test_signature_enveloping_hmac_sha1_trunclen_0@54",
      "body": "@org.junit.Test public void test_signature_enveloping_hmac_sha1_trunclen_0() throws Exception {\n  try {\n    validate(\"signature-enveloping-hmac-sha1-trunclen-0-attack.xml\");\n    fail(\"Expected HMACOutputLength exception\");\n  }\n catch (  XMLSignatureException xse) {\n    if (xse.getMsgID().equals(\"algorithms.HMACOutputLengthMin\")) {\n    }\n else {\n      fail(xse.getMessage());\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(java.io.File)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          },
          {
            "_call": "java.io.File.toURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          },
          {
            "_call": "java.net.URI.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/santuario-java/src/test/java/org/apache/xml/security/test/dom/signature/HMACOutputLengthTest.java",
      "types": [
        "String",
        "File",
        "URI",
        "ParserConfigurationException",
        "UnsupportedEncodingException",
        "DocumentBuilder",
        "DocumentBuilderFactory",
        "IOException"
      ],
      "apicalls": [
        "toURI",
        "getBytes",
        "newDocumentBuilder",
        "parse",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.parse(java.io.File)",
            "java.io.File.toURI()",
            "java.net.URI.toString()",
            "java.lang.String.getBytes(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "factory",
        "new",
        "configuration",
        "parse",
        "net",
        "bytes",
        "file",
        "lang",
        "parser",
        "string",
        "get",
        "encoding",
        "java",
        "xml",
        "unsupported",
        "parsers",
        "exception",
        "document",
        "builder",
        "io",
        "javax",
        "uri"
      ]
    },
    {
      "method": "TestInstances@222",
      "body": "/** \n * the default constructor\n */\npublic TestInstances(){\n  super();\n  setRelation(\"Testdata\");\n  setSeed(1);\n  setNumInstances(20);\n  setClassType(Attribute.NOMINAL);\n  setNumClasses(2);\n  setClassIndex(CLASS_IS_LAST);\n  setNumNominal(1);\n  setNumNominalValues(2);\n  setNumNumeric(0);\n  setNumString(0);\n  setNumDate(0);\n  setNumRelational(0);\n  setNumRelationalNominal(1);\n  setNumRelationalNominalValues(2);\n  setNumRelationalNumeric(0);\n  setNumRelationalString(0);\n  setNumRelationalDate(0);\n  setNumInstancesRelational(10);\n  setMultiInstance(false);\n  setWords(arrayToList(DEFAULT_WORDS));\n  setWordSeparators(DEFAULT_SEPARATORS);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Random.Random(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector<java.lang.String>.Vector<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.StringTokenizer.nextToken()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.Vector<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.StringTokenizer.hasMoreTokens()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/weka/weka/src/main/java/weka/core/TestInstances.java",
      "types": [
        "Vector",
        "Boolean",
        "String",
        "Long",
        "Random",
        "StringTokenizer"
      ],
      "apicalls": [
        "hasMoreTokens",
        "add",
        "nextToken"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Random.Random(long)",
            "java.util.Vector<java.lang.String>.Vector<String>()",
            "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.util.Vector<java.lang.String>.add(java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()"
          ]
        }
      ],
      "keywords": [
        "add",
        "java",
        "vector",
        "token",
        "tokenizer",
        "string",
        "tokens",
        "next",
        "util",
        "long",
        "boolean",
        "random"
      ]
    },
    {
      "method": "getDefaultInstanceName@167",
      "body": "/** \n * Obtain the instance name part of a default provider property.\n * @param typeClass The type of the default provider property. Thisshould be one of Receiver.class, Transmitter.class, Sequencer.class, Synthesizer.class, SourceDataLine.class, TargetDataLine.class, Clip.class or Port.class.\n * @return The value of the instance name part of the property (thepart after the hash sign), if available. If the property is not set or the value has no instance name part, null is returned.\n */\npublic static synchronized String getDefaultInstanceName(Class typeClass){\n  String value=null;\n  String defaultProviderSpec=getDefaultProvider(typeClass);\n  if (defaultProviderSpec != null) {\n    int hashpos=defaultProviderSpec.indexOf('#');\n    if (hashpos >= 0 && hashpos < defaultProviderSpec.length() - 1) {\n      value=defaultProviderSpec.substring(hashpos + 1);\n    }\n  }\n  return value;\n}\n",
      "formalParam": [
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Properties.Properties()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.indexOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_then": [
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/com/sun/media/sound/JDK13Services.java",
      "types": [
        "Class",
        "Boolean",
        "Integer",
        "Properties",
        "String",
        "Object"
      ],
      "apicalls": [
        "getProperty",
        "indexOf",
        "substring",
        "equals",
        "length",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.util.Properties.Properties()",
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.indexOf(int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.util.Properties.Properties()",
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.indexOf(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "util",
        "name",
        "substring",
        "property",
        "object",
        "get",
        "string",
        "integer",
        "boolean",
        "lang",
        "equals",
        "java",
        "properties",
        "length",
        "class",
        "index"
      ]
    },
    {
      "method": "getBoolean@180",
      "body": "/** \n * Get the boolean value associated with an index. The string values \"true\" and \"false\" are converted to boolean.\n * @param index The index must be between 0 and length() - 1.\n * @return      The truth.\n * @throws JSONException If there is no value for the index or if thevalue is not convertable to boolean.\n */\npublic boolean getBoolean(int index) throws JSONException {\n  Object o=get(index);\n  if (o.equals(JSONObject.FALSE) || (o instanceof String && ((String)o).toLowerCase().equals(\"false\"))) {\n    return false;\n  }\n else   if (o.equals(JSONObject.TRUE) || (o instanceof String && ((String)o).toLowerCase().equals(\"true\"))) {\n    return true;\n  }\n  throw new JSONException(\"JSONArray[\" + index + \"] is not a Boolean.\");\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/EPAM-Mobile-TAF/source_code/client_side/BlackberryDriver/ClientTAFic/src/org/json/me/JSONArray.java",
      "types": [
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "equals",
        "toLowerCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lower",
        "equals",
        "java",
        "case",
        "string",
        "boolean",
        "lang",
        "object"
      ]
    },
    {
      "method": "read@2489",
      "body": "public void read(TProtocol iprot) throws TException {\n  TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == TType.STOP) {\n      break;\n    }\n    _Fields fieldId=_Fields.findByThriftId(field.id);\n    if (fieldId == null) {\n      TProtocolUtil.skip(iprot,field.type);\n    }\n else {\nswitch (fieldId) {\ncase SUCCESS:\n        if (field.type == TType.I64) {\n          this.success=iprot.readI64();\n          setSuccessIsSet(true);\n        }\n else {\n          TProtocolUtil.skip(iprot,field.type);\n        }\n      break;\ncase RE:\n    if (field.type == TType.STRUCT) {\n      this.re=new RimpException();\n      this.re.read(iprot);\n    }\n else {\n      TProtocolUtil.skip(iprot,field.type);\n    }\n  break;\n}\niprot.readFieldEnd();\n}\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.BitSet.set(int,boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/abiquo/aimstub/src/main/java/com/abiquo/aimstub/Aim.java",
      "types": [
        "BitSet",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "set"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.set(int,boolean)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "bit",
        "java",
        "boolean",
        "util",
        "set"
      ]
    },
    {
      "method": "checkIfGameOver@180",
      "body": "public void checkIfGameOver(){\n  int aliveplayers=0;\n  String winner=\"\";\n  for (  String name : this.playerlist.keySet()) {\n    if (this.playerlist.get(name)) {\n      aliveplayers++;\n      winner=name;\n    }\n  }\n  if (aliveplayers > 1) {\n    this.broadcast(aliveplayers + \"/\" + this.playerlist.size()+ \" still alive.\");\n  }\n else   if (aliveplayers == 1) {\n    this.broadcast(\"GAME OVER! \" + winner + \" is the winner!\");\n    final Player player=this.plugin.getServer().getPlayer(winner);\n    player.sendMessage(ChatColor.GOLD + \"You won the game! Prepare for destruction in 3 seconds!\");\n    this.plugin.getServer().getScheduler().scheduleSyncDelayedTask(super.plugin,new Runnable(){\n      public void run(){\n        player.setHealth(0);\n      }\n    }\n,60L);\n    this.resetGame(winner);\n  }\n else {\n    this.plugin.getServer().broadcast(\"Something went wrong!\",\"letsplay.lphg\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Boolean>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Boolean",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Boolean>.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/LetsPlay/LetsPlay/src/nu/letsplay/letsplay/gamemodes/LetsPlayHungerGames.java",
      "types": [
        "Set",
        "String",
        "Boolean",
        "Integer",
        "Object",
        "HashMap"
      ],
      "apicalls": [
        "clear",
        "keySet",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Boolean>.keySet()",
            "java.util.HashMap<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
            "java.util.HashMap<java.lang.String,java.lang.Boolean>.clear()",
            "java.util.HashMap<java.lang.String,java.lang.Integer>.clear()"
          ]
        }
      ],
      "keywords": [
        "map",
        "java",
        "key",
        "set",
        "get",
        "boolean",
        "util",
        "integer",
        "hash",
        "clear",
        "object",
        "string"
      ]
    },
    {
      "method": "mousePressed@115",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.event.MouseEvent.getClickCount()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.awt.event.MouseEvent.getX()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "javax.swing.table.TableColumnModel.getColumnIndexAtX(int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/codjo-gui-toolkit/src/test/java/net/codjo/gui/toolkit/table/TableRendererSorterWithButtonTest.java",
      "body": "@Override public void mousePressed(MouseEvent event){\n  if (event.getClickCount() > 1) {\n    JTableHeader tableHeader=(JTableHeader)event.getSource();\n    clickedColumn=tableHeader.getColumnModel().getColumnIndexAtX(event.getX());\n  }\n}\n",
      "types": [
        "TableColumnModel",
        "MouseEvent",
        "Integer"
      ],
      "apicalls": [
        "getColumnIndexAtX",
        "getClickCount",
        "getX"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getClickCount()",
            "java.awt.event.MouseEvent.getX()",
            "javax.swing.table.TableColumnModel.getColumnIndexAtX(int)"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.getClickCount()"
          ]
        }
      ],
      "keywords": [
        "x",
        "index",
        "mouse",
        "get",
        "column",
        "java",
        "model",
        "event",
        "click",
        "count",
        "awt",
        "table",
        "javax",
        "swing",
        "integer"
      ]
    },
    {
      "method": "appendQueryParameter@144",
      "body": "/** \n * Append a query parameter to the parameter set. Note that the query parameters are ordered and the sequence of call to this method should be honoured when an URL is generated. Note also that the same parameter name can be used multiple times.\n * @param parameterName the parameter name\n * @param paramaterValue the parameter value\n * @throws NullPointerException if any argument value is null\n * @throws IOException any IOException\n */\npublic void appendQueryParameter(String parameterName,String paramaterValue) throws NullPointerException, IOException {\n  if (parameterName == null) {\n    throw new NullPointerException(\"No null parameter name accepted\");\n  }\n  if (paramaterValue == null) {\n    throw new NullPointerException(\"No null parameter value accepted\");\n  }\n  if (amp == null) {\n    MimeType mt=mimeType;\n    if (mt == null) {\n      mt=MimeType.XHTML;\n    }\n    amp=AMP_MAP.get(mt);\n  }\n  appendable.append(questionMarkDone ? amp : \"?\");\n  PercentEncoding.QUERY_PARAM.encode(parameterName,appendable);\n  appendable.append('=');\n  PercentEncoding.QUERY_PARAM.encode(paramaterValue,appendable);\n  questionMarkDone=true;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Appendable.append(java.lang.CharSequence)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Appendable"
          },
          {
            "_call": "java.lang.Appendable.append(char)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Appendable"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gatein-portal/component/web/controller/src/main/java/org/exoplatform/web/controller/router/URIWriter.java",
      "types": [
        "IOException",
        "Appendable",
        "Character",
        "CharSequence"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Appendable.append(java.lang.CharSequence)",
            "java.lang.Appendable.append(char)"
          ]
        }
      ],
      "keywords": [
        "append",
        "sequence",
        "io",
        "appendable",
        "exception",
        "character",
        "lang",
        "java",
        "char"
      ]
    },
    {
      "method": "getProperty@62",
      "body": "/** \n * Returns the configuration as an Parameter\n * @return Returns Parameter.\n */\npublic Parameter getProperty(){\n  for (int i=0; i < actionList.length; i++) {\n    HashMap action=actionList[i];\n    if (!action.keySet().contains(\"items\")) {\n      return null;\n    }\n  }\n  OMFactory fac=OMAbstractFactory.getOMFactory();\n  OMElement paramElement=fac.createOMElement(\"Parameter\",null);\n  paramElement.addAttribute(fac.createOMAttribute(\"name\",null,WSSHandlerConstants.OUTFLOW_SECURITY));\n  for (int i=0; i < this.actionList.length; i++) {\n    OMElement actionElem=fac.createOMElement(WSSHandlerConstants.ACTION,null);\n    HashMap action=this.actionList[i];\n    Iterator keys=action.keySet().iterator();\n    while (keys.hasNext()) {\n      String key=(String)keys.next();\n      String value=(String)action.get(key);\n      if (value != null && value.length() > 0) {\n        OMElement elem=fac.createOMElement(key,null);\n        elem.setText(value);\n        actionElem.addChild(elem);\n      }\n    }\n    paramElement.addChild(actionElem);\n  }\n  Parameter param=new Parameter();\n  param.setParameterElement(paramElement);\n  param.setValue(paramElement);\n  param.setName(WSSHandlerConstants.OUTFLOW_SECURITY);\n  return param;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.keySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Set.contains(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap.keySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "Parameter",
      "file": "./java_projects/platform/dependencies/rampart/1.6.1-wso2v4/modules/rampart-core/src/main/java/org/apache/rampart/handler/config/OutflowConfiguration.java",
      "types": [
        "HashMap",
        "Boolean",
        "String",
        "Integer",
        "Object",
        "Iterator",
        "Set"
      ],
      "apicalls": [
        "iterator",
        "length",
        "hasNext",
        "contains",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.keySet()",
            "java.util.Set.contains(java.lang.Object)",
            "java.util.HashMap.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.lang.String.length()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "contains",
        "object",
        "iterator",
        "length",
        "lang",
        "next",
        "util",
        "java",
        "hash",
        "string",
        "map",
        "set",
        "boolean",
        "key",
        "integer"
      ]
    },
    {
      "method": "getTagHandlerPool@48",
      "body": "public static TagHandlerPool getTagHandlerPool(ServletConfig config){\n  TagHandlerPool result=null;\n  String tpClassName=getOption(config,OPTION_TAGPOOL,null);\n  if (tpClassName != null) {\n    try {\n      Class<?> c=Class.forName(tpClassName);\n      result=(TagHandlerPool)c.newInstance();\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      result=null;\n    }\n  }\n  if (result == null)   result=new TagHandlerPool();\n  result.init(config);\n  return result;\n}\n",
      "formalParam": [
        "ServletConfig"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.forName(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "TagHandlerPool",
      "file": "./java_projects/tomcat70/java/org/apache/jasper/runtime/TagHandlerPool.java",
      "types": [
        "String",
        "Class",
        "ClassNotFoundException",
        "Throwable"
      ],
      "apicalls": [
        "forName",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.lang.Class.forName(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "exception",
        "stack",
        "found",
        "java",
        "string",
        "name",
        "throwable",
        "class",
        "lang",
        "trace"
      ]
    },
    {
      "method": "toHexString@421",
      "body": "/** \n * Creates a padded upper-case string representation of the integer argument in base 16.\n * @param i\tan integer.\n * @return\ta padded upper-case string representation in base 16.\n */\npublic static String toHexString(int i){\n  return toHexString(i,8);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toHexString(int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/nachos/machine/Lib.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "toHexString",
        "toUpperCase",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toHexString(int)",
            "java.lang.String.toUpperCase()",
            "java.lang.String.length()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "hex",
        "integer",
        "case",
        "lang",
        "upper",
        "length"
      ]
    },
    {
      "method": "Normal_0@1727",
      "body": "@Test public void Normal_0(){\n  t(\"Normal[2, 0.5, 1]\",\"sqrt(2) / (sqrt(\u03c0) * \u212f^(2))\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geogebra/test/src/test/java/geogebra/cas/GeoGebraCasIntegrationTest.java",
      "types": [
        "String",
        "Object",
        "Integer",
        "Boolean",
        "HashSet"
      ],
      "apicalls": [
        "equals",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "string",
        "integer",
        "set",
        "object",
        "lang",
        "util",
        "length",
        "java",
        "boolean",
        "hash"
      ]
    },
    {
      "method": "startTLS@377",
      "body": "/** \n * Start TLS on the current connection. <code>cmd</code> is the command to issue to start TLS negotiation. If the command succeeds, we begin TLS negotiation. If the socket is already an SSLSocket this is a nop and the command is not issued.\n */\npublic synchronized void startTLS(String cmd) throws IOException, ProtocolException {\n  if (socket instanceof SSLSocket)   return;\n  simpleCommand(cmd,null);\n  socket=SocketFetcher.startTLS(socket,host,props,prefix);\n  initStreams(out);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.Socket.getInputStream()",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.net.Socket.getOutputStream()",
            "node": "DAPICall",
            "_returns": "java.io.OutputStream",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/javamail/mail/src/main/java/com/sun/mail/iap/Protocol.java",
      "types": [
        "IOException",
        "BufferedOutputStream",
        "OutputStream",
        "Socket",
        "DataOutputStream",
        "InputStream"
      ],
      "apicalls": [
        "getOutputStream",
        "getInputStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.Socket.getInputStream()",
            "java.net.Socket.getOutputStream()",
            "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
            "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)"
          ]
        }
      ],
      "keywords": [
        "input",
        "get",
        "exception",
        "io",
        "output",
        "data",
        "net",
        "buffered",
        "java",
        "socket",
        "stream"
      ]
    },
    {
      "method": "read@121",
      "formalParam": [
        "InputStream",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.io.InputStream.read(byte[],int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/hadoop_framework/core/src/main/java/com/lightboxtechnologies/io/IOUtils.java",
      "body": "/** \n * Reads from an  {@link InputStream} to a byte array. This will alwayscompletely fill the byte array, unless there are no more bytes to read from the stream.\n * @param in the input stream from which to read\n * @param buf the byte array to fill\n * @return the number of bytes read, of <code>-1</code> if at the end ofthe stream\n * @throws IOException if one occurs while reading\n */\npublic static int read(InputStream in,byte[] buf) throws IOException {\n  int num;\n  int off=0;\n  while (off < buf.length && (num=in.read(buf,off,buf.length - off)) != -1) {\n    off+=num;\n  }\n  return off == 0 ? -1 : off;\n}\n",
      "types": [
        "Integer",
        "IOException",
        "InputStream",
        "Byte"
      ],
      "apicalls": [
        "read"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.InputStream.read(byte[],int,int)",
            "java.io.InputStream.read(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "io",
        "stream",
        "exception",
        "input",
        "byte",
        "read"
      ]
    },
    {
      "method": "clearTopObjectsList@504",
      "body": "/** \n * Clear the top objects list. The top objects list is a list of top-level objects that this parser has created.\n * @see #topObjectsCreated()\n */\npublic void clearTopObjectsList(){\n  if (_topObjectsCreated == null) {\n    _topObjectsCreated=new LinkedList();\n  }\n else {\n    _topObjectsCreated.clear();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.LinkedList.LinkedList()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.util.List.clear()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/dawn-isencia/com.isencia.passerelle.engine/src/main/java/com/isencia/passerelle/model/util/MoMLParser.java",
      "types": [
        "List",
        "LinkedList"
      ],
      "apicalls": [
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList.LinkedList()"
          ]
        },
        {
          "calls": [
            "java.util.List.clear()"
          ]
        }
      ],
      "keywords": [
        "list",
        "util",
        "linked",
        "clear",
        "java"
      ]
    },
    {
      "method": "respondingGatewayPRPAIN201305UV02@49",
      "body": "public PRPAIN201306UV02 respondingGatewayPRPAIN201305UV02(RespondingGatewayPRPAIN201305UV02RequestType respondingGatewayPRPAIN201305UV02Request) throws AdapterPatientDiscoverySecuredFault {\n  PRPAIN201306UV02 response=null;\n  try {\n    AdapterPatientDiscoveryImpl impl=new AdapterPatientDiscoveryImpl();\n    response=impl.respondingGatewayPRPAIN201305UV02(true,respondingGatewayPRPAIN201305UV02Request,context);\n  }\n catch (  Exception e) {\n    PatientDiscoveryFaultType type=new PatientDiscoveryFaultType();\n    type.setErrorCode(\"920\");\n    type.setMessage(e.getLocalizedMessage());\n    AdapterPatientDiscoverySecuredFault fault=new AdapterPatientDiscoverySecuredFault(e.getMessage(),type);\n    throw fault;\n  }\n  return response;\n}\n",
      "formalParam": [
        "RespondingGatewayPRPAIN201305UV02RequestType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getLocalizedMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "PRPAIN201306UV02",
      "file": "./java_projects/CONNECT/Product/Production/Adapters/PatientDiscovery_a0/src/main/java/gov/hhs/fha/nhinc/patientdiscovery/adapter/AdapterPatientDiscoverySecured.java",
      "types": [
        "Throwable",
        "String"
      ],
      "apicalls": [
        "getMessage",
        "getLocalizedMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getLocalizedMessage()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "get",
        "java",
        "message",
        "throwable",
        "string",
        "lang",
        "localized"
      ]
    },
    {
      "method": "failover@733",
      "body": "public void failover(String host,int port){\n  _failoverHandler.setHost(host);\n  _failoverHandler.setPort(port);\n  startFailoverThread();\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.setName(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.setDaemon(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/andes/java/client/src/main/java/org/wso2/andes/client/protocol/AMQProtocolHandler.java",
      "types": [
        "Boolean",
        "String",
        "Thread"
      ],
      "apicalls": [
        "setName",
        "start",
        "setDaemon"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.setName(java.lang.String)",
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "thread",
        "daemon",
        "string",
        "lang",
        "name",
        "set",
        "start"
      ]
    },
    {
      "method": "writeLock@220",
      "body": "public void writeLock(){\n  if (readWriteLock.getReadHoldCount() > 0) {\n    throw new IllegalMonitorStateException(\"Impossible to acquire a write lock when currently holding a read lock. Use toArray() methods on NodeIterable and EdgeIterable to avoid holding a readLock.\");\n  }\n  readWriteLock.writeLock().lock();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gephi-maven/modules/DHNSGraph/src/main/java/org/gephi/graph/dhns/core/Dhns.java",
      "types": [
        "concurrent",
        "Integer"
      ],
      "apicalls": [
        "getReadHoldCount",
        "writeLock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "java",
        "write",
        "util",
        "lock",
        "count",
        "read",
        "hold",
        "locks",
        "get",
        "integer",
        "reentrant"
      ]
    },
    {
      "method": "dumpParameters@20",
      "body": "public static void dumpParameters(XMLStringBuffer xsb,Map<String,String> parameters){\n  if (!parameters.isEmpty()) {\n    for (    Map.Entry<String,String> para : parameters.entrySet()) {\n      Properties paramProps=new Properties();\n      paramProps.setProperty(\"name\",para.getKey());\n      paramProps.setProperty(\"value\",para.getValue());\n      xsb.addEmptyElement(\"parameter\",paramProps);\n    }\n  }\n}\n",
      "formalParam": [
        "XMLStringBuffer",
        "Map<String,String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Map<java.lang.String,java.lang.String>.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
                "node": "DAPICall",
                "_returns": "java.util.Set",
                "_throws": []
              },
              {
                "_call": "java.util.Properties.Properties()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/testng/src/main/java/org/testng/xml/XmlUtils.java",
      "types": [
        "Boolean",
        "String",
        "Object",
        "Properties",
        "Set",
        "Map"
      ],
      "apicalls": [
        "setProperty",
        "isEmpty",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.String,java.lang.String>.isEmpty()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.String,java.lang.String>.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Properties.Properties()",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "set",
        "entry",
        "empty",
        "java",
        "boolean",
        "string",
        "properties",
        "property",
        "map",
        "object"
      ]
    },
    {
      "method": "isFile@101",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "node": "DAPICall",
            "_returns": "java.lang.Thread",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader",
            "_throws": []
          },
          {
            "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.net.URL",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Quercus/resin/src/main/java/com/caucho/vfs/ClasspathPath.java",
      "body": "/** \n * Returns true if the file exists.\n */\npublic boolean isFile(){\n  return exists();\n}\n",
      "types": [
        "URL",
        "ClassLoader",
        "Thread",
        "String"
      ],
      "apicalls": [
        "currentThread",
        "getContextClassLoader",
        "getResource"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "java",
        "get",
        "current",
        "loader",
        "url",
        "class",
        "context",
        "resource",
        "thread"
      ]
    },
    {
      "method": "main@181",
      "body": "public static void main(String[] args) throws IOException {\n  int retCode=0;\n  Configuration hbaseConf=HBaseConfiguration.create(new Configuration());\n  Path hbaseRootDir=new Path(hbaseConf.get(\"hbase.rootdir\"));\n  Set<String> knownRegionPaths=getRegionPaths(hbaseRootDir,HConstants.META_TABLE_NAME);\n  Set<String> fsPaths=getFilesystemPaths(hbaseConf,hbaseRootDir);\n  fsPaths.removeAll(knownRegionPaths);\n  for (  String p : fsPaths) {\n    System.out.println(p);\n  }\n  System.exit(retCode);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<java.lang.String>.removeAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.exit(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/akela/src/main/java/com/mozilla/hadoop/UnknownPathFinder.java",
      "types": [
        "PrintStream",
        "Boolean",
        "Set",
        "Collection",
        "String",
        "System",
        "Integer"
      ],
      "apicalls": [
        "println",
        "exit",
        "removeAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.lang.String>.removeAll(java.util.Collection)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "set",
        "stream",
        "io",
        "println",
        "integer",
        "string",
        "system",
        "remove",
        "exit",
        "collection",
        "java",
        "print",
        "boolean",
        "util",
        "lang"
      ]
    },
    {
      "method": "getContents@31",
      "body": "public static String getContents(InputStream is){\n  byte[] buffer=new byte[2048];\n  int length;\n  StringBuilder sb=new StringBuilder();\n  try {\n    while ((length=is.read(buffer)) != -1)     sb.append(new String(buffer,0,length));\n    return sb.toString();\n  }\n catch (  IOException e) {\n    return null;\n  }\n}\n",
      "formalParam": [
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.String(byte[],int,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.io.InputStream.read(byte[])",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/chartsy/Chartsy/Chat/src/org/chartsy/chatsy/chat/util/URLFileSystem.java",
      "types": [
        "String",
        "IOException",
        "Byte",
        "InputStream",
        "StringBuilder",
        "Integer"
      ],
      "apicalls": [
        "read",
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.io.InputStream.read(byte[])",
            "java.lang.String.String(byte[],int,int)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.io.InputStream.read(byte[])",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "integer",
        "read",
        "input",
        "java",
        "builder",
        "append",
        "byte",
        "lang",
        "exception",
        "stream",
        "io"
      ]
    },
    {
      "method": "subSubs@305",
      "body": "public Subroutine[] subSubs(){\n  Set h=new HashSet();\n  Iterator i=instructions.iterator();\n  while (i.hasNext()) {\n    Instruction inst=((InstructionHandle)i.next()).getInstruction();\n    if (inst instanceof JsrInstruction) {\n      InstructionHandle targ=((JsrInstruction)inst).getTarget();\n      h.add(getSubroutine(targ));\n    }\n  }\n  Subroutine[] ret=new Subroutine[h.size()];\n  return (Subroutine[])h.toArray(ret);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.HashSet()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Set.add(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "Subroutine[]",
      "file": "./java_projects/lcmc/src/lib/org/apache/bcel/verifier/structurals/Subroutines.java",
      "types": [
        "Set",
        "HashSet",
        "Boolean",
        "Iterator",
        "Object"
      ],
      "apicalls": [
        "hasNext",
        "iterator",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.HashSet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Set.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next",
        "java",
        "set",
        "object",
        "boolean",
        "iterator",
        "util",
        "add",
        "hash"
      ]
    },
    {
      "method": "onResponseComplete@111",
      "body": "@Override public void onResponseComplete() throws IOException {\n  _responseComplete=true;\n  if (_needIntercept) {\n    if (_requestComplete && _responseComplete) {\n      try {\n        if (resolveCollectionIssues()) {\n          setDelegatingRequests(true);\n          setDelegatingResponses(true);\n          _requestComplete=false;\n          _responseComplete=false;\n          _destination.resend(_exchange);\n        }\n else {\n          setDelegationResult(false);\n          setDelegatingRequests(true);\n          setDelegatingResponses(true);\n          super.onResponseComplete();\n        }\n      }\n catch (      IOException ioe) {\n        LOG.debug(\"WebdavListener:Complete:IOException: might not be dealing with dav server, delegate\");\n        super.onResponseComplete();\n      }\n    }\n else {\n      if (LOG.isDebugEnabled())       LOG.debug(\"WebdavListener:Not ready, calling super\");\n      super.onResponseComplete();\n    }\n  }\n else {\n    super.onResponseComplete();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jetty.project/jetty-client/src/main/java/org/eclipse/jetty/client/webdav/WebdavListener.java",
      "types": [
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.PrintStream.println(java.lang.String)",
            "$NOT$java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "io",
        "java",
        "stream",
        "print",
        "string"
      ]
    },
    {
      "method": "hashCode@75",
      "body": "@Override public int hashCode(){\n  int result;\n  long temp;\n  result=name != null ? name.hashCode() : 0;\n  temp=value != +0.0d ? Double.doubleToLongBits(value) : 0L;\n  result=31 * result + (int)(temp ^ (temp >>> 32));\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.hashCode()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Double.doubleToLongBits(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/geolatte-geom/src/main/java/org/geolatte/geom/crs/CrsParameter.java",
      "types": [
        "Long",
        "Double",
        "String",
        "Integer"
      ],
      "apicalls": [
        "doubleToLongBits",
        "hashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.hashCode()",
            "java.lang.Double.doubleToLongBits(double)"
          ]
        }
      ],
      "keywords": [
        "bits",
        "integer",
        "long",
        "double",
        "lang",
        "hash",
        "string",
        "java",
        "code"
      ]
    },
    {
      "method": "test_Constructor@29",
      "body": "/** \n * @tests {@link java.nio.channels.CancelledKeyException#CancelledKeyException()}\n */\npublic void test_Constructor(){\n  CancelledKeyException e=new CancelledKeyException();\n  assertNull(e.getMessage());\n  assertNull(e.getLocalizedMessage());\n  assertNull(e.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getLocalizedMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/nio/src/test/java/common/org/apache/harmony/nio/tests/java/nio/channels/CancelledKeyExceptionTest.java",
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getMessage",
        "getCause",
        "getLocalizedMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getLocalizedMessage()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "cause",
        "get",
        "localized",
        "lang",
        "java",
        "throwable",
        "string",
        "message"
      ]
    },
    {
      "method": "getParent@492",
      "body": "/** \n * Get this folder's parent.\n */\npublic synchronized Folder getParent() throws MessagingException {\n  char c=getSeparator();\n  int index;\n  if ((index=fullName.lastIndexOf(c)) != -1)   return ((IMAPStore)store).newIMAPFolder(fullName.substring(0,index),c);\n else   return new DefaultFolder((IMAPStore)store);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.lastIndexOf(int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Folder",
      "file": "./java_projects/javamail/mail/src/main/java/com/sun/mail/imap/IMAPFolder.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "last",
        "lang",
        "integer",
        "index",
        "substring",
        "string",
        "java"
      ]
    },
    {
      "method": "getDemoPanel@166",
      "body": "public Component getDemoPanel(){\n  JideTabbedPane tabbedPane=new JideTabbedPane();\n  tabbedPane.setTabShape(JideTabbedPane.SHAPE_BOX);\n  TableModel model=DemoData.createProductReportsTableModel(false,0);\n  _table=new SortableTable(model);\n  _table.setRowResizable(true);\n  _table.setVariousRowHeights(true);\n  _table.setSelectInsertedRows(false);\n  AutoFilterTableHeader _header=new AutoFilterTableHeader(_table);\n  _header.setAutoFilterEnabled(true);\n  _header.setUseNativeHeaderRenderer(true);\n  _table.setTableHeader(_header);\n  tabbedPane.addTab(\"FilterableTableModel\",new JScrollPane(_table));\n  tabbedPane.addTab(\"JTable\",new JScrollPane(new JTable(model)));\n  return tabbedPane;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JScrollPane.JScrollPane(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JTable.JTable(javax.swing.table.TableModel)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JScrollPane.JScrollPane(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Component",
      "file": "./java_projects/Promasi-V2/org.promasi.desktop_swing/Libs/jide.3.3.3/examples/G7.FilterableTable/FilterableTableDemo.java",
      "types": [
        "TableModel",
        "JTable",
        "JScrollPane",
        "Component"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JScrollPane.JScrollPane(java.awt.Component)",
            "javax.swing.JTable.JTable(javax.swing.table.TableModel)",
            "javax.swing.JScrollPane.JScrollPane(java.awt.Component)"
          ]
        }
      ],
      "keywords": [
        "j",
        "component",
        "pane",
        "javax",
        "swing",
        "model",
        "scroll",
        "table"
      ]
    },
    {
      "method": "getPolicyTypes@263",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.String>.TreeMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.LinkedHashMap<java.lang.String,java.lang.String>.LinkedHashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "Map<String,String>",
      "file": "./java_projects/opennms_dashboard/opennms-provision/opennms-provision-persistence/src/main/java/org/opennms/netmgt/provision/persist/DefaultForeignSourceService.java",
      "body": "/** \n * <p>getPolicyTypes</p>\n * @return a {@link java.util.Map} object.\n */\npublic Map<String,String> getPolicyTypes(){\n  if (m_policies == null) {\n    Map<String,String> policies=new TreeMap<String,String>();\n    for (    OnmsPolicy p : m_serviceRegistry.findProviders(OnmsPolicy.class)) {\n      String policyName=p.getClass().getSimpleName();\n      if (p.getClass().isAnnotationPresent(Policy.class)) {\n        Policy annotation=p.getClass().getAnnotation(Policy.class);\n        if (annotation.value() != null && annotation.value().length() > 0) {\n          policyName=annotation.value();\n        }\n      }\n      policies.put(policyName,p.getClass().getName());\n    }\n    m_policies=new LinkedHashMap<String,String>();\n    for (    Entry<String,String> e : policies.entrySet()) {\n      m_policies.put(e.getValue(),e.getKey());\n    }\n  }\n  return m_policies;\n}\n",
      "types": [
        "TreeMap",
        "LinkedHashMap",
        "String",
        "Set",
        "Map"
      ],
      "apicalls": [
        "entrySet",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeMap<java.lang.String,java.lang.String>.TreeMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.util.LinkedHashMap<java.lang.String,java.lang.String>.LinkedHashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "java",
        "set",
        "tree",
        "util",
        "map",
        "entry",
        "put",
        "linked",
        "string"
      ]
    },
    {
      "method": "toString@33",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"[ \" + word);\n  sb.append(String.format(\" start(%d) end(%d) wt(%f) ]\",start,end,weight));\n  if (label != null)   sb.append(\" / \" + label);\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/constituency/lib/stanford-parser-2010-07-09/src/edu/stanford/nlp/parser/lexparser/LatticeEdge.java",
      "types": [
        "String",
        "StringBuilder",
        "Object"
      ],
      "apicalls": [
        "format",
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "format",
        "lang",
        "builder",
        "append",
        "object"
      ]
    },
    {
      "method": "sendNATMsg@170",
      "body": "/** \n * Send a request and wait for reply  This class should be threaded!!! This sends to the default NATPMP_PORT.\n * @param dstInet destination address (should be the private NAT address)\n * @param dstPkt packet to send\n * @param recBuf byte buffer big enough to hold received\n */\npublic DatagramPacket sendNATMsg(InetAddress dstInet,DatagramPacket dstPkt,byte[] recBuf) throws Exception {\n  int retryInterval=NATMAP_INIT_RETRY;\n  boolean recRep=false;\n  DatagramSocket skt=new DatagramSocket();\n  skt.connect(dstInet,NATMAP_PORT);\n  skt.setSoTimeout(NATMAP_INIT_RETRY);\n  skt.send(dstPkt);\n  DatagramPacket recPkt=new DatagramPacket(recBuf,recBuf.length);\n  while (!recRep && (retryInterval < NATMAP_MAX_RETRY)) {\n    try {\n      skt.receive(recPkt);\n      recRep=true;\n    }\n catch (    SocketTimeoutException ste) {\n      Thread.sleep(retryInterval);\n      retryInterval+=(retryInterval * 2);\n    }\n  }\n  if (!recRep) {\n    throw (new PortUnreachableException());\n  }\n  return recPkt;\n}\n",
      "formalParam": [
        "InetAddress",
        "DatagramPacket",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.DatagramSocket.DatagramSocket()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.net.SocketException"
            ]
          },
          {
            "_call": "java.net.DatagramSocket.connect(java.net.InetAddress,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.DatagramSocket.setSoTimeout(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.net.SocketException"
            ]
          },
          {
            "_call": "java.net.DatagramSocket.send(java.net.DatagramPacket)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.net.DatagramPacket.DatagramPacket(byte[],int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Thread.sleep(long)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.InterruptedException"
                ]
              }
            ],
            "_try": [
              {
                "_call": "java.net.DatagramSocket.receive(java.net.DatagramPacket)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "DatagramPacket",
      "file": "./java_projects/frostwire-desktop/components/azureus/src/main/java/com/aelitis/net/natpmp/impl/NatPMPDeviceImpl.java",
      "types": [
        "DatagramSocket",
        "IOException",
        "SocketException",
        "Thread",
        "Byte",
        "InetAddress",
        "DatagramPacket",
        "InterruptedException",
        "Long",
        "Integer"
      ],
      "apicalls": [
        "send",
        "sleep",
        "setSoTimeout",
        "receive",
        "connect"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.DatagramSocket.DatagramSocket()",
            "java.net.DatagramSocket.connect(java.net.InetAddress,int)",
            "java.net.DatagramSocket.setSoTimeout(int)",
            "java.net.DatagramSocket.send(java.net.DatagramPacket)",
            "java.net.DatagramPacket.DatagramPacket(byte[],int)",
            "java.net.DatagramSocket.receive(java.net.DatagramPacket)"
          ]
        },
        {
          "calls": [
            "java.net.DatagramSocket.DatagramSocket()",
            "java.net.DatagramSocket.connect(java.net.InetAddress,int)",
            "java.net.DatagramSocket.setSoTimeout(int)",
            "java.net.DatagramSocket.send(java.net.DatagramPacket)",
            "java.net.DatagramPacket.DatagramPacket(byte[],int)",
            "java.net.DatagramSocket.receive(java.net.DatagramPacket)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "address",
        "receive",
        "connect",
        "net",
        "java",
        "sleep",
        "thread",
        "datagram",
        "byte",
        "timeout",
        "packet",
        "io",
        "send",
        "socket",
        "long",
        "integer",
        "interrupted",
        "exception",
        "inet",
        "set",
        "lang"
      ]
    },
    {
      "method": "testInsufficientThreads@252",
      "body": "@Test public void testInsufficientThreads() throws Exception {\n  final ExecutorService exec=Executors.newFixedThreadPool(2);\n  Future<Object> future=exec.submit(new Callable<Object>(){\n    public Object call() throws Exception {\n      SocketChannel channel=mock(SocketChannel.class);\n      Socket socket=mock(Socket.class);\n      Mockito.when(channel.socket()).thenReturn(socket);\n      doAnswer(new Answer<Integer>(){\n        public Integer answer(        InvocationOnMock invocation) throws Throwable {\n          ByteBuffer buffer=(ByteBuffer)invocation.getArguments()[0];\n          buffer.position(1025);\n          return 1025;\n        }\n      }\n).when(channel).read(Mockito.any(ByteBuffer.class));\n      when(socket.getReceiveBufferSize()).thenReturn(1024);\n      final TcpNioConnection connection=new TcpNioConnection(channel,false,false);\n      connection.setTaskExecutor(exec);\n      connection.setPipeTimeout(200);\n      ReflectionUtils.doWithMethods(TcpNioConnection.class,new MethodCallback(){\n        public void doWith(        Method method) throws IllegalArgumentException, IllegalAccessException {\n          method.setAccessible(true);\n          try {\n            method.invoke(connection,(Object[])null);\n          }\n catch (          InvocationTargetException e) {\n            throw (RuntimeException)e.getCause();\n          }\n        }\n      }\n,new MethodFilter(){\n        public boolean matches(        Method method){\n          return method.getName().equals(\"doRead\");\n        }\n      }\n);\n      return null;\n    }\n  }\n);\n  try {\n    Object o=future.get(10,TimeUnit.SECONDS);\n    fail(\"Expected exception, got \" + o);\n  }\n catch (  ExecutionException e) {\n    assertEquals(\"Timed out writing to pipe, probably due to insufficient threads in \" + \"a fixed thread pool; consider increasing this task executor pool size\",e.getCause().getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.Executors.newFixedThreadPool(int)",
            "node": "DAPICall",
            "_returns": "java.util.concurrent.ExecutorService",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)",
            "node": "DAPICall",
            "_returns": "java.util.concurrent.Future",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getCause()",
                "node": "DAPICall",
                "_returns": "java.lang.Throwable",
                "_throws": []
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.Future<java.lang.Object>.get(long,java.util.concurrent.TimeUnit)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": [
                  "java.lang.InterruptedException",
                  "java.util.concurrent.ExecutionException",
                  "java.util.concurrent.TimeoutException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-integration/spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionTests.java",
      "types": [
        "ExecutorService",
        "String",
        "Future",
        "Long",
        "Object",
        "Integer",
        "Callable",
        "Executors",
        "Throwable",
        "InterruptedException",
        "ExecutionException",
        "TimeoutException",
        "TimeUnit"
      ],
      "apicalls": [
        "getMessage",
        "getCause",
        "newFixedThreadPool",
        "get",
        "submit"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.Executors.newFixedThreadPool(int)",
            "java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)",
            "java.util.concurrent.Future<java.lang.Object>.get(long,java.util.concurrent.TimeUnit)"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.Executors.newFixedThreadPool(int)",
            "java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)",
            "java.util.concurrent.Future<java.lang.Object>.get(long,java.util.concurrent.TimeUnit)",
            "java.lang.Throwable.getCause()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "get",
        "time",
        "future",
        "integer",
        "object",
        "pool",
        "timeout",
        "unit",
        "concurrent",
        "util",
        "long",
        "thread",
        "exception",
        "java",
        "lang",
        "throwable",
        "cause",
        "service",
        "executors",
        "execution",
        "interrupted",
        "message",
        "fixed",
        "callable",
        "submit",
        "executor",
        "new",
        "string"
      ]
    },
    {
      "method": "warning@76",
      "body": "public void warning(String format,Object... arg){\n  log(Level.WARNING,format,arg);\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/morphia/morphia/src/main/java/com/google/code/morphia/logging/jdk/FastestJDKLogger.java",
      "types": [
        "Boolean",
        "String",
        "Level",
        "Logger",
        "Object"
      ],
      "apicalls": [
        "isLoggable",
        "logp"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "loggable",
        "logp",
        "logger",
        "java",
        "object",
        "util",
        "logging",
        "string",
        "level",
        "boolean"
      ]
    },
    {
      "method": "lockPage@307",
      "body": "/** \n * Locks page for editing.  Note, however, that the PageManager will in no way prevent you from actually editing this page; the lock is just for information.\n * @param page WikiPage to lock\n * @param user Username to use for locking\n * @return null, if page could not be locked.\n */\npublic PageLock lockPage(WikiPage page,String user){\n  PageLock lock=null;\n  if (m_reaper == null) {\n    m_reaper=new LockReaper(m_engine);\n    m_reaper.start();\n  }\nsynchronized (m_pageLocks) {\n    fireEvent(WikiPageEvent.PAGE_LOCK,page.getName());\n    lock=m_pageLocks.get(page.getName());\n    if (lock == null) {\n      Date d=new Date();\n      lock=new PageLock(page,user,d,new Date(d.getTime() + m_expiryTime * 60 * 1000L));\n      m_pageLocks.put(page.getName(),lock);\n      log.debug(\"Locked page \" + page.getName() + \" for \"+ user);\n    }\n else {\n      log.debug(\"Page \" + page.getName() + \" already locked by \"+ lock.getLocker());\n      lock=null;\n    }\n  }\n  return lock;\n}\n",
      "formalParam": [
        "WikiPage",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "PageLock",
      "file": "./java_projects/jspwiki/src/org/apache/wiki/PageManager.java",
      "types": [
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "get",
        "time",
        "long",
        "util",
        "date",
        "java"
      ]
    },
    {
      "method": "debugString@225",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/vjet/extmod/dltk/core/org.eclipse.dltk.mod.core/ast/org/eclipse/dltk/mod/ast/ASTNode.java",
      "body": "public String debugString(){\n  return simplifyClassName(this.getClass().getName()) + \"@\" + this.getSourceRange().toString();\n}\n",
      "types": [
        "Integer",
        "Class",
        "String"
      ],
      "apicalls": [
        "getName",
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "index",
        "name",
        "substring",
        "lang",
        "last",
        "class",
        "string",
        "java",
        "get",
        "integer"
      ]
    },
    {
      "method": "putRemoteFile@29",
      "body": "@Override public void putRemoteFile(String filename,String contents) throws Exception, IOException {\n  putRemoteFileCount++;\n  addFile(filename,contents);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/mobileorg-android-test/src/com/matburt/mobileorg/test/Synchronizers/SynchronizerStub.java",
      "types": [
        "String",
        "Object",
        "HashMap"
      ],
      "apicalls": [
        "put",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.remove(java.lang.Object)",
            "java.util.HashMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "put",
        "remove",
        "string",
        "util",
        "hash",
        "object",
        "java",
        "map"
      ]
    },
    {
      "method": "alignBarCode@241",
      "body": "public static String alignBarCode(String sLine,int iSize){\n  if (sLine.length() > iSize) {\n    return sLine.substring(sLine.length() - iSize);\n  }\n else {\n    return getWhiteString(iSize - sLine.length(),'0') + sLine;\n  }\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.String(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/KinoPOS/src-pos/com/openbravo/pos/printer/DeviceTicket.java",
      "types": [
        "Character",
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.String(char[])"
          ]
        }
      ],
      "keywords": [
        "java",
        "character",
        "lang",
        "substring",
        "string",
        "length",
        "integer"
      ]
    },
    {
      "method": "read@123",
      "body": "/** \n * Reads bytes from the input stream and updates the digest. This method reads the underlying input stream and if the on flag is true then updates the message digest.\n * @param b a byte array to store the data from the input stream\n * @param off an offset to start at in the array\n * @param len length of data to read\n * @return Returns count of bytes read, -1 is returned to indicate thatthe end of stream was reached before this read call\n * @throws IOException if an IO error occurs in the underlying input stream,this error is thrown\n */\npublic int read(byte[] b,int off,int len) throws IOException {\n  int temp=in.read(b,off,len);\n  if (state == true && temp != -1)   digest.update(b,off,temp);\n  return temp;\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.InputStream.read(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.security.MessageDigest.update(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/classpath/java/security/DigestInputStream.java",
      "types": [
        "IOException",
        "Byte",
        "InputStream",
        "Integer",
        "MessageDigest"
      ],
      "apicalls": [
        "update",
        "read"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.InputStream.read(byte[],int,int)",
            "java.security.MessageDigest.update(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "io",
        "message",
        "java",
        "input",
        "update",
        "stream",
        "security",
        "read",
        "integer",
        "byte",
        "digest",
        "exception"
      ]
    },
    {
      "method": "close@168",
      "body": "/** \n * Closes the root collection element and ends the document.\n */\npublic void close(){\n  try {\n    xmlWriter.writeEndElement();\n    xmlWriter.writeEndDocument();\n    xmlWriter.close();\n  }\n catch (  XMLStreamException e) {\n    log.error(\"Unable to close EIM stream\",e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.stream.XMLStreamWriter.writeEndElement()",
            "_throws": [
              "javax.xml.stream.XMLStreamException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.stream.XMLStreamWriter.writeEndDocument()",
            "_throws": [
              "javax.xml.stream.XMLStreamException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.stream.XMLStreamWriter.close()",
            "_throws": [
              "javax.xml.stream.XMLStreamException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cosmo/cosmo/src/main/java/org/osaf/cosmo/eim/eimml/EimmlStreamWriter.java",
      "types": [
        "XMLStreamWriter",
        "XMLStreamException"
      ],
      "apicalls": [
        "writeEndElement",
        "writeEndDocument",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.XMLStreamWriter.writeEndElement()",
            "javax.xml.stream.XMLStreamWriter.writeEndDocument()",
            "javax.xml.stream.XMLStreamWriter.close()"
          ]
        }
      ],
      "keywords": [
        "write",
        "xml",
        "javax",
        "close",
        "end",
        "document",
        "element",
        "exception",
        "writer",
        "stream"
      ]
    },
    {
      "method": "list@304",
      "body": "@Override public AttributedList<Path> list(final AttributedList<Path> children){\n  if (this.attributes().isDirectory()) {\n    try {\n      this.getSession().check();\n      this.getSession().message(MessageFormat.format(Locale.localizedString(\"Listing directory {0}\",\"Status\"),this.getName()));\n      if (this.isRoot()) {\n        for (        IBlobContainer container : this.getSession().getContainers(true)) {\n          Path p=PathFactory.createPath(this.getSession(),this.getAbsolute(),container.getContainerName(),Path.VOLUME_TYPE | Path.DIRECTORY_TYPE);\n          p.attributes().setOwner(container.getAccountName());\n          p.attributes().setModificationDate(container.getLastModifiedTime().getTime());\n          children.add(p);\n        }\n      }\n else {\n        IBlobContainer container=this.getSession().getContainer(this.getContainerName());\n        final Iterator<IBlobProperties> blobs=container.listBlobs(this.getKey(),true);\n        while (blobs.hasNext()) {\n          final IBlobProperties object=blobs.next();\n          final Path file=PathFactory.createPath(this.getSession(),this.getContainerName(),object.getName(),\"application/directory\".equals(object.getContentType()) ? Path.DIRECTORY_TYPE : Path.FILE_TYPE);\n          if (file.getParent().equals(this)) {\n            file.setParent(this);\n            file.attributes().setSize(object.getContentLength());\n            file.attributes().setChecksum(object.getETag());\n            file.attributes().setModificationDate(object.getLastModifiedTime().getTime());\n            file.attributes().setOwner(this.attributes().getOwner());\n            if (file.attributes().isDirectory()) {\n              file.attributes().setPlaceholder(true);\n            }\n            children.add(file);\n          }\n        }\n      }\n      this.getSession().setWorkdir(this);\n    }\n catch (    StorageException e) {\n      log.warn(\"Listing directory failed:\" + e.getMessage());\n      children.attributes().setReadable(false);\n      if (this.cache().isEmpty()) {\n        this.error(e.getMessage(),e);\n      }\n    }\ncatch (    IOException e) {\n      log.warn(\"Listing directory failed:\" + e.getMessage());\n      children.attributes().setReadable(false);\n      if (this.cache().isEmpty()) {\n        this.error(e.getMessage(),e);\n      }\n    }\n  }\n  return children;\n}\n",
      "formalParam": [
        "AttributedList<Path>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "AttributedList<Path>",
      "file": "./java_projects/cyberduck/source/ch/cyberduck/core/azure/AzurePath.java",
      "types": [
        "Object",
        "String",
        "MessageFormat",
        "Boolean"
      ],
      "apicalls": [
        "equals",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "text",
        "lang",
        "message",
        "string",
        "object",
        "format",
        "java",
        "boolean"
      ]
    },
    {
      "method": "LearnHistory@332",
      "body": "public LearnHistory(File file){\n  try {\n    m_file=file;\n    if (m_file != null)     load(m_file);\n  }\n catch (  Exception e) {\n    Main.logThrowable(\"Could not load learn history.\",e);\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.File.exists()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.FileNotFoundException"
            ]
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory",
            "_throws": []
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ]
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.InputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jMemorize/src/jmemorize/core/learn/LearnHistory.java",
      "types": [
        "FileInputStream",
        "FileNotFoundException",
        "Boolean",
        "File",
        "DocumentBuilder",
        "ParserConfigurationException",
        "DocumentBuilderFactory",
        "InputStream",
        "IOException"
      ],
      "apicalls": [
        "close",
        "parse",
        "newInstance",
        "newDocumentBuilder",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "javax",
        "close",
        "parse",
        "found",
        "parser",
        "configuration",
        "boolean",
        "xml",
        "java",
        "stream",
        "new",
        "factory",
        "input",
        "parsers",
        "exception",
        "io",
        "file",
        "builder",
        "instance",
        "exists",
        "document"
      ]
    },
    {
      "method": "writeTo@58",
      "body": "public int writeTo(final OutputStream os,int offset,int maxWriteSize) throws IOException {\n  int bytesToWrite=Math.min(byteRepresentation.length - offset,maxWriteSize);\n  os.write(byteRepresentation,offset,bytesToWrite);\n  return bytesToWrite;\n}\n",
      "formalParam": [
        "OutputStream",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.io.OutputStream.write(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/DrizzleJDBC/src/main/java/org/drizzle/jdbc/internal/common/query/parameters/TimestampParameter.java",
      "types": [
        "IOException",
        "Math",
        "Byte",
        "Integer",
        "OutputStream"
      ],
      "apicalls": [
        "write",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "output",
        "math",
        "min",
        "lang",
        "integer",
        "io",
        "write",
        "byte",
        "java",
        "stream",
        "exception"
      ]
    },
    {
      "method": "testExceptionHelpers@95",
      "body": "public void testExceptionHelpers(){\n  RuntimeException e=new RuntimeException(\"test\");\n  RuntimeException wrapper=new RuntimeException(e);\n  assertSame(e,ClassUtil.getRootCause(wrapper));\n  try {\n    ClassUtil.throwAsIAE(e);\n    fail(\"Shouldn't get this far\");\n  }\n catch (  RuntimeException e2) {\n    assertSame(e,e2);\n  }\n  try {\n    ClassUtil.unwrapAndThrowAsIAE(wrapper);\n    fail(\"Shouldn't get this far\");\n  }\n catch (  RuntimeException e2) {\n    assertSame(e,e2);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.RuntimeException.RuntimeException(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.RuntimeException.RuntimeException(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jackson/src/test/org/codehaus/jackson/map/util/TestClassUtil.java",
      "types": [
        "RuntimeException",
        "String",
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.RuntimeException.RuntimeException(java.lang.String)",
            "java.lang.RuntimeException.RuntimeException(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "runtime",
        "exception",
        "java",
        "throwable",
        "string",
        "lang"
      ]
    },
    {
      "method": "shortenToLength@968",
      "body": "public static String shortenToLength(CharSequence sequence,int length){\n  int tempLength=sequence.length();\n  if (tempLength <= length) {\n    return sequence.toString();\n  }\n  return sequence.subSequence(0,length).toString();\n}\n",
      "formalParam": [
        "CharSequence",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.CharSequence.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.subSequence(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.CharSequence",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/com.idega.core/src/java/com/idega/util/StringHandler.java",
      "types": [
        "Integer",
        "String",
        "CharSequence"
      ],
      "apicalls": [
        "length",
        "subSequence",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.CharSequence.length()",
            "java.lang.CharSequence.toString()",
            "java.lang.CharSequence.subSequence(int,int)",
            "java.lang.CharSequence.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "length",
        "integer",
        "string",
        "char",
        "lang",
        "sequence",
        "sub"
      ]
    },
    {
      "method": "testUnknownHostExceptionStringException@26",
      "body": "/** \n * {@link java.rmi.UnknownHostException#UnknownHostException(java.lang.String,java.lang.Exception)}.\n */\npublic void testUnknownHostExceptionStringException(){\n  NullPointerException npe=new NullPointerException();\n  UnknownHostException e=new UnknownHostException(\"fixture\",npe);\n  assertTrue(e.getMessage().indexOf(\"fixture\") > -1);\n  assertSame(npe,e.getCause());\n  assertSame(npe,e.detail);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.rmi.RemoteException.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.rmi.RemoteException.getCause()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/rmi/src/test/api/java/org/apache/harmony/rmi/UnknownHostExceptionTest.java",
      "types": [
        "Throwable",
        "String",
        "RemoteException",
        "Integer"
      ],
      "apicalls": [
        "getMessage",
        "getCause",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.rmi.RemoteException.getMessage()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.rmi.RemoteException.getCause()"
          ]
        }
      ],
      "keywords": [
        "index",
        "get",
        "string",
        "integer",
        "java",
        "throwable",
        "lang",
        "exception",
        "cause",
        "message",
        "rmi",
        "remote"
      ]
    },
    {
      "method": "registerNamespace@34",
      "body": "public void registerNamespace(String s,String s1) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {\n  if ((s == null) || ((s.equals(\"jcr\")) || (s.equals(\"nt\")) || (s.contains(\"xml\"))|| (s.equals(\"mix\"))|| (s.equals(\"sv\")))) {\n    throw new NamespaceException();\n  }\n else   if ((s != null)) {\n    prefix.add(s);\n    uris.add(s1);\n    uri_nameSpace.put(s1,s);\n    prefix_nameSpace.put(s,s1);\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform/components/registry/org.wso2.carbon.registry.jcr/src/main/java/org/wso2/carbon/registry/jcr/RegistryNamespace.java",
      "types": [
        "Object",
        "Map",
        "Boolean",
        "List",
        "String"
      ],
      "apicalls": [
        "put",
        "add",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "equals",
        "put",
        "list",
        "add",
        "string",
        "map",
        "lang",
        "boolean",
        "object"
      ]
    },
    {
      "method": "resize@195",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.sort(java.util.List)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/citrus/common/util/src/test/java/com/alibaba/citrus/util/collection/IntHashMapTests.java",
      "body": "/** \n * \u6d4b\u8bd5\u5f53hash\u8868\u4e2d\u7684\u9879\u6570\u8d85\u8fc7\u9608\u503c\u65f6\u7684\u8868\u73b0. \n */\n@Test public void resize(){\n  int capacity=map3.getCapacity();\n  int threshold=map3.getThreshold();\n  int max=threshold * 4 + 1;\n  for (int i=0; i < max; i++) {\n    map3.put(i,new Integer(i));\n    if (map3.size() > threshold) {\n      threshold*=2;\n      capacity*=2;\n    }\n    assertEquals(capacity,map3.getCapacity());\n    assertEquals(threshold,map3.getThreshold());\n  }\n  List<String> list;\n  assertNotNull(list=parseToString(map3));\n  assertEquals(max,list.size());\n  List<String> expectedList=createArrayList(max);\n  for (int i=0; i < max; i++) {\n    expectedList.add(i + \"=\" + i);\n  }\n  Collections.sort(expectedList);\n  assertEquals(expectedList,list);\n}\n",
      "types": [
        "List",
        "Integer",
        "Boolean",
        "Collections",
        "String"
      ],
      "apicalls": [
        "add",
        "size",
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.Collections.sort(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "collections",
        "boolean",
        "list",
        "add",
        "integer",
        "sort",
        "java",
        "string",
        "size"
      ]
    },
    {
      "method": "println@136",
      "body": "public void println(double v) throws IOException {\n  print(v);\n  newLine();\n}\n",
      "formalParam": [
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.append(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/struts2/core/src/test/java/org/apache/struts2/views/jsp/ui/StrutsBodyContent.java",
      "types": [
        "Double",
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.append(double)",
            "java.lang.StringBuilder.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "builder",
        "append",
        "lang",
        "double"
      ]
    },
    {
      "method": "toString@82",
      "body": "/** \n * @ast method \n * @aspect PrettyPrint\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java1.4Frontend/PrettyPrint.jadd:548\n */\npublic void toString(StringBuffer s){\n  s.append(indent());\n  getExpr().toString(s);\n  s.append(\";\");\n}\n",
      "formalParam": [
        "StringBuffer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/soot/generated/jastadd/soot/JastAddJ/ExprStmt.java",
      "types": [
        "String",
        "StringBuffer",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "object",
        "lang",
        "append",
        "string",
        "buffer"
      ]
    },
    {
      "method": "createContentVersion@186",
      "body": "/** \n * Inserts a new ContentVersion.\n */\npublic int createContentVersion(final String principalName,ContentVersionVO contentVersionVO,int contentId,int languageId){\n  if (!ServerNodeController.getController().getIsIPAllowed(getRequest())) {\n    logger.error(\"A client with IP \" + getRequest().getRemoteAddr() + \" was denied access to the webservice. Could be a hack attempt or you have just not configured the allowed IP-addresses correct.\");\n    return -1;\n  }\n  int newContentVersionId=0;\n  logger.info(\"***************************************\");\n  logger.info(\"Creating content through webservice....\");\n  logger.info(\"***************************************\");\n  try {\n    initializePrincipal(principalName);\n    ContentVersionVO newContentVersionVO=contentVersionControllerProxy.acCreate(this.principal,new Integer(contentId),new Integer(languageId),contentVersionVO);\n    newContentVersionId=newContentVersionVO.getId().intValue();\n  }\n catch (  Exception e) {\n    logger.error(\"En error occurred when we tried to create a new contentVersion:\" + e.getMessage());\n    logger.warn(\"En error occurred when we tried to create a new contentVersion:\" + e.getMessage(),e);\n  }\n  updateCaches();\n  return newContentVersionId;\n}\n",
      "formalParam": [
        "String",
        "ContentVersionVO",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Integer.Integer(int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.Integer.Integer(int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/infoglue/src/java/org/infoglue/cms/webservices/RemoteContentServiceImpl.java",
      "types": [
        "Throwable",
        "String",
        "Integer"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.lang.Integer.Integer(int)",
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "throwable",
        "java",
        "message",
        "string",
        "get"
      ]
    },
    {
      "method": "setInCache@162",
      "body": "public void setInCache(String key,Object obj,long age){\n  setInCache(key,\"DEFAULT\",obj,age);\n}\n",
      "formalParam": [
        "String",
        "Object",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.util.Set<java.lang.String>",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.put(java.lang.String,java.util.Set<java.lang.String>)",
            "_throws": [],
            "_returns": "java.util.Set<java.lang.String>",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/open-bluedragon/src/com/nary/cache/LRUCache.java",
      "types": [
        "Object",
        "HashSet",
        "String",
        "Set",
        "Map"
      ],
      "apicalls": [
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.get(java.lang.Object)",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.put(java.lang.String,java.util.Set<java.lang.String>)"
          ]
        }
      ],
      "keywords": [
        "map",
        "util",
        "set",
        "put",
        "object",
        "get",
        "java",
        "hash",
        "string"
      ]
    },
    {
      "method": "isLess@47",
      "body": "public static boolean isLess(String fileName){\n  return fileName.toLowerCase().endsWith(\".less\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/press/app/press/StyleCompressor.java",
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "toLowerCase",
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "case",
        "lower",
        "java",
        "string",
        "ends",
        "lang",
        "boolean"
      ]
    },
    {
      "method": "testGetPoolSize@350",
      "body": "/** \n * getPoolSize increases, but doesn't overestimate, when threads become active\n */\npublic void testGetPoolSize(){\n  ScheduledThreadPoolExecutor p1=new ScheduledThreadPoolExecutor(1);\n  assertEquals(0,p1.getPoolSize());\n  p1.execute(new SmallRunnable());\n  assertEquals(1,p1.getPoolSize());\n  joinPool(p1);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.getPoolSize()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.ScheduledThreadPoolExecutor.execute(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.getPoolSize()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/scala-parallel/jsr166/src/test/tck/ScheduledExecutorTest.java",
      "types": [
        "ThreadPoolExecutor",
        "Runnable",
        "ScheduledThreadPoolExecutor",
        "Integer"
      ],
      "apicalls": [
        "execute",
        "getPoolSize"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)",
            "java.util.concurrent.ThreadPoolExecutor.getPoolSize()",
            "java.util.concurrent.ScheduledThreadPoolExecutor.execute(java.lang.Runnable)",
            "java.util.concurrent.ThreadPoolExecutor.getPoolSize()"
          ]
        }
      ],
      "keywords": [
        "java",
        "execute",
        "scheduled",
        "pool",
        "size",
        "executor",
        "runnable",
        "get",
        "util",
        "integer",
        "concurrent",
        "thread"
      ]
    },
    {
      "method": "waitForPageToLoad@104",
      "body": "@Override public void waitForPageToLoad(String timeout){\n  if (icefacesDetection && isElementPresent(ICEFACES_CONNECTION_STATUS)) {\n    waitForIcefaces(icefacesWaitTime,Long.valueOf(timeout));\n  }\n else {\n    super.waitForPageToLoad(timeout);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.valueOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.Long",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Thread.sleep(long)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.InterruptedException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Seam_2_3/functional-tests/src/main/java/org/jboss/seam/example/common/test/selenium/SeamSelenium.java",
      "types": [
        "NumberFormatException",
        "InterruptedException",
        "Throwable",
        "Thread",
        "String",
        "Long"
      ],
      "apicalls": [
        "sleep",
        "printStackTrace",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.valueOf(java.lang.String)",
            "java.lang.Thread.sleep(long)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.lang.Long.valueOf(java.lang.String)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "interrupted",
        "java",
        "throwable",
        "string",
        "number",
        "print",
        "stack",
        "format",
        "trace",
        "value",
        "long",
        "lang",
        "thread",
        "exception"
      ]
    },
    {
      "method": "println@313",
      "body": "public static void println(String messageIn){\n  dialog.displayMessage(messageIn);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.TextArea.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/awt/TrayIcon/DragEventSource/DragEventSource.java",
      "types": [
        "PrintStream",
        "TextArea",
        "String"
      ],
      "apicalls": [
        "append",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.TextArea.append(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "append",
        "println",
        "area",
        "text",
        "io",
        "awt",
        "stream",
        "string",
        "java"
      ]
    },
    {
      "method": "clear@61",
      "body": "/** \n * Clear the given image with the given background color.\n * @param image The image you want to clear.\n * @param background The background color. If null the image is not touched.\n * @return the image.\n */\npublic static BufferedImage clear(BufferedImage image,Color background){\n  if (image == null) {\n    throw new NullPointerException(\"image\");\n  }\n  if (background != null) {\n    Graphics2D g2d=image.createGraphics();\n    try {\n      g2d.setBackground(background);\n      g2d.clearRect(0,0,image.getWidth(),image.getHeight());\n    }\n  finally {\n      g2d.dispose();\n    }\n  }\n  return image;\n}\n",
      "formalParam": [
        "BufferedImage",
        "Color"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.BufferedImage.createGraphics()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Graphics2D"
          },
          {
            "_call": "java.awt.Graphics2D.setBackground(java.awt.Color)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.image.BufferedImage.getWidth()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.image.BufferedImage.getHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Graphics.clearRect(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Graphics.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "BufferedImage",
      "file": "./java_projects/gruppe33/src/com/indyforge/twod/engine/graphics/GraphicsRoutines.java",
      "types": [
        "Integer",
        "Color",
        "Graphics",
        "Graphics2D",
        "BufferedImage"
      ],
      "apicalls": [
        "getWidth",
        "clearRect",
        "getHeight",
        "createGraphics",
        "dispose",
        "setBackground"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.BufferedImage.createGraphics()",
            "java.awt.Graphics2D.setBackground(java.awt.Color)",
            "java.awt.image.BufferedImage.getWidth()",
            "java.awt.image.BufferedImage.getHeight()",
            "java.awt.Graphics.clearRect(int,int,int,int)",
            "java.awt.Graphics.dispose()"
          ]
        }
      ],
      "keywords": [
        "d",
        "width",
        "background",
        "java",
        "set",
        "height",
        "get",
        "buffered",
        "dispose",
        "create",
        "awt",
        "rect",
        "graphics",
        "image",
        "color",
        "integer",
        "clear",
        "graphics2"
      ]
    },
    {
      "method": "testRuleForSelectiveRollbackOnCheckedWithString@79",
      "body": "@Test public void testRuleForSelectiveRollbackOnCheckedWithString(){\n  List<RollbackRuleAttribute> l=new LinkedList<RollbackRuleAttribute>();\n  l.add(new RollbackRuleAttribute(java.rmi.RemoteException.class.getName()));\n  RuleBasedTransactionAttribute rta=new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED,l);\n  doTestRuleForSelectiveRollbackOnChecked(rta);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-framework/spring-tx/src/test/java/org/springframework/transaction/interceptor/RuleBasedTransactionAttributeTests.java",
      "types": [
        "String",
        "Class",
        "LinkedList"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "get",
        "util",
        "lang",
        "class",
        "java",
        "name",
        "linked",
        "list",
        "string"
      ]
    },
    {
      "method": "setMarkIndexes@194",
      "body": "public void setMarkIndexes(final int startIndex,final int endIndex,final int newIndex){\n  final int limit=getEndIndexByIndex(endIndex);\n  for (int i=getStartIndexByIndex(startIndex); i < limit; i++) {\n    DocumentMark dm=(DocumentMark)positionList.get(i);\n    dm.index=newIndex;\n  }\n}\n",
      "formalParam": [
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Collections.binarySearch(java.util.List,Tau_T)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Collections.binarySearch(java.util.List,Tau_T)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/main/java/common/javax/swing/text/ContentPositions.java",
      "types": [
        "Collections",
        "Integer",
        "List"
      ],
      "apicalls": [
        "binarySearch",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.Collections.binarySearch(java.util.List,Tau_T)",
            "java.util.List.size()",
            "java.util.List.size()",
            "java.util.List.size()",
            "java.util.Collections.binarySearch(java.util.List,Tau_T)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "search",
        "java",
        "binary",
        "integer",
        "util",
        "list",
        "size"
      ]
    },
    {
      "method": "Parameter@47",
      "body": "/** \n * Creates a new  {@link Parameter} for the given type, {@link Annotation}s, positioned at the given index inside the given  {@link Parameters}.\n * @param type\n * @param parameters\n * @param index\n * @param name\n */\nprotected Parameter(MethodParameter parameter){\n  Assert.notNull(parameter);\n  this.parameter=parameter;\n  if (isSpecialParameter() && isNamedParameter()) {\n    throw new IllegalArgumentException(PARAM_ON_SPECIAL);\n  }\n}\n",
      "formalParam": [
        "MethodParameter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.Class<?>>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.util.List<java.lang.Class<?>>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/spring-data-commons/spring-data-commons-core/src/main/java/org/springframework/data/repository/query/Parameter.java",
      "types": [
        "Object",
        "Class",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Class<?>>.contains(java.lang.Object)",
            "$NOT$java.util.List<java.lang.Class<?>>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "object",
        "contains",
        "java",
        "boolean",
        "class"
      ]
    },
    {
      "method": "initDisplayTESTTEMP@36",
      "body": "public boolean initDisplayTESTTEMP(){\n  try {\n    DM=displayMode=new DisplayMode(1440,930);\n    fullScreen=false;\n    Display.create(new PixelFormat(0,depthBufferBits,8));\n    Display.setTitle(window_title);\n    Display.setFullscreen(fullScreen);\n    Display.setVSyncEnabled(VSyncEnabled);\n    Display.setLocation(0,-30);\n    msg(\"GLApp.initDisplay(): Created OpenGL window.\");\n  }\n catch (  Exception exception1) {\n    System.err.println(\"GLApp.initDisplay(): Failed to create OpenGL window: \" + exception1);\n    System.exit(1);\n  }\n  if (aspectRatio == 0f) {\n    aspectRatio=(float)DM.getWidth() / (float)DM.getHeight();\n  }\n  viewportH=DM.getHeight();\n  viewportW=(int)(DM.getHeight() * aspectRatio);\n  if (viewportW > DM.getWidth()) {\n    viewportW=DM.getWidth();\n    viewportH=(int)(DM.getWidth() * (1 / aspectRatio));\n  }\n  viewportX=(int)((DM.getWidth() - viewportW) / 2);\n  viewportY=(int)((DM.getHeight() - viewportH) / 2);\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.exit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/TwoDotFiveD/src/main/java/demo/lwjgl/basic/GLAppDemoLight.java",
      "types": [
        "System",
        "PrintStream",
        "Integer",
        "String"
      ],
      "apicalls": [
        "println",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "print",
        "string",
        "stream",
        "println",
        "exit",
        "integer",
        "io",
        "system",
        "lang"
      ]
    },
    {
      "method": "getContentTitle@837",
      "body": "public String getContentTitle(Element contentDataElem,int contentTypeKey){\n  Document ctDoc=admin.getContentType(contentTypeKey).getAsDOMDocument();\n  Element ctElem=XMLTool.getElement(ctDoc.getDocumentElement(),\"contenttype\");\n  Element moduleDataElem=XMLTool.getElement(ctElem,\"moduledata\");\n  Element moduleElem=XMLTool.getElement(moduleDataElem,\"config\");\n  Element formElem=XMLTool.getElement(moduleElem,\"form\");\n  Element titleElem=XMLTool.getElement(formElem,\"title\");\n  String titleFieldName=titleElem.getAttribute(\"name\");\n  String titleXPath=null;\n  Node[] nodes=XMLTool.filterNodes(formElem.getChildNodes(),Node.ELEMENT_NODE);\n  for (int i=0; i < nodes.length && titleXPath == null; ++i) {\n    Element elem=(Element)nodes[i];\n    if (elem.getTagName().equals(\"block\")) {\n      Node[] inputNodes=XMLTool.filterNodes(elem.getChildNodes(),Node.ELEMENT_NODE);\n      for (      Node inputNode : inputNodes) {\n        if (titleFieldName.equals(((Element)inputNode).getAttribute(\"name\"))) {\n          titleXPath=XMLTool.getElementText(XMLTool.getElement((Element)inputNode,\"xpath\"));\n          break;\n        }\n      }\n    }\n  }\n  return XMLTool.getElementText((Element)contentDataElem.getParentNode(),titleXPath);\n}\n",
      "formalParam": [
        "Element",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/cms-ce/modules/cms-core/src/main/java/com/enonic/vertical/adminweb/handlers/xmlbuilders/SimpleContentXMLBuilder.java",
      "types": [
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "equals",
        "lang",
        "boolean",
        "java",
        "string"
      ]
    },
    {
      "method": "testNullReturningAggregator@275",
      "body": "@Test public void testNullReturningAggregator() throws InterruptedException {\n  this.aggregator=new AggregatingMessageHandler(new NullReturningMessageProcessor(),new SimpleMessageStore(50));\n  QueueChannel replyChannel=new QueueChannel();\n  Message<?> message1=createMessage(3,\"ABC\",3,1,replyChannel,null);\n  Message<?> message2=createMessage(5,\"ABC\",3,2,replyChannel,null);\n  Message<?> message3=createMessage(7,\"ABC\",3,3,replyChannel,null);\n  CountDownLatch latch=new CountDownLatch(3);\n  AggregatorTestTask task1=new AggregatorTestTask(aggregator,message1,latch);\n  this.taskExecutor.execute(task1);\n  AggregatorTestTask task2=new AggregatorTestTask(aggregator,message2,latch);\n  this.taskExecutor.execute(task2);\n  AggregatorTestTask task3=new AggregatorTestTask(aggregator,message3,latch);\n  this.taskExecutor.execute(task3);\n  latch.await(1000,TimeUnit.MILLISECONDS);\n  assertNull(task1.getException());\n  assertNull(task2.getException());\n  assertNull(task3.getException());\n  Message<?> reply=replyChannel.receive(500);\n  assertNull(reply);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-integration/spring-integration-core/src/test/java/org/springframework/integration/aggregator/ConcurrentAggregatorTests.java",
      "types": [
        "Boolean",
        "Integer",
        "InterruptedException",
        "TimeUnit",
        "Long",
        "CountDownLatch"
      ],
      "apicalls": [
        "await"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)"
          ]
        }
      ],
      "keywords": [
        "latch",
        "count",
        "interrupted",
        "await",
        "exception",
        "integer",
        "java",
        "concurrent",
        "long",
        "time",
        "util",
        "boolean",
        "unit"
      ]
    },
    {
      "method": "setToSubmit@484",
      "body": "/** \n * Sets the radio group to submit automatically. Must add to a form before this function is used!!!!\n */\npublic void setToSubmit(){\n  if (this._buttons != null) {\n    Iterator it=this._buttons.iterator();\n    while (it.hasNext()) {\n      RadioButton b=(RadioButton)it.next();\n      b.setToSubmit();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/com.idega.core/src/java/com/idega/presentation/ui/RadioGroup.java",
      "types": [
        "Boolean",
        "Vector",
        "Iterator"
      ],
      "apicalls": [
        "hasNext",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next",
        "java",
        "boolean",
        "iterator",
        "util",
        "vector"
      ]
    },
    {
      "method": "create@271",
      "body": "/** \n * \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u968e\u5c64\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3002<BR> \u30b3\u30de\u30f3\u30c9\u306f\u3059\u3079\u3066\"ROOT\"\u306e\u540d\u3092\u6301\u3064\u89aa\u30b3\u30de\u30f3\u30c9\u306e\u5b50\u3068\u306a\u308b\u3002\n * @author eagle.sakura\n * @param file\n * @return\n * @version 2010/04/04 : \u65b0\u898f\u4f5c\u6210\n */\npublic static Command create(BufferedReader file){\n  try {\n    Command root=new Command(\"ROOT\");\n    addCommand(root,file);\n    return root;\n  }\n catch (  Exception e) {\n    EagleUtil.log(e);\n    return null;\n  }\n}\n",
      "formalParam": [
        "BufferedReader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.BufferedReader.readLine()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Command",
      "file": "./java_projects/library_1/EagleLibrary-API4/src/com/eaglesakura/lib/script/esf/Command.java",
      "types": [
        "IOException",
        "BufferedReader",
        "ArrayList",
        "List",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "add",
        "readLine"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.io.BufferedReader.readLine()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "java",
        "util",
        "read",
        "reader",
        "io",
        "exception",
        "string",
        "line",
        "add",
        "buffered",
        "list",
        "array"
      ]
    },
    {
      "method": "app@52",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "EjbModule",
      "file": "./java_projects/openejb/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/FeatureTest.java",
      "body": "@Module public EjbModule app(){\n  final StatelessBean bean=(StatelessBean)new StatelessBean(MySecondRestClass.class).localBean();\n  bean.setRestService(true);\n  final EjbJar ejbJar=new EjbJar();\n  ejbJar.addEnterpriseBean(bean);\n  final OpenejbJar openejbJar=new OpenejbJar();\n  openejbJar.addEjbDeployment(new EjbDeployment(ejbJar.getEnterpriseBeans()[0]));\n  final Properties properties=openejbJar.getEjbDeployment().iterator().next().getProperties();\n  properties.setProperty(CxfRsHttpListener.CXF_JAXRS_PREFIX + CxfUtil.FEATURES,\"my-feature\");\n  final EjbModule module=new EjbModule(ejbJar);\n  module.setOpenejbJar(openejbJar);\n  final Resources resources=new Resources();\n  final Service feature=new Service(\"my-feature\",null);\n  feature.setClassName(MyFeature.class.getName());\n  resources.getService().add(feature);\n  module.initResources(resources);\n  return module;\n}\n",
      "types": [
        "Class",
        "String",
        "Properties",
        "Object"
      ],
      "apicalls": [
        "getName",
        "setProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "class",
        "string",
        "properties",
        "name",
        "java",
        "object",
        "set",
        "lang",
        "get",
        "property",
        "util"
      ]
    },
    {
      "method": "next@24",
      "body": "@Override public T next(){\n  if (!enumeration.hasMoreElements()) {\n    throw new NoSuchElementException();\n  }\n  return enumeration.nextElement();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.Enumeration<Tau_E>.hasMoreElements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Enumeration<Tau_E>.nextElement()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "returnType": "T",
      "file": "./java_projects/repose/project-set/commons/utilities/src/main/java/com/rackspace/papi/commons/collections/EnumerationIterator.java",
      "types": [
        "Boolean",
        "Enumeration"
      ],
      "apicalls": [
        "nextElement",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Enumeration<Tau_E>.hasMoreElements()",
            "java.util.Enumeration<Tau_E>.nextElement()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "elements",
        "element",
        "boolean",
        "next",
        "enumeration"
      ]
    },
    {
      "method": "get@28",
      "body": "public List<String> get(UserEvent event){\n  List<String> results=new ArrayList<String>();\n  results.add(Character.toString(event.getGender()));\n  return results;\n}\n",
      "formalParam": [
        "UserEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Character.toString(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/incubator-s4/subprojects/s4-example/src/main/java/org/apache/s4/example/edsl/counter/GenderKeyFinder.java",
      "types": [
        "Boolean",
        "ArrayList",
        "List",
        "String",
        "Character"
      ],
      "apicalls": [
        "add",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.lang.Character.toString(char)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "array",
        "java",
        "boolean",
        "util",
        "lang",
        "list",
        "string",
        "character",
        "add"
      ]
    },
    {
      "method": "isReaderMTOMAware@2507",
      "body": "/** \n * isReaderMTOMAware\n * @return true if the reader supports MTOM\n */\npublic static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){\n  boolean isReaderMTOMAware=false;\n  try {\n    isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));\n  }\n catch (  java.lang.IllegalArgumentException e) {\n    isReaderMTOMAware=false;\n  }\n  return isReaderMTOMAware;\n}\n",
      "formalParam": [
        "javax.xml.stream.XMLStreamReader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.stream.XMLStreamReader.getProperty(java.lang.String)",
            "_throws": [
              "java.lang.IllegalArgumentException"
            ],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Boolean.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/tempo/tas-service/src/test/java/org/intalio/tempo/workflow/tas/live/TasStub.java",
      "types": [
        "XMLStreamReader",
        "Object",
        "IllegalArgumentException",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.XMLStreamReader.getProperty(java.lang.String)",
            "java.lang.Boolean.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "illegal",
        "boolean",
        "xml",
        "property",
        "string",
        "stream",
        "equals",
        "object",
        "lang",
        "java",
        "reader",
        "argument",
        "exception",
        "javax"
      ]
    },
    {
      "method": "stateChanged@5777",
      "formalParam": [
        "ChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JSlider.getValue()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geogebra/desktop/geogebra/gui/dialog/PropertiesPanel.java",
      "body": "/** \n * change listener implementation for slider\n */\npublic void stateChanged(ChangeEvent e){\n  if (!slider.getValueIsAdjusting()) {\n    int size=slider.getValue();\n    GeoPlaneND plane;\n    for (int i=0; i < geos.length; i++) {\n      plane=(GeoPlaneND)geos[i];\n      plane.setFading((float)size / 100);\n      ((GeoElement)plane).updateRepaint();\n    }\n  }\n}\n",
      "types": [
        "JSlider",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "getValue",
        "getValueIsAdjusting"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
            "javax.swing.JSlider.getValue()"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
          ]
        }
      ],
      "keywords": [
        "value",
        "slider",
        "javax",
        "boolean",
        "swing",
        "j",
        "get",
        "adjusting",
        "integer"
      ]
    },
    {
      "method": "flush@1013",
      "body": "@Override public final void flush() throws IOException {\n  _flushBuffer();\n  if (_outputStream != null) {\n    if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {\n      _outputStream.flush();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStream.write(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jackson-core/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
      "types": [
        "OutputStream",
        "Byte",
        "Integer",
        "IOException"
      ],
      "apicalls": [
        "flush",
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.flush()"
          ]
        }
      ],
      "keywords": [
        "io",
        "exception",
        "byte",
        "stream",
        "java",
        "output",
        "integer",
        "write",
        "flush"
      ]
    },
    {
      "method": "testServerContextWithKeyStorePathAsRelativePath@91",
      "body": "public void testServerContextWithKeyStorePathAsRelativePath() throws Exception {\n  File currentDir=new File(System.getProperty(\"user.dir\"));\n  if (!currentDir.getAbsolutePath().endsWith(\"tests\")) {\n    return;\n  }\n  SSLSupport.createServerContext(\"src/test/resources/hornetq.keystore\",keyStorePassword,trustStorePath,trustStorePassword);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hornetq/tests/unit-tests/src/test/java/org/hornetq/tests/unit/core/remoting/impl/ssl/SSLSupportTest.java",
      "types": [
        "String",
        "Boolean",
        "System",
        "File"
      ],
      "apicalls": [
        "endsWith",
        "getProperty",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "file",
        "property",
        "io",
        "system",
        "string",
        "boolean",
        "ends",
        "path",
        "lang",
        "absolute"
      ]
    },
    {
      "method": "ToolDialog@1487",
      "formalParam": [
        "String",
        "PolicyTool",
        "ToolWindow",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Dialog.setTitle(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Window.addWindowListener(java.awt.event.WindowListener)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/sun/security/tools/PolicyTool.java",
      "body": "ToolDialog(String title,PolicyTool tool,ToolWindow tw,boolean modal){\n  super(tw,modal);\n  setTitle(title);\n  this.tool=tool;\n  this.tw=tw;\n  addWindowListener(new ChildWindowListener(this));\n}\n",
      "types": [
        "String",
        "Window",
        "WindowListener",
        "Dialog"
      ],
      "apicalls": [
        "addWindowListener",
        "setTitle"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Dialog.setTitle(java.lang.String)",
            "java.awt.Window.addWindowListener(java.awt.event.WindowListener)"
          ]
        }
      ],
      "keywords": [
        "listener",
        "string",
        "set",
        "add",
        "java",
        "awt",
        "title",
        "dialog",
        "window"
      ]
    },
    {
      "method": "waitForFrame@486",
      "formalParam": [
        "int",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Stack.push(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/nutch/src/plugin/parse-swf/src/java/org/apache/nutch/parse/swf/SWFParser.java",
      "body": "public void waitForFrame(int num,String var) throws IOException {\n  stack.push(var);\n  strings.remove(var);\n  super.waitForFrame(num,var);\n}\n",
      "types": [
        "Object",
        "Stack",
        "HashSet",
        "Boolean"
      ],
      "apicalls": [
        "remove",
        "push"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Stack.push(java.lang.Object)",
            "java.util.HashSet.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "boolean",
        "hash",
        "push",
        "set",
        "remove",
        "object",
        "stack"
      ]
    },
    {
      "method": "waitForChildren@399",
      "body": "/** \n * Wait (block) for initial data to arrive, possibly forever. See #waitForData(long).\n * @return void\n */\npublic void waitForChildren(){\n  waitForChildren(SystemConfiguration.NO_TIMEOUT);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getId()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.Math.min(long,long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/BitNomen/src/org/ccnx/ccn/profiles/nameenum/EnumeratedNameList.java",
      "types": [
        "Thread",
        "Map",
        "Long",
        "Math",
        "System"
      ],
      "apicalls": [
        "min",
        "getId",
        "put",
        "currentThread",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getId()",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "java.lang.System.currentTimeMillis()",
            "java.lang.Math.min(long,long)",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "map",
        "math",
        "system",
        "get",
        "time",
        "id",
        "java",
        "util",
        "thread",
        "put",
        "min",
        "long",
        "current",
        "millis",
        "lang"
      ]
    },
    {
      "method": "createNode_DropDefaultValueChange@443",
      "body": "@Test public void createNode_DropDefaultValueChange() throws Exception {\n  DropDefaultValueChange change=new DropDefaultValueChange();\n  change.setTableName(\"TABLE_NAME\");\n  change.setColumnName(\"COL_NAME\");\n  Element node=new XMLChangeLogSerializer(DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument()).createNode(change);\n  assertEquals(\"dropDefaultValue\",node.getTagName());\n  assertFalse(node.hasAttribute(\"schemaName\"));\n  assertEquals(\"TABLE_NAME\",node.getAttribute(\"tableName\"));\n  assertEquals(\"COL_NAME\",node.getAttribute(\"columnName\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory",
            "_throws": []
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ]
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.newDocument()",
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/liquibase/liquibase-core/src/test/java/liquibase/serializer/core/xml/XMLChangeLogSerializerTest.java",
      "types": [
        "ParserConfigurationException",
        "DocumentBuilder",
        "DocumentBuilderFactory"
      ],
      "apicalls": [
        "newInstance",
        "newDocument",
        "newDocumentBuilder"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
          ]
        }
      ],
      "keywords": [
        "parser",
        "instance",
        "new",
        "exception",
        "builder",
        "xml",
        "parsers",
        "javax",
        "factory",
        "document",
        "configuration"
      ]
    },
    {
      "method": "test_selectMenuBadList@473",
      "body": "public void test_selectMenuBadList() throws Exception {\n  createList();\n  showFrame(list);\n  clickButtonStep.setName(\"AerosmithTable\");\n  clickButtonStep.setRow(0);\n  clickButtonStep.setSelect(\"menu2\");\n  try {\n    clickButtonStep.proceed(new TestContext(this));\n    fail(\"la table n'existe pas\");\n  }\n catch (  GuiFindException e) {\n    assertEquals(\"Le composant 'AerosmithTable' est introuvable.\",e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JList.JList(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setName(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JPopupMenu.JPopupMenu()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/codjo-release-test/src/test/java/net/codjo/test/release/task/gui/ClickRightStepTest.java",
      "types": [
        "JList",
        "Object",
        "String",
        "MouseListener",
        "JPopupMenu",
        "Component"
      ],
      "apicalls": [
        "setName",
        "addMouseListener"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JList.JList(java.lang.Object[])",
            "java.awt.Component.setName(java.lang.String)",
            "javax.swing.JPopupMenu.JPopupMenu()",
            "java.awt.Component.addMouseListener(java.awt.event.MouseListener)"
          ]
        }
      ],
      "keywords": [
        "list",
        "j",
        "swing",
        "name",
        "popup",
        "mouse",
        "listener",
        "string",
        "java",
        "set",
        "component",
        "menu",
        "object",
        "javax",
        "awt",
        "add"
      ]
    },
    {
      "method": "shutdown@283",
      "body": "/** \n * Performs cleanup operations when the manager is being disposed of. \n */\npublic void shutdown(){\n  ILaunchManager launchManager=DebugPlugin.getDefault().getLaunchManager();\n  launchManager.removeLaunchListener(this);\n  if (fLaunchHistories != null) {\n    Iterator histories=fLaunchHistories.values().iterator();\n    while (histories.hasNext()) {\n      LaunchHistory history=(LaunchHistory)histories.next();\n      history.dispose();\n    }\n  }\n  DebugUIPlugin.getDefault().removeSaveParticipant(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.values()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Collection"
          },
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.debug/org.eclipse.debug.ui/ui/org/eclipse/debug/internal/ui/launchConfigurations/LaunchConfigurationManager.java",
      "types": [
        "Boolean",
        "Collection",
        "Iterator",
        "Map"
      ],
      "apicalls": [
        "iterator",
        "hasNext",
        "values"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.values()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next",
        "values",
        "collection",
        "map",
        "util",
        "java",
        "iterator",
        "boolean"
      ]
    },
    {
      "method": "isMatching@38",
      "body": "public static boolean isMatching(String line){\n  return patt.matcher(line).matches();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Matcher.matches()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/z/src/com/adamldavis/z/git/GitDiff.java",
      "types": [
        "Pattern",
        "CharSequence",
        "Matcher",
        "Boolean"
      ],
      "apicalls": [
        "matches",
        "matcher"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "matcher",
        "util",
        "pattern",
        "java",
        "char",
        "regex",
        "boolean",
        "sequence",
        "matches"
      ]
    },
    {
      "method": "startHole@38",
      "body": "/** \n * Start building a hole in the previously defined contour\n * @param sx The start point of the hole\n * @param sy The start point of the hole\n */\npublic void startHole(float sx,float sy){\n  hole=new ArrayList();\n  holes.add(hole);\n}\n",
      "formalParam": [
        "float",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ProjetX/slick/src/org/newdawn/slick/geom/Path.java",
      "types": [
        "Boolean",
        "ArrayList",
        "Object"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "list",
        "add",
        "object",
        "array",
        "java"
      ]
    },
    {
      "method": "removeTopic@396",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.HashMap<java.lang.String,java.util.Vector<java.lang.String>>.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.util.Vector<java.lang.String>>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.Vector<java.lang.String>",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/harmony/harmony.idb/src/main/java/org/opennaas/extensions/idb/notification/producer/NotificationProducerHandler.java",
      "body": "/** \n * removeTopic-method for internal queries\n * @param removeTopic Request\n * @return removeTopic response\n */\npublic boolean removeTopic(final String topic){\n  if (!this.subscriptions.containsKey(topic)) {\n    return false;\n  }\n  this.subscriptions.remove(topic);\n  if (this.persistSubscription) {\n    final DBHandler handler=new DBHandler(topic,null){\n      @Override protected void toDo(      String topic,      String epr){\n        try {\n          for (          Subscription sub : Subscription.getSubscriptionsForTopic(topic)) {\n            sub.delete();\n          }\n        }\n catch (        DatabaseException e) {\n          Logger logger=PhLogger.getLogger(this.getClass());\n          logger.debug(\"removed topic \" + topic + \" , but not persistent in DB!\");\n          e.printStackTrace();\n        }\n      }\n    }\n;\n    handler.start();\n  }\n  this.logger.debug(\"removed topic: \" + topic);\n  return true;\n}\n",
      "types": [
        "Boolean",
        "Vector",
        "String",
        "Object",
        "HashMap",
        "Thread"
      ],
      "apicalls": [
        "start",
        "containsKey",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.HashMap<java.lang.String,java.util.Vector<java.lang.String>>.containsKey(java.lang.Object)",
            "java.util.HashMap<java.lang.String,java.util.Vector<java.lang.String>>.remove(java.lang.Object)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "map",
        "contains",
        "key",
        "java",
        "lang",
        "thread",
        "object",
        "remove",
        "start",
        "boolean",
        "hash",
        "string",
        "util",
        "vector"
      ]
    },
    {
      "method": "onUserRoleSave@221",
      "body": "/** \n * On user role save.\n * @param jspUserExtension the jsp user extension\n * @param request the request\n * @param response the response\n * @return the string\n */\n@RequestMapping(method=RequestMethod.POST,params={\"saveRoles\"}) public String onUserRoleSave(final UserExtension jspUserExtension,final HttpServletRequest request,final HttpServletResponse response){\n  final String id=request.getParameter(\"id\");\n  final String from=request.getParameter(\"from\");\n  Long idL=null;\n  if (id != null) {\n    try {\n      idL=Long.parseLong(id);\n    }\n catch (    final NumberFormatException e) {\n      return \"redirect:/caseMenu\";\n    }\n  }\n  final User user=this.getUserManager().getUserByUsername(request.getRemoteUser());\n  if (((id != null) && !this.getUserManager().exists(idL)) || ((id != null) && (idL != user.getId()) && !request.isUserInRole(Constants.ADMIN_ROLE)))   return \"redirect:/caseMenu\";\n  UserExtension userExtension;\n  if (id == null) {\n    if (this.userExtensionManager.exists(user.getId())) {\n      userExtension=this.userExtensionManager.get(user.getId());\n    }\n else {\n      userExtension=new UserExtension(this.getUserManager().get(user.getId()));\n    }\n  }\n else {\n    if (this.userExtensionManager.exists(idL)) {\n      userExtension=this.userExtensionManager.get(idL);\n    }\n else {\n      userExtension=new UserExtension(this.getUserManager().get(idL));\n    }\n  }\n  final Set<ContributorRole> roles=new HashSet<ContributorRole>();\n  if ((jspUserExtension != null) && (jspUserExtension.getRoles() != null)) {\n    for (    final ContributorRole jspRole : jspUserExtension.getRoles()) {\n      Long roleId=null;\n      try {\n        roleId=Long.parseLong(jspRole.getName());\n      }\n catch (      final NumberFormatException e) {\n        this.saveError(request,\"userextension.invalidRole\");\n        continue;\n      }\n      if (!this.contributorRoleManager.exists(roleId)) {\n        this.saveError(request,\"userextension.invalidRole\");\n        continue;\n      }\n else {\n        roles.add(this.contributorRoleManager.get(roleId));\n      }\n    }\n  }\n  userExtension.setRoles(roles);\n  userExtension=this.userExtensionManager.save(userExtension);\n  return \"redirect:/userform?id=\" + userExtension.getUserId() + (from != null ? \"&from=\" + from : \"\");\n}\n",
      "formalParam": [
        "UserExtension",
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/alphaportal_dev/sys-src/alphaportal/web/src/main/java/alpha/portal/webapp/controller/UserFormController.java",
      "types": [
        "NumberFormatException",
        "Long",
        "HashSet",
        "String"
      ],
      "apicalls": [
        "parseLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.parseLong(java.lang.String)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.lang.Long.parseLong(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "number",
        "lang",
        "java",
        "string",
        "format",
        "util",
        "exception",
        "parse",
        "hash",
        "long",
        "set"
      ]
    },
    {
      "method": "testValueIsNullWhenNoDefaultAndNoSystemPropertiesAreSet@84",
      "body": "public void testValueIsNullWhenNoDefaultAndNoSystemPropertiesAreSet() throws Exception {\n  assertSystemPropertiesNotSet(_systemPropertyName,_deprecatedSystemPropertyName);\n  String nullString=null;\n  String propertyValue=QpidProperty.stringProperty(nullString,_systemPropertyName).get();\n  assertNull(propertyValue);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperties()",
            "_throws": [],
            "_returns": "java.util.Properties",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.containsKey(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Qpid/qpid/java/common/src/test/java/org/apache/qpid/configuration/QpidPropertyTest.java",
      "types": [
        "Hashtable",
        "Object",
        "Properties",
        "Boolean",
        "System"
      ],
      "apicalls": [
        "containsKey",
        "getProperties"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "key",
        "contains",
        "lang",
        "util",
        "system",
        "java",
        "properties",
        "object",
        "hashtable",
        "get"
      ]
    },
    {
      "method": "getParameterValues@480",
      "body": "@Override public String[] getParameterValues(String name){\n  return getParameterMap().get(name);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String[]>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          }
        ]
      },
      "returnType": "String[]",
      "file": "./java_projects/Pitbull/pitbull-servlet/src/main/java/org/jboss/pitbull/servlet/internal/HttpServletRequestImpl.java",
      "types": [
        "Object",
        "Map",
        "Integer",
        "String"
      ],
      "apicalls": [
        "get",
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.substring(int)",
            "java.util.Map<java.lang.String,java.lang.String[]>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "substring",
        "object",
        "get",
        "util",
        "java",
        "index",
        "map",
        "string"
      ]
    },
    {
      "method": "AMQConnectionURL@51",
      "body": "public AMQConnectionURL(String fullURL) throws URLSyntaxException {\n  if (fullURL == null) {\n    throw new IllegalArgumentException(\"URL cannot be null\");\n  }\n  _url=fullURL;\n  _options=new HashMap<String,String>();\n  _brokers=new LinkedList<BrokerDetails>();\n  _failoverOptions=new HashMap<String,String>();\n  new URLParser(this);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/qpid/qpid/java/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java",
      "types": [
        "LinkedList",
        "HashMap",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "util",
        "map",
        "list",
        "java",
        "string",
        "linked"
      ]
    },
    {
      "method": "uncompress@114",
      "body": "public static StringBuffer uncompress(byte[] curPage,boolean nowrap){\n  Inflater infl=new Inflater(nowrap);\n  byte[] outdata;\n  int accumOutputBytes, inflatedBytes;\n  int prevLength;\n  if (curPage == null)   return null;\nsynchronized (_sync) {\n    prevLength=_byteHold.length;\n    if (prevLength < curPage.length) {\n      _byteHold=new byte[curPage.length];\n    }\n    infl.setInput(curPage);\n    try {\n      inflatedBytes=infl.inflate(_byteHold);\n      accumOutputBytes=inflatedBytes;\n      while (!infl.finished() && inflatedBytes != 0) {\n        outdata=_byteHold;\n        prevLength=_byteHold.length;\n        if (accumOutputBytes >= (prevLength - 2048)) {\n          try {\n            inflatedBytes=0;\n            _byteHold=new byte[_byteHold.length * 3];\n            System.arraycopy(outdata,0,_byteHold,0,accumOutputBytes);\n            inflatedBytes=infl.inflate(_byteHold,accumOutputBytes,prevLength * 2);\n          }\n catch (          OutOfMemoryError oome) {\n            JConfig.log().handleException(\"FAILING to allocate more bytes @ \" + _byteHold.length * 3,oome);\n          }\n        }\n else {\n          inflatedBytes=infl.inflate(_byteHold,accumOutputBytes,prevLength - accumOutputBytes);\n        }\n        accumOutputBytes+=inflatedBytes;\n      }\n      return new StringBuffer(new String(_byteHold,0,accumOutputBytes));\n    }\n catch (    DataFormatException dfe) {\n      JConfig.log().handleException(\"Failed to uncompress data: \" + dfe,dfe);\n      return null;\n    }\n  }\n}\n",
      "formalParam": [
        "byte[]",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "StringBuffer",
      "file": "./java_projects/jbidwatcher/src/com/jbidwatcher/util/GZip.java",
      "types": [
        "Integer",
        "Object",
        "Byte",
        "String",
        "System",
        "StringBuffer"
      ],
      "apicalls": [
        "arraycopy"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.String.String(byte[],int,int)",
            "java.lang.StringBuffer.StringBuffer(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "object",
        "system",
        "byte",
        "arraycopy",
        "lang",
        "java",
        "buffer",
        "string"
      ]
    },
    {
      "method": "getDependencies@71",
      "body": "public List<Dependency> getDependencies(){\n  return dependencies != null ? dependencies : Collections.unmodifiableList(new ArrayList<Dependency>());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          }
        ]
      },
      "returnType": "List<Dependency>",
      "file": "./java_projects/xcode-maven-plugin/modules/xcode-maven-plugin/src/main/java/com/sap/prd/mobile/ios/mios/versioninfo/v_1_2_0/Dependency.java",
      "types": [
        "List",
        "ArrayList",
        "Collections"
      ],
      "apicalls": [
        "unmodifiableList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "unmodifiable",
        "java",
        "array",
        "util",
        "list"
      ]
    },
    {
      "method": "ComponentDestructor@60",
      "body": "/** \n * Create a component destructor.\n * @param c the class of instances to destruct.\n */\npublic ComponentDestructor(Class c){\n  this.preDestroys=getPreDestroyMethods(c);\n}\n",
      "formalParam": [
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.reflect.Method>.ArrayList<Method>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_then": [
              {
                "_call": "java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.reflect.Method.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.HashSet<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jersey-1.x/jersey/jersey-core/src/main/java/com/sun/jersey/core/spi/component/ComponentDestructor.java",
      "types": [
        "String",
        "Boolean",
        "Method",
        "HashSet",
        "ArrayList",
        "List"
      ],
      "apicalls": [
        "add",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.reflect.Method>.ArrayList<Method>()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.lang.reflect.Method.getName()",
            "java.util.HashSet<java.lang.String>.add(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.reflect.Method>.ArrayList<Method>()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.lang.reflect.Method.getName()",
            "java.util.HashSet<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "hash",
        "method",
        "name",
        "reflect",
        "get",
        "string",
        "set",
        "lang",
        "java",
        "array",
        "list",
        "add"
      ]
    },
    {
      "method": "testSubgraphContainsEdge@945",
      "body": "@Test public void testSubgraphContainsEdge(){\n  Graph<Edge> g=new SparseUndirectedGraph();\n  for (int i=0; i < 10; i++) {\n    for (int j=i + 1; j < 10; ++j)     g.add(new SimpleEdge(i,j));\n  }\n  assertEquals((10 * 9) / 2,g.size());\n  assertEquals(10,g.order());\n  Set<Integer> vertices=new LinkedHashSet<Integer>();\n  for (int i=0; i < 5; ++i)   vertices.add(i);\n  Graph<Edge> subgraph=g.subgraph(vertices);\n  assertEquals(5,subgraph.order());\n  assertEquals((5 * 4) / 2,subgraph.size());\n  for (int i=0; i < 5; ++i) {\n    for (int j=i + 1; j < 5; ++j) {\n      assertTrue(subgraph.contains(new SimpleEdge(i,j)));\n    }\n  }\n  for (int i=5; i < 10; ++i) {\n    for (int j=i + 1; j < 10; ++j) {\n      Edge e=new SimpleEdge(i,j);\n      assertTrue(g.contains(e));\n      assertFalse(subgraph.contains(e));\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashSet<java.lang.Integer>.LinkedHashSet<Integer>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.Integer>.add(java.lang.Integer)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/S-Space/src/test/java/edu/ucla/sspace/graph/SparseUndirectedGraphTests.java",
      "types": [
        "Integer",
        "Boolean",
        "LinkedHashSet",
        "Set"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashSet<java.lang.Integer>.LinkedHashSet<Integer>()",
            "java.util.Set<java.lang.Integer>.add(java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "integer",
        "hash",
        "add",
        "linked",
        "set",
        "util"
      ]
    },
    {
      "method": "installCommonViewArtefacts@258",
      "body": "public void installCommonViewArtefacts(){\n  installCommonViewArtefacts(projectOperations.getFocusedModuleName());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-roo/addon-web-mvc-jsp/src/main/java/org/springframework/roo/addon/web/mvc/jsp/JspOperationsImpl.java",
      "types": [
        "String",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "substring",
        "toUpperCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.toUpperCase()",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "list",
        "util",
        "case",
        "substring",
        "array",
        "integer",
        "java",
        "upper",
        "string",
        "lang"
      ]
    },
    {
      "method": "shouldReturnIgnoreList@137",
      "body": "/** \n * Should return custom report file with custom path.\n */\n@Test public void shouldReturnIgnoreList(){\n  Project project=mock(Project.class);\n  Configuration configuration=mock(Configuration.class);\n  MavenProject mavenProject=mock(MavenProject.class);\n  ProjectFileSystem fs=mock(ProjectFileSystem.class);\n  when(project.getPom()).thenReturn(mavenProject);\n  when(project.getFileSystem()).thenReturn(fs);\n  when(fs.getSourceDirs()).thenReturn(Arrays.asList(new File(\"C:\\\\projets\\\\PHP\\\\Monkey\\\\sources\\\\main\")));\n  when(fs.getTestDirs()).thenReturn(Arrays.asList(new File(\"C:\\\\projets\\\\PHP\\\\Monkey\\\\Sources\\\\test\")));\n  when(fs.getBuildDir()).thenReturn(new File(\"C:\\\\projets\\\\PHP\\\\Monkey\\\\target\"));\n  when(configuration.getString(PhpCodeSnifferConfiguration.PHPCS_REPORT_FILE_NAME_KEY,PhpCodeSnifferConfiguration.PHPCS_REPORT_FILE_NAME_DEFVALUE)).thenReturn(\"codesniffer-summary.xml\");\n  when(configuration.getString(PhpCodeSnifferConfiguration.PHPCS_REPORT_FILE_RELATIVE_PATH_KEY,PhpCodeSnifferConfiguration.PHPCS_REPORT_FILE_RELATIVE_PATH_DEFVALUE)).thenReturn(\"reports\");\n  when(project.getConfiguration()).thenReturn(configuration);\n  RulesProfile profile=mock(RulesProfile.class);\n  PhpCodeSnifferProfileExporter exporter=mock(PhpCodeSnifferProfileExporter.class);\n  RuleFinder finder=mock(RuleFinder.class);\n  PhpCodeSnifferConfiguration phpConfig=new PhpCodeSnifferConfiguration(project,exporter,profile,finder);\n  assertEquals(phpConfig.getReportFile().getPath().replace('/','\\\\'),CODESNIFFER_SUMMARY_XML);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sonar-php-plugin/src/test/java/org/sonar/plugins/php/codesniffer/PhpCodesnifferConfigurationTest.java",
      "types": [
        "Arrays",
        "File",
        "List",
        "String"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.Arrays.asList(T[])",
            "java.io.File.File(java.lang.String)",
            "java.util.Arrays.asList(T[])",
            "java.io.File.File(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io",
        "java",
        "string",
        "file",
        "util",
        "list",
        "arrays"
      ]
    },
    {
      "method": "quit@74",
      "body": "public void quit(){\n  run=false;\n  try {\n    socket.send(new DatagramPacket(new byte[]{0x00},1,InetAddress.getLocalHost(),9999));\n  }\n catch (  UnknownHostException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.net.InetAddress.getLocalHost()",
                "_throws": [
                  "java.net.UnknownHostException"
                ],
                "_returns": "java.net.InetAddress",
                "node": "DAPICall"
              },
              {
                "_call": "java.net.DatagramPacket.DatagramPacket(byte[],int,java.net.InetAddress,int)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.net.DatagramSocket.send(java.net.DatagramPacket)",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/TwoDotFiveD/src/main/java/com/ATeam/twoDotFiveD/udp/Client/UDPclient.java",
      "types": [
        "DatagramPacket",
        "InetAddress",
        "IOException",
        "UnknownHostException",
        "DatagramSocket",
        "Integer",
        "Byte",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace",
        "send",
        "getLocalHost"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.DatagramPacket.DatagramPacket(byte[],int,java.net.InetAddress,int)",
            "java.net.DatagramSocket.send(java.net.DatagramPacket)"
          ]
        },
        {
          "calls": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.DatagramPacket.DatagramPacket(byte[],int,java.net.InetAddress,int)",
            "java.net.DatagramSocket.send(java.net.DatagramPacket)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "inet",
        "throwable",
        "java",
        "net",
        "stack",
        "print",
        "send",
        "lang",
        "socket",
        "address",
        "packet",
        "host",
        "integer",
        "byte",
        "get",
        "io",
        "unknown",
        "local",
        "trace",
        "datagram",
        "exception"
      ]
    },
    {
      "method": "removeElement@134",
      "body": "public void removeElement(String toBeRemoved) throws ElementNotFoundException {\n  Element el=elementTable.get(toBeRemoved);\n  int i=0;\n  while (i < position && !toBeRemoved.equals(contents[i].name))   ++i;\n  if (i == position || contents[i].amount == 0)   return;\n else   --contents[i].amount;\n  mass-=el.getMass();\n  Arrays.sort(contents,0,position);\n  dbe=calcDBE();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.util.Arrays.sort(java.lang.Object[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/MetFrag/src/de/ipbhalle/metfrag/massbankParser/Molecule.java",
      "types": [
        "Arrays",
        "Boolean",
        "Object",
        "Integer",
        "String"
      ],
      "apicalls": [
        "sort",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.Arrays.sort(java.lang.Object[],int,int)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "arrays",
        "util",
        "equals",
        "lang",
        "string",
        "java",
        "object",
        "sort",
        "integer"
      ]
    },
    {
      "method": "testTakeFromEmpty@350",
      "body": "/** \n * take blocks interruptibly when empty\n */\npublic void testTakeFromEmpty() throws InterruptedException {\n  final PriorityBlockingQueue q=new PriorityBlockingQueue(2);\n  Thread t=new Thread(new CheckedInterruptedRunnable(){\n    public void realRun() throws InterruptedException {\n      q.take();\n    }\n  }\n);\n  t.start();\n  Thread.sleep(SHORT_DELAY_MS);\n  t.interrupt();\n  t.join();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.join()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/test/java/tests/api/java/util/concurrent/PriorityBlockingQueueTest.java",
      "types": [
        "Integer",
        "Thread",
        "Long",
        "InterruptedException"
      ],
      "apicalls": [
        "start",
        "join",
        "sleep",
        "interrupt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread()",
            "java.lang.Thread.start()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.interrupt()",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "java",
        "exception",
        "sleep",
        "thread",
        "interrupt",
        "start",
        "interrupted",
        "join",
        "long",
        "integer",
        "lang"
      ]
    },
    {
      "method": "Updater@26",
      "body": "public Updater(JavaPlugin plugin,boolean enabled){\n  this.enabled=enabled;\n  desc=plugin.getDescription();\n  URL connect=null;\n  try {\n    if (enabled) {\n      connect=new URL(\"http://inceptolabs.hopto.org:23516/update.php?p=\" + desc.getName() + \"&v=\"+ desc.getVersion());\n      BufferedReader in=new BufferedReader(new InputStreamReader(connect.openStream()));\n      String version=in.readLine();\n      in.close();\n      if (!version.equalsIgnoreCase(\"false\")) {\n        plugin.getLogger().warning(\"New version of '\" + desc.getName() + \"' available! Your version: '\"+ desc.getVersion()+ \"' New Version: '\"+ version+ \"' Please visit dev.bukkit.org to update.\");\n        opUpdateMsg=version;\n      }\n else       plugin.getLogger().info(\"You are running the lastest release: \" + desc.getVersion());\n    }\n  }\n catch (  MalformedURLException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    plugin.getLogger().warning(\"Failed on update check! Please check your Internet connection and your firewall!\");\n    plugin.getLogger().warning(\"Failed on connecting to \" + connect.getHost());\n    e.printStackTrace();\n  }\ncatch (  Exception e) {\n    plugin.getLogger().warning(\"Failed on update check! Unknown Error! Stack trace:\");\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "JavaPlugin",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "_throws": [
                  "java.net.MalformedURLException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.net.URL.openStream()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "java.io.InputStream",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.BufferedReader.readLine()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.BufferedReader.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Reservations/src/de/HomerBond005/Reservations/Updater.java",
      "types": [
        "InputStream",
        "InputStreamReader",
        "Throwable",
        "URL",
        "BufferedReader",
        "String",
        "Reader",
        "Boolean",
        "MalformedURLException",
        "IOException"
      ],
      "apicalls": [
        "equalsIgnoreCase",
        "openStream",
        "printStackTrace",
        "close",
        "readLine"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.openStream()",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.io.BufferedReader.readLine()",
            "java.io.BufferedReader.close()",
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.openStream()",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.io.BufferedReader.readLine()",
            "java.io.BufferedReader.close()",
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "equals",
        "ignore",
        "stack",
        "case",
        "stream",
        "line",
        "exception",
        "io",
        "buffered",
        "net",
        "close",
        "java",
        "print",
        "malformed",
        "read",
        "trace",
        "url",
        "reader",
        "open",
        "string",
        "boolean",
        "input",
        "throwable"
      ]
    },
    {
      "method": "save@55",
      "body": "public void save(){\n  try {\n    getConfig().save(main);\n  }\n catch (  IOException ex) {\n    plugin.getLogger().log(Level.WARNING,String.format(\"Saving config.yml failed!: %s\",ex.getMessage()));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/UltimateSpawn/src/main/java/com/maino/p000ison/dev/ultimatespawn/handlers/SettingsHandler.java",
      "types": [
        "Throwable",
        "Object",
        "String"
      ],
      "apicalls": [
        "format",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.String.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "object",
        "message",
        "format",
        "throwable",
        "lang",
        "get",
        "string",
        "java"
      ]
    },
    {
      "method": "JettySolrRunner@58",
      "body": "public JettySolrRunner(String context,int port,String solrConfigFilename){\n  this.init(context,port);\n  this.solrConfigFilename=solrConfigFilename;\n}\n",
      "formalParam": [
        "String",
        "int",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.System.getProperty(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Random.Random()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/echidna_2.0/jetty/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner.java",
      "types": [
        "String",
        "System",
        "Random"
      ],
      "apicalls": [
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.util.Random.Random()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "system",
        "random",
        "property",
        "get",
        "util",
        "string"
      ]
    },
    {
      "method": "getFloat@1477",
      "body": "/** \n * Get a float associated with the given configuration key.\n * @param key          The configuration key.\n * @param defaultValue The default value.\n * @return The associated float.\n * @throws ClassCastException    is thrown if the key maps to anobject that is not a Float.\n * @throws NumberFormatException is thrown if the value mappedby the key has not a valid number format.\n */\npublic float getFloat(String key,float defaultValue){\n  return getFloat(key,new Float(defaultValue)).floatValue();\n}\n",
      "formalParam": [
        "String",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Float.Float(float)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.Float.Float(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          },
          {
            "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.Float.floatValue()",
            "node": "DAPICall",
            "_returns": "float",
            "_throws": []
          }
        ]
      },
      "returnType": "float",
      "file": "./java_projects/geogebra_1/geogebra/org/apache/commons/collections15/ExtendedProperties.java",
      "types": [
        "String",
        "Object",
        "NumberFormatException",
        "Float",
        "Hashtable"
      ],
      "apicalls": [
        "put",
        "get",
        "floatValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Float.Float(float)",
            "java.util.Hashtable.get(java.lang.Object)",
            "java.lang.Float.Float(java.lang.String)",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.lang.Float.floatValue()"
          ]
        }
      ],
      "keywords": [
        "java",
        "number",
        "hashtable",
        "util",
        "put",
        "get",
        "lang",
        "string",
        "format",
        "float",
        "exception",
        "value",
        "object"
      ]
    },
    {
      "method": "getPropertyType@396",
      "body": "public Class<?> getPropertyType(){\n  if (_accessorMethod != null) {\n    return _accessorMethod.getReturnType();\n  }\n  return _field.getType();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.reflect.Method.getReturnType()",
            "_throws": [],
            "_returns": "java.lang.Class",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.reflect.Field.getType()",
            "_throws": [],
            "_returns": "java.lang.Class",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Class<?>",
      "file": "./java_projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "types": [
        "Class",
        "Method",
        "Field"
      ],
      "apicalls": [
        "getReturnType",
        "getType"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.Method.getReturnType()",
            "java.lang.reflect.Field.getType()"
          ]
        }
      ],
      "keywords": [
        "class",
        "get",
        "lang",
        "java",
        "type",
        "field",
        "reflect",
        "method"
      ]
    },
    {
      "method": "equals@91",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/spring-data-keyvalue/spring-data-redis/src/main/java/org/springframework/data/keyvalue/redis/support/collections/AbstractRedisCollection.java",
      "body": "@Override public boolean equals(Object o){\n  if (o == this)   return true;\n  if (o instanceof RedisStore) {\n    return key.equals(((RedisStore)o).getKey());\n  }\n  if (o instanceof AbstractRedisCollection) {\n    return o.hashCode() == hashCode();\n  }\n  return false;\n}\n",
      "types": [
        "Boolean",
        "String",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "equals",
        "hashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.hashCode()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "boolean",
        "equals",
        "integer",
        "lang",
        "object",
        "java",
        "string",
        "code"
      ]
    },
    {
      "method": "incr@51",
      "body": "public void incr(int num){\n  if (useTreeMap) {\n    final Integer key=num;\n    Integer val=map.get(key);\n    if (val == null) {\n      map.put(key,1);\n    }\n else {\n      map.put(key,1 + val);\n    }\n    return;\n  }\n  if (upto == values.length) {\n    values=ArrayUtil2.grow(values,1 + upto);\n    counts=ArrayUtil2.grow(counts,1 + upto);\n  }\n  for (int i=0; i < upto; i++) {\n    if (values[i] == num) {\n      counts[i]++;\n      return;\n    }\n else     if (num < values[i]) {\n      int j=upto - 1;\n      while (j >= i) {\n        values[1 + j]=values[j];\n        counts[1 + j]=counts[j];\n        j--;\n      }\n      values[i]=num;\n      counts[i]=1;\n      upto++;\n      return;\n    }\n  }\n  values[upto]=num;\n  counts[upto]=1;\n  upto++;\n  if (upto == TREE_MAP_CUTOVER) {\n    useTreeMap=true;\n    for (int i=0; i < upto; i++) {\n      map.put(values[i],counts[i]);\n    }\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Integer",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
                "_throws": [],
                "_returns": "java.lang.Integer",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
                "_throws": [],
                "_returns": "java.lang.Integer",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
            "_throws": [],
            "_returns": "java.lang.Integer",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/indextank-engine/lucene-experimental/com/flaptor/org/apache/lucene/util/automaton/SortedIntSet.java",
      "types": [
        "Map",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.Integer,java.lang.Integer>.get(java.lang.Object)",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "get",
        "object",
        "put",
        "java",
        "util",
        "integer",
        "map"
      ]
    },
    {
      "method": "hashCode@309",
      "body": "@Override public int hashCode(){\n  return Long.valueOf(value).hashCode();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.valueOf(long)",
            "node": "DAPICall",
            "_returns": "java.lang.Long",
            "_throws": []
          },
          {
            "_call": "java.lang.Long.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/jOOU/jOOU/src/main/java/org/joou/UInteger.java",
      "types": [
        "Integer",
        "Long"
      ],
      "apicalls": [
        "valueOf",
        "hashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.valueOf(long)",
            "java.lang.Long.hashCode()"
          ]
        }
      ],
      "keywords": [
        "value",
        "lang",
        "java",
        "code",
        "integer",
        "long",
        "hash"
      ]
    },
    {
      "method": "setSoTimeout@1013",
      "body": "/** \n * Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.  With this option set to a non-zero timeout, a read() call on the InputStream associated with this Socket will block for only this amount of time.  If the timeout expires, a <B>java.net.SocketTimeoutException</B> is raised, though the Socket is still valid. The option <B>must</B> be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.\n * @param timeout the specified timeout, in milliseconds.\n * @exception SocketException if there is an errorin the underlying protocol, such as a TCP error.\n * @since   JDK 1.1\n * @see #getSoTimeout()\n */\npublic synchronized void setSoTimeout(int timeout) throws SocketException {\n  if (isClosed())   throw new SocketException(\"Socket is closed\");\n  if (timeout < 0)   throw new IllegalArgumentException(\"timeout can't be negative\");\n  getImpl().setOption(SocketOptions.SO_TIMEOUT,new Integer(timeout));\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/java/net/Socket.java",
      "types": [
        "PrivilegedAction",
        "AccessController",
        "Integer"
      ],
      "apicalls": [
        "doPrivileged"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "security",
        "access",
        "integer",
        "action",
        "controller",
        "lang",
        "privileged",
        "java"
      ]
    },
    {
      "method": "MapPrinter@79",
      "body": "public MapPrinter(String strConfig,String configDir){\n  this.config=Config.fromString(strConfig);\n  this.configDir=configDir;\n  initFonts();\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.isDirectory()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/GeoBI/print/src/main/java/org/mapfish/print/MapPrinter.java",
      "types": [
        "String",
        "Boolean",
        "File"
      ],
      "apicalls": [
        "isDirectory",
        "replaceAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.isDirectory()"
          ]
        }
      ],
      "keywords": [
        "replace",
        "directory",
        "boolean",
        "io",
        "java",
        "lang",
        "file",
        "string"
      ]
    },
    {
      "method": "run@36",
      "body": "/** \n * @see ActionDelegate#run(IAction)\n */\n@Override public void run(IAction action){\n  if (selection != null) {\n    if (selection.isEmpty()) {\n      return;\n    }\n    try {\n      List<?> list=selection.toList();\n      List<IMarker> listMarkers=new ArrayList<IMarker>();\n      Iterator<?> iterator=list.iterator();\n      while (iterator.hasNext()) {\n        IMarker marker=(IMarker)iterator.next();\n        if (marker.isSubtypeOf(ICModelMarker.INDEXER_MARKER)) {\n          listMarkers.add(marker);\n        }\n      }\n      if (listMarkers.isEmpty()) {\n        return;\n      }\n      IMarker[] markers=new IMarker[listMarkers.size()];\n      listMarkers.toArray(markers);\n      ResourcesPlugin.getWorkspace().deleteMarkers(markers);\n      selection=null;\n    }\n catch (    CoreException e) {\n    }\n  }\n}\n",
      "formalParam": [
        "IAction"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cdt/core/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/util/DeleteIProblemMarkerAction.java",
      "types": [
        "List",
        "Iterator",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "hasNext",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "next",
        "list",
        "array",
        "boolean",
        "iterator",
        "util"
      ]
    },
    {
      "method": "isSet@12267",
      "formalParam": [
        "_Fields"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.get(int)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/brisk/interface/thrift/gen-java/org/apache/hadoop/thriftfs/api/Namenode.java",
      "body": "/** \n * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise \n */\npublic boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase SUCCESS:\n    return isSetSuccess();\ncase ERR:\n  return isSetErr();\n}\nthrow new IllegalStateException();\n}\n",
      "types": [
        "Integer",
        "BitSet",
        "Boolean"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.get(int)"
          ]
        }
      ],
      "keywords": [
        "set",
        "bit",
        "boolean",
        "integer",
        "java",
        "util",
        "get"
      ]
    },
    {
      "method": "createEvent@11",
      "formalParam": [
        "EventToken",
        "IRCEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Matcher.matches()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Matcher.group(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "IRCEvent",
      "file": "./java_projects/Haven-and-Hearth-client-modified-by-Ender/src/jerklib/parsers/TopicUpdatedParser.java",
      "body": "public IRCEvent createEvent(EventToken token,IRCEvent event){\n  Pattern p=Pattern.compile(\"^.+?TOPIC\\\\s+(.+?)\\\\s+.*$\");\n  Matcher m=p.matcher(token.data());\n  m.matches();\n  event.getSession().sayRaw(\"TOPIC \" + m.group(1));\n  return event;\n}\n",
      "types": [
        "String",
        "Matcher",
        "CharSequence",
        "Boolean",
        "Integer",
        "Pattern"
      ],
      "apicalls": [
        "compile",
        "group",
        "matches",
        "matcher"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Matcher.group(int)"
          ]
        }
      ],
      "keywords": [
        "regex",
        "char",
        "compile",
        "string",
        "sequence",
        "matches",
        "pattern",
        "boolean",
        "integer",
        "util",
        "group",
        "java",
        "matcher"
      ]
    },
    {
      "method": "logInfo@263",
      "body": "/** \n * @generated\n */\npublic void logInfo(String message){\n  logInfo(message,null);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/CertWare/net.certware.argument.euz.diagram/src/net/certware/argument/euz/diagram/part/EuzDiagramEditorPlugin.java",
      "types": [
        "PrintStream",
        "String",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace",
        "getMessage",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "message",
        "throwable",
        "io",
        "stream",
        "trace",
        "string",
        "lang",
        "print",
        "stack",
        "java",
        "println",
        "get"
      ]
    },
    {
      "method": "releaseListeners@202",
      "body": "public void releaseListeners(){\n  if (currentSourceStep != null) {\n    if (currentSourceStep instanceof TestStep)     ((TestStep)currentSourceStep).removePropertyChangeListener(TestStep.NAME_PROPERTY,stepNameChangeListener);\n    currentSourceStep.removeTestPropertyListener(propertyNameChangeListener);\n  }\n  if (currentTargetStep != null) {\n    if (currentTargetStep instanceof TestStep)     ((TestStep)currentTargetStep).removePropertyChangeListener(TestStep.NAME_PROPERTY,stepNameChangeListener);\n    currentTargetStep.removeTestPropertyListener(propertyNameChangeListener);\n  }\n  PropertyChangeListener[] listeners=propertyChangeSupport.getPropertyChangeListeners();\n  for (  PropertyChangeListener listener : listeners)   propertyChangeSupport.removePropertyChangeListener(listener);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.beans.PropertyChangeSupport.getPropertyChangeListeners()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.beans.PropertyChangeListener[]"
          },
          {
            "_call": "java.beans.PropertyChangeSupport.removePropertyChangeListener(java.beans.PropertyChangeListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/soapui/src/java/com/eviware/soapui/impl/wsdl/teststeps/PropertyTransfer.java",
      "types": [
        "PropertyChangeListener",
        "PropertyChangeSupport"
      ],
      "apicalls": [
        "removePropertyChangeListener",
        "getPropertyChangeListeners"
      ],
      "sequences": [
        {
          "calls": [
            "java.beans.PropertyChangeSupport.getPropertyChangeListeners()",
            "java.beans.PropertyChangeSupport.removePropertyChangeListener(java.beans.PropertyChangeListener)"
          ]
        }
      ],
      "keywords": [
        "java",
        "remove",
        "get",
        "listener",
        "property",
        "listeners",
        "change",
        "support",
        "beans"
      ]
    },
    {
      "method": "toString@181",
      "body": "@Override public String toString(){\n  StringBuilder s=new StringBuilder(super.toString());\n  if (outputs != null)   s.append(\"outputs:\").append(outputs).append('\\n');\n  if (inputs != null)   s.append(\"inputs:\").append(inputs).append('\\n');\n  if (parameters != null)   s.append(\"parameters:\").append(parameters).append('\\n');\n  return s.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/geotoolkit-pending/modules/jaxb-xml-binding/geotk-xml-sensorML/src/main/java/org/geotoolkit/sml/xml/v100/AbstractComponentType.java",
      "types": [
        "String",
        "StringBuilder",
        "Object"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "append",
        "lang",
        "object",
        "builder"
      ]
    },
    {
      "method": "onCreate@50",
      "body": "public void onCreate(Bundle icicle){\n  super.onCreate(icicle);\n  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\n    Toast.makeText(this,\"Die Anwendung ist f\ufffdr den Landschafts-Modus optimiert.\",Toast.LENGTH_LONG).show();\n    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n  }\n  requestWindowFeature(Window.FEATURE_NO_TITLE);\n  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n  int h=ViewGroup.LayoutParams.FILL_PARENT;\n  int w=ViewGroup.LayoutParams.WRAP_CONTENT;\n  contentView=new AbsoluteLayout(this);\n  ArbSurface s=new ArbSurface(this);\n  s.setCreationCallbacks(this);\n  contentView.addView(s,h,w);\n  t=new TextView(this);\n  contentView.addView(t,new ViewGroup.LayoutParams(h,w));\n  setContentView(contentView);\n  locationListener=new LocationListenerImpl(new LocationReceivable(){\n    public void receiveNewLocation(    Location l){\n      User.getInstance().setUserLocation(l);\n    }\n  }\n);\n  lm=(LocationManager)getSystemService(Context.LOCATION_SERVICE);\n  lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000 / 25,1,locationListener);\n  initialDrawing();\n  startDrawingUpdates();\n}\n",
      "formalParam": [
        "Bundle"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fha_arb/src/arb/mportal/OverlayActivity.java",
      "types": [
        "Runnable",
        "Thread"
      ],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "runnable",
        "lang",
        "thread",
        "start",
        "java"
      ]
    },
    {
      "method": "serialize@1880",
      "body": "@Override public void serialize(Env env,StringBuilder sb,SerializeMap serializeMap){\n  Integer index=serializeMap.get(this);\n  if (index != null) {\n    sb.append(\"R:\");\n    sb.append(index);\n    sb.append(\";\");\n  }\n else {\n    serializeMap.put(this);\n    _value.serialize(env,sb,serializeMap);\n  }\n}\n",
      "formalParam": [
        "Env",
        "StringBuilder",
        "SerializeMap"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Quercus/quercus/src/main/java/com/caucho/quercus/env/Var.java",
      "types": [
        "Object",
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "builder",
        "object",
        "string",
        "append",
        "java"
      ]
    },
    {
      "method": "sharpen@12391",
      "body": "/** \n * Add option -sharpen to the ImageMagick commandline (see the documentation of ImageMagick for details).\n */\npublic IMOps sharpen(Double radius){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-sharpen\");\n  if (radius != null) {\n    buf.append(radius.toString());\n  }\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "Double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Double.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "IMOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/IMOps.java",
      "types": [
        "StringBuffer",
        "Double",
        "Integer",
        "String"
      ],
      "apicalls": [
        "append",
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.Double.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.Double.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "lang",
        "append",
        "java",
        "double",
        "buffer",
        "string",
        "length"
      ]
    },
    {
      "method": "addFilterUrlPattern@310",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.lang.String.contains(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/malen/malen-eclipse/src/com/rockagen/malen/properties/FilterIniConfig.java",
      "body": "/** \n * Add filter URl-pattern\n */\npublic static void addFilterUrlPattern(){\n  for (  Map.Entry<String,String> entry : FILTERNAMEVALUE.entrySet()) {\n    String temp=entry.getKey();\n    if (temp.contains(\"#name#\"))     continue;\n    String context=\"/\" + temp.substring(0,temp.indexOf(\"_\"));\n    String url=temp.substring(temp.lastIndexOf(\"_\") + 1);\n    String filterUrl=context + url;\n    FILTERURLPATTERNS.add(filterUrl);\n  }\n}\n",
      "types": [
        "Map",
        "Set",
        "String",
        "Integer",
        "Boolean",
        "CharSequence"
      ],
      "apicalls": [
        "lastIndexOf",
        "substring",
        "add",
        "entrySet",
        "contains",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "contains",
        "last",
        "set",
        "char",
        "add",
        "entry",
        "sequence",
        "substring",
        "boolean",
        "lang",
        "util",
        "map",
        "string",
        "index",
        "integer"
      ]
    },
    {
      "method": "getPropertyNames@18",
      "body": "public List<String> getPropertyNames(){\n  List<String> propertyNames=new LinkedList<String>();\n  int index=0;\n  while ((index=originalVersion.indexOf(\"${\",index)) >= 0) {\n    int endIndex=originalVersion.indexOf(\"}\",index);\n    if (endIndex >= 0) {\n      String propertyName=originalVersion.substring(index + 2,endIndex);\n      propertyNames.add(propertyName);\n      index=endIndex;\n    }\n else {\n      break;\n    }\n  }\n  return propertyNames;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/lint-maven-plugin/src/main/java/com/lewisd/maven/lint/model/VersionProperty.java",
      "types": [
        "String",
        "LinkedList",
        "Integer",
        "List",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "indexOf",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.substring(int,int)",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "add",
        "string",
        "linked",
        "lang",
        "list",
        "java",
        "boolean",
        "substring",
        "util",
        "index",
        "integer"
      ]
    },
    {
      "method": "findChildrenByParent@1285",
      "formalParam": [
        "GetModifierChildrenType",
        "ProjectType",
        "DBInfoType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.toUpperCase()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "List",
      "file": "./java_projects/i2b2_1.6_Postgres/coreserver/src/edu.harvard.i2b2.ontology/src/core/edu/harvard/i2b2/ontology/dao/ConceptDao.java",
      "body": "public List findChildrenByParent(final GetModifierChildrenType modifierChildrenType,ProjectType projectInfo,DBInfoType dbInfo) throws I2B2DAOException, I2B2Exception {\n  String parameters=MOD_DEFAULT;\n  if (modifierChildrenType.getType().equals(\"limited\")) {\n    parameters=MOD_LIMITED;\n  }\n else   if (modifierChildrenType.getType().equals(\"core\")) {\n    parameters=MOD_CORE;\n  }\n else   if (modifierChildrenType.getType().equals(\"all\")) {\n    parameters=MOD_CORE + ALL;\n  }\n  if (modifierChildrenType.isBlob() == true)   parameters=parameters + BLOB;\n  String metadataSchema=dbInfo.getDb_fullSchema();\n  setDataSource(dbInfo.getDb_dataSource());\n  if (projectInfo.getRole().size() == 0) {\n    log.error(\"no role found for this user in project: \" + projectInfo.getName());\n    I2B2Exception e=new I2B2Exception(\"No role found for user\");\n    throw e;\n  }\n  Boolean protectedAccess=false;\n  Iterator it=projectInfo.getRole().iterator();\n  while (it.hasNext()) {\n    String role=(String)it.next();\n    if (role.toUpperCase().equals(\"DATA_PROT\")) {\n      protectedAccess=true;\n      break;\n    }\n  }\n  ParameterizedRowMapper<String> map=new ParameterizedRowMapper<String>(){\n    public String mapRow(    ResultSet rs,    int rowNum) throws SQLException {\n      String name=(rs.getString(\"c_table_name\"));\n      return name;\n    }\n  }\n;\n  String tableCd=StringUtil.getTableCd(modifierChildrenType.getParent());\n  String tableName=null;\n  if (!protectedAccess) {\n    String tableSql=\"select distinct(c_table_name) from \" + metadataSchema + \"table_access where c_table_cd = ? and c_protected_access = ? \";\n    try {\n      tableName=jt.queryForObject(tableSql,map,tableCd,\"N\");\n    }\n catch (    DataAccessException e) {\n      log.error(e.getMessage());\n      throw new I2B2DAOException(\"Database Error\");\n    }\n  }\n else {\n    String tableSql=\"select distinct(c_table_name) from \" + metadataSchema + \"table_access where c_table_cd = ?\";\n    try {\n      tableName=jt.queryForObject(tableSql,map,tableCd);\n    }\n catch (    DataAccessException e) {\n      log.error(e.getMessage());\n      throw new I2B2DAOException(\"Database Error\");\n    }\n  }\n  String path=StringUtil.escapeBackslash(StringUtil.getPath(modifierChildrenType.getParent()),dbInfo.getDb_serverType());\n  String searchPath=path + \"%\";\n  String levelSql=\"select c_hlevel from \" + metadataSchema + tableName+ \" where c_fullname = ?  and c_synonym_cd = 'N' and m_applied_path = ? and m_exclusion_cd is null\";\n  int level=0;\n  try {\n    level=jt.queryForInt(levelSql,path,modifierChildrenType.getAppliedPath());\n  }\n catch (  DataAccessException e1) {\n    log.error(e1.getMessage());\n    throw new I2B2DAOException(\"Database Error\");\n  }\n  String hidden=\"\";\n  if (modifierChildrenType.isHiddens() == false)   hidden=\" and c_visualattributes not like '_H%'\";\n  String synonym=\"\";\n  if (modifierChildrenType.isSynonyms() == false)   synonym=\" and c_synonym_cd = 'N'\";\n  String sql=\"select \" + parameters + \" from \"+ metadataSchema+ tableName+ \" where m_exclusion_cd is null\"+ hidden+ synonym+ \" and c_fullname in (\";\n  String inclusionSql=\" (select c_fullname from \" + metadataSchema + tableName+ \" where c_fullname like ? and c_hlevel = ? and m_exclusion_cd is null \";\n  if (dbInfo.getDb_serverType().equals(\"ORACLE\"))   sql=sql + inclusionSql + \" ) MINUS (\";\n else   sql=sql + inclusionSql + \" ) EXCEPT (\";\n  String appliedConcept=StringUtil.getLiteralPath(modifierChildrenType.getAppliedConcept());\n  String exclusionSql=\" select c_fullname from \" + metadataSchema + tableName+ \" where c_fullname like ? and c_hlevel = ? and m_exclusion_cd is not null \"+ \" and ( m_applied_path = ?  or m_applied_path = ? ) ) )\";\n  sql=sql + exclusionSql + \" order by c_name \";\n  log.info(\"Find Mod children:\" + sql + \" \"+ path+ \" \"+ level+ \" \"+ appliedConcept);\n  final boolean ofuscatedUserFlag=Roles.getInstance().isRoleOfuscated(projectInfo);\n  ParameterizedRowMapper<ModifierType> modMapper=getModMapper(new NodeType(modifierChildrenType),ofuscatedUserFlag,dbInfo.getDb_serverType());\n  List queryResult=null;\n  try {\n    queryResult=jt.query(sql,modMapper,searchPath,(level + 1),searchPath,(level + 1),appliedConcept,(appliedConcept + \"%\"));\n  }\n catch (  DataAccessException e) {\n    log.error(e.getMessage());\n    throw new I2B2DAOException(\"Database Error\");\n  }\n  log.debug(\"result size = \" + queryResult.size());\n  return queryResult;\n}\n",
      "types": [
        "Integer",
        "Object",
        "Boolean",
        "List",
        "Iterator",
        "String"
      ],
      "apicalls": [
        "hasNext",
        "equals",
        "toUpperCase",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.lang.String.toUpperCase()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "object",
        "list",
        "size",
        "upper",
        "iterator",
        "lang",
        "java",
        "util",
        "string",
        "boolean",
        "next",
        "case",
        "equals",
        "integer"
      ]
    },
    {
      "method": "main@34",
      "body": "public static void main(String[] args) throws Exception {\n  DatagramChannel ch=DatagramChannel.open();\n  try {\n    ch.configureBlocking(false);\n    Selector sel=Selector.open();\n    SelectionKey key=ch.register(sel,SelectionKey.OP_WRITE);\n    sel.close();\n    if (key.isValid())     throw new Exception(\"Key valid after selector closed\");\n  }\n  finally {\n    ch.close();\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.channels.DatagramChannel.open()",
            "node": "DAPICall",
            "_returns": "java.nio.channels.DatagramChannel",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.nio.channels.spi.AbstractInterruptibleChannel.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/nio/channels/Selector/CloseInvalidatesKeys.java",
      "types": [
        "channels",
        "DatagramChannel",
        "IOException"
      ],
      "apicalls": [
        "open",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.channels.DatagramChannel.open()",
            "java.nio.channels.spi.AbstractInterruptibleChannel.close()"
          ]
        }
      ],
      "keywords": [
        "datagram",
        "abstract",
        "channel",
        "io",
        "exception",
        "channels",
        "java",
        "nio",
        "close",
        "spi",
        "open",
        "interruptible"
      ]
    },
    {
      "method": "serialization@118",
      "body": "@Test public void serialization() throws Exception {\n  StarTeamConnection originalConnection=new StarTeamConnection(\"host\",1234,\"user\",\"passwd\",\"project\",\"view\",\"folder\",null);\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  ObjectOutputStream outputStream=new ObjectOutputStream(byteArrayOutputStream);\n  outputStream.writeObject(originalConnection);\n  ObjectInputStream inputStream=new ObjectInputStream(new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));\n  StarTeamConnection serializedConnection=(StarTeamConnection)inputStream.readObject();\n  assertThat(\"Incorrect serialization\",serializedConnection,is(originalConnection));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/starteam-plugin/src/test/java/hudson/plugins/starteam/StarTeamConnectionTest.java",
      "types": [
        "ByteArrayInputStream",
        "OutputStream",
        "IOException",
        "ObjectOutputStream",
        "InputStream",
        "Byte",
        "ObjectInputStream",
        "ByteArrayOutputStream",
        "Object"
      ],
      "apicalls": [
        "toByteArray",
        "writeObject"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "io",
        "object",
        "write",
        "exception",
        "input",
        "array",
        "stream",
        "byte",
        "output",
        "java"
      ]
    },
    {
      "method": "setOAuth2TokensAndExpiration@160",
      "formalParam": [
        "String",
        "String",
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/stackmob-java-client-sdk/src/main/java/com/stackmob/sdk/api/StackMobSession.java",
      "body": "public void setOAuth2TokensAndExpiration(String accessToken,String macKey,String refreshToken,int seconds){\n  setOAuth2TokensAndExpiration(accessToken,macKey,refreshToken,new Date(new Date().getTime() + seconds * 1000));\n}\n",
      "types": [
        "Date",
        "Long"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "long",
        "time",
        "get",
        "date",
        "util"
      ]
    },
    {
      "method": "saveToDb@71",
      "body": "public final void saveToDb(){\n  try {\n    final PreparedStatement ps=Database.getConnection().prepareStatement(\"UPDATE pets SET name = ?, level = ?, closeness = ?, fullness = ? WHERE petid = ?\");\n    ps.setString(1,this.name);\n    ps.setInt(2,this.level);\n    ps.setInt(3,this.closeness);\n    ps.setInt(4,this.fullness);\n    ps.setInt(5,this.uniqueId);\n    ps.executeUpdate();\n    ps.close();\n  }\n catch (  final SQLException ex) {\n    ex.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.PreparedStatement.setString(int,java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.sql.PreparedStatement.setInt(int,int)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.sql.PreparedStatement.setInt(int,int)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.sql.PreparedStatement.setInt(int,int)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.sql.PreparedStatement.setInt(int,int)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.sql.PreparedStatement.executeUpdate()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.sql.Statement.close()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JavaStory/Core/src/main/java/javastory/channel/client/Pet.java",
      "types": [
        "SQLException",
        "PreparedStatement",
        "String",
        "Statement",
        "Throwable",
        "Integer"
      ],
      "apicalls": [
        "executeUpdate",
        "printStackTrace",
        "setString",
        "close",
        "setInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.executeUpdate()",
            "java.sql.Statement.close()"
          ]
        },
        {
          "calls": [
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.setInt(int,int)",
            "java.sql.PreparedStatement.executeUpdate()",
            "java.sql.Statement.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "statement",
        "lang",
        "prepared",
        "stack",
        "update",
        "sql",
        "throwable",
        "execute",
        "set",
        "string",
        "exception",
        "int",
        "java",
        "integer",
        "print",
        "close",
        "trace"
      ]
    },
    {
      "method": "testGetRecentTasks@78",
      "body": "@TestTargetNew(level=TestLevel.COMPLETE,method=\"getRecentTasks\",args={int.class,int.class}) public void testGetRecentTasks() throws Exception {\n  int maxNum=0;\n  int flags=0;\n  List<RecentTaskInfo> recentTaskList;\n  recentTaskList=mActivityManager.getRecentTasks(maxNum,flags);\n  assertNotNull(recentTaskList);\n  assertTrue(recentTaskList.size() == 0);\n  maxNum=50;\n  recentTaskList=mActivityManager.getRecentTasks(maxNum,flags);\n  assertNotNull(recentTaskList);\n  startSubActivity(ActivityManagerRecentOneActivity.class);\n  Thread.sleep(WAIT_TIME);\n  startSubActivity(ActivityManagerRecentTwoActivity.class);\n  Thread.sleep(WAIT_TIME);\n  recentTaskList=mActivityManager.getRecentTasks(maxNum,flags);\n  int indexRecentOne=-1;\n  int indexRecentTwo=-1;\n  int i=0;\n  for (  RecentTaskInfo rti : recentTaskList) {\n    if (rti.baseIntent.getComponent().getClassName().equals(ActivityManagerRecentOneActivity.class.getName())) {\n      indexRecentOne=i;\n    }\n else     if (rti.baseIntent.getComponent().getClassName().equals(ActivityManagerRecentTwoActivity.class.getName())) {\n      indexRecentTwo=i;\n    }\n    i++;\n  }\n  assertTrue(indexRecentOne != -1 && indexRecentTwo != -1);\n  assertTrue(indexRecentTwo < indexRecentOne);\n  try {\n    mActivityManager.getRecentTasks(-1,0);\n    fail(\"Should throw IllegalArgumentException\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_cts/tests/tests/app/src/android/app/cts/ActivityManagerTest.java",
      "types": [
        "Class",
        "Long",
        "Thread",
        "String",
        "InterruptedException"
      ],
      "apicalls": [
        "getName",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "get",
        "name",
        "string",
        "thread",
        "java",
        "class",
        "interrupted",
        "exception",
        "long",
        "lang",
        "sleep"
      ]
    },
    {
      "method": "validateServiceTicket@329",
      "body": "/** \n * @throws IllegalArgumentException if the ServiceTicketId or the Serviceare null.\n */\n@Audit(action=\"SERVICE_TICKET_VALIDATE\",actionResolverName=\"VALIDATE_SERVICE_TICKET_RESOLVER\",resourceResolverName=\"VALIDATE_SERVICE_TICKET_RESOURCE_RESOLVER\") @Profiled(tag=\"VALIDATE_SERVICE_TICKET\",logFailuresSeparately=false) @Transactional(readOnly=false) public Assertion validateServiceTicket(final String serviceTicketId,final Service service) throws TicketException {\n  Assert.notNull(serviceTicketId,\"serviceTicketId cannot be null\");\n  Assert.notNull(service,\"service cannot be null\");\n  final ServiceTicket serviceTicket=(ServiceTicket)this.serviceTicketRegistry.getTicket(serviceTicketId,ServiceTicket.class);\n  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);\n  if (registeredService == null || !registeredService.isEnabled()) {\n    log.warn(\"ServiceManagement: Service does not exist is not enabled, and thus not allowed to validate tickets.   Service: [\" + service.getId() + \"]\");\n    throw new UnauthorizedServiceException(\"Service not allowed to validate tickets.\");\n  }\n  if (serviceTicket == null) {\n    log.info(\"ServiceTicket [\" + serviceTicketId + \"] does not exist.\");\n    throw new InvalidTicketException();\n  }\n  try {\nsynchronized (serviceTicket) {\n      if (serviceTicket.isExpired()) {\n        log.info(\"ServiceTicket [\" + serviceTicketId + \"] has expired.\");\n        throw new InvalidTicketException();\n      }\n      if (!serviceTicket.isValidFor(service)) {\n        log.error(\"ServiceTicket [\" + serviceTicketId + \"] with service [\"+ serviceTicket.getService().getId()+ \" does not match supplied service [\"+ service+ \"]\");\n        throw new TicketValidationException(serviceTicket.getService());\n      }\n    }\n    final List<Authentication> chainedAuthenticationsList=serviceTicket.getGrantingTicket().getChainedAuthentications();\n    final Authentication authentication=chainedAuthenticationsList.get(chainedAuthenticationsList.size() - 1);\n    final Principal principal=authentication.getPrincipal();\n    final String principalId=determinePrincipalIdForRegisteredService(principal,registeredService,serviceTicket);\n    final Authentication authToUse;\n    if (!registeredService.isIgnoreAttributes()) {\n      final Map<String,Object> attributes=new HashMap<String,Object>();\n      for (      final String attribute : registeredService.getAllowedAttributes()) {\n        final Object value=principal.getAttributes().get(attribute);\n        if (value != null) {\n          attributes.put(attribute,value);\n        }\n      }\n      final Principal modifiedPrincipal=new SimplePrincipal(principalId,attributes);\n      final MutableAuthentication mutableAuthentication=new MutableAuthentication(modifiedPrincipal,authentication.getAuthenticatedDate());\n      mutableAuthentication.getAttributes().putAll(authentication.getAttributes());\n      mutableAuthentication.getAuthenticatedDate().setTime(authentication.getAuthenticatedDate().getTime());\n      authToUse=mutableAuthentication;\n    }\n else {\n      final Principal modifiedPrincipal=new SimplePrincipal(principalId,principal.getAttributes());\n      authToUse=new MutableAuthentication(modifiedPrincipal,authentication.getAuthenticatedDate());\n    }\n    final List<Authentication> authentications=new ArrayList<Authentication>();\n    for (int i=0; i < chainedAuthenticationsList.size() - 1; i++) {\n      authentications.add(serviceTicket.getGrantingTicket().getChainedAuthentications().get(i));\n    }\n    authentications.add(authToUse);\n    return new ImmutableAssertionImpl(authentications,serviceTicket.getService(),serviceTicket.isFromNewLogin());\n  }\n  finally {\n    if (serviceTicket.isExpired()) {\n      this.serviceTicketRegistry.deleteTicket(serviceTicketId);\n    }\n  }\n}\n",
      "formalParam": [
        "String",
        "Service"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Assertion",
      "file": "./java_projects/cas/cas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java",
      "types": [
        "Object",
        "String",
        "HashMap",
        "ArrayList",
        "Map"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "java",
        "put",
        "util",
        "string",
        "array",
        "list",
        "map",
        "hash",
        "object"
      ]
    },
    {
      "method": "xmlSerializationTest@73",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.StringWriter.write(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/common_1/src/test/java/org/powertac/common/msg/CustomerBootstrapDataTests.java",
      "body": "@Test public void xmlSerializationTest(){\n  CustomerBootstrapData cbd=new CustomerBootstrapData(customer,PowerType.CONSUMPTION,data);\n  XStream xstream=new XStream();\n  xstream.processAnnotations(CustomerBootstrapData.class);\n  StringWriter serialized=new StringWriter();\n  serialized.write(xstream.toXML(cbd));\n  CustomerBootstrapData xcbd=(CustomerBootstrapData)xstream.fromXML(serialized.toString());\n  assertNotNull(\"deserialized something\",xcbd);\n  assertEquals(\"correct id\",cbd.getId(),xcbd.getId());\n  assertEquals(\"correct 5th element\",1.7,xcbd.getNetUsage()[4],1e-6);\n}\n",
      "types": [
        "StringWriter",
        "String"
      ],
      "apicalls": [
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.write(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io",
        "string",
        "write",
        "writer",
        "java"
      ]
    },
    {
      "method": "serializedClass@69",
      "body": "public String serializedClass(Class type){\n  return type.getName().replaceFirst(\".*\\\\.\",\"\");\n}\n",
      "formalParam": [
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.replaceFirst(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/geoserver/src/extension/wps/wps-core/src/main/java/org/geoserver/wps/ppio/XStreamPPIO.java",
      "types": [
        "Class",
        "String"
      ],
      "apicalls": [
        "replaceFirst",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.lang.String.replaceFirst(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "class",
        "replace",
        "get",
        "name",
        "lang",
        "first"
      ]
    },
    {
      "method": "testApplyInputStream@43",
      "body": "public void testApplyInputStream(){\n  InputStream is=getClass().getResourceAsStream(\"/orglist.xml\");\n  Map<String,ReferenceType> result=factory.create(injector.getInstance(OrgListHandler.class)).parse(is);\n  assertEquals(result,ImmutableMap.of(\"adrian@jclouds.org\",new ReferenceTypeImpl(\"adrian@jclouds.org\",\"application/vnd.vmware.vcloud.org+xml\",URI.create(\"https://services.vcloudexpress.terremark.com/api/v0.8/org/48\"))));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": []
          },
          {
            "_call": "java.net.URI.create(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.net.URI",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jclouds/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/OrgListHandlerTest.java",
      "types": [
        "URI",
        "String",
        "Class",
        "InputStream"
      ],
      "apicalls": [
        "create",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.net.URI.create(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "class",
        "get",
        "net",
        "stream",
        "java",
        "create",
        "string",
        "input",
        "uri",
        "resource"
      ]
    },
    {
      "method": "htmlDump@433",
      "body": "/** \n * Add option -htmlDump to the exiftool commandline (see the documentation of exiftool for details).\n */\npublic ETOps htmlDump(String pOffset){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  buf.append(\"-htmlDump\");\n  if (pOffset != null) {\n    buf.append(pOffset.toString());\n  }\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.String.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "ETOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/ETOps.java",
      "types": [
        "StringBuffer",
        "Integer",
        "String"
      ],
      "apicalls": [
        "append",
        "length",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.String.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.String.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "integer",
        "buffer",
        "string",
        "length",
        "append",
        "lang"
      ]
    },
    {
      "method": "home@31",
      "formalParam": [
        "Locale",
        "Model"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Locale.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.text.DateFormat.getDateTimeInstance(int,int,java.util.Locale)",
            "node": "DAPICall",
            "_returns": "java.text.DateFormat",
            "_throws": []
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/vcap-java-client/vcap-java-client-test-apps/non-ascii-file-name/src/main/java/com/springdeveloper/test/HomeController.java",
      "body": "/** \n * Simply selects the home view to render by returning its name.\n */\n@RequestMapping(value=\"/\",method=RequestMethod.GET) public String home(Locale locale,Model model){\n  logger.info(\"Welcome home! the client locale is \" + locale.toString() + \" and default encoding is: \"+ Charset.defaultCharset());\n  Date date=new Date();\n  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG,locale);\n  String formattedDate=dateFormat.format(date);\n  model.addAttribute(\"serverTime\",formattedDate);\n  model.addAttribute(\"message\",messageBean.getMessage());\n  return \"home\";\n}\n",
      "types": [
        "DateFormat",
        "Locale",
        "Integer",
        "Date",
        "String"
      ],
      "apicalls": [
        "getDateTimeInstance",
        "format",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Locale.toString()",
            "java.util.Date.Date()",
            "java.text.DateFormat.getDateTimeInstance(int,int,java.util.Locale)",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "util",
        "get",
        "integer",
        "format",
        "string",
        "locale",
        "text",
        "instance",
        "date",
        "java",
        "time"
      ]
    },
    {
      "method": "testMethodCallWithSpaces@3481",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/mvel/src/test/java/org/mvel2/tests/core/CoreConfidenceTests.java",
      "body": "public void testMethodCallWithSpaces(){\n  String[] str=new String[]{\"Foo f = new Foo(); f.setBoolTest( true )   ; f.isBoolTest()\",\"Foo f = new Foo(); f . setBoolTest( true ) ; f.isBoolTest()\",\"Foo f = new Foo(); f. setBoolTest( true )  ; f.isBoolTest()\",\"Foo f = new Foo(); f .setBoolTest( true )  ; f.isBoolTest()\",\"Foo f = new Foo(); f.boolTest = true   ; f.isBoolTest()\",\"Foo f = new Foo(); f . boolTest = true ; f.isBoolTest()\",\"Foo f = new Foo(); f. boolTest = true  ; f.isBoolTest()\",\"Foo f = new Foo(); f .boolTest = true  ; f.isBoolTest()\"};\n  ParserConfiguration pconf=new ParserConfiguration();\n  ParserContext pctx=new ParserContext(pconf);\n  pctx.setStrongTyping(true);\n  pctx.addInput(\"this\",Bar.class);\n  pctx.addImport(Foo.class);\n  List<String> errors=new ArrayList<String>();\n  for (  String s : str) {\n    try {\n      ExecutableStatement stmt=(ExecutableStatement)MVEL.compileExpression(s,pctx);\n      Bar ctx=new Bar();\n      Boolean result=(Boolean)MVEL.executeExpression(stmt,ctx,new HashMap());\n      assertTrue(result);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      errors.add(\"**** Error on expression: \" + s + \"\\n\"+ e.getMessage());\n    }\n  }\n  assertTrue(errors.toString(),errors.isEmpty());\n}\n",
      "types": [
        "String",
        "List",
        "Throwable",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "isEmpty",
        "add",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.lang.Throwable.printStackTrace()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.String>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "lang",
        "util",
        "add",
        "throwable",
        "empty",
        "trace",
        "list",
        "print",
        "java",
        "string",
        "stack",
        "array"
      ]
    },
    {
      "method": "prepare@51",
      "body": "/** \n * @param events      \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439\n * @param readMessage \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043b\u0438 \u043e\u0442\u0440\u0435\u043d\u0434\u0435\u0440\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f RSS)\n * @param secure      \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 https\n * @return\n */\npublic List<PreparedUserEvent> prepare(List<UserEvent> events,boolean readMessage,boolean secure){\n  List<PreparedUserEvent> prepared=new ArrayList<PreparedUserEvent>(events.size());\n  for (  UserEvent event : events) {\n    String text;\n    if (readMessage) {\n      MessageText messageText;\n      if (event.isComment()) {\n        messageText=msgbaseDao.getMessageText(event.getCid());\n      }\n else {\n        messageText=msgbaseDao.getMessageText(event.getMsgid());\n      }\n      text=lorCodeService.prepareTextRSS(messageText.getText(),secure,messageText.isLorcode());\n    }\n else {\n      text=null;\n    }\n    User commentAuthor;\n    int bonus=0;\n    if (event.isComment()) {\n      if (\"DEL\".equals(event.getType().getType())) {\n        DeleteInfo deleteInfo=deleteInfoDao.getDeleteInfo(event.getCid());\n        if (deleteInfo != null) {\n          bonus=deleteInfo.getBonus();\n        }\n      }\n      try {\n        commentAuthor=userDao.getUserCached(event.getCommentAuthor());\n      }\n catch (      UserNotFoundException e) {\n        throw new RuntimeException(e);\n      }\n    }\n else {\n      commentAuthor=null;\n      if (\"DEL\".equals(event.getType().getType())) {\n        DeleteInfo deleteInfo=deleteInfoDao.getDeleteInfo(event.getMsgid());\n        if (deleteInfo != null) {\n          bonus=deleteInfo.getBonus();\n        }\n      }\n    }\n    prepared.add(new PreparedUserEvent(event,text,commentAuthor,bonus));\n  }\n  return prepared;\n}\n",
      "formalParam": [
        "List<UserEvent>",
        "boolean",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "List<PreparedUserEvent>",
      "file": "./java_projects/lorsource/src/main/java/ru/org/linux/user/UserEventService.java",
      "types": [
        "Collection",
        "ArrayList",
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "collection",
        "equals",
        "lang",
        "object",
        "list",
        "string",
        "array",
        "boolean"
      ]
    },
    {
      "method": "visit@148",
      "body": "public void visit(final String name,final Object value){\n  ++size;\n  if (named) {\n    bv.putShort(cw.newUTF8(name));\n  }\n  if (value instanceof String) {\n    bv.put12('s',cw.newUTF8((String)value));\n  }\n else   if (value instanceof Byte) {\n    bv.put12('B',cw.newInteger(((Byte)value).byteValue()).index);\n  }\n else   if (value instanceof Boolean) {\n    int v=((Boolean)value).booleanValue() ? 1 : 0;\n    bv.put12('Z',cw.newInteger(v).index);\n  }\n else   if (value instanceof Character) {\n    bv.put12('C',cw.newInteger(((Character)value).charValue()).index);\n  }\n else   if (value instanceof Short) {\n    bv.put12('S',cw.newInteger(((Short)value).shortValue()).index);\n  }\n else   if (value instanceof Type) {\n    bv.put12('c',cw.newUTF8(((Type)value).getDescriptor()));\n  }\n else   if (value instanceof byte[]) {\n    byte[] v=(byte[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('B',cw.newInteger(v[i]).index);\n    }\n  }\n else   if (value instanceof boolean[]) {\n    boolean[] v=(boolean[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('Z',cw.newInteger(v[i] ? 1 : 0).index);\n    }\n  }\n else   if (value instanceof short[]) {\n    short[] v=(short[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('S',cw.newInteger(v[i]).index);\n    }\n  }\n else   if (value instanceof char[]) {\n    char[] v=(char[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('C',cw.newInteger(v[i]).index);\n    }\n  }\n else   if (value instanceof int[]) {\n    int[] v=(int[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('I',cw.newInteger(v[i]).index);\n    }\n  }\n else   if (value instanceof long[]) {\n    long[] v=(long[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('J',cw.newLong(v[i]).index);\n    }\n  }\n else   if (value instanceof float[]) {\n    float[] v=(float[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('F',cw.newFloat(v[i]).index);\n    }\n  }\n else   if (value instanceof double[]) {\n    double[] v=(double[])value;\n    bv.put12('[',v.length);\n    for (int i=0; i < v.length; i++) {\n      bv.put12('D',cw.newDouble(v[i]).index);\n    }\n  }\n else {\n    Item i=cw.newConstItem(value);\n    bv.put12(\".s.IFJDCS\".charAt(i.type),i.index);\n  }\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.charAt(int)",
                "node": "DAPICall",
                "_returns": "char",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Boolean.booleanValue()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/xml/internal/ws/org/objectweb/asm/AnnotationWriter.java",
      "types": [
        "String",
        "Character",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "booleanValue",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Boolean.booleanValue()"
          ]
        },
        {
          "calls": [
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "boolean",
        "java",
        "char",
        "value",
        "lang",
        "integer",
        "character"
      ]
    },
    {
      "method": "formatDateToString@64",
      "body": "public static String formatDateToString(Date date){\n  SimpleDateFormat iso8601Format=new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n  String s=null;\n  String dateString=null;\n  s=iso8601Format.format(date);\n  dateString=s.substring(0,s.length() - 2) + \":\" + s.substring(s.length() - 2,s.length());\n  return dateString;\n}\n",
      "formalParam": [
        "Date"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/timer-for-android/src/com/apprise/toggl/Util.java",
      "types": [
        "DateFormat",
        "Date",
        "String",
        "Integer",
        "SimpleDateFormat"
      ],
      "apicalls": [
        "format",
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.format(java.util.Date)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "text",
        "simple",
        "format",
        "date",
        "integer",
        "java",
        "substring",
        "length",
        "string",
        "lang"
      ]
    },
    {
      "method": "toString@116",
      "body": "/** \n * @see java.lang.Object#toString()\n */\npublic String toString(){\n  StringBuffer buffer=new StringBuffer();\n  buffer.append(\"(\");\n  if (this.getChildCount() > 0) {\n    INode child=this.getChild(0);\n    buffer.append(child);\n  }\n  buffer.append(\")?\");\n  return buffer.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/studio2/plugins/com.aptana.ide.parsing/src/com/aptana/ide/lexer/matcher/OptionalMatcher.java",
      "types": [
        "String",
        "Object",
        "StringBuffer"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "buffer",
        "string",
        "java",
        "object",
        "append"
      ]
    },
    {
      "method": "incrementDirtyIndex@238",
      "body": "public int incrementDirtyIndex(){\n  boolean success=false;\n  int index=-1;\n  while (!success) {\n    index=dirtyBlocks.get();\n    if (index > dirtyX.length) {\n      break;\n    }\n    int next=index + 1;\n    success=dirtyBlocks.compareAndSet(index,next);\n  }\n  return index;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.get()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/SpoutAPI/src/main/java/org/spout/api/util/map/concurrent/palette/AtomicPaletteBlockStore.java",
      "types": [
        "Integer",
        "concurrent",
        "Boolean"
      ],
      "apicalls": [
        "get",
        "compareAndSet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.get()",
            "java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "atomic",
        "boolean",
        "get",
        "concurrent",
        "set",
        "compare",
        "java",
        "util"
      ]
    },
    {
      "method": "run@488",
      "body": "/** \n * @return the conversation id\n * @throws Exception to fail the test\n */\npublic String run() throws Exception {\n  try {\n    init();\n    beforeRequest();\n    setStandardJspVariables();\n    seamFilter.doFilter(request,response,new FilterChain(){\n      public void doFilter(      ServletRequest request,      ServletResponse response) throws IOException, ServletException {\n        try {\n          if (emulateJsfLifecycle()) {\n            saveConversationViewRoot();\n          }\n        }\n catch (        Exception e) {\n          onException(e);\n          throw new ServletException(e);\n        }\n      }\n    }\n);\n    seamFilter.destroy();\n    afterRequest();\n    facesContext.release();\n    return conversationId;\n  }\n  finally {\n    if (Contexts.isEventContextActive()) {\n      FacesLifecycle.endRequest(externalContext);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String[]>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Seam_2_3/jboss-seam/src/main/java/org/jboss/seam/mock/AbstractSeamTest.java",
      "types": [
        "Map",
        "String",
        "Set",
        "HashMap"
      ],
      "apicalls": [
        "put",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String[]>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "entry",
        "map",
        "hash",
        "put",
        "string",
        "java",
        "set",
        "util"
      ]
    },
    {
      "method": "deleteSelection@1867",
      "body": "/** \n * Delete the current selection set from the filters in the GUI.\n */\npublic void deleteSelection(){\n  Filter[] filters;\n  SubFilterList list;\n  filters=getSelection();\n  for (int i=0; i < filters.length; i++) {\n    list=getEnclosing(filters[i]);\n    if (null != list)     list.removeFilter(filters[i]);\n else     mMainPanel.remove(filters[i]);\n  }\n  mSelection.clear();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Container.remove(java.awt.Component)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/htmlparser/src/org/htmlparser/parserapplications/filterbuilder/FilterBuilder.java",
      "types": [
        "Container",
        "Vector",
        "Component"
      ],
      "apicalls": [
        "remove",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.remove(java.awt.Component)",
            "java.util.Vector.clear()"
          ]
        }
      ],
      "keywords": [
        "component",
        "vector",
        "awt",
        "clear",
        "remove",
        "util",
        "java",
        "container"
      ]
    },
    {
      "method": "add@36",
      "formalParam": [
        "short",
        "byte"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.HashMap<Tau_K,Tau_V>.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "byte",
      "file": "./java_projects/SimpleServer/src/simpleserver/nbt/Inventory.java",
      "body": "public byte add(short id,byte count){\n  return add(id,count,(short)0);\n}\n",
      "types": [
        "Object",
        "Boolean",
        "HashMap"
      ],
      "apicalls": [
        "containsKey",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.HashMap<Tau_K,Tau_V>.containsKey(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "map",
        "put",
        "util",
        "boolean",
        "object",
        "key",
        "java",
        "hash",
        "contains"
      ]
    },
    {
      "method": "read@834",
      "body": "public Buffer read(Buffer buf) throws Exception {\n  int j=0;\n  while (true) {\n    buf.reset();\n    io.getByte(buf.buffer,buf.index,s2ccipher_size);\n    buf.index+=s2ccipher_size;\n    if (s2ccipher != null) {\n      s2ccipher.update(buf.buffer,0,s2ccipher_size,buf.buffer,0);\n    }\n    j=((buf.buffer[0] << 24) & 0xff000000) | ((buf.buffer[1] << 16) & 0x00ff0000) | ((buf.buffer[2] << 8) & 0x0000ff00)| ((buf.buffer[3]) & 0x000000ff);\n    if (j < 5 || j > PACKET_MAX_SIZE) {\n      start_discard(buf,s2ccipher,s2cmac,j,PACKET_MAX_SIZE);\n    }\n    int need=j + 4 - s2ccipher_size;\n    if ((buf.index + need) > buf.buffer.length) {\n      byte[] foo=new byte[buf.index + need];\n      System.arraycopy(buf.buffer,0,foo,0,buf.index);\n      buf.buffer=foo;\n    }\n    if ((need % s2ccipher_size) != 0) {\n      String message=\"Bad packet length \" + need;\n      if (JSch.getLogger().isEnabled(Logger.FATAL)) {\n        JSch.getLogger().log(Logger.FATAL,message);\n      }\n      start_discard(buf,s2ccipher,s2cmac,j,PACKET_MAX_SIZE - s2ccipher_size);\n    }\n    if (need > 0) {\n      io.getByte(buf.buffer,buf.index,need);\n      buf.index+=(need);\n      if (s2ccipher != null) {\n        s2ccipher.update(buf.buffer,s2ccipher_size,need,buf.buffer,s2ccipher_size);\n      }\n    }\n    if (s2cmac != null) {\n      s2cmac.update(seqi);\n      s2cmac.update(buf.buffer,0,buf.index);\n      s2cmac.doFinal(s2cmac_result1,0);\n      io.getByte(s2cmac_result2,0,s2cmac_result2.length);\n      if (!java.util.Arrays.equals(s2cmac_result1,s2cmac_result2)) {\n        if (need > PACKET_MAX_SIZE) {\n          throw new IOException(\"MAC Error\");\n        }\n        start_discard(buf,s2ccipher,s2cmac,j,PACKET_MAX_SIZE - need);\n        continue;\n      }\n    }\n    seqi++;\n    if (inflater != null) {\n      int pad=buf.buffer[4];\n      uncompress_len[0]=buf.index - 5 - pad;\n      byte[] foo=inflater.uncompress(buf.buffer,5,uncompress_len);\n      if (foo != null) {\n        buf.buffer=foo;\n        buf.index=5 + uncompress_len[0];\n      }\n else {\n        System.err.println(\"fail in inflater\");\n        break;\n      }\n    }\n    int type=buf.getCommand() & 0xff;\n    if (type == SSH_MSG_DISCONNECT) {\n      buf.rewind();\n      buf.getInt();\n      buf.getShort();\n      int reason_code=buf.getInt();\n      byte[] description=buf.getString();\n      byte[] language_tag=buf.getString();\n      throw new JSchException(\"SSH_MSG_DISCONNECT: \" + reason_code + \" \"+ Util.byte2str(description)+ \" \"+ Util.byte2str(language_tag));\n    }\n else     if (type == SSH_MSG_IGNORE) {\n    }\n else     if (type == SSH_MSG_UNIMPLEMENTED) {\n      buf.rewind();\n      buf.getInt();\n      buf.getShort();\n      int reason_id=buf.getInt();\n      if (JSch.getLogger().isEnabled(Logger.INFO)) {\n        JSch.getLogger().log(Logger.INFO,\"Received SSH_MSG_UNIMPLEMENTED for \" + reason_id);\n      }\n    }\n else     if (type == SSH_MSG_DEBUG) {\n      buf.rewind();\n      buf.getInt();\n      buf.getShort();\n    }\n else     if (type == SSH_MSG_CHANNEL_WINDOW_ADJUST) {\n      buf.rewind();\n      buf.getInt();\n      buf.getShort();\n      Channel c=Channel.getChannel(buf.getInt(),this);\n      if (c == null) {\n      }\n else {\n        c.addRemoteWindowSize(buf.getInt());\n      }\n    }\n else     if (type == UserAuth.SSH_MSG_USERAUTH_SUCCESS) {\n      isAuthed=true;\n      if (inflater == null && deflater == null) {\n        String method;\n        method=guess[KeyExchange.PROPOSAL_COMP_ALGS_CTOS];\n        initDeflater(method);\n        method=guess[KeyExchange.PROPOSAL_COMP_ALGS_STOC];\n        initInflater(method);\n      }\n      break;\n    }\n else {\n      break;\n    }\n  }\n  buf.rewind();\n  return buf;\n}\n",
      "formalParam": [
        "Buffer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "$NOT$java.util.Arrays.equals(byte[],byte[])",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Buffer",
      "file": "./java_projects/MineBackup/src/com/jcraft/jsch/Session.java",
      "types": [
        "Arrays",
        "System",
        "Integer",
        "Object",
        "Byte",
        "String",
        "PrintStream",
        "Boolean"
      ],
      "apicalls": [
        "println",
        "arraycopy",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "$NOT$java.util.Arrays.equals(byte[],byte[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "arrays",
        "boolean",
        "integer",
        "java",
        "println",
        "string",
        "lang",
        "byte",
        "util",
        "equals",
        "arraycopy",
        "stream",
        "object",
        "system",
        "io"
      ]
    },
    {
      "method": "pipeInput@272",
      "body": "/** \n * Pipes the remaining input to the target output stream specified in <a href=\"#constructor_detail\">constructor</a>. Usable when <code>inputControl</code> is enabled but there's nothing else to  {@linkplain #expect() expect}.\n */\npublic void pipeInput(){\n  pipeInput(targetOutput);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.setDaemon(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/rmi/src/main/java/org/apache/harmony/rmi/common/SubProcess.java",
      "types": [
        "Thread",
        "Boolean"
      ],
      "apicalls": [
        "start",
        "setDaemon"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "daemon",
        "start",
        "thread",
        "lang",
        "set",
        "boolean",
        "java"
      ]
    },
    {
      "method": "reportBaiduImpression@407",
      "body": "public void reportBaiduImpression(){\n  String url=String.format(AdViewUtil.urlImpression,adViewManager.keyAdView,activeRation.nid,AdViewUtil.NETWORK_TYPE_BAIDU,0,\"hello\",AdViewUtil.VERSION,adViewManager.mSimulator,keyDev);\n  scheduler.schedule(new PingUrlRunnable(url),0,TimeUnit.SECONDS);\n  if (adViewInterface != null)   adViewInterface.onDisplayAd();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.ScheduledFuture"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AdviewSDK_Android/src/com/adview/AdViewLayout.java",
      "types": [
        "Long",
        "ScheduledExecutorService",
        "String",
        "Locale",
        "ScheduledFuture",
        "Object",
        "TimeUnit",
        "Runnable"
      ],
      "apicalls": [
        "format",
        "schedule"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "concurrent",
        "util",
        "unit",
        "schedule",
        "scheduled",
        "java",
        "locale",
        "runnable",
        "executor",
        "object",
        "future",
        "service",
        "format",
        "string",
        "time",
        "long"
      ]
    },
    {
      "method": "map@116",
      "body": "@Mapping(from=VDS.class,to=Host.class) public static Host map(VDS entity,Host template){\n  Host model=template != null ? template : new Host();\n  model.setId(entity.getId().toString());\n  model.setName(entity.getvds_name());\n  if (entity.getvds_group_id() != null) {\n    Cluster cluster=new Cluster();\n    cluster.setId(entity.getvds_group_id().toString());\n    model.setCluster(cluster);\n  }\n  model.setAddress(entity.gethost_name());\n  if (entity.getport() > 0) {\n    model.setPort(entity.getport());\n  }\n  HostStatus status=map(entity.getstatus(),null);\n  model.setStatus(StatusUtils.create(status));\n  if (status == HostStatus.NON_OPERATIONAL) {\n    model.getStatus().setDetail(entity.getNonOperationalReason().name().toLowerCase());\n  }\n  StorageManager sm=new StorageManager();\n  sm.setPriority(entity.getVdsSpmPriority());\n  sm.setValue(entity.getspm_status() == VdsSpmStatus.SPM);\n  model.setStorageManager(sm);\n  model.setKsm(new KSM());\n  model.getKsm().setEnabled(Boolean.TRUE.equals(entity.getksm_state()));\n  model.setTransparentHugepages(new TransparentHugePages());\n  model.getTransparentHugepages().setEnabled(!(entity.getTransparentHugePagesState() == null || entity.getTransparentHugePagesState() == VdsTransparentHugePagesState.Never));\n  if (entity.getIScsiInitiatorName() != null) {\n    model.setIscsi(new IscsiDetails());\n    model.getIscsi().setInitiator(entity.getIScsiInitiatorName());\n  }\n  model.setPowerManagement(map(entity,(PowerManagement)null));\n  CPU cpu=new CPU();\n  CpuTopology cpuTopology=new CpuTopology();\n  if (entity.getcpu_sockets() != null) {\n    cpuTopology.setSockets(entity.getcpu_sockets());\n    if (entity.getcpu_cores() != null) {\n      cpuTopology.setCores(entity.getcpu_cores() / entity.getcpu_sockets());\n    }\n  }\n  cpu.setTopology(cpuTopology);\n  cpu.setName(entity.getcpu_model());\n  if (entity.getcpu_speed_mh() != null) {\n    cpu.setSpeed(new BigDecimal(entity.getcpu_speed_mh()));\n  }\n  model.setCpu(cpu);\n  VmSummary vmSummary=new VmSummary();\n  vmSummary.setActive(entity.getvm_active());\n  vmSummary.setMigrating(entity.getvm_migrating());\n  vmSummary.setTotal(entity.getvm_count());\n  model.setSummary(vmSummary);\n  if (entity.getvds_type() != null) {\n    HostType type=map(entity.getvds_type(),null);\n    model.setType(type != null ? type.value() : null);\n  }\n  model.setMemory(Long.valueOf(entity.getphysical_mem_mb() == null ? 0 : entity.getphysical_mem_mb() * BYTES_IN_MEGABYTE));\n  model.setMaxSchedulingMemory((int)entity.getMaxSchedulingMemory() * BYTES_IN_MEGABYTE);\n  return model;\n}\n",
      "formalParam": [
        "VDS",
        "Host"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Boolean.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.math.BigDecimal.BigDecimal(char[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Long.valueOf(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "java.lang.Long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Host",
      "file": "./java_projects/ovirt-engine/backend/manager/modules/restapi/types/src/main/java/org/ovirt/engine/api/restapi/types/HostMapper.java",
      "types": [
        "String",
        "Boolean",
        "Character",
        "Long",
        "NumberFormatException",
        "Object",
        "BigDecimal"
      ],
      "apicalls": [
        "valueOf",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Boolean.equals(java.lang.Object)",
            "java.math.BigDecimal.BigDecimal(char[])",
            "java.lang.Long.valueOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "character",
        "object",
        "java",
        "boolean",
        "long",
        "math",
        "number",
        "lang",
        "exception",
        "decimal",
        "format",
        "string",
        "value",
        "equals",
        "big"
      ]
    },
    {
      "method": "entryFromLocalContact@21",
      "body": "public Entry entryFromLocalContact(Uri rawcontacturi){\n  StringReader sr=new StringReader(\"\");\n  BufferedReader br=new BufferedReader(sr);\n  LDIFReader ldifreader=new LDIFReader(br);\n  try {\n    Entry contactentry=ldifreader.readEntry();\n    return contactentry;\n  }\n catch (  LDIFException e) {\n    return null;\n  }\ncatch (  IOException e) {\n    return null;\n  }\n}\n",
      "formalParam": [
        "Uri"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Entry",
      "file": "./java_projects/AndroidLab/src/src/de/tubs/ibr/android/ldap/core/activities/LDAPContactMapper.java",
      "types": [
        "BufferedReader",
        "StringReader",
        "String",
        "Reader"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)"
          ]
        }
      ],
      "keywords": [
        "java",
        "reader",
        "io",
        "string",
        "buffered"
      ]
    },
    {
      "method": "getCompletionProposals@23",
      "body": "@Override public List<ICompletionProposal> getCompletionProposals(String prefix,List<String> tokens,int offset){\n  List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();\n  String token=getLastToken(prefix,tokens);\n  if (tokens.size() <= 1) {\n    if (!tokens.contains(IRailsShellConstants.SCRIPT_ABOUT)) {\n      proposals.add(createProposal(IRailsShellConstants.SCRIPT_ABOUT,\"About your Rails application's environment\",offset,token));\n    }\n  }\n  return proposals;\n}\n",
      "formalParam": [
        "String",
        "List<String>",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.String>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "$NOT$java.util.List<java.lang.String>.contains(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "List<ICompletionProposal>",
      "file": "./java_projects/radrails/plugins/org.radrails.rails.ui/src/org/radrails/rails/internal/ui/console/commands/ScriptAboutCommandProvider.java",
      "types": [
        "Boolean",
        "Integer",
        "ArrayList",
        "List",
        "String",
        "Object"
      ],
      "apicalls": [
        "size",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<java.lang.String>.size()",
            "$NOT$java.util.List<java.lang.String>.contains(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "list",
        "java",
        "string",
        "array",
        "object",
        "contains",
        "boolean",
        "util",
        "size"
      ]
    },
    {
      "method": "unregisterConnection@71",
      "body": "public boolean unregisterConnection(IMRTMPConnection conn){\n  boolean ret;\n  ArrayList<RTMPConnection> list=new ArrayList<RTMPConnection>();\n  lock.writeLock().lock();\n  try {\n    ret=connSet.remove(conn);\n    if (ret) {\n      for (Iterator<Entry<RTMPConnection,IMRTMPConnection>> iter=clientToConnMap.entrySet().iterator(); iter.hasNext(); ) {\n        Entry<RTMPConnection,IMRTMPConnection> entry=iter.next();\n        if (entry.getValue() == conn) {\n          list.add(entry.getKey());\n        }\n      }\n    }\n  }\n  finally {\n    lock.writeLock().unlock();\n  }\n  for (  RTMPConnection rtmpConn : list) {\n    log.debug(\"Close RTMPOriginConnection \" + rtmpConn.getId() + \" due to MRTMP Connection closed!\");\n    originMRTMPHandler.closeConnection((RTMPOriginConnection)rtmpConn);\n  }\n  return ret;\n}\n",
      "formalParam": [
        "IMRTMPConnection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "_throws": [],
            "_returns": "java.util.concurrent.locks.Lock",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "_throws": [],
            "_returns": "java.util.concurrent.locks.Lock",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/red5-mavenized/red5_base/src/main/java/org/red5/server/net/mrtmp/SimpleMRTMPOriginManager.java",
      "types": [
        "concurrent",
        "ArrayList"
      ],
      "apicalls": [
        "unlock",
        "lock",
        "writeLock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "locks",
        "util",
        "write",
        "unlock",
        "read",
        "java",
        "concurrent",
        "array",
        "lock",
        "list"
      ]
    },
    {
      "method": "getFileTypeId@302",
      "body": "public String getFileTypeId(){\n  Dataset ds=null;\n  NetcdfFile ncfile=null;\n  try {\n    ds=getTypicalDataset();\n    ncfile=ds.acquireFile(null);\n    return ncfile.getFileTypeId();\n  }\n catch (  Exception e) {\n    logger.error(\"failed to open \" + ds);\n  }\n finally {\n    if (ds != null)     try {\n      ds.close(ncfile);\n    }\n catch (    IOException e) {\n      logger.error(\"failed to close \" + ds);\n    }\n  }\n  return \"N/A\";\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Random.Random()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Random.nextInt(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.get(int)",
            "node": "DAPICall",
            "_returns": "Tau_E",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/thredds/cdm/src/main/java/ucar/nc2/ncml/Aggregation.java",
      "types": [
        "Integer",
        "Random",
        "List"
      ],
      "apicalls": [
        "nextInt",
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.Random.Random()",
            "java.util.Random.nextInt(int)",
            "java.util.List<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "random",
        "int",
        "next",
        "util",
        "integer",
        "list",
        "size"
      ]
    },
    {
      "method": "goBackToLineBegin@428",
      "body": "public void goBackToLineBegin(){\n  goBackToLineBegin(false);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ChessCraft/src/main/java/chesspresso/game/Game.java",
      "types": [
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "stream",
        "println",
        "java",
        "string",
        "io"
      ]
    },
    {
      "method": "testMatchesWithModelSourceReturningNull@77",
      "body": "public void testMatchesWithModelSourceReturningNull() throws Exception {\n  advisor=new FlushingModelSourceAdvisor(interceptor);\n  Method method=defaultMethod();\n  Class targetClass=method.getDeclaringClass();\n  modelSourceControl.expectAndReturn(modelSource.getFlushingModel(method,targetClass),null);\n  modelSourceControl.replay();\n  assertFalse(advisor.matches(method,targetClass));\n  modelSourceControl.verify();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "_returns": "java.lang.reflect.Method",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.reflect.Method.getDeclaringClass()",
            "_throws": [],
            "_returns": "java.lang.Class",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-modules/projects/spring-modules-cache/src/test/java/org/springmodules/cache/interceptor/flush/FlushingModelSourceAdvisorTests.java",
      "types": [
        "Method",
        "NoSuchMethodException",
        "Class",
        "String",
        "SecurityException"
      ],
      "apicalls": [
        "getDeclaringClass",
        "getDeclaredMethod"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.getDeclaringClass()"
          ]
        }
      ],
      "keywords": [
        "declared",
        "reflect",
        "class",
        "method",
        "string",
        "security",
        "get",
        "declaring",
        "exception",
        "java",
        "lang"
      ]
    },
    {
      "method": "accept@92",
      "formalParam": [
        "Path"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/fb-raid-refactoring/src/test/org/apache/hadoop/mapred/TestFileInputFormatPathFilter.java",
      "body": "public boolean accept(Path path){\n  String name=path.getName();\n  return name.equals(\"TestFileInputFormatPathFilter\") || name.length() == 1;\n}\n",
      "types": [
        "Integer",
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "equals",
        "java",
        "lang",
        "length",
        "integer",
        "object",
        "string",
        "boolean"
      ]
    },
    {
      "method": "error@49",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/liferay-portal/portal-service/src/com/liferay/portal/kernel/log/Jdk14LogImpl.java",
      "body": "public void error(Throwable t){\n  _log.log(Level.SEVERE,t.getMessage(),t);\n}\n",
      "types": [
        "Level",
        "Logger",
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getMessage",
        "log"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "log",
        "throwable",
        "logging",
        "lang",
        "logger",
        "message",
        "string",
        "get",
        "level",
        "util",
        "java"
      ]
    },
    {
      "method": "getInactiveImportsMap@2740",
      "body": "public Map<String,? extends IJstType> getInactiveImportsMap(){\n  Map<String,IJstType> map=new LinkedHashMap<String,IJstType>();\nsynchronized (this) {\n    for (    Map.Entry<String,IJstTypeReference> me : m_inactiveImports.entrySet()) {\n      map.put(me.getKey(),me.getValue().getReferencedType());\n    }\n  }\n  return Collections.unmodifiableMap(map);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collections.unmodifiableMap(java.util.Map)",
            "_throws": [],
            "_returns": "java.util.Map",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Map<String,? extends IJstType>",
      "file": "./java_projects/vjet/core/org.ebayopensource.vjet.core.jst/src/org/ebayopensource/dsf/jst/declaration/JstType.java",
      "types": [
        "Collections",
        "Map",
        "LinkedHashMap"
      ],
      "apicalls": [
        "unmodifiableMap"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()",
            "java.util.Collections.unmodifiableMap(java.util.Map)"
          ]
        }
      ],
      "keywords": [
        "linked",
        "util",
        "collections",
        "hash",
        "unmodifiable",
        "map",
        "java"
      ]
    },
    {
      "method": "query@215",
      "body": "public ArrayList<Complaint> query(ContentProviderClient provider,int FROM){\n  ArrayList<Complaint> reports=new ArrayList<Complaint>();\n  try {\n    Cursor c=provider.query(PlateContentProvider.URI_REPORT,null,Fields.ID_KEY + \" > \" + FROM+ \"\",null,null);\n    if (c.moveToFirst()) {\n      do {\n        float rank=c.getFloat(c.getColumnIndex(Fields.RANKING));\n        String plate=\"\" + (c.getString(c.getColumnIndex(Fields.CAR_PLATE)));\n        String desc=\"\" + (c.getString(c.getColumnIndex(Fields.DESCRIPTION)));\n        String date=\"\" + (c.getString(c.getColumnIndex(Fields.DATE_REPORT)));\n        Log.d(TAG,\"plate=\" + plate);\n        reports.add(new Complaint(rank,plate,desc,USER,date));\n      }\n while (c.moveToNext());\n    }\n    c.close();\n  }\n catch (  Exception e) {\n    Log.e(TAG,\"query= \" + e.getMessage());\n  }\n  return reports;\n}\n",
      "formalParam": [
        "ContentProviderClient",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "ArrayList<Complaint>",
      "file": "./java_projects/TaxiCop/src/com/taxicop/sync/SyncAdapter.java",
      "types": [
        "Throwable",
        "String",
        "ArrayList"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "message",
        "list",
        "throwable",
        "util",
        "string",
        "lang",
        "array",
        "java",
        "get"
      ]
    },
    {
      "method": "paint@63",
      "body": "@Override public void paint(Graphics2D graphics){\n  graphics.translate(-bounds.x,-bounds.y);\n  graphics.clipRect(bounds.x,bounds.y,bounds.width,bounds.height);\n  tableView.paint(graphics);\n}\n",
      "formalParam": [
        "Graphics2D"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Graphics2D.translate(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Graphics.clipRect(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pivot/wtk/src/org/apache/pivot/wtk/content/TableViewRowEditor.java",
      "types": [
        "Graphics2D",
        "Graphics",
        "Integer"
      ],
      "apicalls": [
        "clipRect",
        "translate"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Graphics2D.translate(int,int)",
            "java.awt.Graphics.clipRect(int,int,int,int)"
          ]
        }
      ],
      "keywords": [
        "translate",
        "graphics2",
        "graphics",
        "integer",
        "awt",
        "rect",
        "clip",
        "java",
        "d"
      ]
    },
    {
      "method": "dragEnter@129",
      "body": "public void dragEnter(DropTargetDragEvent evt){\n  if (isDragOk(evt)) {\n    setDragBorder();\n    evt.acceptDrag(DnDConstants.ACTION_COPY);\n  }\n else {\n    evt.rejectDrag();\n  }\n}\n",
      "formalParam": [
        "DropTargetDragEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.datatransfer.DataFlavor.equals(java.awt.datatransfer.DataFlavor)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.awt.datatransfer.DataFlavor.isRepresentationClassReader()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.getBorder()",
                "node": "DAPICall",
                "_returns": "javax.swing.border.Border",
                "_throws": []
              },
              {
                "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/s3dropbox/src/com/tomczarniecki/s3/gui/FileDrop.java",
      "types": [
        "DataFlavor",
        "Boolean",
        "JComponent",
        "Border"
      ],
      "apicalls": [
        "getBorder",
        "setBorder",
        "isRepresentationClassReader",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.datatransfer.DataFlavor.equals(java.awt.datatransfer.DataFlavor)",
            "java.awt.datatransfer.DataFlavor.isRepresentationClassReader()",
            "javax.swing.JComponent.getBorder()",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        },
        {
          "calls": [
            "java.awt.datatransfer.DataFlavor.equals(java.awt.datatransfer.DataFlavor)",
            "java.awt.datatransfer.DataFlavor.isRepresentationClassReader()"
          ]
        }
      ],
      "keywords": [
        "data",
        "flavor",
        "java",
        "border",
        "swing",
        "class",
        "component",
        "equals",
        "representation",
        "set",
        "awt",
        "reader",
        "datatransfer",
        "boolean",
        "get",
        "javax",
        "j"
      ]
    },
    {
      "method": "CTrayIcon@56",
      "body": "CTrayIcon(TrayIcon target){\n  super(0,true);\n  this.messageDialog=null;\n  this.handler=null;\n  this.target=target;\n  this.popup=target.getPopupMenu();\n  this.dummyFrame=new Frame();\n  setPtr(createModel());\n  checkAndCreatePopupPeer();\n  updateImage();\n}\n",
      "formalParam": [
        "TrayIcon"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Frame.Frame()",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Image.getHeight(java.awt.image.ImageObserver)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jdk7u-jdk/src/macosx/classes/sun/lwawt/macosx/CTrayIcon.java",
      "types": [
        "Image",
        "ImageObserver",
        "Frame",
        "HeadlessException",
        "Integer"
      ],
      "apicalls": [
        "getHeight",
        "getWidth"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Frame.Frame()",
            "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "java.awt.Image.getHeight(java.awt.image.ImageObserver)"
          ]
        }
      ],
      "keywords": [
        "height",
        "exception",
        "headless",
        "integer",
        "image",
        "frame",
        "awt",
        "observer",
        "java",
        "width",
        "get"
      ]
    },
    {
      "method": "run@156",
      "formalParam": [
        "ToolRunner"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Dialog.setVisible(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/soapui/src/java/com/eviware/soapui/impl/wsdl/actions/iface/tools/support/ProcessDialog.java",
      "body": "public void run(ToolRunner toolRunner){\n  if (!SoapUI.getLogMonitor().hasLogArea(\"toolLogger\"))   SoapUI.getLogMonitor().addLogArea(\"tools\",\"toolLogger\",false);\n  this.runner=toolRunner;\n  runner.setContext(this);\n  Thread thread=new Thread(runner,toolRunner.getName());\n  thread.start();\n  UISupport.centerDialog(this);\n  setVisible(true);\n}\n",
      "types": [
        "Dialog",
        "Boolean",
        "ThreadGroup",
        "Thread",
        "Runnable"
      ],
      "apicalls": [
        "setVisible",
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.awt.Dialog.setVisible(boolean)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "runnable",
        "thread",
        "java",
        "awt",
        "group",
        "boolean",
        "start",
        "visible",
        "dialog",
        "set"
      ]
    },
    {
      "method": "getLogicalBounds@240",
      "body": "public Rectangle2D getLogicalBounds(){\n  float ascent, descent;\n  validate();\n  return new Rectangle2D.Float(0,0,pos[pos.length - 2],getAscent() - getDescent());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.round(float)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "Rectangle2D",
      "file": "./java_projects/classpath/gnu/java/awt/font/GNUGlyphVector.java",
      "types": [
        "Integer",
        "Math",
        "Float",
        "AffineTransform"
      ],
      "apicalls": [
        "concatenate",
        "round"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)",
            "java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform)",
            "java.lang.Math.round(float)"
          ]
        }
      ],
      "keywords": [
        "java",
        "integer",
        "concatenate",
        "lang",
        "math",
        "awt",
        "transform",
        "float",
        "geom",
        "affine",
        "round"
      ]
    },
    {
      "method": "installResponseCache@55",
      "body": "/** \n * Sets this cache as default response cache\n * @param baseURL the URL, the caching should be restricted to or <code>null</code> for none\n * @param cacheDir the cache directory\n * @param checkForUpdates true if the URL is queried for newer versions of a file first\n */\npublic static void installResponseCache(String baseURL,File cacheDir,boolean checkForUpdates){\n  ResponseCache.setDefault(new LocalResponseCache(baseURL,cacheDir,checkForUpdates));\n}\n",
      "formalParam": [
        "String",
        "File",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.exists()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.mkdirs()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jxmapviewer2/jxmapviewer2/src/org/jdesktop/swingx/mapviewer/LocalResponseCache.java",
      "types": [
        "Boolean",
        "File"
      ],
      "apicalls": [
        "exists",
        "mkdirs"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "java.io.File.mkdirs()"
          ]
        },
        {
          "calls": [
            "$NOT$java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "exists",
        "java",
        "mkdirs",
        "io",
        "file",
        "boolean"
      ]
    },
    {
      "method": "testReadWriteProperties@48",
      "body": "@Test public void testReadWriteProperties(){\n  assertEquals(\"employee\",employeeCodex.describe().getName());\n  Employee e1=makeEmployee();\n  StringWriter out=new StringWriter();\n  SerializationContext ctx=serializationContext(out);\n  try {\n    employeeCodex.writeProperties(e1,ctx);\n  }\n  finally {\n    closeContext();\n  }\n  JsonObject obj=new JsonParser().parse(out.toString()).getAsJsonObject();\n  assertFalse(obj.has(\"address\"));\n  assertTrue(obj.has(\"street\"));\n  Employee e2;\n  DeserializationContext d=deserializationContext();\n  try {\n    e2=employeeCodex.allocate(obj,d);\n    employeeCodex.readProperties(e2,obj,d);\n    assertSame(e2,employeeCodex.read(new JsonPrimitive(e2.getUuid().toString()),d));\n  }\n  finally {\n    d.runPostWork();\n    closeContext();\n  }\n  assertTrue(e2.employeePostUnpack);\n  assertTrue(e2.employeePreUnpack);\n  assertTrue(e2.employeePre1Unpack);\n  check(e1,e2);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/flatpack-java/core/src/test/java/com/getperka/flatpack/codex/EntityCodexTest.java",
      "types": [
        "String",
        "StringWriter"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "io",
        "writer"
      ]
    },
    {
      "method": "testEmpty@19",
      "body": "@Test public void testEmpty(){\n  test(new byte[0]);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Huffman-Coding/test/nayuki/huffmancoding/AdaptiveHuffmanTest.java",
      "types": [
        "ByteArrayOutputStream",
        "ByteArrayInputStream",
        "Byte"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "io",
        "byte",
        "array",
        "java",
        "input",
        "output",
        "stream"
      ]
    },
    {
      "method": "Schema@121",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic Schema(Schema other){\n  if (other.isSetFieldSchemas()) {\n    List<FieldSchema> __this__fieldSchemas=new ArrayList<FieldSchema>();\n    for (    FieldSchema other_element : other.fieldSchemas) {\n      __this__fieldSchemas.add(new FieldSchema(other_element));\n    }\n    this.fieldSchemas=__this__fieldSchemas;\n  }\n  if (other.isSetProperties()) {\n    Map<String,String> __this__properties=new HashMap<String,String>();\n    for (    Map.Entry<String,String> other_element : other.properties.entrySet()) {\n      String other_element_key=other_element.getKey();\n      String other_element_value=other_element.getValue();\n      String __this__properties_copy_key=other_element_key;\n      String __this__properties_copy_value=other_element_value;\n      __this__properties.put(__this__properties_copy_key,__this__properties_copy_value);\n    }\n    this.properties=__this__properties;\n  }\n}\n",
      "formalParam": [
        "Schema"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/platform/dependencies/hive/0.8.1-wso2v2/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java",
      "types": [
        "Set",
        "Map",
        "ArrayList",
        "HashMap",
        "String"
      ],
      "apicalls": [
        "entrySet",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "set",
        "entry",
        "map",
        "util",
        "put",
        "list",
        "array",
        "string",
        "java",
        "hash"
      ]
    },
    {
      "method": "removeIdentity@122",
      "body": "/** \n * @see java.security.IdentityScope#removeIdentity(java.security.Identity)\n */\npublic synchronized void removeIdentity(Identity identity) throws KeyManagementException {\n  if (identity == null) {\n    throw new NullPointerException(\"identity == null\");\n  }\n  String name=identity.getName();\n  if (name == null) {\n    throw new NullPointerException(\"name == null\");\n  }\n  boolean contains=names.containsKey(name);\n  names.remove(name);\n  PublicKey key=identity.getPublicKey();\n  if (key != null) {\n    contains=contains || keys.containsKey(key);\n    keys.remove(key);\n  }\n  if (!contains) {\n    throw new KeyManagementException(\"identity not found\");\n  }\n}\n",
      "formalParam": [
        "Identity"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/main/java/org/apache/harmony/security/SystemScope.java",
      "types": [
        "Object",
        "Boolean",
        "Hashtable"
      ],
      "apicalls": [
        "remove",
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)",
            "java.util.Hashtable.remove(java.lang.Object)",
            "java.util.Hashtable.containsKey(java.lang.Object)",
            "java.util.Hashtable.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "java",
        "contains",
        "object",
        "key",
        "hashtable",
        "remove"
      ]
    },
    {
      "method": "verifyTable@51",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.sql.ResultSet.getString(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": [
                  "java.sql.SQLException"
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.sql.ResultSet.next()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": [
                  "java.sql.SQLException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/chukwa/src/test/java/org/apache/hadoop/chukwa/database/TestDatabaseAggregator.java",
      "body": "public void verifyTable(String table){\n  ChukwaConfiguration cc=new ChukwaConfiguration();\n  String query=\"select * from [\" + table + \"];\";\n  Macro mp=new Macro(dbSetup.current,query);\n  query=mp.toString();\n  try {\n    DatabaseWriter db=new DatabaseWriter(dbSetup.cluster);\n    ResultSet rs=db.query(query);\n    while (rs.next()) {\n      int i=1;\n      String value=rs.getString(i);\n    }\n    db.close();\n  }\n catch (  SQLException ex) {\n    fail(\"SQL Exception: \" + ExceptionUtil.getStackTrace(ex));\n  }\n}\n",
      "types": [
        "String",
        "Boolean",
        "SQLException",
        "ResultSet",
        "Integer"
      ],
      "apicalls": [
        "next",
        "getString"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString(int)",
            "java.sql.ResultSet.next()"
          ]
        }
      ],
      "keywords": [
        "result",
        "java",
        "sql",
        "get",
        "string",
        "exception",
        "set",
        "next",
        "integer",
        "boolean"
      ]
    },
    {
      "method": "FileSystemBookStoreDao@20",
      "body": "/** \n * Vytvori novou instanci. Knihy budou ukladany/cteny z adresare uvedeneho v konstruktoru. Pokud cilovy adresar neexistuje, bude vytvoren.\n * @param rootPath cesta, ktera se pouzije pro ukladani cteni\n */\npublic FileSystemBookStoreDao(File rootPath){\n  Assert.notNull(rootPath);\n  if (!rootPath.exists()) {\n    boolean dirCreated=rootPath.mkdir();\n    if (!dirCreated) {\n      throw new IllegalArgumentException(\"Cannot create directory on path \" + rootPath.getPath());\n    }\n  }\n  this.rootPath=rootPath;\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.io.File.mkdir()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/spring-training/sandboxioc/src/main/java/cz/sweb/pichlik/FileSystemBookStoreDao.java",
      "types": [
        "File",
        "Boolean"
      ],
      "apicalls": [
        "exists",
        "mkdir"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "java.io.File.mkdir()"
          ]
        },
        {
          "calls": [
            "$NOT$java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "file",
        "mkdir",
        "boolean",
        "io",
        "java",
        "exists"
      ]
    },
    {
      "method": "removeUpdate@263",
      "formalParam": [
        "DocumentEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/classpath/javax/swing/text/JTextComponent.java",
      "body": "/** \n * Handle a text removal event and fire an AccessibleContext.ACCESSIBLE_TEXT_PROPERTY property change event.\n * @param e - the removal event\n */\npublic void removeUpdate(DocumentEvent e){\n  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,new Integer(e.getOffset()));\n}\n",
      "types": [
        "AccessibleContext",
        "String",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "firePropertyChange"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "object",
        "property",
        "string",
        "accessible",
        "change",
        "accessibility",
        "fire",
        "lang",
        "integer",
        "context",
        "javax"
      ]
    },
    {
      "method": "setUp@38",
      "body": "@Before public void setUp() throws DependencyResolutionRequiredException {\n  outputDir=new File(\"target/generated-sources/java\");\n  Log log=EasyMock.createMock(Log.class);\n  BuildContext buildContext=new DefaultBuildContext();\n  project=EasyMock.createMock(MavenProject.class);\n  List sourceRoots=Lists.newArrayList(\"src/test/resources/project-to-test/src/main/java\");\n  URLClassLoader loader=(URLClassLoader)Thread.currentThread().getContextClassLoader();\n  List classpath=ClassPathUtils.getClassPath(loader);\n  EasyMock.expect(project.getCompileSourceRoots()).andReturn(sourceRoots);\n  EasyMock.expect(project.getCompileSourceRoots()).andReturn(sourceRoots);\n  EasyMock.expect(project.getCompileClasspathElements()).andReturn(classpath);\n  project.addCompileSourceRoot(outputDir.getAbsolutePath());\n  EasyMock.expectLastCall();\n  EasyMock.replay(project);\n  mojo=new AnnotationProcessorMojo();\n  mojo.setBuildContext(buildContext);\n  mojo.setCompilerOptions(Maps.<String,String>newHashMap());\n  mojo.setIncludes(Sets.<String>newHashSet());\n  mojo.setLog(log);\n  mojo.setLogOnlyOnError(false);\n  mojo.setOptions(Maps.<String,String>newHashMap());\n  mojo.setProcessor(QuerydslAnnotationProcessor.class.getName());\n  mojo.setProject(project);\n  mojo.setSourceEncoding(\"UTF-8\");\n  mojo.setOutputDirectory(outputDir);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/maven-apt-plugin/src/test/java/com/mysemna/maven/apt/AnnotationProcessorMojoTest.java",
      "types": [
        "File",
        "Class",
        "String"
      ],
      "apicalls": [
        "getName",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "class",
        "java",
        "file",
        "string",
        "path",
        "absolute",
        "get",
        "io",
        "name",
        "lang"
      ]
    },
    {
      "method": "main@57",
      "body": "public static void main(String... args) throws Exception {\n  new TestCP().run();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ceylon-compiler/langtools/test/tools/javac/meth/TestCP.java",
      "types": [
        "Boolean",
        "String",
        "Object",
        "PrintStream",
        "Throwable",
        "File",
        "System"
      ],
      "apicalls": [
        "equals",
        "printStackTrace",
        "getProperty",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "println",
        "get",
        "property",
        "system",
        "java",
        "print",
        "trace",
        "stack",
        "lang",
        "file",
        "io",
        "stream",
        "string",
        "throwable",
        "equals"
      ]
    },
    {
      "method": "testServlet@31",
      "body": "@Test public void testServlet() throws Exception {\n  checkReply(\"/CustomServlet\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.contains(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geronimo/testsuite/aries-testsuite/osgi-service-custom/custom-eba/src/test/java/org/apache/geronimo/testsuite/aries/custom/test/CustomOSGIServiceTest.java",
      "types": [
        "System",
        "URL",
        "MalformedURLException",
        "CharSequence",
        "Boolean",
        "String",
        "Long",
        "InterruptedException",
        "Thread"
      ],
      "apicalls": [
        "getProperty",
        "sleep",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.net.URL.URL(java.lang.String)",
            "java.lang.Thread.sleep(long)",
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "thread",
        "sequence",
        "get",
        "contains",
        "system",
        "exception",
        "sleep",
        "property",
        "interrupted",
        "net",
        "long",
        "malformed",
        "lang",
        "boolean",
        "string",
        "char",
        "url",
        "java"
      ]
    },
    {
      "method": "escapeVarTokens@102",
      "body": "public static String escapeVarTokens(String toEscape,OsFamily family){\n  Map<String,String> inputToEscape=Maps.newHashMap();\n  for (  ShellToken token : ImmutableList.of(ShellToken.VARL,ShellToken.VARR)) {\n    if (!token.to(family).equals(\"\")) {\n      String tokenS=\"{\" + token.toString().toLowerCase() + \"}\";\n      inputToEscape.put(tokenS,\"{escvar}\" + tokenS);\n    }\n  }\n  for (  Entry<String,String> entry : inputToEscape.entrySet()) {\n    toEscape=toEscape.replace(entry.getKey(),entry.getValue());\n  }\n  return toEscape;\n}\n",
      "formalParam": [
        "String",
        "OsFamily"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jclouds/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/domain/AppendFile.java",
      "types": [
        "CharSequence",
        "Set",
        "Map",
        "String"
      ],
      "apicalls": [
        "entrySet",
        "put",
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "util",
        "put",
        "map",
        "replace",
        "lang",
        "char",
        "entry",
        "string",
        "java",
        "sequence",
        "set"
      ]
    },
    {
      "method": "testSetEncoding_FlushBeforeSetting@796",
      "body": "public void testSetEncoding_FlushBeforeSetting() throws Exception {\n  ByteArrayOutputStream aos=new ByteArrayOutputStream();\n  StreamHandler h=new StreamHandler(aos,new MockFormatter());\n  LogRecord r=new LogRecord(Level.INFO,\"abcd\");\n  h.publish(r);\n  assertFalse(aos.toString().indexOf(\"abcd\") > 0);\n  h.setEncoding(\"iso-8859-1\");\n  assertTrue(aos.toString().indexOf(\"abcd\") > 0);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/StreamHandlerTest.java",
      "types": [
        "Integer",
        "ByteArrayOutputStream",
        "String"
      ],
      "apicalls": [
        "indexOf",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toString()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.io.ByteArrayOutputStream.toString()",
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "io",
        "lang",
        "index",
        "array",
        "java",
        "output",
        "integer",
        "byte",
        "string"
      ]
    },
    {
      "method": "mouseClicked@163",
      "body": "/** \n * Implements method for the <tt>MouseListener</tt> interface to draw the selected shape into the drawing canvas.\n * @param evt The associated mouse event.\n */\npublic void mouseClicked(MouseEvent evt){\n  if (m_selected == null) {\n    return;\n  }\n  if (m_panel.contains(evt.getX(),evt.getY())) {\n    ShapeComponent sc=new ShapeComponent(this,m_selected);\n    sc.setBounds(evt.getX() - BOX / 2,evt.getY() - BOX / 2,BOX,BOX);\n    m_panel.add(sc,0);\n    m_panel.validate();\n    m_panel.repaint(sc.getBounds());\n  }\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.event.MouseEvent.getX()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.awt.event.MouseEvent.getY()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "javax.swing.JComponent.contains(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.awt.event.MouseEvent.getX()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.awt.event.MouseEvent.getY()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.awt.Container.add(java.awt.Component,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Component"
              },
              {
                "_call": "java.awt.Container.validate()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.JComponent.repaint(java.awt.Rectangle)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/felix/examples/extenderbased.host/src/main/java/org/apache/felix/example/extenderbased/host/DrawingFrame.java",
      "types": [
        "Rectangle",
        "MouseEvent",
        "Container",
        "Component",
        "Boolean",
        "JComponent",
        "Integer"
      ],
      "apicalls": [
        "getX",
        "contains",
        "validate",
        "repaint",
        "add",
        "getY"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "javax.swing.JComponent.contains(int,int)",
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "java.awt.Container.add(java.awt.Component,int)",
            "java.awt.Container.validate()",
            "javax.swing.JComponent.repaint(java.awt.Rectangle)"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "javax.swing.JComponent.contains(int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "y",
        "repaint",
        "get",
        "container",
        "component",
        "contains",
        "j",
        "boolean",
        "mouse",
        "add",
        "awt",
        "swing",
        "java",
        "event",
        "x",
        "javax",
        "rectangle",
        "validate"
      ]
    },
    {
      "method": "setenv@34",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jOVAL/src/org/joval/util/Environment.java",
      "body": "/** \n * Set a variable using a string of the form \"variable=value\". If no value is specified, the variable will be unset.\n */\npublic void setenv(String pair){\n  int ptr=pair.indexOf(\"=\");\n  if (ptr == -1) {\n    throw new IllegalArgumentException(pair);\n  }\n else {\n    setenv(pair.substring(0,ptr),pair.substring(ptr + 1));\n  }\n}\n",
      "types": [
        "Boolean",
        "Integer",
        "String",
        "Object"
      ],
      "apicalls": [
        "substring",
        "indexOf",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.substring(int)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "object",
        "substring",
        "java",
        "lang",
        "boolean",
        "index",
        "integer",
        "equals"
      ]
    },
    {
      "method": "doGzip@519",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Long.toString(long)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/qedserver/jetty/modules/util/src/main/java/org/mortbay/servlet/GzipFilter.java",
      "body": "public void doGzip() throws IOException {\n  if (_gzOut == null) {\n    if (_response.isCommitted())     throw new IllegalStateException();\n    if (setContentEncodingGzip()) {\n      _out=_gzOut=new GZIPOutputStream(_response.getOutputStream(),_bufferSize);\n      if (_bOut != null) {\n        _out.write(_bOut.getBuf(),0,_bOut.getCount());\n        _bOut=null;\n      }\n    }\n else     doNotGzip();\n  }\n}\n",
      "types": [
        "Byte",
        "OutputStream",
        "IOException",
        "Integer",
        "Long",
        "String"
      ],
      "apicalls": [
        "write",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.Long.toString(long)",
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "byte",
        "exception",
        "string",
        "integer",
        "write",
        "java",
        "long",
        "io",
        "lang",
        "stream",
        "output"
      ]
    },
    {
      "method": "getUrl@57",
      "body": "public String getUrl(){\n  StringBuilder buf=new StringBuilder(contextPath);\n  for (int i=0; i < index; i++) {\n    buf.append('/');\n    buf.append(tokens[i]);\n  }\n  return buf.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/stapler/core/src/main/java/org/kohsuke/stapler/AncestorImpl.java",
      "types": [
        "Character",
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "character",
        "append",
        "lang",
        "builder"
      ]
    },
    {
      "method": "removeSelectionInterval@114",
      "body": "/** \n * {@inheritDoc}\n */\npublic void removeSelectionInterval(Date startDate,Date endDate){\n  Contract.asNotNull(startDate,\"date must not be null\");\n  if (isSelectionEmpty())   return;\n  if (isSelectionInInterval(startDate,endDate)) {\n    selectedDates.clear();\n    fireValueChanged(EventType.DATES_REMOVED);\n  }\n}\n",
      "formalParam": [
        "Date",
        "Date"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<java.util.Date>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Date.before(java.util.Date)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Date.after(java.util.Date)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Set<java.util.Date>.clear()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/kolmafia/lib/org/jdesktop/swingx/calendar/SingleDaySelectionModel.java",
      "types": [
        "Date",
        "Set",
        "Boolean"
      ],
      "apicalls": [
        "before",
        "after",
        "isEmpty",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.util.Date>.isEmpty()",
            "java.util.Date.before(java.util.Date)",
            "java.util.Date.after(java.util.Date)",
            "java.util.Set<java.util.Date>.clear()"
          ]
        },
        {
          "calls": [
            "java.util.Set<java.util.Date>.isEmpty()",
            "java.util.Date.before(java.util.Date)",
            "java.util.Date.after(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "date",
        "set",
        "util",
        "clear",
        "java",
        "empty"
      ]
    },
    {
      "method": "onCreate@149",
      "body": "/** \n * Called when the activity is first created. \n */\n@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.main);\n  latG=(TextView)findViewById(R.id.latitude);\n  lonG=(TextView)findViewById(R.id.longitude);\n  altG=(TextView)findViewById(R.id.altitude);\n  accuracyG=(TextView)findViewById(R.id.accuracy);\n  statusG=(TextView)findViewById(R.id.status);\n  ageG=(TextView)findViewById(R.id.age);\n  speedG=(TextView)findViewById(R.id.speed);\n  providerG=(TextView)findViewById(R.id.provider);\n  latN=(TextView)findViewById(R.id.latitudeN);\n  lonN=(TextView)findViewById(R.id.longitudeN);\n  altN=(TextView)findViewById(R.id.altitudeN);\n  accuracyN=(TextView)findViewById(R.id.accuracyN);\n  statusN=(TextView)findViewById(R.id.statusN);\n  ageN=(TextView)findViewById(R.id.ageN);\n  speedN=(TextView)findViewById(R.id.speedN);\n  providerN=(TextView)findViewById(R.id.providerN);\n  distance=(TextView)findViewById(R.id.distance);\n  clock=new Timer((TextView)findViewById(R.id.clock));\n  new Thread(clock).start();\n  LocationManager lm=(LocationManager)this.getSystemService(Context.LOCATION_SERVICE);\n  model=new PhoneLocationModel(lm);\n}\n",
      "formalParam": [
        "Bundle"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/PhoneLocation/src/org/jimhopp/android/PhoneLocationActivity.java",
      "types": [
        "Thread",
        "Runnable"
      ],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "java",
        "thread",
        "runnable",
        "start",
        "lang"
      ]
    },
    {
      "method": "getChanges@153",
      "formalParam": [
        "Project",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.getParentFile()",
            "node": "DAPICall",
            "_returns": "java.io.File",
            "_throws": []
          }
        ]
      },
      "returnType": "List<ScmChange>",
      "file": "./java_projects/agile/agile-apps/agile-app-files/src/main/java/org/headsupdev/agile/app/files/BrowseApplication.java",
      "body": "public static List<ScmChange> getChanges(Project project,String path){\n  Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();\n  String prefix=\"\";\n  java.io.File searchDir=Manager.getStorageInstance().getWorkingDirectory(project);\n  while (project.getParent() != null) {\n    prefix=searchDir.getName() + java.io.File.separatorChar + prefix;\n    project=project.getParent();\n    searchDir=searchDir.getParentFile();\n  }\n  Query q=session.createQuery(\"from ScmChange c where c.set.id.project = :project and name = :path order by c.set.date desc\");\n  q.setEntity(\"project\",project);\n  q.setString(\"path\",prefix + path);\n  return q.list();\n}\n",
      "types": [
        "File",
        "String"
      ],
      "apicalls": [
        "getName",
        "getParentFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getName()",
            "java.io.File.getParentFile()"
          ]
        }
      ],
      "keywords": [
        "file",
        "io",
        "java",
        "name",
        "string",
        "get",
        "parent"
      ]
    },
    {
      "method": "setValue@1735",
      "body": "/** \n * @see org.openquark.gems.client.navigator.NavEditorComponent#setValue(java.lang.Object)\n */\n@Override public void setValue(String value){\n  initialValue=value;\n  if (initialValue == null) {\n    descriptionField.setText(\"\");\n  }\n else {\n    descriptionField.setText(initialValue);\n  }\n  setType(typeString);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          },
          {
            "_call": "javax.swing.JLabel.setText(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Open-Quark/src/Quark_Gems/src/org/openquark/gems/client/navigator/NavEditorComponent.java",
      "types": [
        "JTextComponent",
        "JLabel",
        "String"
      ],
      "apicalls": [
        "setText"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.JLabel.setText(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "text",
        "string",
        "component",
        "set",
        "j",
        "label",
        "javax",
        "swing"
      ]
    },
    {
      "method": "addToExpungedLinkedNotebooks@892",
      "body": "public void addToExpungedLinkedNotebooks(String elem){\n  if (this.expungedLinkedNotebooks == null) {\n    this.expungedLinkedNotebooks=new ArrayList<String>();\n  }\n  this.expungedLinkedNotebooks.add(elem);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/evernote-sdk-android/src/com/evernote/edam/notestore/SyncChunk.java",
      "types": [
        "List",
        "String",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "string",
        "list",
        "array",
        "java",
        "add"
      ]
    },
    {
      "method": "TableMeta@42",
      "body": "TableMeta(Node tableNode){\n  NamedNodeMap attribs=tableNode.getAttributes();\n  name=attribs.getNamedItem(\"name\").getNodeValue();\n  Node commentNode=attribs.getNamedItem(\"comments\");\n  if (commentNode != null) {\n    String tmp=commentNode.getNodeValue().trim();\n    comments=tmp.length() == 0 ? null : tmp;\n  }\n else {\n    comments=null;\n  }\n  Node remoteSchemaNode=attribs.getNamedItem(\"remoteSchema\");\n  if (remoteSchemaNode != null) {\n    remoteSchema=remoteSchemaNode.getNodeValue().trim();\n  }\n else {\n    remoteSchema=null;\n  }\n  logger.fine(\"Found XML table metadata for \" + name + \" remoteSchema: \"+ remoteSchema+ \" comments: \"+ comments);\n  NodeList columnNodes=((Element)tableNode.getChildNodes()).getElementsByTagName(\"column\");\n  for (int i=0; i < columnNodes.getLength(); ++i) {\n    Node colNode=columnNodes.item(i);\n    columns.add(new TableColumnMeta(colNode));\n  }\n}\n",
      "formalParam": [
        "Node"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.logging.Logger.fine(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/maven-schemaspy-plugin/src/main/java/net/sourceforge/schemaspy/model/xml/TableMeta.java",
      "types": [
        "Logger",
        "Integer",
        "String"
      ],
      "apicalls": [
        "fine",
        "length",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.String.trim()",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "integer",
        "lang",
        "trim",
        "logging",
        "logger",
        "length",
        "util",
        "fine"
      ]
    },
    {
      "method": "main@114",
      "body": "public static void main(String[] args){\n  EmptyRightRecursion erre=new EmptyRightRecursion();\n  IConstructor result=erre.executeParser();\n  System.out.println(result);\n  System.out.println(\"S(A(a),[B(cycle(B,1)),B()])\");\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/rascal/src/org/rascalmpl/test/parser/EmptyRightRecursion.java",
      "types": [
        "Character",
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "character",
        "string",
        "io",
        "stream",
        "print",
        "java"
      ]
    },
    {
      "method": "loadImage@91",
      "body": "/** \n * Helper method to load an image file from the CLASSPATH\n * @param imageName the package and name of the file to load relative to the CLASSPATH\n * @return an ImageIcon instance with the specified image file\n * @throws IllegalArgumentException if the image resource cannot be loaded.\n */\npublic ImageIcon loadImage(String imageName){\n  try {\n    ClassLoader classloader=getClass().getClassLoader();\n    java.net.URL url=classloader.getResource(imageName);\n    if (url != null) {\n      ImageIcon icon=new ImageIcon(url);\n      return icon;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  throw new IllegalArgumentException(\"Unable to load image: \" + imageName);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getClassLoader()",
                "node": "DAPICall",
                "_returns": "java.lang.ClassLoader",
                "_throws": []
              },
              {
                "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.net.URL",
                "_throws": []
              },
              {
                "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "ImageIcon",
      "file": "./java_projects/maple-ide/build/windows/launcher/launch4j/src/net/sf/launch4j/form/VersionInfoForm.java",
      "types": [
        "ImageIcon",
        "URL",
        "Class",
        "Throwable",
        "ClassLoader",
        "String"
      ],
      "apicalls": [
        "getClassLoader",
        "getResource",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "class",
        "lang",
        "java",
        "print",
        "trace",
        "url",
        "string",
        "get",
        "throwable",
        "loader",
        "swing",
        "image",
        "javax",
        "icon",
        "stack",
        "resource"
      ]
    },
    {
      "method": "testCharMethod2@204",
      "body": "@Test public void testCharMethod2(){\n  String inputCommand=target + \"\\nmethod6\\nsc\\ne\\n\";\n  try {\n    command.execute(\"c\",new BufferedReader(new StringReader(inputCommand)),writer);\n    assertEquals(\"yro1\\n\",sWriter.toString());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.StringReader.StringReader(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.StringWriter.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/py4j/py4j-java/test/py4j/commands/CallCommandTest.java",
      "types": [
        "Throwable",
        "BufferedReader",
        "Reader",
        "String",
        "StringReader",
        "StringWriter"
      ],
      "apicalls": [
        "printStackTrace",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.io.StringWriter.toString()"
          ]
        },
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.io.StringWriter.toString()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "stack",
        "throwable",
        "string",
        "reader",
        "java",
        "buffered",
        "lang",
        "print",
        "writer",
        "trace",
        "io"
      ]
    },
    {
      "method": "objectToInt@63",
      "body": "/** \n * get the value contained in the object.\n * @param val returns the value of Shorts and Integers as an int. VPF nullvalues get returned as Integer.MIN_VALUE, as do all other types\n * @return the value contained in val\n */\npublic static final int objectToInt(Object val){\n  int v=Integer.MIN_VALUE;\n  if (val instanceof Integer) {\n    v=((Integer)val).intValue();\n    if (v == Integer.MIN_VALUE + 1) {\n      v=Integer.MIN_VALUE;\n    }\n  }\n else   if (val instanceof Short) {\n    v=((Short)val).shortValue();\n    if (v == Short.MIN_VALUE + 1) {\n      v=Integer.MIN_VALUE;\n    }\n  }\n  return v;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Short.shortValue()",
                "node": "DAPICall",
                "_returns": "short",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Integer.intValue()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/openmap/src/openmap/com/bbn/openmap/layer/vpf/VPFUtil.java",
      "types": [
        "Integer",
        "Short"
      ],
      "apicalls": [
        "shortValue",
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.intValue()"
          ]
        },
        {
          "calls": [
            "java.lang.Short.shortValue()"
          ]
        }
      ],
      "keywords": [
        "int",
        "integer",
        "java",
        "lang",
        "value",
        "short"
      ]
    },
    {
      "method": "addCollegeJSON@198",
      "body": "/** \n * Create a new College. The id of the new college will be returned.\n * @param name The name of the new college\n */\n@Security(RoleType.MANAGER) public static void addCollegeJSON(String name){\n  try {\n    if (name == null || name.trim().length() == 0)     throw new IllegalArgumentException(\"Name is required\");\n    List<College> colleges=settingRepo.findAllColleges();\n    College college=settingRepo.createCollege(name);\n    colleges.add(college);\n    saveModelOrder(colleges);\n    name=escapeJavaScript(college.getName());\n    renderJSON(\"{ \\\"success\\\": \\\"true\\\", \\\"id\\\": \" + college.getId() + \", \\\"name\\\": \\\"\"+ name+ \"\\\" }\");\n  }\n catch (  IllegalArgumentException iae) {\n    String message=escapeJavaScript(iae.getMessage());\n    renderJSON(\"{ \\\"failure\\\": \\\"true\\\", \\\"message\\\": \\\"\" + message + \"\\\" }\");\n  }\ncatch (  PersistenceException pe) {\n    name=escapeJavaScript(name);\n    renderJSON(\"{ \\\"failure\\\": \\\"true\\\", \\\"message\\\": \\\"Another college allready exists with the name: '\" + name + \"'\\\" }\");\n  }\ncatch (  RuntimeException re) {\n    Logger.error(re,\"Unable to add college\");\n    String message=escapeJavaScript(re.getMessage());\n    renderJSON(\"{ \\\"failure\\\": \\\"true\\\", \\\"message\\\": \\\"\" + message + \"\\\" }\");\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.trim()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Vireo/app/controllers/settings/ConfigurableSettingsTab.java",
      "types": [
        "String",
        "Integer",
        "Throwable"
      ],
      "apicalls": [
        "length",
        "trim",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "message",
        "throwable",
        "get",
        "length",
        "java",
        "lang",
        "trim"
      ]
    },
    {
      "method": "deleteImage@204",
      "body": "public void deleteImage(final File image_local_file){\n  pushTask(new Runnable(){\n    @Override public void run(){\n      File parent_dir=image_local_file.getParentFile();\n      if (!parent_dir.exists() || !parent_dir.canRead() || !parent_dir.isDirectory())       return;\n      NFileNameInfo info=new NFileNameInfo(image_local_file);\n      final String file_prefix=info.getFileName();\n      File[] file_list=parent_dir.listFiles(new FilenameFilter(){\n        @Override public boolean accept(        File dir,        String filename){\n          return filename.startsWith(file_prefix);\n        }\n      }\n);\n      for (      File file : file_list) {\n        try {\n          deleteBitmapCache(file.getCanonicalFile());\n          if (file.canWrite())           file.delete();\n        }\n catch (        SecurityException e) {\n          e.printStackTrace();\n        }\ncatch (        IOException e) {\n          e.printStackTrace();\n        }\n      }\n      sendCallback(null,null);\n      popTask();\n    }\n  }\n);\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.lang.Runnable>.addLast(java.lang.Runnable)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.util.concurrent.ExecutorService.submit(java.lang.Runnable)",
                "_throws": [],
                "_returns": "java.util.concurrent.Future",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.LinkedList<java.lang.Runnable>.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Tuboroidon524/Tuboroid/src/info/narazaki/android/tuboroid/agent/ImageFetchAgent.java",
      "types": [
        "LinkedList",
        "Runnable",
        "Future",
        "Integer",
        "ExecutorService"
      ],
      "apicalls": [
        "size",
        "addLast",
        "submit"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.lang.Runnable>.addLast(java.lang.Runnable)",
            "java.util.LinkedList<java.lang.Runnable>.size()"
          ]
        },
        {
          "calls": [
            "java.util.LinkedList<java.lang.Runnable>.addLast(java.lang.Runnable)",
            "java.util.LinkedList<java.lang.Runnable>.size()",
            "java.util.concurrent.ExecutorService.submit(java.lang.Runnable)"
          ]
        }
      ],
      "keywords": [
        "util",
        "executor",
        "size",
        "service",
        "linked",
        "future",
        "list",
        "submit",
        "runnable",
        "add",
        "integer",
        "concurrent",
        "last",
        "java"
      ]
    },
    {
      "method": "asUTF16BEEncoded@126",
      "body": "/** \n * Take a basic PDF string and produce a string from its bytes as an UTF16-BE encoding. The first 2 bytes are presumed to be the big-endian byte markers, 0xFE and 0xFF; that is not checked by this method.\n * @param basicString the basic PDF string, as offered by {@link PDFObject#getStringValue()}\n * @return the decoding of the string's bytes in UTF16-BE\n */\npublic static String asUTF16BEEncoded(String basicString){\n  try {\n    return new String(asBytes(basicString),2,basicString.length() - 2,\"UTF-16BE\");\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new RuntimeException(\"No UTF-16BE charset!\");\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.String(byte[],int,int,java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/PDFrenderer/src/com/sun/pdfview/PDFStringUtil.java",
      "types": [
        "String",
        "UnsupportedEncodingException",
        "Integer",
        "Byte"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.String(byte[],int,int,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "length",
        "exception",
        "lang",
        "byte",
        "string",
        "encoding",
        "java",
        "integer"
      ]
    },
    {
      "method": "checkIntactAll@564",
      "formalParam": [
        "CommandSender"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "$NOT$java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/RadioBeacon/RadioBeacon.java",
      "body": "public static void checkIntactAll(CommandSender sender){\n  int count=0, fixed=0;\n  for (  Map.Entry<AntennaXZ,Antenna> pair : Antenna.xz2Ant.entrySet()) {\n    Antenna ant=pair.getValue();\n    if (!ant.checkIntact()) {\n      fixed+=1;\n    }\n    count+=1;\n  }\n  sender.sendMessage(\"Updated \" + fixed + \" of \"+ count+ \" antennas\");\n}\n",
      "types": [
        "Set",
        "Object",
        "ConcurrentHashMap"
      ],
      "apicalls": [
        "entrySet",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.entrySet()",
            "$NOT$java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "set",
        "object",
        "hash",
        "concurrent",
        "entry",
        "util",
        "remove",
        "java"
      ]
    },
    {
      "method": "splitImage@33",
      "body": "/** \n * Load a image array.\n * @param img\n * @param cols\n * @param rows\n * @return BufferedImage[]\n */\npublic static BufferedImage[] splitImage(BufferedImage img,int cols,int rows){\n  int w=img.getWidth() / cols;\n  int h=img.getHeight() / rows;\n  int num=0;\n  int imageType=img.getType();\n  if (imageType == 0)   imageType=5;\n  BufferedImage imgs[]=new BufferedImage[w * h];\n  for (int y=0; y < rows; y++) {\n    for (int x=0; x < cols; x++) {\n      imgs[num]=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);\n      Graphics2D g=imgs[num].createGraphics();\n      g.setComposite(AlphaComposite.Src);\n      g.drawImage(img,0,0,w,h,w * x,h * y,w * x + w,h * y + h,null);\n      g.dispose();\n      num++;\n    }\n  }\n  return imgs;\n}\n",
      "formalParam": [
        "BufferedImage",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.BufferedImage.getWidth()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.image.BufferedImage.getHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.image.BufferedImage.getType()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.image.BufferedImage.createGraphics()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Graphics2D"
          },
          {
            "_call": "java.awt.Graphics2D.setComposite(java.awt.Composite)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.Graphics.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "BufferedImage[]",
      "file": "./java_projects/zpokemon/src/org/zengine/uils/Image.java",
      "types": [
        "BufferedImage",
        "Boolean",
        "Integer",
        "Composite",
        "Graphics2D",
        "ImageObserver",
        "Graphics",
        "Image"
      ],
      "apicalls": [
        "setComposite",
        "createGraphics",
        "getHeight",
        "drawImage",
        "getWidth",
        "dispose",
        "getType"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.BufferedImage.getWidth()",
            "java.awt.image.BufferedImage.getHeight()",
            "java.awt.image.BufferedImage.getType()",
            "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "java.awt.image.BufferedImage.createGraphics()",
            "java.awt.Graphics2D.setComposite(java.awt.Composite)",
            "java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
            "java.awt.Graphics.dispose()"
          ]
        }
      ],
      "keywords": [
        "width",
        "get",
        "d",
        "java",
        "set",
        "dispose",
        "height",
        "graphics2",
        "integer",
        "draw",
        "composite",
        "graphics",
        "observer",
        "boolean",
        "buffered",
        "type",
        "awt",
        "image",
        "create"
      ]
    },
    {
      "method": "helpFindTestModelByName@109",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/teiid-designer/deprecated/org.teiid.designer.vdb.edit.test/src/com/metamatrix/vdb/internal/edit/TestRuntimeIndexArtifactGenerator.java",
      "body": "public File helpFindTestModelByName(final String name){\n  for (int i=0; i != TEST_MODELS.length; ++i) {\n    File f=TEST_MODELS[i];\n    if (f.getName().equalsIgnoreCase(name)) {\n      return f;\n    }\n  }\n  return null;\n}\n",
      "types": [
        "File",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equalsIgnoreCase",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getName()",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "name",
        "get",
        "case",
        "boolean",
        "lang",
        "java",
        "equals",
        "string",
        "file",
        "io",
        "ignore"
      ]
    },
    {
      "method": "onSelected@545",
      "formalParam": [
        "DiskResourceSelectedEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Stack<java.lang.String>.Stack<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Stack<java.lang.String>.Stack<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Stack<java.lang.String>.push(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/de-webapp/src/main/java/org/iplantc/de/client/views/panels/DataNavigationPanel.java",
      "body": "@Override public void onSelected(DiskResourceSelectedEvent event){\n  DiskResource dr=event.getResource();\n  if (dr instanceof Folder && event.getTag().equals(tag)) {\n    selectFolder(dr.getId());\n  }\n}\n",
      "types": [
        "Stack",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "push",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Stack<java.lang.String>.Stack<String>()",
            "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "java.lang.String.isEmpty()",
            "java.util.Stack<java.lang.String>.Stack<String>()",
            "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "$NOT$java.lang.String.isEmpty()",
            "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "$NOT$java.lang.String.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "stack",
        "lang",
        "push",
        "boolean",
        "string",
        "empty"
      ]
    },
    {
      "method": "start@38",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.DatagramPacket.DatagramPacket(byte[],int,int,java.net.SocketAddress)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.nanoTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.net.DatagramSocket.send(java.net.DatagramPacket)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JGroups/tests/other/org/jgroups/tests/PingPongDatagram.java",
      "body": "public void start() throws Exception {\n  mcast_sock=new MulticastSocket(7500);\n  mcast_sock.joinGroup(MCAST_GROUP,NetworkInterface.getByName(\"192.168.1.5\"));\n  Receiver receiver=new Receiver();\n  receiver.start();\n  while (true) {\n    Util.keyPress(\"enter to ping\");\n    DatagramPacket packet=new DatagramPacket(PING_REQ,0,PING_REQ.length,MCAST_GROUP);\n    start=System.nanoTime();\n    mcast_sock.send(packet);\n  }\n}\n",
      "types": [
        "DatagramSocket",
        "Long",
        "SocketAddress",
        "Thread",
        "Byte",
        "System",
        "Integer",
        "IOException",
        "DatagramPacket"
      ],
      "apicalls": [
        "start",
        "nanoTime",
        "send"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.start()",
            "java.net.DatagramPacket.DatagramPacket(byte[],int,int,java.net.SocketAddress)",
            "java.lang.System.nanoTime()",
            "java.net.DatagramSocket.send(java.net.DatagramPacket)"
          ]
        }
      ],
      "keywords": [
        "system",
        "net",
        "datagram",
        "thread",
        "lang",
        "time",
        "byte",
        "java",
        "long",
        "socket",
        "integer",
        "nano",
        "send",
        "packet",
        "exception",
        "start",
        "address",
        "io"
      ]
    },
    {
      "method": "testGetApplicationErrorsByCategoryOneServiceNoOperationOneConsumer@187",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/turmeric-monitoring/turmeric-monitoring-cassandra-provider/src/test/java/org/ebayopensource/turmeric/monitoring/provider/operations/GetErrorMetricsDataTest.java",
      "body": "@Test public void testGetApplicationErrorsByCategoryOneServiceNoOperationOneConsumer() throws ServiceException {\n  long duration=60 * 6;\n  int aggregationPeriod=0;\n  MetricCriteria metricCriteria=new MetricCriteria();\n  metricCriteria.setFirstStartTime(sixMinutesAgo);\n  metricCriteria.setSecondStartTime(oneMinuteAgo);\n  metricCriteria.setDuration(duration);\n  metricCriteria.setAggregationPeriod(aggregationPeriod);\n  metricCriteria.setRoleType(\"server\");\n  List<ExtendedErrorViewData> response=queryprovider.getExtendedErrorMetricsData(\"Category\",Arrays.asList(srvcAdminName),new ArrayList<String>(),Arrays.asList(consumerName),null,ErrorCategory.APPLICATION.value(),ErrorSeverity.ERROR.value(),null,metricCriteria);\n  assertNotNull(response);\n  assertEquals(\"There must be 2 data rows in the response\",2,response.size());\n  int expectedErrorCount1=2;\n  assertEquals(\"there must be \" + expectedErrorCount1 + \" errors for the errorCount1 field.\",expectedErrorCount1,response.get(0).getErrorCount1());\n  int expectedErrorCount2=1;\n  assertEquals(\"there must be \" + expectedErrorCount2 + \" errors for the errorCount2 field.\",expectedErrorCount2,response.get(0).getErrorCount2());\n  expectedErrorCount1=1;\n  assertEquals(\"there must be \" + expectedErrorCount1 + \" errors for the errorCount1 field.\",expectedErrorCount1,response.get(1).getErrorCount1());\n  expectedErrorCount2=0;\n  assertEquals(\"there must be \" + expectedErrorCount2 + \" errors for the errorCount2 field.\",expectedErrorCount2,response.get(1).getErrorCount2());\n}\n",
      "types": [
        "ArrayList",
        "String",
        "List",
        "Arrays"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "array",
        "list",
        "string",
        "java",
        "arrays",
        "util"
      ]
    },
    {
      "method": "getBytes@95",
      "body": "/** \n * Converts the specified string to a byte array.  If the charset is not supported the default system charset is used.\n * @param data the string to be encoded\n * @param charset the desired character encoding\n * @return The resulting byte array.\n */\npublic static byte[] getBytes(final String data,final String charset){\n  if (data == null) {\n    throw new IllegalArgumentException(\"data may not be null\");\n  }\n  if (charset == null || charset.length() == 0) {\n    throw new IllegalArgumentException(\"charset may not be null or empty\");\n  }\n  try {\n    return data.getBytes(charset);\n  }\n catch (  UnsupportedEncodingException e) {\n    return data.getBytes();\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.String.getBytes()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.getBytes(java.lang.String)",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ]
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/frostwire-desktop/lib/jars-src/httpcomponents-core-4.0.1/httpcore/src/main/java/org/apache/http/util/EncodingUtils.java",
      "types": [
        "Integer",
        "UnsupportedEncodingException",
        "String"
      ],
      "apicalls": [
        "length",
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.getBytes(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.getBytes(java.lang.String)",
            "java.lang.String.getBytes()"
          ]
        }
      ],
      "keywords": [
        "bytes",
        "java",
        "string",
        "length",
        "integer",
        "encoding",
        "exception",
        "get",
        "unsupported",
        "lang"
      ]
    },
    {
      "method": "getAccessList@185",
      "body": "public String getAccessList(int tunnel){\n  return getProperty(tunnel,\"i2cp.accessList\",\"\").replace(\",\",\"\\n\");\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/i2p/apps/i2ptunnel/java/src/net/i2p/i2ptunnel/web/EditBean.java",
      "types": [
        "Properties",
        "CharSequence",
        "String"
      ],
      "apicalls": [
        "getProperty",
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "char",
        "replace",
        "java",
        "property",
        "properties",
        "string",
        "util",
        "sequence"
      ]
    },
    {
      "method": "getCarbonDataSourceNames@244",
      "body": "public List<String> getCarbonDataSourceNames(){\n  DataSourceService dataSourceService=ReportingComponent.getCarbonDataSourceService();\n  if (dataSourceService == null) {\n    log.error(\"Carbon data source service is not available, returning empty list\");\n    return new ArrayList<String>();\n  }\n  try {\n    ArrayList<String> dsNames=new ArrayList<String>();\n    List<CarbonDataSource> dataSourceList=dataSourceService.getAllDataSources();\n    for (    CarbonDataSource dataSource : dataSourceList) {\n      dsNames.add(dataSource.getDSMInfo().getName());\n    }\n    return dsNames;\n  }\n catch (  DataSourceException e) {\n    log.error(e.getMessage());\n    return new ArrayList<String>();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/platform/components/reporting/org.wso2.carbon.reporting.core/src/main/java/org/wso2/carbon/reporting/core/services/DBReportingService.java",
      "types": [
        "Boolean",
        "String",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "add",
        "string",
        "java",
        "array",
        "list",
        "util",
        "boolean"
      ]
    },
    {
      "method": "toString@248",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Open-Quark/src/Quark_Gems/src/org/openquark/gems/client/GemGraph.java",
      "body": "/** \n * @see Object#toString()\n */\n@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"GemGraph:\\n\");\n  for (  final Gem rootGem : getRoots()) {\n    displayGemSubtreeText(rootGem,sb,0);\n  }\n  return sb.toString();\n}\n",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "builder",
        "java",
        "string"
      ]
    },
    {
      "method": "getExpectedSampleInformationFile@92",
      "body": "public File getExpectedSampleInformationFile(){\n  return new File(outputFolder,rawFile.getName() + SAMPLE_INFORMATION_FILE_SUFFIX);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/swift/services/swift-search/src/main/java/edu/mayo/mprc/swift/search/task/RAWDumpTask.java",
      "types": [
        "File",
        "String"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getName()",
            "java.io.File.File(java.io.File,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "file",
        "io",
        "java",
        "string",
        "name",
        "get"
      ]
    },
    {
      "method": "testHasWaitersIMSE@507",
      "body": "/** \n * hasWaiters throws IMSE if not locked\n */\npublic void testHasWaitersIMSE(){\n  final ReentrantLock lock=new ReentrantLock();\n  final Condition c=lock.newCondition();\n  try {\n    lock.hasWaiters(c);\n    shouldThrow();\n  }\n catch (  IllegalMonitorStateException success) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.ReentrantLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.newCondition()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.Condition"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.hasWaiters(java.util.concurrent.locks.Condition)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/tests/api/java/util/concurrent/ReentrantLockTest.java",
      "types": [
        "concurrent",
        "Boolean"
      ],
      "apicalls": [
        "hasWaiters",
        "newCondition"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantLock.ReentrantLock()",
            "java.util.concurrent.locks.ReentrantLock.newCondition()",
            "java.util.concurrent.locks.ReentrantLock.hasWaiters(java.util.concurrent.locks.Condition)"
          ]
        }
      ],
      "keywords": [
        "lock",
        "condition",
        "reentrant",
        "util",
        "locks",
        "waiters",
        "java",
        "new",
        "boolean",
        "concurrent"
      ]
    },
    {
      "method": "getSimpleURL@230",
      "body": "public static String getSimpleURL(int type,String id,String componentId,boolean appendContext){\n  String url=\"\";\n  if (appendContext) {\n    url=getApplicationURL();\n  }\n  if (url.endsWith(\"/\")) {\n    url=url.substring(0,url.length() - 1);\n  }\nswitch (type) {\ncase URL_SPACE:\n    url+=\"/Space/\" + id;\n  break;\ncase URL_COMPONENT:\nurl+=\"/Component/\" + id;\nbreak;\ncase URL_PUBLI:\nurl+=\"/Publication/\" + id;\nif (isDefined(componentId)) {\nurl+=\"?ComponentId=\" + componentId;\n}\nbreak;\ncase URL_TOPIC:\nurl+=\"/Topic/\" + id + \"?ComponentId=\"+ componentId;\nbreak;\ncase URL_FILE:\nurl+=\"/File/\" + id;\nbreak;\ncase URL_SURVEY:\nurl+=\"/Survey/\" + id;\nbreak;\ncase URL_QUESTION:\nurl+=\"/Question/\" + id;\nbreak;\ncase URL_DOCUMENT:\nurl+=\"/Document/\" + id;\nbreak;\ncase URL_VERSION:\nurl+=\"/Version/\" + id;\nbreak;\n}\nreturn url;\n}\n",
      "formalParam": [
        "int",
        "String",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Silverpeas-Core/lib-core/src/main/java/com/stratelia/silverpeas/peasCore/URLManager.java",
      "types": [
        "Integer",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "length",
        "substring",
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "length",
        "lang",
        "string",
        "java",
        "substring",
        "boolean",
        "integer",
        "ends"
      ]
    },
    {
      "method": "getObject@56",
      "body": "public Object getObject() throws NamingException {\n  Object serviceInstance=createServiceInterfaceProxy(serviceInterfaceClassName,seiPortNameToFactoryMap,seiClassNameToFactoryMap,classLoader);\n  return serviceInstance;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ClassLoader.loadClass(java.lang.String)",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.util.Map.values()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Collection"
          },
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/openejb/openejb/server/openejb-axis/src/main/java/org/apache/openejb/server/axis/client/AxisServiceReference.java",
      "types": [
        "ClassNotFoundException",
        "Map",
        "Boolean",
        "Iterator",
        "Collection",
        "Class",
        "String",
        "ClassLoader"
      ],
      "apicalls": [
        "values",
        "loadClass",
        "hasNext",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.util.Map.values()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "collection",
        "lang",
        "map",
        "found",
        "string",
        "iterator",
        "next",
        "java",
        "exception",
        "values",
        "class",
        "util",
        "load",
        "loader"
      ]
    },
    {
      "method": "getTransport@69",
      "body": "/** \n * @return the transport method of this method. Either 'GET' or 'SET' (or anexception)\n */\npublic String getTransport(){\n  if (transport == null || transport.equalsIgnoreCase(\"post\") || transport.equalsIgnoreCase(\"get\")) {\n    return transport.toUpperCase();\n  }\n else {\n    throw new IllegalArgumentException(\"Sorry, the method must be either GET or POST.  Was instead \" + transport);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.toUpperCase()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/CIAPI.Java/src/CodeGeneration/src/main/java/codegen/modelobjects/Service.java",
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equalsIgnoreCase",
        "toUpperCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.toUpperCase()"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "ignore",
        "java",
        "boolean",
        "lang",
        "equals",
        "string",
        "upper",
        "case"
      ]
    },
    {
      "method": "doGet@36",
      "body": "/** \n * Display all available information on an item.\n * @param request a <code>HttpServletRequest</code> value\n * @param response a <code>HttpServletResponse</code> value\n * @exception IOException if an error occurs\n * @exception ServletException if an error occurs\n */\npublic void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {\n  ServletPrinter sp=null;\n  sp=new ServletPrinter(response,\"ViewItem\");\n  String value=request.getParameter(\"itemId\");\n  if ((value == null) || (value.equals(\"\"))) {\n    printError(\"No item identifier received - Cannot process the request<br>\",sp);\n    return;\n  }\n  sp.printHTMLheader(\"RUBiS: Viewing Item \\n\");\n  Context initialContext=null;\n  try {\n    initialContext=new InitialContext();\n  }\n catch (  Exception e) {\n    printError(\"Cannot get initial context for JNDI: \" + e + \"<br>\",sp);\n    return;\n  }\n  SB_ViewItemHome viewItemHome=null;\n  SB_ViewItem viewItem=null;\n  String html;\n  try {\n    viewItemHome=(SB_ViewItemHome)PortableRemoteObject.narrow(initialContext.lookup(\"SB_ViewItemHome\"),SB_ViewItemHome.class);\n    viewItem=viewItemHome.create();\n  }\n catch (  Exception e) {\n    printError(\"Cannot lookup SB_ViewItem: \" + e + \"<br>\",sp);\n    return;\n  }\n  try {\n    Integer itemId=new Integer(value);\n    html=viewItem.getItemDescription(itemId,-1);\n    sp.printHTML(html);\n  }\n catch (  Exception e) {\n    printError(\"Cannot get item description (got exception: \" + e + \")<br>\",sp);\n    return;\n  }\n  sp.printHTMLfooter();\n}\n",
      "formalParam": [
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "javax.naming.InitialContext.InitialContext()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "javax.naming.NamingException"
            ]
          },
          {
            "_call": "java.lang.Integer.Integer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/DICE/RUBiS/EJB_SessionBean/edu/rice/rubis/beans/servlets/ViewItem.java",
      "types": [
        "Integer",
        "InitialContext",
        "String",
        "Object",
        "Boolean",
        "NamingException",
        "NumberFormatException"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "javax.naming.InitialContext.InitialContext()",
            "java.lang.Integer.Integer(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "context",
        "number",
        "boolean",
        "naming",
        "initial",
        "string",
        "lang",
        "equals",
        "exception",
        "javax",
        "java",
        "format",
        "object",
        "integer"
      ]
    },
    {
      "method": "writeBytes@279",
      "body": "/** \n * This does NOT validate the signature\n */\npublic void writeBytes(OutputStream out) throws DataFormatException, IOException {\n  if ((_destination == null) || (_encryptionKey == null) || (_signingKey == null)|| (_leases == null)|| (_signature == null))   throw new DataFormatException(\"Not enough data to write out a LeaseSet\");\n  _destination.writeBytes(out);\n  _encryptionKey.writeBytes(out);\n  _signingKey.writeBytes(out);\n  DataHelper.writeLong(out,1,_leases.size());\n  for (Iterator iter=_leases.iterator(); iter.hasNext(); ) {\n    Lease lease=(Lease)iter.next();\n    lease.writeBytes(out);\n  }\n  _signature.writeBytes(out);\n}\n",
      "formalParam": [
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/i2p/core/java/src/net/i2p/data/LeaseSet.java",
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "iterator",
        "util",
        "boolean",
        "next"
      ]
    },
    {
      "method": "onFling@324",
      "body": "@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){\n  if (!canHandleEvent())   return false;\n  if (velocityY > MAX_FLING_VELOCITY) {\n    velocityY=MAX_FLING_VELOCITY;\n  }\n else   if (velocityY < -MAX_FLING_VELOCITY) {\n    velocityY=-MAX_FLING_VELOCITY;\n  }\n  setSelectedIndex(INDEX_NONE);\n  mScroller=new Scroller(getContext());\n  mScroller.fling(0,mScrollY,0,-(int)velocityY,0,0,0,mMaxScrollY);\n  computeScroll();\n  return true;\n}\n",
      "formalParam": [
        "MotionEvent",
        "MotionEvent",
        "float",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.Math.max(int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.Math.max(int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/platform_packages_apps_Gallery/src/com/android/camera/GridViewSpecial.java",
      "types": [
        "Math",
        "Integer"
      ],
      "apicalls": [
        "min",
        "max"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "max",
        "java",
        "math",
        "lang",
        "integer",
        "min"
      ]
    },
    {
      "method": "uploadFile@167",
      "body": "public void uploadFile(String localfile,String targetfile) throws FileNotFoundException, Exception {\n  OutputStream os=cconn.openUploadStream(targetfile);\n  FileInputStream is=new FileInputStream(localfile);\n  byte[] buf=new byte[16384];\n  int c;\n  while (true) {\n    c=is.read(buf);\n    if (c <= 0) {\n      break;\n    }\n    os.write(buf,0,c);\n  }\n  os.close();\n  is.close();\n  cconn.close();\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              }
            ]
          },
          {
            "_call": "java.net.URL.openConnection()",
            "node": "DAPICall",
            "_returns": "java.net.URLConnection",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.net.URLConnection.getOutputStream()",
            "node": "DAPICall",
            "_returns": "java.io.OutputStream",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.FileNotFoundException"
            ]
          },
          {
            "_call": "java.io.FileInputStream.read(byte[])",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.OutputStream.write(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.OutputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.FileInputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/BetterShop_1/src/me/jascotty2/lib/net/FTP.java",
      "types": [
        "FileInputStream",
        "FileNotFoundException",
        "MalformedURLException",
        "Byte",
        "String",
        "URL",
        "URLConnection",
        "IOException",
        "OutputStream",
        "Integer"
      ],
      "apicalls": [
        "read",
        "write",
        "close",
        "getOutputStream",
        "openConnection"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.openConnection()",
            "java.net.URLConnection.getOutputStream()",
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.io.FileInputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.close()",
            "java.io.FileInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "url",
        "byte",
        "stream",
        "file",
        "java",
        "close",
        "found",
        "io",
        "open",
        "net",
        "write",
        "input",
        "string",
        "get",
        "read",
        "malformed",
        "integer",
        "output",
        "exception",
        "connection"
      ]
    },
    {
      "method": "removeColumnGrp@178",
      "body": "public boolean removeColumnGrp(ColumnGroup ptg,ColumnGroup tg){\n  boolean retFlag=false;\n  if (tg != null) {\n    for (int i=0; i < ptg.vector.size(); i++) {\n      Object tmpObj=ptg.vector.get(i);\n      if (tmpObj instanceof ColumnGroup) {\n        if (tmpObj == tg) {\n          ptg.vector.remove(i);\n          retFlag=true;\n          break;\n        }\n else {\n          retFlag=removeColumnGrp((ColumnGroup)tmpObj,tg);\n          if (retFlag) {\n            break;\n          }\n        }\n      }\n else       if (tmpObj instanceof TableColumn) {\n        break;\n      }\n    }\n  }\n  return retFlag;\n}\n",
      "formalParam": [
        "ColumnGroup",
        "ColumnGroup"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Vector<java.lang.Object>.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.Vector<java.lang.Object>.remove(int)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector<java.lang.Object>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/druid/src/main/java/com/alibaba/druid/support/jconsole/model/ColumnGroup.java",
      "types": [
        "Integer",
        "Vector",
        "Object"
      ],
      "apicalls": [
        "get",
        "remove",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<java.lang.Object>.size()",
            "java.util.Vector<java.lang.Object>.get(int)",
            "java.util.Vector<java.lang.Object>.remove(int)",
            "java.util.Vector<java.lang.Object>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "object",
        "get",
        "size",
        "remove",
        "util",
        "vector"
      ]
    },
    {
      "method": "ensureRowVisible@173",
      "body": "/** \n * Ensures the given row is visible.\n */\npublic void ensureRowVisible(int row){\n  if (row != -1) {\n    Rectangle cellRect=getCellRect(row,0,false);\n    Rectangle visibleRect=getVisibleRect();\n    if (!visibleRect.intersects(cellRect))     scrollRectToVisible(cellRect);\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTable.getCellRect(int,int,boolean)",
            "_throws": [],
            "_returns": "java.awt.Rectangle",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.getVisibleRect()",
            "_throws": [],
            "_returns": "java.awt.Rectangle",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.awt.Rectangle.intersects(java.awt.Rectangle)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frostwire-desktop/gui/com/limegroup/gnutella/gui/tables/LimeJTable.java",
      "types": [
        "JComponent",
        "Rectangle",
        "JTable",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "getVisibleRect",
        "scrollRectToVisible",
        "getCellRect",
        "intersects"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTable.getCellRect(int,int,boolean)",
            "javax.swing.JComponent.getVisibleRect()",
            "$NOT$java.awt.Rectangle.intersects(java.awt.Rectangle)",
            "javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"
          ]
        },
        {
          "calls": [
            "javax.swing.JTable.getCellRect(int,int,boolean)",
            "javax.swing.JComponent.getVisibleRect()",
            "$NOT$java.awt.Rectangle.intersects(java.awt.Rectangle)"
          ]
        }
      ],
      "keywords": [
        "get",
        "rectangle",
        "rect",
        "awt",
        "boolean",
        "cell",
        "j",
        "integer",
        "visible",
        "scroll",
        "java",
        "component",
        "swing",
        "intersects",
        "javax",
        "table"
      ]
    },
    {
      "method": "dirname@173",
      "body": "@Override public RelativeDirectory dirname(){\n  int sep=path.lastIndexOf('/');\n  return new RelativeDirectory(path.substring(0,sep + 1));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "RelativeDirectory",
      "file": "./java_projects/ikvm-openjdk/langtools/src/share/classes/com/sun/tools/javac/file/RelativePath.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "java",
        "last",
        "index",
        "lang",
        "integer",
        "string"
      ]
    },
    {
      "method": "unsubscribe@246",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/androidnews/google-reader-api/com/google/reader/GoogleReader.java",
      "body": "public void unsubscribe(String feedUrl) throws GoogleReaderException, Exception {\n  ensureApiTokenAvailable();\n  if (!feedUrl.startsWith(\"feed/\")) {\n    feedUrl=\"feed/\" + feedUrl;\n  }\n  List<NameValuePair> params=new ArrayList<NameValuePair>();\n  params.add(new BasicNameValuePair(\"s\",feedUrl));\n  params.add(new BasicNameValuePair(\"ac\",\"unsubscribe\"));\n  params.add(new BasicNameValuePair(\"T\",apiToken));\n  post(SUBSCRIBTION_EDIT_URL,params);\n}\n",
      "types": [
        "ArrayList",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.startsWith(java.lang.String)",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "list",
        "util",
        "java",
        "boolean",
        "array",
        "lang",
        "string",
        "starts"
      ]
    },
    {
      "method": "charAt@121",
      "body": "public static char charAt(String s,int i){\n  if (i >= s.length()) {\n    return 0;\n  }\n else {\n    return s.charAt(i);\n  }\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.charAt(int)",
                "node": "DAPICall",
                "_returns": "char",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "char",
      "file": "./java_projects/jdownloader/trunk/src/jd/nutils/NaturalOrderComparator.java",
      "types": [
        "Integer",
        "Character",
        "String"
      ],
      "apicalls": [
        "charAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "length",
        "integer",
        "lang",
        "char",
        "java",
        "character"
      ]
    },
    {
      "method": "setParameter@92",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/oozie_1/core/src/main/java/org/apache/oozie/util/XLogStreamer.java",
      "body": "public void setParameter(String filterParam,String value){\n  if (filterParams.containsKey(filterParam)) {\n    noFilter=false;\n    filterParams.put(filterParam,value);\n  }\n}\n",
      "types": [
        "Boolean",
        "Object",
        "String",
        "Map"
      ],
      "apicalls": [
        "containsKey",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "map",
        "object",
        "boolean",
        "put",
        "java",
        "string",
        "contains",
        "util",
        "key"
      ]
    },
    {
      "method": "getValue@392",
      "body": "/** \n * Get the value of the given option, or <code>null</code> if it doesn't exist.\n */\npublic String getValue(String name){\n  return System.getProperty(name,_map.get(name));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/fcrepo/fcrepo-installer/src/main/java/org/fcrepo/utilities/install/InstallOptions.java",
      "types": [
        "String",
        "Object",
        "Map",
        "System"
      ],
      "apicalls": [
        "get",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.lang.System.getProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "property",
        "object",
        "map",
        "get",
        "system",
        "string",
        "java",
        "lang"
      ]
    },
    {
      "method": "getReference@48",
      "body": "public byte[] getReference(final IndexedFastaSequenceFile referenceReader,final int padding){\n  return referenceReader.getSubsequenceAt(fullExtentReferenceLoc.getContig(),Math.max(1,fullExtentReferenceLoc.getStart() - padding),Math.min(referenceReader.getSequenceDictionary().getSequence(fullExtentReferenceLoc.getContig()).getSequenceLength(),fullExtentReferenceLoc.getStop() + padding)).getBases();\n}\n",
      "formalParam": [
        "IndexedFastaSequenceFile",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/Torrent-Variant-Caller-stable/public/java/src/org/broadinstitute/sting/utils/activeregion/ActiveRegion.java",
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [
        "max",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "min",
        "lang",
        "max",
        "math"
      ]
    },
    {
      "method": "allocateFloatingIP@718",
      "body": "/** \n * Allocates a floating IP.\n * @param token .\n * @return .\n */\npublic String allocateFloatingIP(final String token){\n  try {\n    final String resp=service.path(this.pathPrefix + \"os-floating-ips\").header(\"Content-type\",\"application/json\").header(\"X-Auth-Token\",token).accept(MediaType.APPLICATION_JSON).post(String.class,\"\");\n    final Matcher m=Pattern.compile(\"\\\"ip\\\": \\\"([^\\\"]*)\\\"\").matcher(resp);\n    if (m.find()) {\n      return m.group(1);\n    }\n else {\n      throw new IllegalStateException(\"Failed to allocate floating IP - IP not found in response\");\n    }\n  }\n catch (  final UniformInterfaceException e) {\n    logRestError(e);\n    throw new IllegalStateException(\"Failed to allocate floating IP\",e);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern"
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "_then": [
              {
                "_call": "java.util.regex.Matcher.group(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.regex.Matcher.find()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/cloudify/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/openstack/OpenstackCloudDriver.java",
      "types": [
        "Pattern",
        "Matcher",
        "Boolean",
        "String",
        "Integer",
        "CharSequence"
      ],
      "apicalls": [
        "matcher",
        "compile",
        "find",
        "group"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.group(int)"
          ]
        },
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "regex",
        "pattern",
        "integer",
        "group",
        "matcher",
        "util",
        "compile",
        "string",
        "char",
        "java",
        "find",
        "sequence"
      ]
    },
    {
      "method": "testBigDecimalIntegerLiteral@1065",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": []
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.math.BigDecimal.BigDecimal(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-compiler/src/test/java/org/drools/integrationtests/MiscTest.java",
      "body": "public void testBigDecimalIntegerLiteral() throws Exception {\n  final PackageBuilder builder=new PackageBuilder();\n  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream(\"big_decimal_and_literal.drl\")));\n  final Package pkg=builder.getPackage();\n  final RuleBase ruleBase=getRuleBase();\n  ruleBase.addPackage(pkg);\n  StatefulSession session=ruleBase.newStatefulSession();\n  final List list=new ArrayList();\n  session.setGlobal(\"list\",list);\n  final PersonInterface bill=new Person(\"bill\",null,12);\n  bill.setBigDecimal(new BigDecimal(\"42\"));\n  bill.setBigInteger(new BigInteger(\"42\"));\n  session.insert(bill);\n  session=SerializationHelper.getSerialisedStatefulSession(session,ruleBase);\n  session.fireAllRules();\n  assertEquals(6,((List)session.getGlobal(\"list\")).size());\n}\n",
      "types": [
        "List",
        "Integer",
        "Class",
        "InputStream",
        "InputStreamReader",
        "String",
        "ArrayList",
        "BigDecimal",
        "BigInteger"
      ],
      "apicalls": [
        "getResourceAsStream",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.util.ArrayList.ArrayList()",
            "java.math.BigDecimal.BigDecimal(java.lang.String)",
            "java.math.BigInteger.BigInteger(java.lang.String)",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "array",
        "integer",
        "class",
        "lang",
        "stream",
        "java",
        "reader",
        "decimal",
        "util",
        "math",
        "resource",
        "size",
        "get",
        "big",
        "io",
        "list",
        "string",
        "input"
      ]
    },
    {
      "method": "getIdForNamespace@2039",
      "body": "/** \n * Get a prefix either from the uri mapping, or just make one up!\n * @param uri The namespace URI, which may be null.\n * @return The prefix if there is one, or null.\n */\npublic int getIdForNamespace(String uri){\n  int index=m_values.indexOf(uri);\n  if (index < 0) {\n    m_values.addElement(uri);\n    return m_valueIndex++;\n  }\n else   return index;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.indexOf(java.lang.Object)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/android_libcore/luni/src/main/java/org/apache/xml/dtm/ref/sax2dtm/SAX2DTM2.java",
      "types": [
        "Integer",
        "Object",
        "Vector"
      ],
      "apicalls": [
        "addElement",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.indexOf(java.lang.Object)",
            "java.util.Vector.addElement(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "add",
        "integer",
        "vector",
        "java",
        "index",
        "element"
      ]
    },
    {
      "method": "test_that_string_is_injected_into_map@153",
      "body": "@Test public void test_that_string_is_injected_into_map(){\n  String expectedString=\"test_value\";\n  this.jedis.set(\"test:string\",expectedString);\n  StringInMapContainer dummy=this.injector.getInstance(StringInMapContainer.class);\n  Map<String,String> actualStringMap=dummy.getInjectedString();\n  assertThat(actualStringMap.size(),is(1));\n  assertThat(actualStringMap.get(\"test:string\"),is(equalTo(expectedString)));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/strawberry/src/test/java/com/github/strawberry/guice/StringInjectionTest.java",
      "types": [
        "Integer",
        "Map",
        "Object",
        "String"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.size()",
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "object",
        "integer",
        "get",
        "size",
        "string",
        "java",
        "map"
      ]
    },
    {
      "method": "OrderedVerseRangeIterator@1031",
      "body": "/** \n * Find the first unused verse\n */\npublic OrderedVerseRangeIterator(Versification v11n,Iterator<Key> vit,int[] board){\n  Set<TalliedVerseRange> output=new TreeSet<TalliedVerseRange>();\n  Iterator<Key> rit=new VerseRangeIterator(v11n,vit,RestrictionType.NONE);\n  while (rit.hasNext()) {\n    VerseRange range=(VerseRange)rit.next();\n    int rank=0;\n    for (    Key aKey : range) {\n      Verse verse=(Verse)aKey;\n      int temp=board[v11n.getOrdinal(verse)];\n      if (temp > rank) {\n        rank=temp;\n      }\n    }\n    output.add(new TalliedVerseRange(range,rank));\n  }\n  this.it=output.iterator();\n  last=null;\n}\n",
      "formalParam": [
        "Versification",
        "Iterator<Key>",
        "int[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeSet<Tau_E>.TreeSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Set<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jsword/src/main/java/org/crosswire/jsword/passage/PassageTally.java",
      "types": [
        "Set",
        "TreeSet",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet<Tau_E>.TreeSet()",
            "java.util.Set<Tau_E>.add(Tau_E)",
            "java.util.Set<Tau_E>.iterator()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "set",
        "tree",
        "iterator",
        "add",
        "java",
        "util"
      ]
    },
    {
      "method": "testMoreComplexDependency@178",
      "body": "@Ignore @Test public void testMoreComplexDependency() throws Exception {\n  WikiPage root=InMemoryPage.makeRoot(\"RooT\");\n  PageCrawler crawler=root.getPageCrawler();\n  WikiPage page=crawler.addPage(root,PathParser.parse(\"ClassPath\"),\"!define REMOTE_REPO {http://maven.springframework.org/milestone;  }\\n!define LOCAL_REPO {target/repo}\\n!artifact org.springframework:spring-core:3.0.0.RC1\\n\");\n  List<String> paths=page.getData().getClasspaths();\n  System.out.println(paths);\n  assertEquals(repoDir + \"/org/springframework/spring-core/3.0.0.RC1/spring-core-3.0.0.RC1.jar:\" + repoDir+ \"/org/springframework/spring-asm/3.0.0.RC1/spring-asm-3.0.0.RC1.jar:\"+ repoDir+ \"/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:\"+ repoDir+ \"/org/jboss/logging/com.springsource.org.jboss.logging/2.0.5.GA/com.springsource.org.jboss.logging-2.0.5.GA.jar:\"+ repoDir+ \"/org/jboss/util/com.springsource.org.jboss.util/2.2.9.GA/com.springsource.org.jboss.util-2.2.9.GA.jar\",paths.get(0));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/aether-fitnesse-widget/src/test/java/fr/opensagres/fitnesse/widgets/ArtifactWidgetTest.java",
      "types": [
        "String",
        "PrintStream",
        "List",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "get",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.Object)",
            "java.util.List<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "stream",
        "string",
        "object",
        "print",
        "println",
        "java",
        "util",
        "list",
        "get",
        "io"
      ]
    },
    {
      "method": "Client@19",
      "body": "public Client() throws MalformedURLException, IOException, InterruptedException {\n  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n  gui=new clientGUI();\n  gui.initLoader(Client.class.getSimpleName());\n  gui.initLoaderProcess();\n  gui.pack();\n  clientGUI.getFrame().setVisible(Boolean.TRUE);\n  gui.setApplet(new RSApplet().getApplet());\n  Settings.setBoolean(\"showLoader\",Boolean.FALSE);\n  gui.initApplet();\n  gui.initClient();\n  gui.pack();\n  Log.info(Languages.getString(\"Client.Client_Took\").replace(\"$1\",String.valueOf((Calendar.getInstance().getTimeInMillis() - Settings.getMili()) / 1000)));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JFrame.setDefaultCloseOperation(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getSimpleName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.String.valueOf(char[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/RuneScape-With-Functions/src/com/RSWF/methods/functions/Client.java",
      "types": [
        "Character",
        "Calendar",
        "String",
        "Long",
        "Integer",
        "Class",
        "JFrame"
      ],
      "apicalls": [
        "valueOf",
        "getInstance",
        "getTimeInMillis",
        "getSimpleName",
        "setDefaultCloseOperation"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JFrame.setDefaultCloseOperation(int)",
            "java.lang.Class<Tau_T>.getSimpleName()",
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()",
            "java.lang.String.valueOf(char[])"
          ]
        }
      ],
      "keywords": [
        "javax",
        "instance",
        "operation",
        "util",
        "long",
        "class",
        "default",
        "calendar",
        "value",
        "frame",
        "string",
        "time",
        "get",
        "simple",
        "name",
        "swing",
        "j",
        "character",
        "millis",
        "close",
        "java",
        "lang",
        "integer",
        "set"
      ]
    },
    {
      "method": "getValueAs@126",
      "body": "public Object getValueAs(final int derType) throws IOException {\n  byte[] encoded=getEncoded();\n  encoded[0]=(byte)derType;\n  return DERReader.read(encoded).getValue();\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.IllegalArgumentException.IllegalArgumentException()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              }
            ],
            "_try": [
              {
                "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.ByteArrayOutputStream.toByteArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/classpath/gnu/java/security/der/DERValue.java",
      "types": [
        "IllegalArgumentException",
        "ByteArrayOutputStream",
        "Throwable"
      ],
      "apicalls": [
        "initCause",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.lang.IllegalArgumentException.IllegalArgumentException()",
            "java.lang.Throwable.initCause(java.lang.Throwable)"
          ]
        },
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "output",
        "stream",
        "cause",
        "array",
        "init",
        "lang",
        "exception",
        "argument",
        "java",
        "byte",
        "io",
        "illegal"
      ]
    },
    {
      "method": "delete@113",
      "body": "public void delete(EGemVertex v){\n  _vertices.remove(v);\n  for (  EGemVertex u : _vertices) {\n    u.removeEdgesWithVertex(v);\n  }\n}\n",
      "formalParam": [
        "EGemVertex"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList<Tau_E>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/blink/src/blink/EGem.java",
      "types": [
        "Boolean",
        "ArrayList",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "get",
        "remove",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.remove(java.lang.Object)",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.get(int)",
            "java.util.ArrayList<Tau_E>.remove(int)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.remove(java.lang.Object)",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "integer",
        "java",
        "util",
        "get",
        "size",
        "boolean",
        "object",
        "array",
        "list"
      ]
    },
    {
      "method": "lsh_equals_should_parse_correctly_with_receiver_without_spaces_with_arguments@2774",
      "body": "@Test public void lsh_equals_should_parse_correctly_with_receiver_without_spaces_with_arguments(){\n  Message m=parse(\"foo(x) <<= y\");\n  Message expected=msg(\"<<=\",PersistentList.create(Arrays.asList(msg(\"foo\",PersistentList.create(Arrays.asList(msg(\"x\")))),msg(\"y\"))));\n  assertThat(m,is(equalTo(expected)));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/seph/src/test/seph/lang/parser/ParserTest.java",
      "types": [
        "Object",
        "List",
        "Arrays"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.Arrays.asList(java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "java",
        "arrays",
        "util",
        "list",
        "object"
      ]
    },
    {
      "method": "reset@251",
      "body": "public synchronized void reset(){\n  checkStream();\n  reset(stream);\n  finished=false;\n  needDict=false;\n  compressedDirectBufOff=compressedDirectBufLen=0;\n  uncompressedDirectBuf.limit(directBufferSize);\n  uncompressedDirectBuf.position(directBufferSize);\n  userBufOff=userBufLen=0;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.Buffer.limit(int)",
            "node": "DAPICall",
            "_returns": "java.nio.Buffer",
            "_throws": []
          },
          {
            "_call": "java.nio.Buffer.position(int)",
            "node": "DAPICall",
            "_returns": "java.nio.Buffer",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/core/org/apache/hadoop/io/compress/zlib/ZlibDecompressor.java",
      "types": [
        "Buffer",
        "Integer"
      ],
      "apicalls": [
        "limit",
        "position"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.Buffer.limit(int)",
            "java.nio.Buffer.position(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "limit",
        "java",
        "nio",
        "buffer",
        "position"
      ]
    },
    {
      "method": "getStateString@173",
      "body": "public String getStateString(){\n  String str=\"\";\n  if (this.state != null) {\n    ListIterator lIter=this.state.listIterator();\n    while (lIter.hasNext()) {\n      int index=lIter.nextIndex();\n      Object lItem=lIter.next();\n      if (index != 0) {\n        str+=STATESTRING_VALUE_SEPERATOR;\n      }\n      if (lItem instanceof String[]) {\n        String[] obj=(String[])lItem;\n        for (int i=0; i < obj.length; i++) {\n          if (i != 0) {\n            str+=STATESTRING_MULTIVALUE_ARRAY_ELEMENT_SEPERATOR;\n          }\n          if (obj[i] != null) {\n            str+=obj[i];\n          }\n else {\n            str+=STATESTRING_NOVALUE;\n          }\n        }\n      }\n else {\n        if (lItem != null) {\n          str+=(String)lItem;\n        }\n else {\n          str+=STATESTRING_NOVALUE;\n        }\n      }\n    }\n  }\n  return str;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.listIterator()",
            "node": "DAPICall",
            "_returns": "java.util.ListIterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ListIterator.nextIndex()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.util.ListIterator.next()",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ListIterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/com.idega.core/src/java/com/idega/event/GenericState.java",
      "types": [
        "Boolean",
        "Object",
        "List",
        "ListIterator",
        "Integer"
      ],
      "apicalls": [
        "hasNext",
        "listIterator",
        "nextIndex",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.listIterator()",
            "java.util.ListIterator.hasNext()",
            "java.util.ListIterator.nextIndex()",
            "java.util.ListIterator.next()",
            "java.util.ListIterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "list",
        "util",
        "next",
        "integer",
        "iterator",
        "boolean",
        "index",
        "java",
        "object"
      ]
    },
    {
      "method": "getImage@30",
      "body": "/** \n * {@inheritDoc}\n */\npublic Image getImage(Object element){\n  Image image=null;\n  Iterator editors=Plugin.getDefault().getDirtyEditorNames().iterator();\n  while (editors.hasNext()) {\n    EditorPart editor=(EditorPart)Plugin.getEditorByTitle((String)editors.next());\n    if (editor.getTitle().equals(element)) {\n      image=editor.getTitleImage();\n      if (!editor.isDirty() && (editor instanceof IJBEditor)) {\n        IJBEditor seditor=(IJBEditor)editor;\n        image=seditor.getDisabledTitleImage();\n      }\n      return image;\n    }\n  }\n  return image;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "Image",
      "file": "./java_projects/jubula.core/org.eclipse.jubula.client.ui.rcp/src/org/eclipse/jubula/client/ui/rcp/provider/labelprovider/DirtyStarListLabelProvider.java",
      "types": [
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "next",
        "boolean",
        "iterator",
        "util"
      ]
    },
    {
      "method": "testRetryFailuresOneBundleWithTwoFailures@208",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable<java.lang.String,java.lang.String>.Hashtable<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Set<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.SecurityException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gemini.web.gemini-web-container/org.eclipse.gemini.web.core/src/test/java/org/eclipse/gemini/web/internal/WebApplicationStartFailureRetryControllerTests.java",
      "body": "@Test public void testRetryFailuresOneBundleWithTwoFailures() throws Exception {\n  expect(this.servletContext.getContextPath()).andReturn(CONTEXT_PATH_1).anyTimes();\n  expect(this.bundle1.getBundleId()).andReturn(3L).anyTimes();\n  expect(this.bundle1.getSymbolicName()).andReturn(SYMBOLIC_NAME);\n  expect(this.bundle1.getHeaders()).andReturn(new Hashtable<String,String>());\n  BundleContext bundleContext=createMock(BundleContext.class);\n  expect(this.bundle1.getBundleContext()).andReturn(bundleContext);\n  this.container.startWebApplication(this.handle);\n  expectLastCall();\n  WebApplicationStartFailureRetryController webApplicationStartFailureRetryController=createWebApplicationStartFailureRetryController();\n  webApplicationStartFailureRetryController.recordFailure(createStandardWebApplication(this.bundle1,webApplicationStartFailureRetryController));\n  StandardWebApplication failedWebApplication=createStandardWebApplication(this.bundle1,webApplicationStartFailureRetryController);\n  webApplicationStartFailureRetryController.recordFailure(failedWebApplication);\n  Field field=webApplicationStartFailureRetryController.getClass().getDeclaredField(FIELD_NAME);\n  field.setAccessible(true);\n  ConcurrentMap<?,?> failures=(ConcurrentMap<?,?>)field.get(webApplicationStartFailureRetryController);\n  assertTrue(failures.size() == 1);\n  assertTrue(((Set<?>)failures.get(CONTEXT_PATH_1)).size() == 2);\n  webApplicationStartFailureRetryController.retryFailures(failedWebApplication);\n  failures=(ConcurrentMap<?,?>)field.get(webApplicationStartFailureRetryController);\n  assertTrue(failures.size() == 0);\n  field.setAccessible(false);\n}\n",
      "types": [
        "AccessibleObject",
        "Integer",
        "Hashtable",
        "String",
        "Set",
        "Map",
        "SecurityException",
        "Boolean"
      ],
      "apicalls": [
        "size",
        "setAccessible"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable<java.lang.String,java.lang.String>.Hashtable<String,String>()",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "java.util.Map<Tau_K,Tau_V>.size()",
            "java.util.Set<Tau_E>.size()",
            "java.util.Map<Tau_K,Tau_V>.size()",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
          ]
        }
      ],
      "keywords": [
        "string",
        "accessible",
        "integer",
        "set",
        "reflect",
        "lang",
        "hashtable",
        "security",
        "util",
        "size",
        "java",
        "exception",
        "map",
        "object",
        "boolean"
      ]
    },
    {
      "method": "warning@471",
      "body": "public static boolean warning(String message){\n  return warning(message,null);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.getLogger(java.lang.String)",
            "_throws": [],
            "_returns": "java.util.logging.Logger",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/nativelibs4java/libraries/BridJ/src/main/java/org/bridj/BridJ.java",
      "types": [
        "Throwable",
        "Class",
        "String",
        "Logger",
        "Level"
      ],
      "apicalls": [
        "log",
        "getName",
        "getLogger"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.util.logging.Logger.getLogger(java.lang.String)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "logging",
        "level",
        "get",
        "java",
        "class",
        "logger",
        "log",
        "name",
        "util",
        "throwable",
        "string",
        "lang"
      ]
    },
    {
      "method": "ComponentVillageWoodHut@12",
      "body": "public ComponentVillageWoodHut(int par1,Random par2Random,StructureBoundingBox par3StructureBoundingBox,int par4){\n  super(par1);\n  averageGroundLevel=-1;\n  coordBaseMode=par4;\n  boundingBox=par3StructureBoundingBox;\n  isTallHouse=par2Random.nextBoolean();\n  tablePosition=par2Random.nextInt(3);\n}\n",
      "formalParam": [
        "int",
        "Random",
        "StructureBoundingBox",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Random.nextBoolean()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Random.nextInt(int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Project-Farmcraft/mcp/src/minecraft/net/minecraft/src/ComponentVillageWoodHut.java",
      "types": [
        "Integer",
        "Boolean",
        "Random"
      ],
      "apicalls": [
        "nextBoolean",
        "nextInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Random.nextBoolean()",
            "java.util.Random.nextInt(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "next",
        "boolean",
        "int",
        "util",
        "random",
        "java"
      ]
    },
    {
      "method": "writeToParcel@551",
      "formalParam": [
        "Parcel",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.get(int)",
            "node": "DAPICall",
            "_returns": "Tau_E",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frameworks_base/core/java/android/view/InputDevice.java",
      "body": "@Override public void writeToParcel(Parcel out,int flags){\n  out.writeInt(mId);\n  out.writeString(mName);\n  out.writeInt(mSources);\n  out.writeInt(mKeyboardType);\n  out.writeString(mKeyCharacterMapFile);\n  final int numRanges=mMotionRanges.size();\n  for (int i=0; i < numRanges; i++) {\n    MotionRange range=mMotionRanges.get(i);\n    out.writeInt(range.mAxis);\n    out.writeInt(range.mSource);\n    out.writeFloat(range.mMin);\n    out.writeFloat(range.mMax);\n    out.writeFloat(range.mFlat);\n    out.writeFloat(range.mFuzz);\n  }\n  out.writeInt(-1);\n}\n",
      "types": [
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "get",
        "array",
        "java",
        "list",
        "util",
        "size"
      ]
    },
    {
      "method": "testConstantInAndOrderBasic2@381",
      "body": "@Test public void testConstantInAndOrderBasic2(){\n  SqlQueryEngine sqlEngine=getSqlEngine(\"CONSTANT_IN_ORDER_BASIC_2\");\n  PersonForm pf=new PersonForm();\n  pf.setIdSet(new HashSet<Long>());\n  pf.getIdSet().add(1L);\n  pf.getIdSet().add(2L);\n  String sql=sqlEngine.getSql(new Object(),pf,SqlOrder.getAscOrder(2));\n  logger.info(sql);\n  assertContains(sql,\"p.id in (1,2)\");\n  assertContains(sql,\"order by NAME_FIRST ASC\");\n  List<Person> list=sqlEngine.query(session,Person.class,new Object(),pf,SqlOrder.getAscOrder(2),0,0,0);\n  assertEquals(1,list.size());\n  Person p=list.get(0);\n  assertEquals(new Long(2),p.getId());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Long.Long(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sql-processor/sql-processor-spring/src/test/java/org/sqlproc/engine/impl/TestEmbeddedMapping.java",
      "types": [
        "HashSet",
        "Long"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
            "java.lang.Long.Long(long)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "lang",
        "long",
        "util",
        "java",
        "set"
      ]
    },
    {
      "method": "kill_engine_result@2480",
      "formalParam": [
        "kill_engine_result"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/indextank-engine/gen-java/com/flaptor/indextank/rpc/Controller.java",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic kill_engine_result(kill_engine_result other){\n  __isset_bit_vector.clear();\n  __isset_bit_vector.or(other.__isset_bit_vector);\n  this.success=other.success;\n  if (other.is_set_ne()) {\n    this.ne=new NebuException(other.ne);\n  }\n}\n",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "clear",
        "or"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "bit",
        "util",
        "java",
        "set",
        "clear"
      ]
    },
    {
      "method": "isValid@132",
      "body": "/** \n * Check if the SerializedRecord is a valid one, i.e., whether it represents meaningful metric values.\n * @return true if the EventRecord is a valid one, false otherwise.\n */\npublic boolean isValid(){\n  return !(\"invalid\".equalsIgnoreCase(fields.get(\"hostname\")));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/cdh3u3-with-mesos/hadoop-0.20.2-cdh3u3/src/contrib/failmon/src/java/org/apache/hadoop/contrib/failmon/SerializedRecord.java",
      "types": [
        "Boolean",
        "String",
        "HashMap",
        "Object"
      ],
      "apicalls": [
        "get",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "object",
        "lang",
        "util",
        "get",
        "case",
        "string",
        "hash",
        "java",
        "ignore",
        "map",
        "equals",
        "boolean"
      ]
    },
    {
      "method": "transfer@721",
      "body": "/** \n * Moves the figure of this field to the empty field <code>other</code>.\n * @param other the destination\n */\npublic void transfer(Field other){\n  set(null);\n  if (other.figure != null) {\n    this.handle=other.handle;\n    this.figure=other.figure;\n    other.handle=null;\n    other.figure=null;\n    usedFieldList.remove(other);\n    usedFieldList.add(this);\n    revalidate();\n  }\n}\n",
      "formalParam": [
        "Field"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/DockingFrames/docking-frames-demo-chess/src/bibliothek/chess/view/ChessBoard.java",
      "types": [
        "Object",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "add",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.remove(java.lang.Object)",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "util",
        "add",
        "remove",
        "java",
        "list",
        "boolean",
        "object"
      ]
    },
    {
      "method": "testJOptionPane@79",
      "body": "public void testJOptionPane(){\n  assertEquals(\"message\",\"JOptionPane message\",pane.getMessage());\n  assertEquals(\"message type\",JOptionPane.PLAIN_MESSAGE,pane.getMessageType());\n  assertEquals(\"option type\",JOptionPane.DEFAULT_OPTION,pane.getOptionType());\n  assertNull(\"icon\",pane.getIcon());\n  assertTrue(\"options\",pane.getOptions() == null || pane.getOptions().length == 0);\n  assertNull(\"initial value\",pane.getInitialValue());\n  assertEquals(\"input value\",JOptionPane.UNINITIALIZED_VALUE,pane.getInputValue());\n  assertEquals(1,pane.getPropertyChangeListeners().length);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JOptionPane.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "javax.swing.JOptionPane.getMessageType()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "javax.swing.JOptionPane.getOptionType()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "javax.swing.JOptionPane.getIcon()",
            "node": "DAPICall",
            "_returns": "javax.swing.Icon",
            "_throws": []
          },
          {
            "_call": "javax.swing.JOptionPane.getOptions()",
            "node": "DAPICall",
            "_returns": "java.lang.Object[]",
            "_throws": []
          },
          {
            "_call": "javax.swing.JOptionPane.getInitialValue()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "javax.swing.JOptionPane.getInputValue()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/test/api/java.injected/javax/swing/JOptionPaneTest.java",
      "types": [
        "Icon",
        "JOptionPane",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "getInputValue",
        "getOptionType",
        "getIcon",
        "getOptions",
        "getInitialValue",
        "getMessageType",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JOptionPane.getMessage()",
            "javax.swing.JOptionPane.getMessageType()",
            "javax.swing.JOptionPane.getOptionType()",
            "javax.swing.JOptionPane.getIcon()",
            "javax.swing.JOptionPane.getOptions()",
            "javax.swing.JOptionPane.getInitialValue()",
            "javax.swing.JOptionPane.getInputValue()"
          ]
        }
      ],
      "keywords": [
        "pane",
        "object",
        "options",
        "message",
        "swing",
        "initial",
        "icon",
        "get",
        "javax",
        "value",
        "option",
        "integer",
        "j",
        "type",
        "input"
      ]
    },
    {
      "method": "getFollowModeTogglesCount@711",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/Saros/trunk/src/de/fu_berlin/inf/dpp/feedback/SessionStatistic.java",
      "body": "/** \n * Returns the number of follow mode toggles\n */\npublic int getFollowModeTogglesCount(){\n  return Integer.parseInt(data.getProperty(KEY_FOLLOWMODE_TOGGLES));\n}\n",
      "types": [
        "Properties",
        "NumberFormatException",
        "String",
        "Integer"
      ],
      "apicalls": [
        "parseInt",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "properties",
        "property",
        "get",
        "format",
        "string",
        "util",
        "java",
        "exception",
        "lang",
        "integer",
        "parse",
        "int",
        "number"
      ]
    },
    {
      "method": "setBinaryStream@335",
      "body": "/** \n * When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream. JDBC will read the data from the stream as needed, until it reaches end-of-file. <P> <B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the java input stream which contains the binary parameter value\n * @param length the number of bytes in the stream\n */\npublic void setBinaryStream(int parameterIndex,byte[] x,int length) throws RemoteException, SQLException {\n  jdbcPrepStmt_.setBinaryStream(parameterIndex,new java.io.ByteArrayInputStream(x),length);\n}\n",
      "formalParam": [
        "int",
        "byte[]",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/simulatest/simulatest-insistencelayer-server/src/main/java/org/objectweb/rmijdbc/RJPreparedStatementServer.java",
      "types": [
        "InputStream",
        "Integer",
        "SQLException",
        "ByteArrayInputStream",
        "Byte",
        "PreparedStatement"
      ],
      "apicalls": [
        "setBinaryStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int)"
          ]
        }
      ],
      "keywords": [
        "binary",
        "prepared",
        "stream",
        "statement",
        "integer",
        "sql",
        "java",
        "io",
        "set",
        "exception",
        "input",
        "byte",
        "array"
      ]
    },
    {
      "method": "adapt@227",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\npublic Object adapt(Object object,Object type){\n  if (isFactoryForType(type)) {\n    Object adapter=super.adapt(object,type);\n    if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {\n      return adapter;\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Collection.contains(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class.isInstance(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/gmf-tooling/examples/org.eclipse.gmf.examples.eclipsecon.library.edit/src/org/eclipse/gmf/examples/eclipsecon/library/provider/LibraryItemProviderAdapterFactory.java",
      "types": [
        "Boolean",
        "Collection",
        "Object",
        "Class"
      ],
      "apicalls": [
        "isInstance",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection.contains(java.lang.Object)",
            "java.lang.Class.isInstance(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Collection.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "instance",
        "boolean",
        "collection",
        "object",
        "lang",
        "class",
        "java",
        "util",
        "contains"
      ]
    },
    {
      "method": "zipWithIndex@1037",
      "body": "public static <T,R extends Collection<Pair<T,Integer>>>R zipWithIndex(List<T> list,R target){\n  int size=list.size();\n  for (int i=0; i < size; i++) {\n    target.add(Tuples.pair(list.get(i),i));\n  }\n  return target;\n}\n",
      "formalParam": [
        "List<T>",
        "R"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "returnType": "R",
      "file": "./java_projects/gs-collections/collections/src/main/java/com/gs/collections/impl/utility/internal/RandomAccessListIterate.java",
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "list",
        "size",
        "integer",
        "util",
        "get",
        "java"
      ]
    },
    {
      "method": "build@22",
      "body": "public JsonRootNode build(){\n  LinkedList linkedlist=new LinkedList();\n  JsonNodeBuilder jsonnodebuilder;\n  for (Iterator iterator=elementBuilders.iterator(); iterator.hasNext(); linkedlist.add(jsonnodebuilder.buildNode())) {\n    jsonnodebuilder=(JsonNodeBuilder)iterator.next();\n  }\n  return JsonNodeFactories.aJsonArray(linkedlist);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.LinkedList.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "JsonRootNode",
      "file": "./java_projects/Mindkahest.fr/MindKahest/src/minecraft/argo/jdom/JsonArrayNodeBuilder.java",
      "types": [
        "List",
        "Object",
        "Iterator",
        "LinkedList",
        "Boolean"
      ],
      "apicalls": [
        "iterator",
        "add",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList.LinkedList()",
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.LinkedList.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "object",
        "linked",
        "iterator",
        "util",
        "next",
        "list",
        "boolean",
        "add"
      ]
    },
    {
      "method": "makeReadOnly@59",
      "body": "public void makeReadOnly(){\nsynchronized (readOnlySync) {\n    if (readOnly) {\n      return;\n    }\n    for (    final Entry<String,List<String>> paramEntry : this.portletParameters.entrySet()) {\n      paramEntry.setValue(Collections.unmodifiableList(paramEntry.getValue()));\n    }\n    this.portletParameters=Collections.unmodifiableMap(this.portletParameters);\n    readOnly=true;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.entrySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collections.unmodifiableMap(java.util.Map)",
            "_throws": [],
            "_returns": "java.util.Map",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/uPortal/uportal-war/src/main/java/org/jasig/portal/url/PortletRequestInfoImpl.java",
      "types": [
        "Map",
        "Collections",
        "Set",
        "String",
        "List"
      ],
      "apicalls": [
        "unmodifiableMap",
        "unmodifiableList",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.entrySet()",
            "java.util.Collections.unmodifiableList(java.util.List)",
            "java.util.Collections.unmodifiableMap(java.util.Map)"
          ]
        }
      ],
      "keywords": [
        "set",
        "map",
        "entry",
        "unmodifiable",
        "list",
        "util",
        "collections",
        "java",
        "string"
      ]
    },
    {
      "method": "newInstanceIntersect@119",
      "body": "/** \n * Creates a new XPath2FilterContainer04 with the filter type \"intersect\".\n * @param doc\n * @param xpath2filter\n * @return the instance\n */\npublic static XPath2FilterContainer04 newInstanceIntersect(Document doc,String xpath2filter){\n  return new XPath2FilterContainer04(doc,xpath2filter,XPath2FilterContainer04._ATT_FILTER_VALUE_INTERSECT);\n}\n",
      "formalParam": [
        "Document",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.Character.isWhitespace(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "XPath2FilterContainer04",
      "file": "./java_projects/santuario-java/src/main/java/org/apache/xml/security/transforms/params/XPath2FilterContainer04.java",
      "types": [
        "Character",
        "String",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "isWhitespace",
        "charAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Character.isWhitespace(char)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "string",
        "length",
        "character",
        "java",
        "whitespace",
        "lang",
        "integer",
        "char"
      ]
    },
    {
      "method": "onLoad@248",
      "body": "public void onLoad(){\n  m_loaded=true;\n  refresh();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Knjiga/src/ivica/client/mypanel/MyToolbar.java",
      "types": [
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.size()"
          ]
        }
      ],
      "keywords": [
        "array",
        "util",
        "size",
        "java",
        "integer",
        "list"
      ]
    },
    {
      "method": "authenticateWithPublicKey@448",
      "body": "/** \n * A convenience wrapper function which reads in a private key (PEM format, either DSA or RSA) and then calls <code>authenticateWithPublicKey(String, char[], String)</code>. <p> NOTE PUTTY USERS: Event though your key file may start with \"-----BEGIN...\" it is not in the expected format. You have to convert it to the OpenSSH key format by using the \"puttygen\" tool (can be downloaded from the Putty website). Simply load your key and then use the \"Conversions/Export OpenSSH key\" functionality to get a proper PEM file.\n * @param user A <code>String</code> holding the username.\n * @param pemFile A <code>File</code> object pointing to a file containing a DSA or RSA private key of the user in OpenSSH key format (PEM, you can't miss the \"-----BEGIN DSA PRIVATE KEY-----\" or \"-----BEGIN RSA PRIVATE KEY-----\" tag).\n * @param password If the PEM file is encrypted then you must specify the password. Otherwise, this argument will be ignored and can be set to <code>null</code>.\n * @return whether the connection is now authenticated.\n * @throws IOException\n */\npublic synchronized boolean authenticateWithPublicKey(String user,File pemFile,String password) throws IOException {\n  if (pemFile == null)   throw new IllegalArgumentException(\"pemFile argument is null\");\n  char[] buff=new char[256];\n  CharArrayWriter cw=new CharArrayWriter();\n  FileReader fr=new FileReader(pemFile);\n  while (true) {\n    int len=fr.read(buff);\n    if (len < 0)     break;\n    cw.write(buff,0,len);\n  }\n  fr.close();\n  return authenticateWithPublicKey(user,cw.toCharArray(),password);\n}\n",
      "formalParam": [
        "String",
        "File",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileReader.FileReader(java.io.File)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.FileNotFoundException"
            ]
          },
          {
            "_call": "java.io.Reader.read(char[])",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.InputStreamReader.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.security.SecureRandom.SecureRandom()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/iproxy/src/main/java/ch/ethz/ssh2/Connection.java",
      "types": [
        "File",
        "IOException",
        "FileReader",
        "FileNotFoundException",
        "Character",
        "Reader",
        "SecureRandom",
        "InputStreamReader",
        "Integer"
      ],
      "apicalls": [
        "read",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileReader.FileReader(java.io.File)",
            "java.io.Reader.read(char[])",
            "java.io.InputStreamReader.close()",
            "java.security.SecureRandom.SecureRandom()"
          ]
        }
      ],
      "keywords": [
        "character",
        "integer",
        "security",
        "reader",
        "input",
        "close",
        "found",
        "exception",
        "secure",
        "stream",
        "java",
        "file",
        "read",
        "random",
        "io"
      ]
    },
    {
      "method": "MockHttpServletRequest@138",
      "body": "public MockHttpServletRequest(String bodyContent){\n  this.bodyContent=bodyContent;\n  this.attributes=Collections.emptyMap();\n  this.headers=new LinkedHashMap<String,List<String>>();\n  this.requestDispatchers=new HashMap<String,RequestDispatcher>();\n  this.parameters=new HashMap<String,String[]>();\n  this.cookies=new ArrayList<Cookie>();\n  this.locales=new ArrayList<Locale>();\n  this.roles=new HashMap<String,Boolean>();\n  this.requestedSessionIdIsFromCookie=true;\n  this.method=\"GET\";\n  this.protocol=\"HTTP/1.1\";\n  this.serverName=\"localhost\";\n  this.serverPort=8080;\n  this.scheme=\"http\";\n  this.remoteHost=\"localhost\";\n  this.remoteAddr=\"127.0.0.1\";\n  this.localAddr=\"127.0.0.1\";\n  this.localName=\"localhost\";\n  this.localPort=8080;\n  this.remotePort=5000;\n  this.sessionCreated=false;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.emptyMap()",
            "_throws": [],
            "_returns": "java.util.Map",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>>.LinkedHashMap<String,List<String>>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String[]>.HashMap<String,String[]>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<java.util.Locale>.ArrayList<Locale>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Boolean>.HashMap<String,Boolean>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/mondrian/src/main/mondrian/tui/MockHttpServletRequest.java",
      "types": [
        "List",
        "LinkedHashMap",
        "Boolean",
        "ArrayList",
        "Collections",
        "HashMap",
        "Locale",
        "String",
        "Map"
      ],
      "apicalls": [
        "emptyMap"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.emptyMap()",
            "java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>>.LinkedHashMap<String,List<String>>()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.HashMap<java.lang.String,java.lang.String[]>.HashMap<String,String[]>()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<java.util.Locale>.ArrayList<Locale>()",
            "java.util.HashMap<java.lang.String,java.lang.Boolean>.HashMap<String,Boolean>()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "map",
        "locale",
        "java",
        "list",
        "linked",
        "collections",
        "hash",
        "empty",
        "util",
        "string",
        "array"
      ]
    },
    {
      "method": "componentResized@927",
      "body": "public void componentResized(ComponentEvent e){\n  cancelPopupMenu();\n}\n",
      "formalParam": [
        "ComponentEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.awt.Toolkit.getDefaultToolkit()",
                "node": "DAPICall",
                "_returns": "java.awt.Toolkit",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.awt.Window.removeWindowListener(java.awt.event.WindowListener)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.ArrayList<javax.swing.JPopupMenu>.ArrayList<JPopupMenu>(int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.List<javax.swing.JPopupMenu>.add(javax.swing.JPopupMenu)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/plaf/basic/BasicPopupMenuUI.java",
      "types": [
        "ComponentListener",
        "Boolean",
        "JPopupMenu",
        "WindowListener",
        "ArrayList",
        "Integer",
        "JComponent",
        "Component",
        "List",
        "Toolkit",
        "Window",
        "Object"
      ],
      "apicalls": [
        "add",
        "getDefaultToolkit",
        "putClientProperty",
        "removeComponentListener",
        "removeWindowListener"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<javax.swing.JPopupMenu>.ArrayList<JPopupMenu>(int)",
            "java.util.List<javax.swing.JPopupMenu>.add(javax.swing.JPopupMenu)",
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<javax.swing.JPopupMenu>.ArrayList<JPopupMenu>(int)",
            "java.util.List<javax.swing.JPopupMenu>.add(javax.swing.JPopupMenu)",
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)",
            "java.awt.Window.removeWindowListener(java.awt.event.WindowListener)"
          ]
        }
      ],
      "keywords": [
        "default",
        "java",
        "awt",
        "boolean",
        "get",
        "listener",
        "javax",
        "popup",
        "integer",
        "swing",
        "object",
        "toolkit",
        "client",
        "list",
        "util",
        "j",
        "remove",
        "put",
        "window",
        "menu",
        "component",
        "add",
        "array",
        "property"
      ]
    },
    {
      "method": "test_throwsWhenSettingDuplicateElementFromListIterator@86",
      "body": "@Test(expected=IllegalArgumentException.class) public void test_throwsWhenSettingDuplicateElementFromListIterator(){\n  final ListIterator<Integer> listIterator=ArrayListSet.of(1,2,3).listIterator();\n  listIterator.next();\n  listIterator.set(3);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ListIterator<java.lang.Integer>.next()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.util.ListIterator<java.lang.Integer>.set(java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/observable/test/com/netappsid/observable/ArrayListSetTest.java",
      "types": [
        "Integer",
        "ListIterator"
      ],
      "apicalls": [
        "set",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ListIterator<java.lang.Integer>.next()",
            "java.util.ListIterator<java.lang.Integer>.set(java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "set",
        "next",
        "integer",
        "util",
        "iterator",
        "java",
        "list"
      ]
    },
    {
      "method": "propertyChange@333",
      "body": "public void propertyChange(PropertyChangeEvent evt){\n  String type=evt.getPropertyName();\n  if (STOP_EVENT.equals(type)) {\n    stop=true;\n  }\n}\n",
      "formalParam": [
        "PropertyChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.beans.PropertyChangeEvent.getPropertyName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/codjo-data-process/codjo-data-process-gui/src/main/java/net/codjo/dataprocess/gui/launcher/ExecutionListProgress.java",
      "types": [
        "String",
        "Object",
        "Boolean",
        "PropertyChangeEvent"
      ],
      "apicalls": [
        "equals",
        "getPropertyName"
      ],
      "sequences": [
        {
          "calls": [
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "property",
        "string",
        "boolean",
        "name",
        "lang",
        "equals",
        "event",
        "java",
        "object",
        "change",
        "beans"
      ]
    },
    {
      "method": "getManualFilterItems@251",
      "body": "public List<SelectItem> getManualFilterItems(){\n  List<SelectItem> listItems=new ArrayList<SelectItem>();\n  SortedSet<String> values=new TreeSet<String>();\n  for (  User user : usersForFiltering) {\n    String name=user.getUserName();\n    String value=name != null ? name.substring(0,1).toUpperCase() : \"<empty>\";\n    values.add(value);\n  }\n  listItems.add(new SelectItem(ALL_ITEMS,ALL_ITEMS,null));\n  for (  String s : values) {\n    listItems.add(new SelectItem(s,s,null));\n  }\n  return listItems;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.TreeSet<java.lang.String>.TreeSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "List<SelectItem>",
      "file": "./java_projects/OpenFaces/testApp/core/source/org/openfaces/testapp/datatable/UserPermissionsTableDemoBean.java",
      "types": [
        "Integer",
        "ArrayList",
        "String",
        "TreeSet",
        "Set",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "toUpperCase",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.TreeSet<java.lang.String>.TreeSet<String>()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.toUpperCase()",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "tree",
        "string",
        "add",
        "case",
        "substring",
        "set",
        "integer",
        "java",
        "util",
        "lang",
        "boolean",
        "upper",
        "list",
        "array"
      ]
    },
    {
      "method": "transformEntityDirectory@314",
      "body": "/** \n * Transform entity directory.\n * @param xml the xml\n * @param codeSystemName the code system name\n * @param codeSystemVersionName the code system version name\n * @return the directory result\n */\npublic DirectoryResult<EntityDirectoryEntry> transformEntityDirectory(String xml,String codeSystemName,String codeSystemVersionName){\n  List<EntityDirectoryEntry> entryList=new ArrayList<EntityDirectoryEntry>();\n  Document doc=BioportalRestUtils.getDocument(xml);\n  List<Node> nodeList=TransformUtils.getNodeListWithPath(doc,NODELIST);\n  for (int i=0; i < nodeList.size(); i++) {\n    EntityDirectoryEntry entry=new EntityDirectoryEntry();\n    Node node=nodeList.get(i);\n    String about=TransformUtils.getNamedChildText(node,ABOUT);\n    String name=UriUtils.getLocalName(TransformUtils.getNamedChildText(node,NAME));\n    String label=TransformUtils.getNamedChildText(node,LABEL);\n    entry.setAbout(about);\n    ScopedEntityName scopedEntityName=this.buildScopedEntityName(name,codeSystemName);\n    entry.setName(scopedEntityName);\n    entry.setResourceName(this.buildResourceName(scopedEntityName));\n    String version=this.getIdentityConverter().codeSystemVersionNameToVersion(codeSystemVersionName);\n    entry.setHref(this.getUrlConstructor().createEntityUrl(codeSystemName,version,name));\n    entry.addKnownEntityDescription(this.createKnownEntityDescription(codeSystemName,codeSystemVersionName,label));\n    entryList.add(entry);\n  }\n  int totalCount=TransformUtils.getTotalCount(xml);\n  int page=TransformUtils.getPageNumber(xml);\n  int pageSize=TransformUtils.getPageSize(xml);\n  int numOfResultsOnPage=TransformUtils.getNumberOfResultsOnPage(xml);\n  boolean atEnd=totalCount <= (((page - 1) * pageSize) + numOfResultsOnPage);\n  return new DirectoryResult<EntityDirectoryEntry>(entryList,atEnd);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "_throws": [],
                "_returns": "Tau_E",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "DirectoryResult<EntityDirectoryEntry>",
      "file": "./java_projects/bioportal-service/src/main/java/edu/mayo/cts2/framework/plugin/service/bioportal/transform/EntityDescriptionTransform.java",
      "types": [
        "ArrayList",
        "List",
        "Integer"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)",
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "array",
        "integer",
        "java",
        "list",
        "util",
        "size",
        "get"
      ]
    },
    {
      "method": "getMinimumSize@151",
      "body": "/** \n * Invokes the <code>getMinimumSize</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic Dimension getMinimumSize(JComponent a){\n  Dimension returnValue=((ComponentUI)(uis.elementAt(0))).getMinimumSize(a);\n  for (int i=1; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).getMinimumSize(a);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent)",
            "node": "DAPICall",
            "_returns": "java.awt.Dimension",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent)",
                "node": "DAPICall",
                "_returns": "java.awt.Dimension",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Dimension",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/multi/MultiTableUI.java",
      "types": [
        "JComponent",
        "Vector",
        "Integer",
        "Dimension",
        "ComponentUI"
      ],
      "apicalls": [
        "size",
        "getMinimumSize"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent)",
            "java.util.Vector.size()",
            "javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent)",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "minimum",
        "swing",
        "util",
        "ui",
        "integer",
        "j",
        "size",
        "javax",
        "plaf",
        "get",
        "dimension",
        "java",
        "component",
        "vector"
      ]
    },
    {
      "method": "stopMasterServer@189",
      "body": "/** \n * \ud604\uc7ac active\ud55c CloudataMaster\ub97c \uc911\uc9c0\uc2dc\ud0a8\ub2e4.\n * @throws IOException\n */\npublic void stopMasterServer() throws IOException {\n  LOG.debug(\"Active Master server shutdown\");\n  CloudataMaster master=getActiveMaster();\n  if (master != null) {\n    master.shutdown();\n    masterServerThreads.get(master.getHostName()).interrupt();\n  }\n  try {\n    Thread.sleep(5 * 100);\n  }\n catch (  InterruptedException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Thread>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Thread",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cloudata/src/java/org/cloudata/core/common/MiniCloudataCluster.java",
      "types": [
        "Long",
        "String",
        "Object",
        "Thread",
        "Map",
        "InterruptedException"
      ],
      "apicalls": [
        "sleep",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Thread>.get(java.lang.Object)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "sleep",
        "map",
        "util",
        "object",
        "lang",
        "get",
        "thread",
        "exception",
        "interrupted",
        "string",
        "long"
      ]
    },
    {
      "method": "getArgToFuncMapping@70",
      "body": "@Override public List<FuncSpec> getArgToFuncMapping() throws FrontendException {\n  List<FuncSpec> funcList=new ArrayList<FuncSpec>();\n  funcList.add(new FuncSpec(this.getClass().getName(),new Schema(new Schema.FieldSchema(null,DataType.CHARARRAY))));\n  return funcList;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "List<FuncSpec>",
      "file": "./java_projects/pig/tutorial/src/org/apache/pig/tutorial/NonURLDetector.java",
      "types": [
        "Class",
        "ArrayList",
        "String"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "class",
        "java",
        "util",
        "get",
        "array",
        "list",
        "string",
        "name"
      ]
    },
    {
      "method": "testPollBlock@38",
      "body": "@Test(timeout=1000) public void testPollBlock() throws Exception {\n  Thread t=new Thread(){\n    public void run(){\n      setName(\"fail\");\n      try {\n        queue.removeFirst();\n      }\n catch (      InterruptedException e) {\n        setName(\"pass\");\n        return;\n      }\ncatch (      Exception e) {\n      }\n    }\n  }\n;\n  t.start();\n  Thread.sleep(100);\n  assertTrue(t.isAlive());\n  t.interrupt();\n  t.join();\n  assertEquals(\"pass\",t.getName());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.isAlive()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.join()",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/zoj/judge_server/src/tests/cn/edu/zju/acm/onlinejudge/judgeservice/JudgeQueueUnitTest.java",
      "types": [
        "Integer",
        "Boolean",
        "Long",
        "String",
        "InterruptedException",
        "Thread"
      ],
      "apicalls": [
        "isAlive",
        "start",
        "getName",
        "sleep",
        "join",
        "interrupt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.start()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.isAlive()",
            "java.lang.Thread.interrupt()",
            "java.lang.Thread.join()",
            "java.lang.Thread.getName()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "join",
        "long",
        "name",
        "boolean",
        "thread",
        "exception",
        "start",
        "lang",
        "get",
        "interrupt",
        "sleep",
        "interrupted",
        "alive",
        "integer"
      ]
    },
    {
      "method": "buildPingResultSummary@682",
      "body": "public static String buildPingResultSummary(int resultCode){\n  StringBuilder sb=new StringBuilder();\n  buildPingResultSummary(resultCode,sb);\n  return sb.toString();\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ping-service/src/com/anjlab/ping/entities/Job.java",
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "java",
        "string",
        "lang"
      ]
    },
    {
      "method": "deepCopy@2311",
      "body": "public getDiskFileSize_result deepCopy(){\n  return new getDiskFileSize_result(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "getDiskFileSize_result",
      "file": "./java_projects/abiquo/aimstub/src/main/java/com/abiquo/aimstub/Aim.java",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "clear",
        "or"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "clear",
        "bit",
        "util",
        "set",
        "java"
      ]
    },
    {
      "method": "JRtaComboBox@31",
      "body": "public JRtaComboBox(String[] ss){\n  super(ss);\n  addKeyListener(this);\n  addActionListener(this);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.addKeyListener(java.awt.event.KeyListener)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/thera-pi-2/OffenePosten/src/Tools/JRtaComboBox.java",
      "types": [
        "KeyListener",
        "JComboBox",
        "Component",
        "ActionListener"
      ],
      "apicalls": [
        "addKeyListener",
        "addActionListener"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.addKeyListener(java.awt.event.KeyListener)",
            "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "j",
        "box",
        "combo",
        "awt",
        "action",
        "key",
        "swing",
        "listener",
        "component",
        "add",
        "java"
      ]
    },
    {
      "method": "paintSplitPaneDividerForeground@1855",
      "body": "/** \n * Paints the foreground of the divider of a split pane.\n * @param context SynthContext identifying the <code>JComponent</code> and<code>Region</code> to paint to\n * @param g <code>Graphics</code> to paint to\n * @param x X coordinate of the area to paint to\n * @param y Y coordinate of the area to paint to\n * @param w Width of the area to paint to\n * @param h Height of the area to paint to\n * @param orientation One of <code>JSplitPane.HORIZONTAL_SPLIT</code> or<code>JSplitPane.VERTICAL_SPLIT</code>\n */\npublic void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintForeground(context,g,x,y,w,h,null);\n}\n",
      "formalParam": [
        "SynthContext",
        "Graphics",
        "int",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.image.BufferedImage.createGraphics()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Graphics2D"
              },
              {
                "_call": "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.JComponent"
              },
              {
                "_call": "java.awt.Graphics.dispose()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Graphics2D.translate(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.JComponent"
              },
              {
                "_call": "java.awt.Graphics2D.translate(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DExcept",
                "_catch": [
                  {
                    "_call": "java.lang.Throwable.printStackTrace()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ],
                "_try": [
                  {
                    "_call": "java.awt.geom.AffineTransform.createInverse()",
                    "_throws": [
                      "java.awt.geom.NoninvertibleTransformException"
                    ],
                    "node": "DAPICall",
                    "_returns": "java.awt.geom.AffineTransform"
                  },
                  {
                    "_call": "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/nimbus/SynthPainterImpl.java",
      "types": [
        "AffineTransform",
        "Graphics",
        "Integer",
        "ImageObserver",
        "Boolean",
        "Image",
        "BufferedImage",
        "Throwable",
        "plaf",
        "NoninvertibleTransformException",
        "JComponent",
        "Graphics2D"
      ],
      "apicalls": [
        "getComponent",
        "translate",
        "drawImage",
        "createInverse",
        "printStackTrace",
        "createGraphics",
        "transform",
        "dispose"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "java.awt.Graphics2D.translate(int,int)",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "java.awt.Graphics2D.translate(int,int)",
            "java.awt.geom.AffineTransform.createInverse()",
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
          ]
        },
        {
          "calls": [
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "java.awt.Graphics2D.translate(int,int)",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "java.awt.Graphics2D.translate(int,int)",
            "java.awt.geom.AffineTransform.createInverse()",
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "java.awt.image.BufferedImage.createGraphics()",
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "java.awt.Graphics.dispose()",
            "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
          ]
        }
      ],
      "keywords": [
        "j",
        "component",
        "inverse",
        "observer",
        "d",
        "stack",
        "dispose",
        "create",
        "print",
        "transform",
        "context",
        "javax",
        "exception",
        "graphics2",
        "swing",
        "plaf",
        "lang",
        "java",
        "get",
        "buffered",
        "graphics",
        "affine",
        "integer",
        "draw",
        "throwable",
        "synth",
        "boolean",
        "image",
        "geom",
        "trace",
        "awt",
        "noninvertible",
        "translate"
      ]
    },
    {
      "method": "createDiagramPositions@243",
      "body": "/** \n * Create a DiagramPosition for DiagramLink\n */\npublic static List createDiagramPositions(DiagramLink diagramLink,List points){\n  List positions=new ArrayList(points.size());\n  Iterator iter=points.iterator();\n  Object nextObj=null;\n  while (iter.hasNext()) {\n    nextObj=iter.next();\n    if (nextObj instanceof Point) {\n      positions.add(createDiagramPosition(diagramLink,(Point)nextObj));\n    }\n  }\n  return positions;\n}\n",
      "formalParam": [
        "DiagramLink",
        "List"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "List",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.diagram.ui/src/org/teiid/designer/diagram/ui/util/DiagramUiUtilities.java",
      "types": [
        "Iterator",
        "List",
        "ArrayList",
        "Boolean",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "add",
        "iterator",
        "next",
        "hasNext",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.ArrayList.ArrayList(int)",
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "iterator",
        "size",
        "next",
        "boolean",
        "object",
        "array",
        "integer",
        "add",
        "list"
      ]
    },
    {
      "method": "formatDateNum@850",
      "body": "public static String formatDateNum(long date){\n  return formatDate(date,\"yyyy-MM-dd HH:mm:ss\");\n}\n",
      "formalParam": [
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/frostwire-desktop/components/azureus/src/main/java/org/gudy/azureus2/core3/util/DisplayFormatters.java",
      "types": [
        "Long",
        "String",
        "SimpleDateFormat",
        "DateFormat",
        "Date"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.util.Date.Date(long)",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "date",
        "text",
        "string",
        "simple",
        "util",
        "java",
        "format",
        "long"
      ]
    },
    {
      "method": "resetAnimation@971",
      "body": "public void resetAnimation(final Player player){\n  animated.remove(player.getName());\n  blockPunches.put(player.getName(),0);\n}\n",
      "formalParam": [
        "Player"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Long>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Long",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AntiCheat/src/main/java/net/h31ix/anticheat/manage/Backend.java",
      "types": [
        "String",
        "Long",
        "Object",
        "Integer",
        "Map"
      ],
      "apicalls": [
        "put",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Long>.remove(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "long",
        "java",
        "object",
        "map",
        "string",
        "integer",
        "put",
        "util"
      ]
    },
    {
      "method": "addSeparator@373",
      "body": "public void addSeparator(){\n  getPopupMenu().addSeparator();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JPopupMenu.JPopupMenu()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JPopupMenu.setInvoker(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JPopupMenu.addSeparator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/main/java/common/javax/swing/JMenu.java",
      "types": [
        "JPopupMenu",
        "Component"
      ],
      "apicalls": [
        "addSeparator",
        "setInvoker"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JPopupMenu.JPopupMenu()",
            "javax.swing.JPopupMenu.setInvoker(java.awt.Component)",
            "javax.swing.JPopupMenu.addSeparator()"
          ]
        }
      ],
      "keywords": [
        "add",
        "component",
        "separator",
        "set",
        "menu",
        "invoker",
        "j",
        "popup",
        "swing",
        "javax"
      ]
    },
    {
      "method": "addOptComponent@200",
      "formalParam": [
        "String",
        "Class",
        "JToggleButton",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "Bindings",
      "file": "./java_projects/maple-ide/build/windows/launcher/launch4j/src/net/sf/launch4j/binding/Bindings.java",
      "body": "/** \n * Add an optional (nullable) Java Bean component of type clazz.\n */\npublic Bindings addOptComponent(String property,Class clazz,JToggleButton c,boolean enabledByDefault){\n  Binding b=new OptComponentBinding(this,property,clazz,c,enabledByDefault);\n  if (_optComponents.containsKey(property)) {\n    throw new BindingException(Messages.getString(\"Bindings.duplicate.binding\"));\n  }\n  _optComponents.put(property,b);\n  return this;\n}\n",
      "types": [
        "Object",
        "Map",
        "Boolean"
      ],
      "apicalls": [
        "containsKey",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.containsKey(java.lang.Object)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key",
        "contains",
        "util",
        "put",
        "map",
        "boolean",
        "object",
        "java"
      ]
    },
    {
      "method": "getStackTraceAsString@96",
      "body": "/** \n * @return The stack trace as a string\n */\npublic String getStackTraceAsString(){\n  try {\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    this.printStackTrace(ps);\n    return baos.toString(\"UTF-8\");\n  }\n catch (  Exception ex) {\n    return this.toString();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.PrintStream(java.io.OutputStream,boolean,java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ]
              },
              {
                "_call": "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.ByteArrayOutputStream.toString(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/chililog-server/src/main/java/org/chililog/server/common/ChiliLogException.java",
      "types": [
        "Throwable",
        "UnsupportedEncodingException",
        "String",
        "OutputStream",
        "PrintStream",
        "Boolean",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "printStackTrace",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.PrintStream.PrintStream(java.io.OutputStream,boolean,java.lang.String)",
            "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
            "java.io.ByteArrayOutputStream.toString(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.PrintStream.PrintStream(java.io.OutputStream,boolean,java.lang.String)",
            "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
            "java.io.ByteArrayOutputStream.toString(java.lang.String)",
            "java.lang.Throwable.toString()"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "string",
        "output",
        "io",
        "array",
        "stack",
        "exception",
        "java",
        "trace",
        "stream",
        "byte",
        "encoding",
        "print",
        "boolean",
        "throwable",
        "lang"
      ]
    },
    {
      "method": "add@387",
      "body": "public void add(String name,int value){\n  mapNameToValue.put(name,new Integer(value));\n  mapValueToName.put(value,name);\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.Integer,java.lang.String>.put(java.lang.Integer,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/update.xam.dk/spy/plugins/dk.xam.spy/src/dk/xam/spy/handlers/Entities.java",
      "types": [
        "Integer",
        "String",
        "Map"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)",
            "java.util.Map<java.lang.Integer,java.lang.String>.put(java.lang.Integer,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "put",
        "map",
        "java",
        "lang",
        "string",
        "util",
        "integer"
      ]
    },
    {
      "method": "findAllPeople@86",
      "body": "public Collection findAllPeople(String searchValue,String dateString,boolean includeVoided){\n  Collection<Object> patientList=new Vector<Object>();\n  Integer userId=-1;\n  if (Context.isAuthenticated()) {\n    userId=Context.getAuthenticatedUser().getUserId();\n  }\n  PersonService ps=Context.getPersonService();\n  List<Person> patients;\n  patients=ps.getPeople(searchValue,false);\n  patientList=new Vector<Object>(patients.size());\n  return patientList;\n}\n",
      "formalParam": [
        "String",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<java.lang.Object>.Vector<Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector<java.lang.Object>.Vector<Object>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Collection",
      "file": "./java_projects/openmrs-module-pharm/omod/src/main/java/org/openmrs/module/pharm/web/controller/DWRFindPatientBL.java",
      "types": [
        "Vector",
        "Object",
        "Collection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<java.lang.Object>.Vector<Object>()",
            "java.util.Vector<java.lang.Object>.Vector<Object>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "java",
        "util",
        "object",
        "vector"
      ]
    },
    {
      "method": "canExistUsage_4001@679",
      "formalParam": [
        "Package",
        "Usage",
        "NamedElement",
        "NamedElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.singletonMap(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "java.util.Map",
            "_throws": []
          },
          {
            "_call": "$NOT$java.lang.Boolean.booleanValue()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.singletonMap(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "java.util.Map",
            "_throws": []
          },
          {
            "_call": "$NOT$java.lang.Boolean.booleanValue()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ju4pa/org.eclipse.papyrus.uml.diagram.component/src/org/eclipse/papyrus/uml/diagram/component/edit/policies/UMLBaseItemSemanticEditPolicy.java",
      "body": "/** \n * Can exist usage_4001.\n * @param container the container\n * @param linkInstance the link instance\n * @param source the source\n * @param target the target\n * @return true, if successful\n * @generated\n */\npublic boolean canExistUsage_4001(Package container,Usage linkInstance,NamedElement source,NamedElement target){\n  try {\n    if (source == null) {\n      return true;\n    }\n else {\n      Map<String,EClassifier> env=Collections.<String,EClassifier>singletonMap(\"oppositeEnd\",UMLPackage.eINSTANCE.getNamedElement());\n      Object sourceVal=UMLOCLFactory.getExpression(7,UMLPackage.eINSTANCE.getNamedElement(),env).evaluate(source,Collections.singletonMap(\"oppositeEnd\",target));\n      if (false == sourceVal instanceof Boolean || !((Boolean)sourceVal).booleanValue()) {\n        return false;\n      }\n    }\n    if (target == null) {\n      return true;\n    }\n else {\n      Map<String,EClassifier> env=Collections.<String,EClassifier>singletonMap(\"oppositeEnd\",UMLPackage.eINSTANCE.getNamedElement());\n      Object targetVal=UMLOCLFactory.getExpression(6,UMLPackage.eINSTANCE.getNamedElement(),env).evaluate(target,Collections.singletonMap(\"oppositeEnd\",source));\n      if (false == targetVal instanceof Boolean || !((Boolean)targetVal).booleanValue()) {\n        return false;\n      }\n    }\n    return true;\n  }\n catch (  Exception e) {\n    UMLDiagramEditorPlugin.getInstance().logError(\"Link constraint evaluation error\",e);\n    return false;\n  }\n}\n",
      "types": [
        "Map",
        "Boolean",
        "Collections"
      ],
      "apicalls": [
        "booleanValue",
        "singletonMap"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.singletonMap(Tau_K,Tau_V)",
            "$NOT$java.lang.Boolean.booleanValue()",
            "java.util.Collections.singletonMap(Tau_K,Tau_V)",
            "$NOT$java.lang.Boolean.booleanValue()"
          ]
        }
      ],
      "keywords": [
        "value",
        "singleton",
        "util",
        "collections",
        "boolean",
        "lang",
        "map",
        "java"
      ]
    },
    {
      "method": "readsCollectionWithInterfaceCorrectly@349",
      "body": "/** \n * @see DATAMONGO-145\n */\n@Test public void readsCollectionWithInterfaceCorrectly(){\n  BasicDBObject person=new BasicDBObject(DefaultMongoTypeMapper.DEFAULT_TYPE_KEY,Person.class.getName());\n  person.put(\"foo\",\"Oliver\");\n  BasicDBList contacts=new BasicDBList();\n  contacts.add(person);\n  CollectionWrapper result=converter.read(CollectionWrapper.class,new BasicDBObject(\"contacts\",contacts));\n  assertThat(result.contacts,is(notNullValue()));\n  assertThat(result.contacts.size(),is(1));\n  Contact contact=result.contacts.get(0);\n  assertThat(contact,is(instanceOf(Person.class)));\n  assertThat(((Person)contact).firstname,is(\"Oliver\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<Tau_E>.get(int)",
            "_throws": [],
            "_returns": "Tau_E",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-data-mongodb/spring-data-mongodb/src/test/java/org/springframework/data/mongodb/core/convert/MappingMongoConverterUnitTests.java",
      "types": [
        "String",
        "List",
        "Class",
        "Integer"
      ],
      "apicalls": [
        "get",
        "getName",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "name",
        "get",
        "lang",
        "integer",
        "util",
        "class",
        "size",
        "string",
        "list",
        "java"
      ]
    },
    {
      "method": "getUserUri@214",
      "body": "public String getUserUri(){\n  return getUrl(authServerRoot + \"/User\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/uaa/samples/api/src/test/java/org/cloudfoundry/identity/api/web/ServerRunning.java",
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "$NOT$java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "starts",
        "boolean",
        "lang"
      ]
    },
    {
      "method": "uninstallUI@106",
      "body": "/** \n * Calls the  {@link ComponentUI#uninstallUI(JComponent)} method for allthe UI delegates managed by this <code>MultiProgressBarUI</code>.\n * @param c  the component.\n */\npublic void uninstallUI(JComponent c){\n  Iterator iterator=uis.iterator();\n  while (iterator.hasNext()) {\n    ComponentUI ui=(ComponentUI)iterator.next();\n    ui.uninstallUI(c);\n  }\n}\n",
      "formalParam": [
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.plaf.ComponentUI.uninstallUI(javax.swing.JComponent)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/classpath/javax/swing/plaf/multi/MultiProgressBarUI.java",
      "types": [
        "Vector",
        "Iterator",
        "JComponent",
        "ComponentUI",
        "Boolean"
      ],
      "apicalls": [
        "iterator",
        "uninstallUI",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.iterator()",
            "java.util.Iterator.hasNext()",
            "javax.swing.plaf.ComponentUI.uninstallUI(javax.swing.JComponent)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "j",
        "next",
        "plaf",
        "java",
        "util",
        "javax",
        "swing",
        "component",
        "boolean",
        "uninstall",
        "iterator",
        "vector",
        "ui"
      ]
    },
    {
      "method": "Separator@37",
      "body": "public Separator(){\n  super();\n  jbInit();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.BorderFactory.createLineBorder(java.awt.Color,int)",
            "_throws": [],
            "_returns": "javax.swing.border.Border",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Zypr-Reference-Client---Java/source/net/zypr/gui/components/Separator.java",
      "types": [
        "Color",
        "BorderFactory",
        "Integer",
        "JComponent",
        "Boolean",
        "Border"
      ],
      "apicalls": [
        "setBorder",
        "setOpaque",
        "createLineBorder"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.setOpaque(boolean)",
            "javax.swing.BorderFactory.createLineBorder(java.awt.Color,int)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "set",
        "j",
        "factory",
        "color",
        "swing",
        "create",
        "boolean",
        "border",
        "line",
        "javax",
        "component",
        "opaque"
      ]
    },
    {
      "method": "handleConnected@173",
      "body": "/** \n * May only be called by the controller\n */\npublic void handleConnected() throws InvocationTargetException {\n  registerAllItems();\n  this.connected=true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collection<java.lang.String>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Collection<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Integer>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Integer>.toArray(T[])",
            "node": "DAPICall",
            "_returns": "T[]",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/org.openscada.atlantis/org.openscada.da.server.opc/src/org/openscada/da/server/opc/connection/OPCIoManager.java",
      "types": [
        "String",
        "Object",
        "Collection",
        "Map",
        "Boolean",
        "ArrayList",
        "Integer",
        "List"
      ],
      "apicalls": [
        "size",
        "toArray",
        "get",
        "isEmpty",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Collection<java.lang.String>.isEmpty()",
            "java.util.Collection<java.lang.String>.size()",
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(int)",
            "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "java.util.List<java.lang.Integer>.isEmpty()",
            "java.util.List<java.lang.Integer>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "collection",
        "boolean",
        "object",
        "size",
        "map",
        "get",
        "empty",
        "util",
        "array",
        "java",
        "integer",
        "add",
        "list",
        "string"
      ]
    },
    {
      "method": "parseVCFHeader@47",
      "formalParam": [
        "CSVReader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "VCFHeader",
      "file": "./java_projects/medsavant/MedSavantShared/src/org/ut/biolab/medsavant/vcf/VCFParser.java",
      "body": "public static VCFHeader parseVCFHeader(CSVReader r) throws IOException {\n  String[] nextLine;\n  while (true) {\n    if ((nextLine=r.readNext()) == null) {\n      break;\n    }\n    if (nextLine[0].startsWith(COMMENT_CHARS)) {\n    }\n else     if (nextLine[0].startsWith(HEADER_CHARS)) {\n      return parseHeader(nextLine);\n    }\n  }\n  return null;\n}\n",
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "starts",
        "lang",
        "boolean",
        "java",
        "string"
      ]
    },
    {
      "method": "ifs@344",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.toArray()",
            "node": "DAPICall",
            "_returns": "java.lang.Object[]",
            "_throws": []
          }
        ]
      },
      "returnType": "Result",
      "file": "./java_projects/japid42/samples/JapidSample42/app/controllers/Application.java",
      "body": "public static Result ifs(){\n  String s=\"\";\n  List<String> list=new ArrayList<String>();\n  list.add(\"a\");\n  Object[] array=list.toArray();\n  return renderJapid(s,list,true,array,new int[]{},0,\"a\");\n}\n",
      "types": [
        "ArrayList",
        "List",
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "add",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.String>.toArray()"
          ]
        }
      ],
      "keywords": [
        "util",
        "array",
        "list",
        "boolean",
        "add",
        "string",
        "object",
        "java"
      ]
    },
    {
      "method": "toString@3858",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/storm/src/jvm/backtype/storm/generated/Nimbus.java",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"killTopology_args(\");\n  boolean first=true;\n  sb.append(\"name:\");\n  if (this.name == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.name);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "append",
        "builder",
        "string",
        "lang"
      ]
    },
    {
      "method": "addBill@22",
      "body": "public void addBill(Bill bill){\n  if (bills == null) {\n    bills=new ArrayList();\n  }\n  bills.add(bill);\n}\n",
      "formalParam": [
        "Bill"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/poma/testmodule/dependenteliminated/src/com/kirkk/cust/Customer.java",
      "types": [
        "List",
        "Object",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.List.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "array",
        "java",
        "list",
        "object",
        "boolean",
        "add",
        "util"
      ]
    },
    {
      "method": "paint@148",
      "body": "/** \n * Paints the specified component according to the Look and Feel. <p>This method is not used by Synth Look and Feel. Painting is handled by the  {@link #paint(SynthContext,Graphics)} method.\n * @param g the {@code Graphics} object used for painting\n * @param c the component being painted\n * @see #paint(SynthContext,Graphics)\n */\n@Override public void paint(Graphics g,JComponent c){\n  SynthContext context=getContext(c);\n  paint(context,g);\n  context.dispose();\n}\n",
      "formalParam": [
        "Graphics",
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "_throws": [],
            "_returns": "javax.swing.plaf.synth.SynthContext",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.dispose()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/synth/SynthTableHeaderUI.java",
      "types": [
        "Integer",
        "JComponent",
        "plaf"
      ],
      "apicalls": [
        "getContext",
        "dispose"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "javax.swing.plaf.synth.SynthContext.dispose()"
          ]
        }
      ],
      "keywords": [
        "plaf",
        "dispose",
        "component",
        "get",
        "synth",
        "integer",
        "javax",
        "swing",
        "j",
        "context"
      ]
    },
    {
      "method": "paint@54",
      "formalParam": [
        "Graphics"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.createImage(java.awt.image.ImageProducer)",
            "node": "DAPICall",
            "_returns": "java.awt.Image",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JacORB/demo/notification/whiteboard/src/demo/notification/whiteboard/BrushSizeDrawCanvas.java",
      "body": "public void paint(Graphics g){\n  g.drawImage(createImage(imageProducer_),0,0,null);\n}\n",
      "types": [
        "Boolean",
        "ImageObserver",
        "Component",
        "Image",
        "Graphics",
        "Integer",
        "ImageProducer"
      ],
      "apicalls": [
        "drawImage",
        "createImage"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.createImage(java.awt.image.ImageProducer)",
            "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
          ]
        }
      ],
      "keywords": [
        "java",
        "integer",
        "producer",
        "create",
        "awt",
        "image",
        "observer",
        "component",
        "boolean",
        "draw",
        "graphics"
      ]
    },
    {
      "method": "checkValueValid@25",
      "body": "@Override public String checkValueValid(String value,IDirectEditingContext context){\n  if (value.length() < 1) {\n    return \"Please enter any text as Task name.\";\n  }\n else   if (value.contains(\"\\n\")) {\n    return \"Line breakes are not allowed in Task names.\";\n  }\n  return null;\n}\n",
      "formalParam": [
        "String",
        "IDirectEditingContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.contains(java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/bpmn2-modeler/org.eclipse.bpmn2.modeler.core/src/org/eclipse/bpmn2/modeler/core/features/activity/task/DirectEditTaskFeature.java",
      "types": [
        "CharSequence",
        "Integer",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "length",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "char",
        "integer",
        "sequence",
        "length",
        "boolean",
        "string",
        "lang",
        "java",
        "contains"
      ]
    },
    {
      "method": "findStaticMethod@114",
      "body": "public static CGNode findStaticMethod(CallGraph cg,Atom name,Descriptor args){\n  for (Iterator<? extends CGNode> it=cg.iterator(); it.hasNext(); ) {\n    CGNode n=it.next();\n    if (n.getMethod().getName().equals(name) && n.getMethod().getDescriptor().equals(args)) {\n      return n;\n    }\n  }\n  Assertions.UNREACHABLE(\"failed to find method\");\n  return null;\n}\n",
      "formalParam": [
        "CallGraph",
        "Atom",
        "Descriptor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "_returns": "Tau_E",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "CGNode",
      "file": "./java_projects/wala-mirror/com.ibm.wala.core.tests/src/com/ibm/wala/core/tests/demandpa/AbstractPtrTest.java",
      "types": [
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next",
        "iterator",
        "boolean",
        "util",
        "java"
      ]
    },
    {
      "method": "load@41",
      "body": "public void load() throws IOException {\n  if (!propertyFile.exists()) {\n    return;\n  }\n  properties.load(new FileInputStream(propertyFile));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Properties.load(java.io.InputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/karaf/tooling/exam/container/src/main/java/org/apache/karaf/tooling/exam/container/internal/KarafPropertiesFile.java",
      "types": [
        "Properties",
        "FileInputStream",
        "FileNotFoundException",
        "File",
        "IOException",
        "Boolean",
        "InputStream"
      ],
      "apicalls": [
        "load",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.util.Properties.load(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "util",
        "found",
        "java",
        "exception",
        "properties",
        "file",
        "io",
        "stream",
        "exists",
        "input",
        "load",
        "boolean"
      ]
    },
    {
      "method": "append@195",
      "body": "/** \n * Appends the character sequence  {@code csq} to this writer's {@code StringBuffer}. This method works the same way as  {@code StringWriter.write(csq.toString())}. If  {@code csq} is {@code null}, then the string \"null\" is written to the target stream.\n * @param csq the character sequence appended to the target.\n * @return this writer.\n */\n@Override public StringWriter append(CharSequence csq){\n  if (null == csq) {\n    write(TOKEN_NULL);\n  }\n else {\n    write(csq.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "CharSequence"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.CharSequence.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "StringWriter",
      "file": "./java_projects/libcore_1/luni/src/main/java/java/io/StringWriter.java",
      "types": [
        "StringBuffer",
        "String",
        "CharSequence"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.CharSequence.toString()",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "sequence",
        "char",
        "buffer",
        "append",
        "string",
        "java"
      ]
    },
    {
      "method": "hashCode@245",
      "body": "/** \n * Returns the hash code value for this <code>SimpleType</code> instance. The hash code of a <code>SimpleType</code> instance is the the hash code of the string value returned by the  {@link OpenType#getClassName() getClassName} method.<p> As <code>SimpleType</code> instances are immutable, the hash code for this instance is calculated once, on the first call to <code>hashCode</code>, and then the same value is returned for subsequent calls.\n * @return  the hash code value for this <code>SimpleType</code> instance\n */\npublic int hashCode(){\n  if (myHashCode == null) {\n    myHashCode=Integer.valueOf(this.getClassName().hashCode());\n  }\n  return myHashCode.intValue();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.valueOf(int)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/management/openmbean/SimpleType.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "hashCode",
        "intValue",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.hashCode()",
            "java.lang.Integer.valueOf(int)",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": [
        "code",
        "java",
        "lang",
        "int",
        "value",
        "hash",
        "integer",
        "string"
      ]
    },
    {
      "method": "remove@153",
      "body": "public V remove(Object k){\n  clean();\n  Reference<V> ref=back.remove(k);\n  return ((ref == null) ? null : (ref.get()));\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.ref.ReferenceQueue<Tau_T>.poll()",
                "_throws": [],
                "_returns": "java.lang.ref.Reference",
                "node": "DAPICall"
              }
            ]
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
            "_throws": [],
            "_returns": "Tau_V",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.ref.Reference<Tau_T>.get()",
            "_throws": [],
            "_returns": "Tau_T",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "V",
      "file": "./java_projects/Custom-Salem/src/haven/CacheMap.java",
      "types": [
        "Reference",
        "Object",
        "Map",
        "ReferenceQueue"
      ],
      "apicalls": [
        "remove",
        "get",
        "poll"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ref.ReferenceQueue<Tau_T>.poll()",
            "java.lang.ref.ReferenceQueue<Tau_T>.poll()",
            "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
            "java.lang.ref.Reference<Tau_T>.get()"
          ]
        }
      ],
      "keywords": [
        "ref",
        "get",
        "java",
        "remove",
        "lang",
        "reference",
        "object",
        "queue",
        "map",
        "util",
        "poll"
      ]
    },
    {
      "method": "setChanged@70",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object>.ConcurrentHashMap<String,Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/archaius/archaius-core/src/test/java/com/netflix/config/PollingSourceTest.java",
      "body": "public synchronized void setChanged(String content){\n  changed=new ConcurrentHashMap<String,Object>();\n  setContent(content,changed);\n}\n",
      "types": [
        "Map",
        "ConcurrentHashMap",
        "Object",
        "String"
      ],
      "apicalls": [
        "put",
        "trim",
        "split"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object>.ConcurrentHashMap<String,Object>()",
            "java.lang.String.split(java.lang.String)",
            "java.lang.String.trim()",
            "java.lang.String.split(java.lang.String)",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "object",
        "hash",
        "put",
        "map",
        "split",
        "java",
        "concurrent",
        "lang",
        "trim",
        "string"
      ]
    },
    {
      "method": "testFailureAddKeyWithoutValue@141",
      "body": "public void testFailureAddKeyWithoutValue() throws IOException {\n  if (skip)   return;\n  DataOutputStream dos=writer.prepareAppendKey(-1);\n  dos.write(\"key0\".getBytes());\n  try {\n    closeOutput();\n    fail(\"Cannot add only a key without a value. \");\n  }\n catch (  IllegalStateException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.FilterOutputStream.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/test/org/apache/hadoop/io/file/tfile/TestTFileStreams.java",
      "types": [
        "IOException",
        "FilterOutputStream",
        "String",
        "Byte"
      ],
      "apicalls": [
        "getBytes",
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.io.FilterOutputStream.write(byte[])"
          ]
        }
      ],
      "keywords": [
        "write",
        "string",
        "byte",
        "get",
        "bytes",
        "io",
        "output",
        "lang",
        "exception",
        "stream",
        "java",
        "filter"
      ]
    },
    {
      "method": "ClassifyTab@26",
      "body": "public ClassifyTab(){\n  validatorCombo=new ComboList<Validator>(\"Choose Validators\",getEngine().getValidators());\n  analyzerCombo=new ComboList<IAnalyzer>(\"Choose Analyzer\",getEngine().getAnalyzers(),1);\n  classifierCombo=new ComboList<IClassifier>(\"Choose Classifier\",getEngine().getClassifiers(),1);\n  buildGui();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.GridBagLayout.GridBagLayout()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Insets.Insets(int,int,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/spaska/src/main/java/spaska/gui/ClassifyTab.java",
      "types": [
        "Integer",
        "GridBagLayout",
        "Insets"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.GridBagLayout.GridBagLayout()",
            "java.awt.Insets.Insets(int,int,int,int)"
          ]
        }
      ],
      "keywords": [
        "bag",
        "awt",
        "integer",
        "grid",
        "layout",
        "insets",
        "java"
      ]
    },
    {
      "method": "getLanguages@344",
      "body": "/** \n * @return list of languages supported by the application\n */\npublic ArrayList getLanguages(){\n  ArrayList list=new ArrayList();\n  list.add(new Language(\"EN\",\"English\"));\n  return list;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "ArrayList",
      "file": "./java_projects/oswing/srcdemo/demo48/ClientApplication.java",
      "types": [
        "Boolean",
        "Object",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "java",
        "boolean",
        "array",
        "object",
        "add"
      ]
    },
    {
      "method": "runSuccessCase@63",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.contains(java.lang.CharSequence)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform/products/greg/modules/integration/registry/tests/src/test/java/org/wso2/carbon/registry/metadata/test/service/ServiceEditTestCase.java",
      "body": "@Test(groups={\"wso2.greg.service.b\"}) public void runSuccessCase(){\n  log.debug(\"Running SuccessCase\");\n  addServicesServiceStub=TestUtils.getAddServicesServiceStub(loggedInSessionCookie);\n  resourceAdminServiceStub=TestUtils.getResourceAdminServiceStub(loggedInSessionCookie);\n  String resourceName=\"SimpleStockQuote.xml\";\n  String resourceNameUpdated=\"SimpleStockQuote-updated.xml\";\n  String serviceName=\"SimpleStockQuoteService\";\n  String wsdlName=serviceName + \".wsdl\";\n  String wsdlNamespacePath=\"samples/services/\";\n  String resource=frameworkPath + File.separator + \"..\"+ File.separator+ \"..\"+ File.separator+ \"..\"+ File.separator+ \"src\"+ File.separator+ \"test\"+ File.separator+ \"java\"+ File.separator+ \"resources\"+ File.separator+ resourceName;\n  try {\n    addServicesServiceStub.addService(ServiceAddTestCase.fileReader(resource));\n    String textContent=resourceAdminServiceStub.getTextContent(servicePath + wsdlNamespacePath + serviceName);\n    if (textContent.indexOf(\"http://services.samples\") != -1) {\n      log.info(\"service content found\");\n    }\n else {\n      log.error(\"service content not found\");\n      fail(\"service content not found\");\n    }\n    String resourceUpdated=frameworkPath + File.separator + \"..\"+ File.separator+ \"..\"+ File.separator+ \"..\"+ File.separator+ \"src\"+ File.separator+ \"test\"+ File.separator+ \"java\"+ File.separator+ \"resources\"+ File.separator+ resourceNameUpdated;\n    addServicesServiceStub.addService(ServiceAddTestCase.fileReader(resourceUpdated));\n    String textContentUpdated=resourceAdminServiceStub.getTextContent(servicePath + wsdlNamespacePath + serviceName);\n    if (textContentUpdated.indexOf(\"SimpleStockQuoteService Description Updated\") != -1) {\n      log.info(\"service content found\");\n    }\n else {\n      log.error(\"service content not found\");\n      fail(\"service content not found\");\n    }\n    System.out.println(servicePath + wsdlNamespacePath + serviceName);\n    resourceAdminServiceStub.delete(servicePath + wsdlNamespacePath + serviceName);\n    try {\n      if (isResourceExist(loggedInSessionCookie,servicePath + wsdlNamespacePath,serviceName,resourceAdminServiceStub)) {\n        log.error(\"Resource not deleted from the registry\");\n        fail(\"Resource not deleted from the registry\");\n      }\n else {\n        log.info(\"Resource successfully deleted from the registry\");\n      }\n    }\n catch (    Exception re) {\n      if (re.getMessage().contains(\"Resource does not exist at path\")) {\n        if (isResourceExist(loggedInSessionCookie,TRUNK,\"\",resourceAdminServiceStub)) {\n          log.error(\"Collection hierarchy not deleted from the registry\");\n          fail(\"Collection hierarchy not deleted from the registry\");\n        }\n else {\n          log.info(\"Collection hierarchy successfully deleted from the registry\");\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    fail(\"Unable to get text content \" + e);\n    log.error(\" : \" + e.getMessage());\n  }\n}\n",
      "types": [
        "Throwable",
        "String",
        "CharSequence",
        "Boolean",
        "Integer",
        "PrintStream"
      ],
      "apicalls": [
        "indexOf",
        "contains",
        "println",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "println",
        "java",
        "integer",
        "index",
        "lang",
        "throwable",
        "boolean",
        "string",
        "char",
        "io",
        "message",
        "get",
        "contains",
        "sequence",
        "print",
        "stream"
      ]
    },
    {
      "method": "run@50",
      "body": "/** \n * Executes the item usage\n */\npublic void run(){\n  String[] data=new String[m_details.length - 1];\n  for (int i=1; i < m_details.length; i++)   data[i - 1]=m_details[i];\n  if (useItem(m_player,Integer.parseInt(m_details[0]),data) && !GameServer.getServiceManager().getItemDatabase().getItem(Integer.parseInt(m_details[0])).getName().contains(\"Rod\")) {\n    m_player.getBag().removeItem(Integer.parseInt(m_details[0]),1);\n    m_player.getTcpSession().write(\"Ir\" + m_details[0] + \",\"+ 1);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              },
              {
                "_call": "$NOT$java.lang.Integer.parseInt(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/PocketMonstersOnline/Server/src/org/pokenet/server/backend/ItemProcessor.java",
      "types": [
        "NumberFormatException",
        "String",
        "Integer"
      ],
      "apicalls": [
        "parseInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "$NOT$java.lang.Integer.parseInt(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "$NOT$java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "format",
        "parse",
        "number",
        "int",
        "string",
        "integer",
        "lang",
        "exception",
        "java"
      ]
    },
    {
      "method": "getUtilDate@291",
      "body": "public java.util.Date getUtilDate(String table,String column) throws SQLException {\n  Timestamp ts=getTimestamp(table,column);\n  return ts != null ? new java.util.Date(ts.getTime()) : null;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Timestamp.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "java.util.Date",
      "file": "./java_projects/cayenne/build-tools/cayenne-test-utilities/src/main/java/org/apache/cayenne/test/jdbc/DBHelper.java",
      "types": [
        "Date",
        "Timestamp",
        "Long"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Timestamp.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "sql",
        "timestamp",
        "get",
        "time",
        "util",
        "date",
        "long",
        "java"
      ]
    },
    {
      "method": "draw@61",
      "body": "public void draw(){\n  try {\n    if (this.gc.isDisposed() == true)     this.gc=new GC(this.parent);\n    System.out.println(\"MetShpBase color: \" + this.color.toString());\n    this.gc.setBackground(this.color);\n    this.gc.setAlpha(255);\n    this.gc.fillPolygon(this.shape);\n    this.tryDispose();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/vopt-cuda/src/MetricShapeBase.java",
      "types": [
        "PrintStream",
        "Throwable",
        "Character"
      ],
      "apicalls": [
        "println",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "lang",
        "println",
        "character",
        "print",
        "io",
        "stream",
        "trace",
        "throwable",
        "java",
        "stack"
      ]
    },
    {
      "method": "reordered@270",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Container.removeAll()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.GridBagLayout.GridBagLayout()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Window.pack()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fiji/src-plugins/VIB_/src/main/java/vib/Points_Dialog.java",
      "body": "public void reordered(){\n  panel.update();\n}\n",
      "types": [
        "Window",
        "Container",
        "GridBagLayout",
        "LayoutManager"
      ],
      "apicalls": [
        "pack",
        "setLayout",
        "removeAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.removeAll()",
            "java.awt.GridBagLayout.GridBagLayout()",
            "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "java.awt.Window.pack()"
          ]
        }
      ],
      "keywords": [
        "pack",
        "set",
        "java",
        "bag",
        "window",
        "layout",
        "awt",
        "manager",
        "remove",
        "container",
        "grid"
      ]
    },
    {
      "method": "addAllToBag@1030",
      "formalParam": [
        "ObjectStoreBag",
        "Collection<Integer>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Exception.Exception()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.fillInStackTrace()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/intermine/intermine/objectstore/main/src/org/intermine/objectstore/intermine/ObjectStoreWriterInterMineImpl.java",
      "body": "/** \n * {@inheritDoc}\n */\npublic void addAllToBag(ObjectStoreBag osb,Collection<Integer> coll) throws ObjectStoreException {\n  try {\n    Connection c=null;\n    try {\n      c=getConnection();\n      addAllToBagWithConnection(c,osb,coll);\n    }\n  finally {\n      releaseConnection(c);\n    }\n  }\n catch (  SQLException e) {\n    throw new ObjectStoreException(\"Could not get connection to database\",e);\n  }\n}\n",
      "types": [
        "Exception",
        "Throwable"
      ],
      "apicalls": [
        "fillInStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Exception.Exception()",
            "java.lang.Throwable.fillInStackTrace()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "trace",
        "fill",
        "stack",
        "throwable",
        "java",
        "lang"
      ]
    },
    {
      "method": "getFieldIndex@91",
      "body": "@Override public int getFieldIndex(String field){\n  return FIELD_MAP.get(getClass()).get(field);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Integer>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.Integer>",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/gora/gora-core/src/main/java/org/apache/gora/persistency/impl/PersistentBase.java",
      "types": [
        "String",
        "Map",
        "Class",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.Integer>>.get(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "object",
        "class",
        "map",
        "util",
        "java",
        "get"
      ]
    },
    {
      "method": "parse@53",
      "body": "public <T extends TakstEntity>List<T> parse(FixedLengthParserConfiguration<T> configuration,Class<T> type) throws Exception {\n  logger.debug(\"Parsing file=\" + configuration.getFilename());\n  File file=TakstParser.getFileByName(configuration.getFilename(),input);\n  LineIterator lines=FileUtils.lineIterator(file,FILE_ENCODING);\n  List<T> results=Lists.newArrayList();\n  int count=0;\n  while (lines.hasNext()) {\n    count++;\n    String line=lines.nextLine();\n    if (line.trim().length() == 0) {\n      continue;\n    }\n    T entity;\n    try {\n      entity=type.newInstance();\n    }\n catch (    Exception e) {\n      throw new RuntimeException(\"Entities should have excatly one zero argument constructor.\",e);\n    }\n    for (int fieldNo=0; fieldNo < configuration.getNumberOfFields(); fieldNo++) {\n      if (configuration.getLength(fieldNo) > 0) {\n        int offset=configuration.getOffset(fieldNo);\n        int length=configuration.getLength(fieldNo);\n        String value=line.substring(offset,offset + length);\n        value=StringUtils.trimToNull(value);\n        configuration.setFieldValue(entity,fieldNo,value);\n      }\n    }\n    results.add(entity);\n  }\n  logger.debug(\"Number of lines in file. lineCount=\" + count + \" file=\"+ configuration.getFilename()+ \" resultCount=\"+ results.size());\n  return results;\n}\n",
      "formalParam": [
        "FixedLengthParserConfiguration<T>",
        "Class<T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class<Tau_T>.newInstance()",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException"
            ],
            "_returns": "Tau_T",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "List<T>",
      "file": "./java_projects/sdm/dodi/data-manager/src/main/java/com/trifork/stamdata/importer/jobs/takst/FixedLengthFileParser.java",
      "types": [
        "Integer",
        "InstantiationException",
        "Class",
        "Boolean",
        "String",
        "List",
        "IllegalAccessException"
      ],
      "apicalls": [
        "length",
        "substring",
        "newInstance",
        "trim",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.Class<Tau_T>.newInstance()",
            "java.lang.String.substring(int,int)",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "string",
        "length",
        "exception",
        "list",
        "access",
        "new",
        "add",
        "instantiation",
        "lang",
        "illegal",
        "util",
        "substring",
        "boolean",
        "class",
        "integer",
        "java",
        "instance",
        "trim"
      ]
    },
    {
      "method": "initDefaults@38",
      "body": "/** \n * @generated\n */\npublic static void initDefaults(IPreferenceStore store){\n  String key=CompositeStructureDiagramEditPart.MODEL_ID + \"_Collaboration\";\n  store.setDefault(PreferenceConstantHelper.getElementConstant(key,PreferenceConstantHelper.WIDTH),40);\n  store.setDefault(PreferenceConstantHelper.getElementConstant(key,PreferenceConstantHelper.HEIGHT),40);\n  Map<String,Boolean> map=getStaticCompartmentVisibilityPreferences();\n  for (  String name : map.keySet()) {\n    String preferenceName=PreferenceConstantHelper.getLabelElementConstant(key,name,PreferenceConstantHelper.COMPARTMENT_VISIBILITY);\n    store.setDefault(preferenceName,map.get(name));\n  }\n  map=getStaticCompartmentTitleVisibilityPreferences();\n  for (  String name : map.keySet()) {\n    String preferenceName=PreferenceConstantHelper.getLabelElementConstant(key,name,PreferenceConstantHelper.COMPARTMENT_NAME_VISIBILITY);\n    store.setDefault(preferenceName,map.get(name));\n  }\n}\n",
      "formalParam": [
        "IPreferenceStore"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.Boolean>.TreeMap<String,Boolean>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.keySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.Boolean>.TreeMap<String,Boolean>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.keySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ju4pa/org.eclipse.papyrus.uml.diagram.composite/src/org/eclipse/papyrus/uml/diagram/composite/preferences/CollaborationPreferencePage.java",
      "types": [
        "TreeMap",
        "Boolean",
        "Map",
        "Set",
        "Object",
        "String"
      ],
      "apicalls": [
        "keySet",
        "put",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeMap<java.lang.String,java.lang.Boolean>.TreeMap<String,Boolean>()",
            "java.util.TreeMap<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)",
            "java.util.Map<java.lang.String,java.lang.Boolean>.keySet()",
            "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
            "java.util.TreeMap<java.lang.String,java.lang.Boolean>.TreeMap<String,Boolean>()",
            "java.util.TreeMap<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)",
            "java.util.Map<java.lang.String,java.lang.Boolean>.keySet()",
            "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "boolean",
        "key",
        "set",
        "string",
        "get",
        "util",
        "java",
        "put",
        "tree",
        "object"
      ]
    },
    {
      "method": "createInstance@197",
      "body": "public static GReference createInstance(MatchResult match,int grp){\n  if (match.length(grp) == 0)   throw new IllegalArgumentException(\"arg name cannot be an empty string\");\n  if (Character.isDigit(match.charAt(0,grp))) {\n    try {\n      return new IntReference(Integer.parseInt(match.group(grp)));\n    }\n catch (    NumberFormatException e) {\n      throw new IllegalArgumentException(\"illegal arg name, starts with digit but is not a number\");\n    }\n  }\n  return new StringReference((match.group(grp)));\n}\n",
      "formalParam": [
        "MatchResult",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Character.isDigit(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "GReference",
      "file": "./java_projects/ioke/src/ikj/main/org/jregex/PerlSubstitution.java",
      "types": [
        "Integer",
        "Character",
        "String",
        "Boolean",
        "NumberFormatException"
      ],
      "apicalls": [
        "isDigit",
        "parseInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Character.isDigit(char)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Character.isDigit(char)"
          ]
        }
      ],
      "keywords": [
        "digit",
        "java",
        "boolean",
        "string",
        "number",
        "lang",
        "format",
        "parse",
        "exception",
        "int",
        "character",
        "integer"
      ]
    },
    {
      "method": "toArray@464",
      "body": "/** \n * Returns an array containing all of the elements in this queue, in proper sequence. <p>The returned array will be \"safe\" in that no references to it are maintained by this queue.  (In other words, this method must allocate a new array).  The caller is thus free to modify the returned array. <p>This method acts as bridge between array-based and collection-based APIs.\n * @return an array containing all of the elements in this queue\n */\npublic Object[] toArray(){\n  final E[] items=this.items;\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] a=new Object[count];\n    int k=0;\n    int i=takeIndex;\n    while (k < count) {\n      a[k++]=items[i];\n      i=inc(i);\n    }\n    return a;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Object[]",
      "file": "./java_projects/classpath/external/jsr166/java/util/concurrent/ArrayBlockingQueue.java",
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "lock",
        "unlock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantLock.lock()",
            "java.util.concurrent.locks.ReentrantLock.unlock()"
          ]
        }
      ],
      "keywords": [
        "lock",
        "java",
        "util",
        "concurrent",
        "unlock",
        "locks",
        "reentrant"
      ]
    },
    {
      "method": "testFailedIntent@429",
      "body": "public void testFailedIntent(){\n  Map<String,Object> intents=new HashMap<String,Object>();\n  intents.put(\"A\",new AbstractFeature(){\n  }\n);\n  final IntentMap intentMap=new IntentMap();\n  intentMap.setIntents(intents);\n  IMocksControl control=EasyMock.createNiceControl();\n  BundleContext dswContext=control.createMock(BundleContext.class);\n  BundleContext callingContext=control.createMock(BundleContext.class);\n  List<AbstractFeature> features=new ArrayList<AbstractFeature>();\n  AbstractEndpointFactory factory=control.createMock(AbstractEndpointFactory.class);\n  control.replay();\n  RemoteServiceAdminCore dp=new RemoteServiceAdminCore(dswContext);\n  PojoConfigurationTypeHandler p=new PojoConfigurationTypeHandler(dswContext,handlerProps){\n    @Override IntentMap getIntentMap(    BundleContext callingContext){\n      return intentMap;\n    }\n  }\n;\n  Map<String,Object> props=new HashMap<String,Object>();\n  props.put(\"osgi.remote.requires.intents\",\"A B\");\n  try {\n    p.applyIntents(dswContext,callingContext,features,factory,props);\n    fail(\"applyIntents() should have thrown an exception as there was an unsatisfiable intent\");\n  }\n catch (  IntentUnsatifiedException iue) {\n    assertEquals(\"B\",iue.getIntent());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cxf-dosgi/dsw/cxf-dsw/src/test/java/org/apache/cxf/dosgi/dsw/handlers/PojoConfigurationTypeHandlerTest.java",
      "types": [
        "Map",
        "Object",
        "HashMap",
        "String",
        "ArrayList"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "java",
        "map",
        "hash",
        "util",
        "string",
        "list",
        "array",
        "put"
      ]
    },
    {
      "method": "showTop@888",
      "body": "public void showTop(CommandSender viewing,int amount){\n  LinkedHashMap<String,Double> Ranking=iConomy.Accounts.ranking(amount);\n  int count=1;\n  Messaging.send(viewing,this.Template.parse(\"top.opening\",new Object[]{\"+amount,+a\"},new Object[]{Integer.valueOf(amount)}));\n  if ((Ranking == null) || (Ranking.isEmpty())) {\n    Messaging.send(viewing,this.Template.color(\"top.empty\"));\n    return;\n  }\n  for (  String account : Ranking.keySet()) {\n    Double balance=(Double)Ranking.get(account);\n    Messaging.send(viewing,this.Template.parse(\"top.line\",new String[]{\"+i,+number\",\"+player,+name,+n\",\"+balance,+b\"},new Object[]{Integer.valueOf(count),account,iConomy.format(balance.doubleValue())}));\n    count++;\n  }\n}\n",
      "formalParam": [
        "CommandSender",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Double>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.LinkedHashMap<java.lang.String,java.lang.Double>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/iConomy/src/com/iConomy/entity/Players.java",
      "types": [
        "LinkedHashMap",
        "Boolean",
        "Set",
        "String",
        "Double",
        "HashMap"
      ],
      "apicalls": [
        "keySet",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Double>.isEmpty()",
            "java.util.LinkedHashMap<java.lang.String,java.lang.Double>.keySet()"
          ]
        }
      ],
      "keywords": [
        "key",
        "linked",
        "string",
        "set",
        "java",
        "map",
        "util",
        "empty",
        "double",
        "hash",
        "boolean"
      ]
    },
    {
      "method": "setSelectionInterval@2465",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/JTree.java",
      "body": "/** \n * Selects the nodes between index0 and index1, inclusive.\n * @param index0  an integer specifying a display row, where 0 is thefirst row in the display\n * @param index1  an integer specifying a second display row\n */\npublic void setSelectionInterval(int index0,int index1){\n  TreePath[] paths=getPathBetweenRows(index0,index1);\n  this.getSelectionModel().setSelectionPaths(paths);\n}\n",
      "types": [
        "Math",
        "Integer"
      ],
      "apicalls": [
        "max",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "math",
        "max",
        "integer",
        "java",
        "min",
        "lang"
      ]
    },
    {
      "method": "loadClasses@77",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/lang/instrument/ParallelTransformerLoaderApp.java",
      "body": "public static void loadClasses(int index){\n  ClassLoader loader=ParallelTransformerLoaderAgent.getClassLoader();\n  try {\n    Class.forName(\"TestClass\" + index,true,loader);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "types": [
        "String",
        "Class",
        "ClassLoader",
        "Boolean",
        "ClassNotFoundException",
        "Throwable"
      ],
      "apicalls": [
        "forName",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "class",
        "print",
        "lang",
        "loader",
        "java",
        "string",
        "trace",
        "throwable",
        "stack",
        "name",
        "exception",
        "found",
        "boolean"
      ]
    },
    {
      "method": "deepCopy@7808",
      "body": "public modifyMonitorItemToHosts_args deepCopy(){\n  return new modifyMonitorItemToHosts_args(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "modifyMonitorItemToHosts_args",
      "file": "./java_projects/cloumon/src/thrift/gen-java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "ArrayList",
        "Boolean",
        "List",
        "String"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "boolean",
        "array",
        "util",
        "add",
        "string",
        "java"
      ]
    },
    {
      "method": "nextValue@330",
      "body": "/** \n * Get the next value. The value can be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.\n * @throws JSONException If syntax error.\n * @return An object.\n */\npublic Object nextValue() throws JSONException {\n  char c=nextClean();\n  String s;\nswitch (c) {\ncase '\"':\ncase '\\'':\n    return nextString(c);\ncase '{':\n  back();\nreturn new JSONObject(this);\ncase '[':\ncase '(':\nback();\nreturn new JSONArray(this);\n}\nStringBuffer sb=new StringBuffer();\nwhile (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\nsb.append(c);\nc=next();\n}\nback();\ns=sb.toString().trim();\nif (s.equals(\"\")) {\nthrow syntaxError(\"Missing value\");\n}\nreturn JSONObject.stringToValue(s);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(int)",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/Challenges/3/antlapit/GlodocsAPI/src/org/json/JSONTokener.java",
      "types": [
        "Boolean",
        "String",
        "Character",
        "StringBuffer",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "equals",
        "toString",
        "indexOf",
        "trim",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.String.indexOf(int)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.String.indexOf(int)",
            "java.lang.StringBuffer.toString()",
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "lang",
        "trim",
        "boolean",
        "java",
        "index",
        "buffer",
        "string",
        "object",
        "equals",
        "append",
        "character"
      ]
    },
    {
      "method": "convertImageToARGB@62",
      "body": "/** \n * Convert an Image into a TYPE_INT_ARGB BufferedImage. If the image is already of this type, the original image is returned unchanged.\n * @param image the image to convert\n * @return the converted image\n */\npublic static BufferedImage convertImageToARGB(Image image){\n  if (image instanceof BufferedImage && ((BufferedImage)image).getType() == BufferedImage.TYPE_INT_ARGB)   return (BufferedImage)image;\n  BufferedImage p=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);\n  Graphics2D g=p.createGraphics();\n  g.drawImage(image,0,0,null);\n  g.dispose();\n  return p;\n}\n",
      "formalParam": [
        "Image"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.BufferedImage.getType()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.Image.getHeight(java.awt.image.ImageObserver)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.image.BufferedImage.createGraphics()",
            "node": "DAPICall",
            "_returns": "java.awt.Graphics2D",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.dispose()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "BufferedImage",
      "file": "./java_projects/open-bluedragon/src/com/jhlabs/image/ImageUtils.java",
      "types": [
        "Graphics2D",
        "Graphics",
        "ImageObserver",
        "Integer",
        "Image",
        "BufferedImage",
        "Boolean"
      ],
      "apicalls": [
        "dispose",
        "getWidth",
        "getType",
        "createGraphics",
        "drawImage",
        "getHeight"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.BufferedImage.getType()",
            "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "java.awt.Image.getHeight(java.awt.image.ImageObserver)",
            "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "java.awt.image.BufferedImage.createGraphics()",
            "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
            "java.awt.Graphics.dispose()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "width",
        "graphics",
        "java",
        "height",
        "buffered",
        "image",
        "observer",
        "draw",
        "type",
        "integer",
        "dispose",
        "get",
        "d",
        "create",
        "awt",
        "graphics2"
      ]
    },
    {
      "method": "testParseWithWrongMimeType@93",
      "body": "public void testParseWithWrongMimeType() throws Exception {\n  URL url=new URL(\"http://www.example.org\");\n  Resource rep=createMock(Resource.class);\n  memory=createMock(Memory.class);\n  consumer=new RDFParsingConsumer();\n  consumer.setMemory(memory);\n  consumer.setController(controller);\n  consumer.configure(self);\n  Map<String,List<String>> headers=addHeaders(null,\"Content-Type\",\"test/html\");\n  task=new URLTaskImpl(url);\n  Response result=createResult(\"http://www.example.org\",headers,\"valid.n3\",\"RDF/XML\");\n  replay(memory);\n  consumer.consume(task,result);\n  verify(memory);\n  assertNull(result.getContext(AbstractRDFConsumer.RDF_MODEL));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.net.MalformedURLException"
            ]
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)",
            "node": "DAPICall",
            "_returns": "java.util.List<java.lang.String>",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/slug/src/tests/com/ldodds/slug/http/rdf/RDFParsingConsumerTest.java",
      "types": [
        "String",
        "ArrayList",
        "MalformedURLException",
        "Map",
        "HashMap",
        "List",
        "Boolean",
        "URL"
      ],
      "apicalls": [
        "put",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)"
          ]
        }
      ],
      "keywords": [
        "array",
        "list",
        "boolean",
        "exception",
        "net",
        "malformed",
        "hash",
        "url",
        "map",
        "util",
        "string",
        "java",
        "add",
        "put"
      ]
    },
    {
      "method": "testSoutp@83",
      "body": "public void testSoutp(){\n  paremeterless();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.contains(java.lang.CharSequence)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/kotlin/idea/tests/org/jetbrains/jet/plugin/codeInsight/LiveTemplatesTest.java",
      "types": [
        "Boolean",
        "CharSequence",
        "Integer",
        "String"
      ],
      "apicalls": [
        "indexOf",
        "substring",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "contains",
        "string",
        "sequence",
        "java",
        "substring",
        "integer",
        "char",
        "boolean",
        "index"
      ]
    },
    {
      "method": "getFeatureReader@189",
      "body": "/** \n * Use the spatial index if available and adds a small optimization: if no attributes are going to be read, don't uselessly open and read the dbf file.\n */\n@Override public FeatureReader<SimpleFeatureType,SimpleFeature> getFeatureReader(final Query query) throws DataStoreException {\n  final SimpleFeatureType originalSchema=getFeatureType();\n  final Name queryTypeName=query.getTypeName();\n  final Name[] queryPropertyNames=query.getPropertyNames();\n  final Hints queryHints=query.getHints();\n  final double[] queryRes=query.getResolution();\n  Filter queryFilter=query.getFilter();\n  final CoordinateReferenceSystem reproject=query.getCoordinateSystemReproject();\n  final boolean read3D=(reproject == null || (reproject != null && CRS.getVerticalCRS(reproject) != null));\n  if (queryFilter == Filter.EXCLUDE) {\n    return GenericEmptyFeatureIterator.createReader(originalSchema);\n  }\n  if (!QueryBuilder.isNaturalSortBy(query.getSortBy())) {\n    throw new DataStoreException(\"The ShapeFileDatastore does not support sortby query\");\n  }\n  List<PropertyDescriptor> readProperties;\n  List<PropertyDescriptor> returnedProperties;\n  if (queryPropertyNames == null) {\n    readProperties=new ArrayList<PropertyDescriptor>(originalSchema.getDescriptors());\n    returnedProperties=readProperties;\n  }\n else {\n    returnedProperties=new ArrayList<PropertyDescriptor>(queryPropertyNames.length);\n    for (    Name n : queryPropertyNames) {\n      final AttributeDescriptor property=originalSchema.getDescriptor(n);\n      if (property == null) {\n        throw new DataStoreException(\"Query requieres property : \" + n + \" which is not present in feature type :\\n\"+ originalSchema);\n      }\n      returnedProperties.add(property);\n    }\n    final FilterAttributeExtractor fae=new FilterAttributeExtractor();\n    queryFilter.accept(fae,null);\n    final Set<Name> filterPropertyNames=fae.getAttributeNameSet();\n    if (filterPropertyNames.isEmpty()) {\n      readProperties=returnedProperties;\n    }\n else {\n      final Set<Name> attributes=new LinkedHashSet<Name>(filterPropertyNames);\n      attributes.addAll(Arrays.asList(queryPropertyNames));\n      readProperties=new ArrayList<PropertyDescriptor>(attributes.size());\n      for (      Name n : attributes) {\n        final AttributeDescriptor property=originalSchema.getDescriptor(n);\n        if (property == null) {\n          throw new DataStoreException(\"Query filter requieres property : \" + n + \" which is not present in feature type :\\n\"+ originalSchema);\n        }\n        readProperties.add(property);\n      }\n      if (readProperties.size() == returnedProperties.size() && readProperties.containsAll(returnedProperties)) {\n        readProperties=returnedProperties;\n      }\n    }\n  }\n  final SimpleFeatureType readSchema;\n  final FeatureReader reader;\n  try {\n    final Name[] readPropertyNames=new Name[readProperties.size()];\n    for (int i=0; i < readPropertyNames.length; i++) {\n      readPropertyNames[i]=readProperties.get(i).getName();\n    }\n    readSchema=(SimpleFeatureType)FeatureTypeUtilities.createSubType(originalSchema,readPropertyNames);\n    if (queryFilter instanceof BBOX) {\n      final Envelope bbox=(Envelope)queryFilter.accept(ExtractBoundsFilterVisitor.BOUNDS_VISITOR,new JTSEnvelope2D());\n      final boolean loose=(queryFilter instanceof LooseBBox);\n      queryFilter=Filter.INCLUDE;\n      reader=createFeatureReader(getBBoxAttributesReader(readProperties,bbox,loose,queryHints,read3D,queryRes),readSchema,queryHints);\n    }\n else     if (queryFilter instanceof Id && ((Id)queryFilter).getIdentifiers().isEmpty()) {\n      return GenericEmptyFeatureIterator.createReader(getFeatureType());\n    }\n else {\n      reader=createFeatureReader(getAttributesReader(readProperties,queryFilter,read3D,queryRes),readSchema,queryHints);\n    }\n  }\n catch (  IOException ex) {\n    throw new DataStoreException(ex);\n  }\n  final QueryBuilder qb=new QueryBuilder(queryTypeName);\n  if (readProperties != returnedProperties) {\n    qb.setProperties(queryPropertyNames);\n  }\n  qb.setFilter(queryFilter);\n  qb.setHints(queryHints);\n  qb.setCRS(query.getCoordinateSystemReproject());\n  return handleRemaining(reader,qb.buildQuery());\n}\n",
      "formalParam": [
        "Query"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "FeatureReader<SimpleFeatureType,SimpleFeature>",
      "file": "./java_projects/geotoolkit-pending/modules/datastore/geotk-shapefile/src/main/java/org/geotoolkit/data/shapefile/indexed/IndexedShapefileDataStore.java",
      "types": [
        "Collection",
        "LinkedHashSet",
        "ArrayList",
        "Arrays",
        "List"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)",
            "java.util.Arrays.asList(T[])",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "java",
        "list",
        "arrays",
        "set",
        "array",
        "linked",
        "hash",
        "util"
      ]
    },
    {
      "method": "setBoundsOnFigure@226",
      "body": "/** \n * Updates the bounds of the figure (without invoking any event handling), and sets the layout constraint data\n * @return\n */\npublic boolean setBoundsOnFigure(boolean updateConstraint){\n  List parts=getChildren();\n  for (Iterator iter=parts.iterator(); iter.hasNext(); ) {\n    ActivityPart part=(ActivityPart)iter.next();\n    Activity activity=part.getModelElement();\n    Rectangle bounds=activity.getBounds();\n    if (isFirstManualLayout) {\n      Rectangle savedBounds=diagram.doReadCoordinates(activity);\n      if (savedBounds != null) {\n        bounds=savedBounds;\n      }\n    }\n    IFigure figure=part.getFigure();\n    if (bounds != null && figure != null && updateConstraint) {\n      delegatingLayoutManager.setXYLayoutConstraint(figure,new Rectangle(bounds.x,bounds.y,bounds.width,bounds.height));\n      activity.setBounds(bounds);\n      activity.setHasManualBounds(true);\n    }\n  }\n  isFirstManualLayout=false;\n  return true;\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/spring-ide/plugins/org.springframework.ide.eclipse.config.graph/src/org/springframework/ide/eclipse/config/graph/parts/ActivityDiagramPart.java",
      "types": [
        "Boolean",
        "List",
        "Iterator"
      ],
      "apicalls": [
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next",
        "util",
        "boolean",
        "iterator",
        "list",
        "java"
      ]
    },
    {
      "method": "shutdownWaitForCompletionDeadlock@213",
      "body": "public BAD_INV_ORDER shutdownWaitForCompletionDeadlock(Throwable t){\n  return shutdownWaitForCompletionDeadlock(CompletionStatus.COMPLETED_NO,t);\n}\n",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "BAD_INV_ORDER",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/OMGSystemException.java",
      "types": [
        "Logger",
        "Level",
        "Throwable",
        "Boolean"
      ],
      "apicalls": [
        "initCause",
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "java",
        "throwable",
        "level",
        "cause",
        "logging",
        "loggable",
        "util",
        "init",
        "boolean",
        "logger",
        "lang"
      ]
    },
    {
      "method": "Test@47",
      "body": "public Test(boolean ignore){\n  Properties props=new Properties();\n  props.put(PluginManager.PR_MULTI_INSTANCE,\"true\");\n  PluginManager.registerPlugin(Test.class);\n  PluginManager.startAzureus(PluginManager.UI_SWT,props);\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/BitMate/azureus2/src/org/gudy/azureus2/pluginsimpl/local/installer/Test.java",
      "types": [
        "Object",
        "Properties",
        "Hashtable"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "properties",
        "object",
        "java",
        "hashtable",
        "put",
        "util"
      ]
    },
    {
      "method": "remove@222",
      "body": "@Override public boolean remove(int key){\n  int m=setHash(key);\n  Lock lock=lockArray[m].writeLock();\n  lock.lock();\n  try {\n    boolean success=setArray[m].remove(key);\n    if (success) {\n      totalValues.decrementAndGet();\n    }\n    return success;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.Lock"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/SpoutAPI/src/main/java/org/spout/api/util/set/concurrent/TSyncIntHashSet.java",
      "types": [
        "Integer",
        "concurrent"
      ],
      "apicalls": [
        "writeLock",
        "unlock",
        "lock",
        "decrementAndGet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReadWriteLock.writeLock()",
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "decrement",
        "lock",
        "integer",
        "atomic",
        "concurrent",
        "read",
        "unlock",
        "util",
        "java",
        "locks",
        "get",
        "write"
      ]
    },
    {
      "method": "findBuildWrapper@26",
      "body": "public static <T extends BuildWrapper>T findBuildWrapper(Class<T> buildWrapper,BuildableItemWithBuildWrappers project){\n  DescribableList<BuildWrapper,Descriptor<BuildWrapper>> buildWrappersList=project.getBuildWrappersList();\n  for (  BuildWrapper wrapper : buildWrappersList) {\n    if (buildWrapper.isAssignableFrom(wrapper.getClass())) {\n      return buildWrapper.cast(wrapper);\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "Class<T>",
        "BuildableItemWithBuildWrappers"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.cast(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "Tau_T",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "T",
      "file": "./java_projects/Templating/src/main/java/com/attask/jenkins/BuildWrapperUtils.java",
      "types": [
        "Boolean",
        "Object",
        "Class"
      ],
      "apicalls": [
        "isAssignableFrom",
        "cast"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Class<Tau_T>.cast(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "assignable",
        "boolean",
        "cast",
        "object",
        "lang",
        "java",
        "class"
      ]
    },
    {
      "method": "testQuickSort3@78",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap.HashMap()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/mvel/src/test/java/org/mvel2/tests/perftests/CompiledPerformanceTests.java",
      "body": "public void testQuickSort3() throws IOException {\n  testQuickSort();\n}\n",
      "types": [
        "String",
        "HashMap",
        "File"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.String.String(java.lang.String)",
            "java.util.HashMap.HashMap()"
          ]
        }
      ],
      "keywords": [
        "util",
        "map",
        "file",
        "io",
        "lang",
        "java",
        "hash",
        "string"
      ]
    },
    {
      "method": "CheckOutItem@244",
      "body": "/** \n * Creates a new instance.\n * @param refName The name of reference.\n * @param instance The instance to handle.\n */\nCheckOutItem(String refName,Object instance){\n  this.refName=refName;\n  this.instance=instance;\n  setText(instance.toString());\n  setSelected(true);\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractButton.setText(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.AbstractButton.setSelected(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openmicroscopy/components/insight/SRC/org/openmicroscopy/shoola/env/ui/CheckoutBox.java",
      "types": [
        "Boolean",
        "AbstractButton",
        "String"
      ],
      "apicalls": [
        "setSelected",
        "setText"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractButton.setText(java.lang.String)",
            "javax.swing.AbstractButton.setSelected(boolean)"
          ]
        }
      ],
      "keywords": [
        "swing",
        "selected",
        "set",
        "boolean",
        "javax",
        "button",
        "text",
        "abstract",
        "string"
      ]
    },
    {
      "method": "paintBorder@70",
      "formalParam": [
        "Component",
        "Graphics",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Graphics2D.setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics2D.translate(int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.setColor(java.awt.Color)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.drawRoundRect(int,int,int,int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics2D.translate(int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ISAcreator/src/main/java/org/isatools/isacreator/effects/borders/RoundedBorder.java",
      "body": "public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){\n  Graphics2D g2d=(Graphics2D)g;\n  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  g2d.translate(x,y);\n  g2d.setColor(borderColor);\n  g2d.drawRoundRect(0,0,width - 2,height - 2,curveRadius,curveRadius);\n  g2d.translate(-x,-y);\n}\n",
      "types": [
        "Integer",
        "Graphics",
        "Graphics2D",
        "Object",
        "Color",
        "Key"
      ],
      "apicalls": [
        "setColor",
        "setRenderingHint",
        "drawRoundRect",
        "translate"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Graphics2D.setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
            "java.awt.Graphics2D.translate(int,int)",
            "java.awt.Graphics.setColor(java.awt.Color)",
            "java.awt.Graphics.drawRoundRect(int,int,int,int,int,int)",
            "java.awt.Graphics2D.translate(int,int)"
          ]
        }
      ],
      "keywords": [
        "draw",
        "d",
        "graphics",
        "color",
        "rendering",
        "round",
        "rect",
        "set",
        "hint",
        "graphics2",
        "key",
        "object",
        "translate",
        "awt",
        "integer",
        "java"
      ]
    },
    {
      "method": "getEntryName@687",
      "body": "/** \n * Get the ObjectName of the entry corresponding to the specified rowOid. The result of this method is only meaningful if isRegistrationRequired() yields true. <p>\n * @param rowOid The <CODE>SnmpOid</CODE> identifying the tablerow whose ObjectName we want to retrieve.\n * @return The object name of the entry.\n * @exception SnmpStatusException There is no entry with the specified<code>rowOid</code> in the table.\n */\npublic synchronized ObjectName getEntryName(SnmpOid rowOid) throws SnmpStatusException {\n  int pos=findObject(rowOid);\n  if (entrynames == null)   return null;\n  if (pos == -1 || pos >= entrynames.size())   throw new SnmpStatusException(SnmpStatusException.noSuchInstance);\n  return entrynames.elementAt(pos);\n}\n",
      "formalParam": [
        "SnmpOid"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<javax.management.ObjectName>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Vector<javax.management.ObjectName>.elementAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.management.ObjectName"
          }
        ]
      },
      "returnType": "ObjectName",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/com/sun/jmx/snmp/agent/SnmpMibTable.java",
      "types": [
        "Integer",
        "ObjectName",
        "Vector"
      ],
      "apicalls": [
        "elementAt",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<javax.management.ObjectName>.size()",
            "java.util.Vector<javax.management.ObjectName>.elementAt(int)"
          ]
        }
      ],
      "keywords": [
        "size",
        "vector",
        "java",
        "element",
        "object",
        "util",
        "name",
        "integer"
      ]
    },
    {
      "method": "setLocations@602",
      "body": "public void setLocations(Set<Location> locations){\n  List<Location> sortedLocations=Collections.checkedList(new ArrayList<Location>(),Location.class);\n  sortedLocations.addAll(locations);\n  Collections.sort(sortedLocations);\n  mLocationRangeSet=new TreeSet<LocationRange>();\n  Instruction first=null;\n  Instruction last=null;\n  for (  Location sortedLocation : sortedLocations) {\n    Instruction instr=(Instruction)sortedLocation;\n    if (first == null) {\n      first=last=instr;\n    }\n else     if (last.mNext == instr) {\n      last=instr;\n    }\n else {\n      if (last.mNext != null) {\n        last=last.mNext;\n      }\n      mLocationRangeSet.add(new LocationRangeImpl(first,last));\n      first=last=instr;\n    }\n  }\n  if (first != null && last != null) {\n    if (last.mNext != null) {\n      last=last.mNext;\n    }\n    mLocationRangeSet.add(new LocationRangeImpl(first,last));\n  }\n  mLocationRangeSet=Collections.unmodifiableSortedSet(mLocationRangeSet);\n}\n",
      "formalParam": [
        "Set<Location>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.checkedList(java.util.List,java.lang.Class)",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.sort(java.util.List)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.TreeSet<Tau_E>.TreeSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.unmodifiableSortedSet(java.util.SortedSet)",
            "node": "DAPICall",
            "_returns": "java.util.SortedSet",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/teatrove/trove/src/main/java/org/teatrove/trove/classfile/InstructionList.java",
      "types": [
        "TreeSet",
        "ArrayList",
        "Collections",
        "SortedSet",
        "List",
        "Class"
      ],
      "apicalls": [
        "checkedList",
        "sort",
        "unmodifiableSortedSet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Collections.checkedList(java.util.List,java.lang.Class)",
            "java.util.Collections.sort(java.util.List)",
            "java.util.TreeSet<Tau_E>.TreeSet()",
            "java.util.Collections.unmodifiableSortedSet(java.util.SortedSet)"
          ]
        }
      ],
      "keywords": [
        "sort",
        "set",
        "unmodifiable",
        "tree",
        "java",
        "checked",
        "class",
        "list",
        "array",
        "sorted",
        "util",
        "collections"
      ]
    },
    {
      "method": "testMultiThreadSchemaCreation@189",
      "body": "@Test public void testMultiThreadSchemaCreation() throws InterruptedException {\n  database=new ODatabaseFlat(url);\n  database.open(\"admin\",\"admin\");\n  Thread thread=new Thread(new Runnable(){\n    public void run(){\n      ODatabaseRecordThreadLocal.INSTANCE.set(database);\n      ODocument doc=new ODocument(\"NewClass\");\n      database.save(doc);\n      doc.delete();\n      database.getMetadata().getSchema().dropClass(\"NewClass\");\n      database.close();\n    }\n  }\n);\n  thread.start();\n  thread.join();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.join()",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Orient/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SchemaTest.java",
      "types": [
        "Thread",
        "InterruptedException",
        "Runnable"
      ],
      "apicalls": [
        "start",
        "join"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "java",
        "thread",
        "lang",
        "start",
        "join",
        "interrupted",
        "exception",
        "runnable"
      ]
    },
    {
      "method": "set@73",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Byte.byteValue()",
            "node": "DAPICall",
            "_returns": "byte",
            "_throws": []
          },
          {
            "_call": "java.lang.Short.shortValue()",
            "node": "DAPICall",
            "_returns": "short",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.charValue()",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/reflect/UnsafeQualifiedStaticIntegerFieldAccessorImpl.java",
      "body": "public void set(Object obj,Object value) throws IllegalArgumentException, IllegalAccessException {\n  if (isReadOnly) {\n    throwFinalFieldIllegalAccessException(value);\n  }\n  if (value == null) {\n    throwSetIllegalArgumentException(value);\n  }\n  if (value instanceof Byte) {\n    unsafe.putIntVolatile(base,fieldOffset,((Byte)value).byteValue());\n    return;\n  }\n  if (value instanceof Short) {\n    unsafe.putIntVolatile(base,fieldOffset,((Short)value).shortValue());\n    return;\n  }\n  if (value instanceof Character) {\n    unsafe.putIntVolatile(base,fieldOffset,((Character)value).charValue());\n    return;\n  }\n  if (value instanceof Integer) {\n    unsafe.putIntVolatile(base,fieldOffset,((Integer)value).intValue());\n    return;\n  }\n  throwSetIllegalArgumentException(value);\n}\n",
      "types": [
        "Short",
        "Character",
        "Byte",
        "Integer"
      ],
      "apicalls": [
        "charValue",
        "shortValue",
        "intValue",
        "byteValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Byte.byteValue()",
            "java.lang.Short.shortValue()",
            "java.lang.Character.charValue()",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": [
        "value",
        "java",
        "short",
        "character",
        "lang",
        "char",
        "int",
        "byte",
        "integer"
      ]
    },
    {
      "method": "findPeaks@340",
      "body": "public ArrayList<DifferenceOfGaussianPeak<B>> findPeaks(final Image<B> laPlace){\n  final AtomicInteger ai=new AtomicInteger(0);\n  final Thread[] threads=SimpleMultiThreading.newThreads(getNumThreads());\n  final int nThreads=threads.length;\n  final int numDimensions=laPlace.getNumDimensions();\n  final Vector<ArrayList<DifferenceOfGaussianPeak<B>>> threadPeaksList=new Vector<ArrayList<DifferenceOfGaussianPeak<B>>>();\n  for (int i=0; i < nThreads; ++i)   threadPeaksList.add(new ArrayList<DifferenceOfGaussianPeak<B>>());\n  for (int ithread=0; ithread < threads.length; ++ithread)   threads[ithread]=new Thread(new Runnable(){\n    public void run(){\n      final int myNumber=ai.getAndIncrement();\n      final ArrayList<DifferenceOfGaussianPeak<B>> myPeaks=threadPeaksList.get(myNumber);\n      final LocalizableByDimCursor<B> cursor=laPlace.createLocalizableByDimCursor();\n      final LocalNeighborhoodCursor<B> neighborhoodCursor=LocalNeighborhoodCursorFactory.createLocalNeighborhoodCursor(cursor);\n      final int[] position=new int[numDimensions];\n      final int[] dimensionsMinus2=laPlace.getDimensions();\n      for (int d=0; d < numDimensions; ++d)       dimensionsMinus2[d]-=2;\n      MainLoop:       while (cursor.hasNext()) {\n        cursor.fwd();\n        cursor.getPosition(position);\n        if (position[0] % nThreads == myNumber) {\n          for (int d=0; d < numDimensions; ++d) {\n            final int pos=position[d];\n            if (pos < 1 || pos > dimensionsMinus2[d])             continue MainLoop;\n          }\n          final B currentValue=cursor.getType().copy();\n          if (!isPeakHighEnough(currentValue))           continue;\n          neighborhoodCursor.update();\n          final SpecialPoint specialPoint=isSpecialPoint(neighborhoodCursor,currentValue);\n          if (specialPoint != SpecialPoint.INVALID)           myPeaks.add(new DifferenceOfGaussianPeak<B>(position,currentValue,specialPoint));\n          neighborhoodCursor.reset();\n        }\n      }\n      cursor.close();\n    }\n  }\n);\n  SimpleMultiThreading.startAndJoin(threads);\n  final ArrayList<DifferenceOfGaussianPeak<B>> dogPeaks=new ArrayList<DifferenceOfGaussianPeak<B>>();\n  for (  final ArrayList<DifferenceOfGaussianPeak<B>> peakList : threadPeaksList)   dogPeaks.addAll(peakList);\n  return dogPeaks;\n}\n",
      "formalParam": [
        "Image<B>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector<Tau_E>.Vector()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "ArrayList<DifferenceOfGaussianPeak<B>>",
      "file": "./java_projects/imglib/imglib1/algorithms/src/main/java/mpicbg/imglib/algorithm/scalespace/DifferenceOfGaussian.java",
      "types": [
        "ArrayList",
        "Integer",
        "Runnable",
        "concurrent",
        "Vector",
        "Thread"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
            "java.util.Vector<Tau_E>.Vector()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "java",
        "runnable",
        "vector",
        "thread",
        "integer",
        "atomic",
        "concurrent",
        "lang",
        "util",
        "list",
        "array"
      ]
    },
    {
      "method": "find@65",
      "body": "public Model find(Integer id){\n  List<Model> list=where(\"id=\" + id).fetch();\n  if (list.size() == 0)   return null;\n  return list.get(0);\n}\n",
      "formalParam": [
        "Integer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "Model",
      "file": "./java_projects/ServiceFramework/src/net/csdn/jpa/model/JPQL.java",
      "types": [
        "String",
        "Map",
        "Object",
        "Set"
      ],
      "apicalls": [
        "get",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key",
        "java",
        "map",
        "util",
        "object",
        "get",
        "set",
        "string"
      ]
    },
    {
      "method": "isMXBeanInterface@370",
      "body": "/** \n * <p>Test whether an interface is an MXBean interface. An interface is an MXBean interface if it is annotated {@link MXBean &#64;MXBean} or {@code @MXBean(true)}or if it does not have an  {@code @MXBean} annotationand its name ends with \" {@code MXBean}\".</p>\n * @param interfaceClass The candidate interface.\n * @return true if {@code interfaceClass} is an interface andmeets the conditions described.\n * @throws NullPointerException if {@code interfaceClass} is null.\n */\npublic static boolean isMXBeanInterface(Class<?> interfaceClass){\n  if (!interfaceClass.isInterface())   return false;\n  MXBean a=interfaceClass.getAnnotation(MXBean.class);\n  if (a != null)   return a.value();\n  return interfaceClass.getName().endsWith(\"MXBean\");\n}\n",
      "formalParam": [
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class<Tau_T>.isInterface()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getAnnotation(java.lang.Class)",
            "node": "DAPICall",
            "_returns": "Tau_A",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/management/JMX.java",
      "types": [
        "Boolean",
        "Class",
        "String"
      ],
      "apicalls": [
        "getName",
        "isInterface",
        "getAnnotation",
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class<Tau_T>.isInterface()",
            "java.lang.Class<Tau_T>.getAnnotation(java.lang.Class)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "class",
        "name",
        "boolean",
        "interface",
        "get",
        "annotation",
        "ends",
        "lang"
      ]
    },
    {
      "method": "testExport@27",
      "body": "public void testExport(){\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  List<List<ResultElement>> input=ExporterImplTest.getInput();\n  RowFormatter formatter=new RowFormatterImpl(\",\",true);\n  ExporterImpl exporter=new ExporterImpl(out,formatter);\n  exporter.export(input.iterator(),null,null);\n  assertEquals(getExpected(),out.toString());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/intermine/intermine/web/test/src/org/intermine/web/logic/export/ExporterImplTest.java",
      "types": [
        "ByteArrayOutputStream",
        "String"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "io",
        "array",
        "byte",
        "stream",
        "output"
      ]
    },
    {
      "method": "getSourceFiles@53",
      "body": "/** \n * Returns the CppSourceFile objects representing the generated containers.\n * @return CppSourceFile objects in a list\n */\n@Override public List<SourceFile> getSourceFiles(){\n  List<SourceFile> files=new LinkedList<SourceFile>();\n  CppSourceFileImpl file;\n  try {\n    for (    CppClass type : types) {\n      file=new CppSourceFileImpl(type.getName());\n      files.add(file.add(type));\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return files;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "List<SourceFile>",
      "file": "./java_projects/fabric/core/src/test/java/fabric/core/filegen/cpp/CppSourceFileGenerator.java",
      "types": [
        "LinkedList",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "trace",
        "linked",
        "list",
        "java",
        "print",
        "util",
        "throwable",
        "stack",
        "lang"
      ]
    },
    {
      "method": "toString@3774",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"removeMonitorItem_args(\");\n  boolean first=true;\n  sb.append(\"monitorItemId:\");\n  if (this.monitorItemId == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.monitorItemId);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/cloumon/src/thrift/gen-java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "java",
        "string",
        "lang",
        "append"
      ]
    },
    {
      "method": "test_SerializationCompatibility_cast@146",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.PriorityQueue<java.lang.Integer>.PriorityQueue<Integer>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.PriorityQueue<java.lang.String>.peek()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.sort(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/libcore/java/util/OldPriorityQueueTest.java",
      "body": "/** \n * @tests serialization/deserialization compatibility with RI.\n */\n@TestTargetNew(level=TestLevel.COMPLETE,notes=\"Verifies serialization/deserialization compatibility.\",method=\"!SerializationGolden\",args={}) public void test_SerializationCompatibility_cast() throws Exception {\n  Integer[] array={2,45,7,-12,9,23,17,1118,10,16,39};\n  List<Integer> list=Arrays.asList(array);\n  PriorityQueue<Integer> srcIntegerQueue=new PriorityQueue<Integer>(list);\n  PriorityQueue<String> destStringQueue=(PriorityQueue<String>)SerializationTester.readObject(srcIntegerQueue,SERIALIZATION_FILE_NAME);\n  Object o=destStringQueue.peek();\n  Arrays.sort(array);\n  Integer I=(Integer)o;\n  assertEquals(array[0],I);\n}\n",
      "types": [
        "Integer",
        "List",
        "Object",
        "Arrays",
        "Collection",
        "PriorityQueue",
        "String"
      ],
      "apicalls": [
        "asList",
        "peek",
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.PriorityQueue<java.lang.Integer>.PriorityQueue<Integer>(java.util.Collection)",
            "java.util.PriorityQueue<java.lang.String>.peek()",
            "java.util.Arrays.sort(java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "object",
        "collection",
        "queue",
        "peek",
        "arrays",
        "priority",
        "sort",
        "string",
        "list",
        "java"
      ]
    },
    {
      "method": "JDefinedClass@180",
      "body": "/** \n * JClass constructor\n * @param mods Modifiers for this class declaration\n * @param name Name of this class\n */\nprivate JDefinedClass(int mods,String name,JClassContainer parent,JCodeModel owner,ClassType classTypeVal){\n  super(owner);\n  if (name != null) {\n    if (name.trim().length() == 0)     throw new IllegalArgumentException(\"JClass name empty\");\n    if (!Character.isJavaIdentifierStart(name.charAt(0))) {\n      String msg=\"JClass name \" + name + \" contains illegal character\"+ \" for beginning of identifier: \"+ name.charAt(0);\n      throw new IllegalArgumentException(msg);\n    }\n    for (int i=1; i < name.length(); i++) {\n      if (!Character.isJavaIdentifierPart(name.charAt(i))) {\n        String msg=\"JClass name \" + name + \" contains illegal character \"+ name.charAt(i);\n        throw new IllegalArgumentException(msg);\n      }\n    }\n  }\n  this.classType=classTypeVal;\n  if (isInterface())   this.mods=JMods.forInterface(mods);\n else   this.mods=JMods.forClass(mods);\n  this.name=name;\n  this.outer=parent;\n}\n",
      "formalParam": [
        "int",
        "String",
        "JClassContainer",
        "JCodeModel",
        "ClassType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.isJavaIdentifierStart(char)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "node": "DAPICall",
                "_returns": "char",
                "_throws": []
              },
              {
                "_call": "java.lang.Character.isJavaIdentifierPart(char)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/codemodel/internal/JDefinedClass.java",
      "types": [
        "Character",
        "String",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "isJavaIdentifierStart",
        "trim",
        "length",
        "charAt",
        "isJavaIdentifierPart"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Character.isJavaIdentifierStart(char)",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Character.isJavaIdentifierPart(char)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "character",
        "length",
        "part",
        "boolean",
        "start",
        "integer",
        "char",
        "java",
        "lang",
        "string",
        "trim",
        "identifier"
      ]
    },
    {
      "method": "attachMouseListenerToComponent@214",
      "body": "public void attachMouseListenerToComponent(){\n  DocumentElement element=jsEngine.getDocument().getElementById(\"3246\");\n  JComponent component=SferyxUtilities.getJavaFormItemComponent(element,hTMLEditor1);\n  System.out.println(\"Adding Mouse Listener to :\" + component);\n  component.addMouseListener(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexowysiwyg/src/examples/java/ReferencingDocumentElements.java",
      "types": [
        "MouseListener",
        "PrintStream",
        "Component",
        "String"
      ],
      "apicalls": [
        "addMouseListener",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.awt.Component.addMouseListener(java.awt.event.MouseListener)"
          ]
        }
      ],
      "keywords": [
        "listener",
        "awt",
        "component",
        "mouse",
        "string",
        "println",
        "java",
        "add",
        "stream",
        "io",
        "print"
      ]
    },
    {
      "method": "singletonMap@941",
      "body": "public static <K,V>Map<K,V> singletonMap(K key,V value){\n  Map<K,V> map=new HashMap<K,V>(1);\n  map.put(key,value);\n  return unmodifiableMap(map);\n}\n",
      "formalParam": [
        "K",
        "V"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "Map<K,V>",
      "file": "./java_projects/scalagwt-gwt/user/super/com/google/gwt/emul/java/util/Collections.java",
      "types": [
        "Map",
        "Integer",
        "HashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "java",
        "integer",
        "put",
        "util",
        "hash",
        "map"
      ]
    },
    {
      "method": "enableNestloop@1159",
      "body": "/** \n * Calling methods should always revert back to enable=true at the end of querying\n * @param enableNestLoop true = enable nested loops in queries (default), false = disable\n */\npublic static void enableNestloop(Connection conn,boolean enableNestLoop) throws SQLException {\n  Statement setNestedLoopStatement=conn.createStatement();\n  if (enableNestLoop) {\n    setNestedLoopStatement.execute(\"SET enable_nestloop=true\");\n  }\n else {\n    setNestedLoopStatement.execute(\"SET enable_nestloop=false\");\n  }\n  setNestedLoopStatement.close();\n}\n",
      "formalParam": [
        "Connection",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.createStatement()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Statement"
          },
          {
            "_then": [
              {
                "_call": "java.sql.Statement.execute(java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [
              {
                "_call": "java.sql.Statement.execute(java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/agileBase/gtpb_server/src/com/gtwm/pb/model/manageData/ReportData.java",
      "types": [
        "SQLException",
        "String",
        "Connection",
        "Statement",
        "Boolean"
      ],
      "apicalls": [
        "execute",
        "close",
        "createStatement"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.execute(java.lang.String)",
            "java.sql.Statement.close()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "create",
        "string",
        "exception",
        "sql",
        "execute",
        "java",
        "close",
        "connection",
        "statement"
      ]
    },
    {
      "method": "startHandshake@446",
      "body": "public void startHandshake(HandshakeBuilder handshakedata) throws InvalidHandshakeException, InterruptedException {\n  if (handshakeComplete)   throw new IllegalStateException(\"Handshake has allready been sent.\");\n  this.handshakerequest=handshakedata;\n  channelWrite(draft.createHandshake(draft.postProcessHandshakeRequestAsClient(handshakedata),role));\n}\n",
      "formalParam": [
        "HandshakeBuilder"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.Buffer.limit()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.nio.Buffer.rewind()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          },
          {
            "_call": "java.util.concurrent.BlockingQueue<java.nio.ByteBuffer>.put(java.nio.ByteBuffer)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/XChange/xchange-core/src/main/java/com/xeiam/xchange/streaming/websocket/WebSocket.java",
      "types": [
        "InterruptedException",
        "BlockingQueue",
        "Integer",
        "Buffer",
        "ByteBuffer"
      ],
      "apicalls": [
        "put",
        "limit",
        "rewind"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.Buffer.limit()",
            "java.nio.Buffer.rewind()",
            "java.util.concurrent.BlockingQueue<java.nio.ByteBuffer>.put(java.nio.ByteBuffer)"
          ]
        }
      ],
      "keywords": [
        "nio",
        "exception",
        "java",
        "put",
        "rewind",
        "integer",
        "util",
        "limit",
        "concurrent",
        "queue",
        "buffer",
        "interrupted",
        "blocking",
        "byte"
      ]
    },
    {
      "method": "serviceAvailable@863",
      "body": "public void serviceAvailable(BeanContextServiceAvailableEvent bcssae){\nsynchronized (services) {\n    Class klass=bcssae.getServiceClass();\n    if (services.containsKey(klass))     return;\n    Iterator it=bcsChildren();\n    while (it.hasNext()) {\n      Object obj=it.next();\n      if (obj instanceof BeanContextServices)       ((BeanContextServices)obj).serviceAvailable(bcssae);\n    }\n  }\n}\n",
      "formalParam": [
        "BeanContextServiceAvailableEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/classpath/java/beans/beancontext/BeanContextServicesSupport.java",
      "types": [
        "Boolean",
        "Iterator",
        "HashMap",
        "Object"
      ],
      "apicalls": [
        "containsKey",
        "hasNext",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.containsKey(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "next",
        "boolean",
        "key",
        "java",
        "map",
        "contains",
        "iterator",
        "hash",
        "object"
      ]
    },
    {
      "method": "keySet@133",
      "body": "@Override public Set<Object> keySet(){\n  convertAll();\n  return underlying.keySet();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.Object,java.lang.Object>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Map<java.lang.Object,java.lang.Object>.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "returnType": "Set<Object>",
      "file": "./java_projects/orientdb_1/core/src/main/java/com/orientechnologies/orient/core/db/object/OLazyObjectMap.java",
      "types": [
        "Map",
        "Set",
        "Object"
      ],
      "apicalls": [
        "keySet",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.Object,java.lang.Object>.entrySet()",
            "java.util.Map<java.lang.Object,java.lang.Object>.keySet()"
          ]
        }
      ],
      "keywords": [
        "util",
        "key",
        "set",
        "java",
        "entry",
        "map",
        "object"
      ]
    },
    {
      "method": "activate@63",
      "body": "public void activate() throws BasicException {\n  List catlist=m_sentcat.list();\n  catlist.add(0,null);\n  m_CategoryModel=new ComboBoxValModel(catlist);\n  m_jCategory.setModel(m_CategoryModel);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.add(int,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComboBox.setModel(javax.swing.ComboBoxModel)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pos_1/src-pos/com/openbravo/pos/ticket/ProductFilter.java",
      "types": [
        "Integer",
        "ComboBoxModel",
        "List",
        "Object",
        "JComboBox"
      ],
      "apicalls": [
        "add",
        "setModel"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.add(int,java.lang.Object)",
            "javax.swing.JComboBox.setModel(javax.swing.ComboBoxModel)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "list",
        "util",
        "object",
        "java",
        "swing",
        "combo",
        "box",
        "j",
        "integer",
        "model",
        "set",
        "add"
      ]
    },
    {
      "method": "process@7689",
      "body": "final public GeoElement[] process(Command c) throws MyError {\n  int n=c.getArgumentNumber();\n  GeoElement[] arg;\n  arg=resArgs(c);\nswitch (n) {\ncase 1:\n    String label=c.getLabel();\n  String command=label == null ? \"\" : label + \"=\";\nkernel.setTemporaryPrintFigures(15);\ncommand+=arg[0].toOutputValueString();\nkernel.restorePrintAccuracy();\ntry {\nif (arg[0].isGeoImage()) {\nGeoElement pic=(GeoImage)arg[0].copy();\npic.setLabel(label);\nGeoElement[] ret={pic};\nreturn ret;\n}\nGeoElement[] ret=kernel.getAlgebraProcessor().processAlgebraCommandNoExceptions(command,true);\nret[0].setVisualStyle(arg[0]);\nreturn ret;\n}\n catch (Exception e) {\ne.printStackTrace();\nthrow argErr(app,c.getName(),arg[0]);\n}\ndefault :\nthrow argNumErr(app,c.getName(),n);\n}\n}\n",
      "formalParam": [
        "Command"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "GeoElement[]",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/kernel/commands/CommandProcessor.java",
      "types": [
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "stack",
        "print",
        "throwable",
        "trace",
        "java",
        "lang"
      ]
    },
    {
      "method": "testShouldBeAbleToGetLogFileAndReturnParsedContent@49",
      "body": "public void testShouldBeAbleToGetLogFileAndReturnParsedContent() throws Exception {\n  EmmaArtifactWidget service=new EmmaArtifactWidget();\n  Map params=new HashMap();\n  File aritifacts=new File(DataUtils.getProject1ArtifactDirAsFile(),\"20051209122103\");\n  params.put(Widget.PARAM_BUILD_ARTIFACTS_ROOT,aritifacts);\n  assertTrue(StringUtils.contains((String)service.getOutput(params),\"(108/110)\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cruisecontrol/reporting/dashboard/test/unit/net/sourceforge/cruisecontrol/dashboard/widgets/EmmaArtifactsWidgetTest.java",
      "types": [
        "Map",
        "Object",
        "File",
        "HashMap",
        "String"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "string",
        "java",
        "put",
        "util",
        "hash",
        "map",
        "file",
        "io"
      ]
    },
    {
      "method": "testHasWaitersIAE@1405",
      "body": "/** \n * hasWaiters throws IAE if not owned\n */\npublic void testHasWaitersIAE(){\n  final ReentrantReadWriteLock lock=new ReentrantReadWriteLock();\n  final Condition c=(lock.writeLock().newCondition());\n  final ReentrantReadWriteLock lock2=new ReentrantReadWriteLock();\n  try {\n    lock2.hasWaiters(c);\n    shouldThrow();\n  }\n catch (  IllegalArgumentException success) {\n  }\ncatch (  Exception ex) {\n    unexpectedException();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(java.util.concurrent.locks.Condition)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/scala-parallel/jsr166/src/test/tck/ReentrantReadWriteLockTest.java",
      "types": [
        "Boolean",
        "concurrent"
      ],
      "apicalls": [
        "hasWaiters",
        "writeLock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.ReentrantReadWriteLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(java.util.concurrent.locks.Condition)"
          ]
        }
      ],
      "keywords": [
        "write",
        "concurrent",
        "locks",
        "reentrant",
        "read",
        "util",
        "boolean",
        "java",
        "waiters",
        "lock"
      ]
    },
    {
      "method": "nextDouble@65",
      "body": "/** \n * Returns a random number from the distribution; bypasses the internal state.\n * @param a degrees of freedom.\n * @throws IllegalArgumentException if <tt>a &lt;= 0.0</tt>.\n */\npublic double nextDouble(double degreesOfFreedom){\n  if (degreesOfFreedom <= 0.0)   throw new IllegalArgumentException();\n  double u, v, w;\n  do {\n    u=2.0 * randomGenerator.raw() - 1.0;\n    v=2.0 * randomGenerator.raw() - 1.0;\n  }\n while ((w=u * u + v * v) > 1.0);\n  return (u * Math.sqrt(degreesOfFreedom * (Math.exp(-2.0 / degreesOfFreedom * Math.log(w)) - 1.0) / w));\n}\n",
      "formalParam": [
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.log(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.exp(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.sqrt(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/lcmc/src/lib/cern/jet/random/StudentT.java",
      "types": [
        "Double",
        "Math"
      ],
      "apicalls": [
        "exp",
        "log",
        "sqrt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.log(double)",
            "java.lang.Math.exp(double)",
            "java.lang.Math.sqrt(double)"
          ]
        }
      ],
      "keywords": [
        "math",
        "double",
        "exp",
        "log",
        "sqrt",
        "lang",
        "java"
      ]
    },
    {
      "method": "toString@45",
      "body": "@Override public String toString(){\n  return toDisplayString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ResourceBundle.getBundle(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.ResourceBundle"
          },
          {
            "_call": "java.util.ResourceBundle.getString(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.ResourceBundle"
          },
          {
            "_call": "java.util.ResourceBundle.getString(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/harmony-classlib/modules/accessibility/src/main/java/javax/accessibility/AccessibleBundle.java",
      "types": [
        "String",
        "Locale",
        "ResourceBundle"
      ],
      "apicalls": [
        "getBundle",
        "getString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ResourceBundle.getBundle(java.lang.String)",
            "java.util.ResourceBundle.getString(java.lang.String)",
            "java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)",
            "java.util.ResourceBundle.getString(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "bundle",
        "get",
        "resource",
        "java",
        "util",
        "locale",
        "string"
      ]
    },
    {
      "method": "Swipe@25",
      "body": "public Swipe(int touches,Direction direction){\n  if (touches < 1 || touches > 4) {\n    Log.log.warning(\"How many fingers do you think people have?\",\"tapTouches\",4);\n    touches=Math.max(1,Math.min(4,touches));\n  }\n  if (direction == null) {\n    Log.log.warning(\"Swipe cannot operate with a null direction, assuming RIGHT\");\n    direction=Direction.RIGHT;\n  }\n  _touches=touches;\n  _direction=direction;\n  _directionModifier=_direction == Direction.UP || _direction == Direction.LEFT ? -1 : 1;\n}\n",
      "formalParam": [
        "int",
        "Direction"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/tripleplay/core/src/main/java/tripleplay/gesture/Swipe.java",
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [
        "max",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "min",
        "math",
        "lang",
        "java",
        "max",
        "integer"
      ]
    },
    {
      "method": "hasMessages@228",
      "body": "public final boolean hasMessages(){\n  return hasActionMessages() || hasFieldMessages();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Collection<java.lang.String>>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/sothis/sothis-web/src/main/java/org/sothis/web/mvc/ModelAndViewSupport.java",
      "types": [
        "Integer",
        "String",
        "Map",
        "Collection"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.String>.size()",
            "java.util.Map<java.lang.String,java.util.Collection<java.lang.String>>.size()"
          ]
        }
      ],
      "keywords": [
        "string",
        "collection",
        "map",
        "size",
        "java",
        "integer",
        "util"
      ]
    },
    {
      "method": "paintSliderThumbBackground@646",
      "formalParam": [
        "SynthContext",
        "Graphics",
        "int",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.ImageIcon.getImage()",
            "node": "DAPICall",
            "_returns": "java.awt.Image",
            "_throws": []
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
            "node": "DAPICall",
            "_returns": "javax.swing.JComponent",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/plaf/synth/ImagePainter.java",
      "body": "public void paintSliderThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paint(context,g,x,y,w,h);\n}\n",
      "types": [
        "URL",
        "ImageIcon",
        "String",
        "Image",
        "JComponent",
        "plaf"
      ],
      "apicalls": [
        "getImage",
        "getComponent"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.ImageIcon.ImageIcon(java.net.URL,java.lang.String)",
            "javax.swing.ImageIcon.getImage()",
            "javax.swing.plaf.synth.SynthContext.getComponent()"
          ]
        }
      ],
      "keywords": [
        "context",
        "plaf",
        "string",
        "synth",
        "url",
        "get",
        "component",
        "javax",
        "image",
        "swing",
        "j",
        "icon"
      ]
    },
    {
      "method": "main@53",
      "body": "public static void main(String[] argv) throws Throwable {\n  LogChecksumRecovery lctest=new LogChecksumRecovery();\n  ij.getPropertyArg(argv);\n  Connection conn=ij.startJBMS();\n  conn.setAutoCommit(false);\n  try {\n    lctest.runTest(conn);\n  }\n catch (  SQLException sqle) {\n    org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out,sqle);\n    sqle.printStackTrace(System.out);\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.setAutoCommit(boolean)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/derby/java/testing/org/apache/derbyTesting/functionTests/tests/store/LogChecksumRecovery.java",
      "types": [
        "Throwable",
        "Connection",
        "PrintStream",
        "SQLException",
        "Boolean"
      ],
      "apicalls": [
        "printStackTrace",
        "setAutoCommit"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.setAutoCommit(boolean)",
            "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
          ]
        }
      ],
      "keywords": [
        "set",
        "java",
        "sql",
        "trace",
        "commit",
        "lang",
        "stream",
        "exception",
        "stack",
        "connection",
        "print",
        "boolean",
        "throwable",
        "auto"
      ]
    },
    {
      "method": "dumpMessages@78",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.HashMap<java.lang.String,java.lang.String>.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.HashMap<java.lang.String,java.lang.String>.entrySet()",
                "node": "DAPICall",
                "_returns": "java.util.Set",
                "_throws": []
              },
              {
                "_call": "java.util.Set.iterator()",
                "node": "DAPICall",
                "_returns": "java.util.Iterator",
                "_throws": []
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>>.next()",
                    "node": "DAPICall",
                    "_returns": "java.util.Map.Entry<java.lang.String,java.lang.String>",
                    "_throws": []
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>>.hasNext()",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": []
                  }
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ShowCaseStandalone/com/miykeal/showCaseStandalone/Utilities/Localization.java",
      "body": "public static void dumpMessages(){\n  if (!messages.isEmpty()) {\n    for (Iterator<Entry<String,String>> it=messages.entrySet().iterator(); it.hasNext(); ) {\n      Map.Entry<String,String> entry=it.next();\n      ShowCaseStandalone.slog(Level.INFO,entry.getKey() + \" : \" + entry.getValue());\n    }\n  }\n else   ShowCaseStandalone.slog(Level.INFO,\"The messages map is empty.\");\n}\n",
      "types": [
        "Entry",
        "Boolean",
        "Set",
        "Iterator",
        "String",
        "HashMap"
      ],
      "apicalls": [
        "next",
        "hasNext",
        "iterator",
        "entrySet",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.HashMap<java.lang.String,java.lang.String>.isEmpty()",
            "java.util.HashMap<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>>.hasNext()",
            "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>>.next()",
            "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>>.hasNext()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.HashMap<java.lang.String,java.lang.String>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "java",
        "set",
        "empty",
        "util",
        "next",
        "boolean",
        "map",
        "iterator",
        "string",
        "entry",
        "hash"
      ]
    },
    {
      "method": "mbeanUnregistrationFailed1@184",
      "body": "@Test(expectedExceptions=InstanceNotFoundException.class) public void mbeanUnregistrationFailed1() throws JMException {\n  handler.registerMBean(new Dummy(false,\"test:type=dummy\"));\n  ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(\"test:type=dummy\"));\n  handler.unregisterMBeans();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "_throws": [],
            "_returns": "javax.management.MBeanServer",
            "node": "DAPICall"
          },
          {
            "_call": "javax.management.ObjectName.ObjectName(java.lang.String)",
            "_throws": [
              "javax.management.MalformedObjectNameException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.management.MBeanServer.unregisterMBean(javax.management.ObjectName)",
            "_throws": [
              "javax.management.MBeanRegistrationException",
              "javax.management.InstanceNotFoundException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jolokia/agent/core/src/test/java/org/jolokia/backend/MBeanServerHandlerTest.java",
      "types": [
        "String",
        "MBeanRegistrationException",
        "MBeanServer",
        "ManagementFactory",
        "ObjectName",
        "InstanceNotFoundException",
        "MalformedObjectNameException"
      ],
      "apicalls": [
        "unregisterMBean",
        "getPlatformMBeanServer"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "javax.management.ObjectName.ObjectName(java.lang.String)",
            "javax.management.MBeanServer.unregisterMBean(javax.management.ObjectName)"
          ]
        }
      ],
      "keywords": [
        "object",
        "server",
        "exception",
        "string",
        "java",
        "malformed",
        "platform",
        "instance",
        "management",
        "lang",
        "m",
        "name",
        "factory",
        "unregister",
        "bean",
        "registration",
        "found",
        "javax",
        "get"
      ]
    },
    {
      "method": "isANotificationEmitter@1509",
      "body": "/** \n * Convenience method that returns a boolean indication of whether or not concrete instances of the supplied interface type <code>mxbeanInterface</code> should also be implementors of the interface <code>javax.management.NotificationEmitter</code>.\n * @param < T >\n * @param mxbeanInterface\n * @return <code>true</code> if instances of type<code>mxbeanInterface</code> should also implement <code>javax.management.NotificationEmitter</code>. Otherwise, <code>false</code>.\n */\npublic static <T>boolean isANotificationEmitter(Class<T> mxbeanInterface){\n  boolean result=false;\n  MBeanInfo info=getMBeanInfo(mxbeanInterface.getName());\n  if (info != null) {\n    MBeanNotificationInfo[] notifications=info.getNotifications();\n    if ((notifications != null) && (notifications.length > 0)) {\n      result=true;\n    }\n  }\n  return result;\n}\n",
      "formalParam": [
        "Class<T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Map<java.lang.String,javax.management.MBeanInfo>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.management.MBeanInfo"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/harmony_1/classlib/modules/lang-management/src/main/java/org/apache/harmony/lang/management/ManagementUtils.java",
      "types": [
        "Map",
        "String",
        "Class",
        "MBeanInfo",
        "Object"
      ],
      "apicalls": [
        "getName",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.util.Map<java.lang.String,javax.management.MBeanInfo>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "class",
        "object",
        "util",
        "java",
        "m",
        "lang",
        "get",
        "info",
        "string",
        "name",
        "map",
        "bean"
      ]
    },
    {
      "method": "rotateX@119",
      "formalParam": [
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.sin(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.cos(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          }
        ]
      },
      "returnType": "VectorXYZ",
      "file": "./java_projects/OSM2World/src/org/osm2world/core/math/VectorXYZ.java",
      "body": "/** \n * returns the result of rotating this vector around the x axis\n * @param angleRad  angle in radians\n */\npublic VectorXYZ rotateX(double angleRad){\n  double sin=Math.sin(angleRad);\n  double cos=Math.cos(angleRad);\n  return new VectorXYZ(x,y * cos - z * sin,y * sin + z * cos);\n}\n",
      "types": [
        "Double",
        "Math"
      ],
      "apicalls": [
        "cos",
        "sin"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.sin(double)",
            "java.lang.Math.cos(double)"
          ]
        }
      ],
      "keywords": [
        "cos",
        "lang",
        "java",
        "math",
        "double",
        "sin"
      ]
    },
    {
      "method": "createTemporaryQueueReceiver@220",
      "body": "public Receiver createTemporaryQueueReceiver() throws AmqpErrorException {\n  Source source=new Source();\n  source.setDynamic(true);\n  final Receiver receiver=new Receiver(this,\"tempSender\" + UUID.randomUUID().toString(),new Target(),source,AcknowledgeMode.ALO);\n  _receivers.add(receiver);\n  return receiver;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.UUID.randomUUID()",
            "node": "DAPICall",
            "_returns": "java.util.UUID",
            "_throws": []
          },
          {
            "_call": "java.util.UUID.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "Receiver",
      "file": "./java_projects/qpid/qpid/java/amqp-1-0-client/src/main/java/org/apache/qpid/amqp_1_0/client/Session.java",
      "types": [
        "UUID",
        "String"
      ],
      "apicalls": [
        "toString",
        "randomUUID"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.UUID.randomUUID()",
            "java.util.UUID.toString()"
          ]
        }
      ],
      "keywords": [
        "uuid",
        "random",
        "util",
        "java",
        "string"
      ]
    },
    {
      "method": "test009@818",
      "body": "public void test009(){\n  final String[] testsSource=new String[]{\"X.java\",\"public class X<T> {\\n\" + \"class MX<U> {\\n\" + \"}\\n\"+ \" \\n\"+ \"public static void main(String[] args) {\\n\"+ \"    new X<Thread>().foo(new X<String>().new MX<Thread>());\\n\"+ \"}\\n\"+ \"void foo(X<String>.MX<Thread> mx) {\\n\"+ \"   System.out.println(\\\"SUCCESS\\\");\\n\"+ \"}\\n\"+ \"}\"};\n  this.runConformTest(testsSource,\"SUCCESS\");\n  try {\n    ClassFileReader classFileReader=ClassFileReader.read(OUTPUT_DIR + File.separator + \"X.class\");\n    IBinaryMethod[] methods=classFileReader.getMethods();\n    assertNotNull(\"No methods\",methods);\n    assertEquals(\"Wrong size\",3,methods.length);\n    assertEquals(\"Wrong name\",\"foo\",new String(methods[2].getSelector()));\n    char[] signature=methods[2].getGenericSignature();\n    assertNotNull(\"No signature\",signature);\n    assertEquals(\"Wrong signature\",\"(LX<Ljava/lang/String;>.MX<Ljava/lang/Thread;>;)V\",new String(signature));\n  }\n catch (  ClassFormatException e) {\n    assertTrue(false);\n  }\ncatch (  IOException e) {\n    assertTrue(false);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeSignatureTest.java",
      "types": [
        "Character",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.String(java.lang.String)",
            "java.lang.String.String(char[])"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "character",
        "string"
      ]
    },
    {
      "method": "onTabChanged@143",
      "body": "@Override public void onTabChanged(String tabId){\n  TabInfo newTab=mTabs.get(tabId);\n  if (mLastTab != newTab) {\n    FragmentTransaction ft=mActivity.getSupportFragmentManager().beginTransaction();\n    if (mLastTab != null) {\n      if (mLastTab.fragment != null) {\n        ft.detach(mLastTab.fragment);\n      }\n    }\n    if (newTab != null) {\n      if (newTab.fragment == null) {\n        newTab.fragment=Fragment.instantiate(mActivity,newTab.clss.getName(),newTab.args);\n        ft.add(mContainerId,newTab.fragment,newTab.tag);\n      }\n else {\n        ft.attach(newTab.fragment);\n      }\n    }\n    mLastTab=newTab;\n    ft.commit();\n    mActivity.getSupportFragmentManager().executePendingTransactions();\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ActionBarSherlock/samples/fragments/src/com/actionbarsherlock/sample/fragments/FragmentTabs.java",
      "types": [
        "String",
        "HashMap",
        "Class",
        "Object"
      ],
      "apicalls": [
        "get",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "hash",
        "name",
        "string",
        "class",
        "get",
        "map",
        "java",
        "util",
        "object"
      ]
    },
    {
      "method": "size@688",
      "body": "{ super(k,v);\n}\n\n{ final Segment<K,V>[] segments=this.segments; long sum=0; long check=0; int[] mc=new int[segments.length]; for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {   check=0;   sum=0;   int mcsum=0;   for (int i=0; i < segments.length; ++i) {     sum+=segments[i].count;     mcsum+=mc[i]=segments[i].modCount;   }   if (mcsum != 0) {     for (int i=0; i < segments.length; ++i) {       check+=segments[i].count;       if (mc[i] != segments[i].modCount) {         check=-1;         break;       }     }   }   if (check == sum)     break; } if (check != sum) {   sum=0;   for (int i=0; i < segments.length; ++i)     segments[i].lock();   for (int i=0; i < segments.length; ++i)     sum+=segments[i].count;   for (int i=0; i < segments.length; ++i)     segments[i].unlock(); } if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE;else   return (int)sum;\n}",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.lock()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.unlock()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/harmony-classlib/modules/concurrent/src/main/java/java/util/concurrent/ConcurrentHashMap.java",
      "types": [
        "concurrent"
      ],
      "javadoc": "Returns the number of key-value mappings in this map.  If the map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.",
      "apicalls": [
        "unlock",
        "lock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantLock.lock()",
            "java.util.concurrent.locks.ReentrantLock.unlock()"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "locks",
        "lock",
        "java",
        "util",
        "reentrant",
        "unlock"
      ]
    },
    {
      "method": "test_18_9_writeObject@583",
      "body": "public void test_18_9_writeObject(){\n  Object objToSave=null;\n  Object objLoaded;\n  try {\n    boolean[] booleans={true,false,false,true};\n    objToSave=booleans;\n    if (DEBUG)     System.out.println(\"Obj = \" + objToSave);\n    objLoaded=dumpAndReload(objToSave);\n    assertTrue(MSG_TEST_FAILED + objToSave,Arrays.equals((boolean[])objLoaded,(boolean[])objToSave));\n  }\n catch (  IOException e) {\n    fail(\"IOException serializing data : \" + e.getMessage());\n  }\ncatch (  ClassNotFoundException e) {\n    fail(\"ClassNotFoundException reading Object type : \" + e.getMessage());\n  }\ncatch (  Error err) {\n    System.out.println(\"Error when obj = \" + objToSave);\n    throw err;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Arrays.equals(boolean[],boolean[])",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/SerializationStressTest1.java",
      "types": [
        "String",
        "Throwable",
        "Boolean",
        "PrintStream",
        "Arrays"
      ],
      "apicalls": [
        "println",
        "equals",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.Arrays.equals(boolean[],boolean[])",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.Arrays.equals(boolean[],boolean[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "message",
        "string",
        "equals",
        "get",
        "stream",
        "throwable",
        "java",
        "io",
        "println",
        "arrays",
        "boolean",
        "print"
      ]
    },
    {
      "method": "UserDataProxy@20",
      "body": "public UserDataProxy() throws SQLException {\n  DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n  String url=\"jdbc:mysql://\";\n  ReadSQLXml r=new ReadSQLXml();\n  r.getInfo();\n  url+=r.getHost();\n  url+=\"?unicode=true&characterEncoding=UTF-8&user=\" + r.getUsername() + \"&password=\"+ r.getPassword();\n  con=DriverManager.getConnection(url);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.DriverManager.registerDriver(java.sql.Driver)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.DriverManager.getConnection(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Connection"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/bingle/src/businessServices/datamanager/userdata/UserDataProxy.java",
      "types": [
        "SQLException",
        "Driver",
        "String",
        "Connection",
        "DriverManager"
      ],
      "apicalls": [
        "getConnection",
        "registerDriver"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.DriverManager.registerDriver(java.sql.Driver)",
            "java.sql.DriverManager.getConnection(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "driver",
        "get",
        "connection",
        "manager",
        "sql",
        "java",
        "register",
        "exception",
        "string"
      ]
    },
    {
      "method": "processEnd@78",
      "body": "/** \n * Check if the effect has ended. In that case, start the onStop runnable.\n */\npublic void processEnd(){\n  if (done)   return;\n  if (getCurrentTime() == length) {\n    done=true;\n    doStop();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Runnable.run()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/nebula/widgets/cwt/org.eclipse.nebula.cwt/src/org/eclipse/nebula/cwt/animation/effects/AbstractEffect.java",
      "types": [
        "Runnable",
        "Long",
        "System"
      ],
      "apicalls": [
        "run",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Runnable.run()"
          ]
        }
      ],
      "keywords": [
        "java",
        "current",
        "time",
        "long",
        "millis",
        "runnable",
        "lang",
        "run",
        "system"
      ]
    },
    {
      "method": "fromString@161",
      "body": "/** \n * Create a name from the characters in char sequence s.\n */\npublic static Name fromString(Table table,CharSequence s){\n  return fromString(table,s.toString());\n}\n",
      "formalParam": [
        "Table",
        "CharSequence"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.CharSequence.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "_returns": "char[]",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Name",
      "file": "./java_projects/fiji/src-plugins/javac/src/main/java/com/sun/tools/javac/util/Name.java",
      "types": [
        "Integer",
        "System",
        "Object",
        "String",
        "CharSequence"
      ],
      "apicalls": [
        "toString",
        "arraycopy",
        "toCharArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.CharSequence.toString()",
            "java.lang.String.toCharArray()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "arraycopy",
        "system",
        "array",
        "char",
        "integer",
        "string",
        "lang",
        "java",
        "sequence",
        "object"
      ]
    },
    {
      "method": "toString@5265",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"flush_all_queues_args(\");\n  boolean first=true;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "string",
        "java",
        "lang",
        "append"
      ]
    },
    {
      "method": "createTaskEntry@244",
      "body": "public void createTaskEntry(TaskAttemptID taskId,String taskTracker,TaskInProgress tip,Integer grant){\n  LOG.info(\"Adding task (\" + tip.getAttemptType(taskId) + \") \"+ \"'\"+ taskId+ \"' to tip \"+ tip.getTIPId()+ \", for tracker '\"+ taskTracker+ \"' grant:\"+ grant);\nsynchronized (lockObject) {\n    taskIdToTrackerMap.put(taskId,taskTracker);\n    Set<TaskAttemptIDWithTip> taskset=trackerToTaskMap.get(taskTracker);\n    if (taskset == null) {\n      taskset=new HashSet<TaskAttemptIDWithTip>();\n      trackerToTaskMap.put(taskTracker,taskset);\n    }\n    taskset.add(new TaskAttemptIDWithTip(taskId,tip));\n    taskIdToTIPMap.put(taskId,tip);\n    taskIdToGrantMap.put(taskId,grant);\n  }\n}\n",
      "formalParam": [
        "TaskAttemptID",
        "String",
        "TaskInProgress",
        "Integer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>>.put(java.lang.String,java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>"
          },
          {
            "_call": "java.util.Set<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/contrib/corona/src/java/org/apache/hadoop/mapred/CoronaJobTracker.java",
      "types": [
        "Object",
        "Map",
        "Set",
        "Boolean",
        "String",
        "HashSet"
      ],
      "apicalls": [
        "get",
        "put",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>>.get(java.lang.Object)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Map<java.lang.String,java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>>.put(java.lang.String,java.util.Set<org.apache.hadoop.mapred.CoronaJobTracker.TaskAttemptIDWithTip>)",
            "java.util.Set<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "util",
        "object",
        "set",
        "java",
        "string",
        "boolean",
        "add",
        "put",
        "hash",
        "map",
        "get"
      ]
    },
    {
      "method": "addFile@15",
      "body": "public static void addFile(String s) throws IOException {\n  File f=new File(s);\n  addFile(f);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.toURI()",
            "node": "DAPICall",
            "_returns": "java.net.URI",
            "_throws": []
          },
          {
            "_call": "java.net.URI.toURL()",
            "node": "DAPICall",
            "_returns": "java.net.URL",
            "_throws": [
              "java.net.MalformedURLException"
            ]
          },
          {
            "_call": "java.util.Vector<java.net.URL>.contains(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Vector<java.net.URL>.add(java.net.URL)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": [
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Flashtool/src/org/system/ClassPath.java",
      "types": [
        "NoSuchMethodException",
        "Method",
        "File",
        "SecurityException",
        "Vector",
        "MalformedURLException",
        "Boolean",
        "IllegalAccessException",
        "Class",
        "URI",
        "Object",
        "InvocationTargetException",
        "URL",
        "String",
        "IllegalArgumentException",
        "AccessibleObject"
      ],
      "apicalls": [
        "contains",
        "toURL",
        "setAccessible",
        "getDeclaredMethod",
        "invoke",
        "toURI",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.toURI()",
            "java.net.URI.toURL()",
            "java.util.Vector<java.net.URL>.contains(java.lang.Object)",
            "java.util.Vector<java.net.URL>.add(java.net.URL)",
            "java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "uri",
        "io",
        "invoke",
        "util",
        "illegal",
        "lang",
        "string",
        "url",
        "java",
        "get",
        "file",
        "method",
        "accessible",
        "argument",
        "access",
        "class",
        "reflect",
        "contains",
        "net",
        "declared",
        "vector",
        "object",
        "invocation",
        "security",
        "exception",
        "malformed",
        "boolean",
        "target",
        "add",
        "set"
      ]
    },
    {
      "method": "getExtension@31",
      "body": "public static String getExtension(File f){\n  String ext=null;\n  String s=f.getName();\n  int i=s.lastIndexOf('.');\n  if (i > 0 && i < s.length() - 1) {\n    ext=s.substring(i + 1).toLowerCase();\n  }\n  return ext;\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/qrcode/example/jmf/MOVFilter.java",
      "types": [
        "File",
        "Integer",
        "String"
      ],
      "apicalls": [
        "substring",
        "toLowerCase",
        "length",
        "getName",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getName()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.toLowerCase()"
          ]
        },
        {
          "calls": [
            "java.io.File.getName()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "io",
        "integer",
        "last",
        "file",
        "length",
        "index",
        "case",
        "name",
        "substring",
        "get",
        "lower",
        "string"
      ]
    },
    {
      "method": "start@216",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/drools/drools-core/src/main/java/org/drools/io/impl/ResourceChangeNotifierImpl.java",
      "body": "public void start(){\n  this.processChangeSet=new ProcessChangeSet(this.queue,this,this.listener);\n  this.thread=new Thread(this.processChangeSet);\n  this.thread.start();\n}\n",
      "types": [
        "Thread",
        "Runnable"
      ],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "java",
        "runnable",
        "start",
        "thread",
        "lang"
      ]
    },
    {
      "method": "compressBitmap@1878",
      "formalParam": [
        "Bitmap"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/platform_packages_apps_browser/src/com/android/browser/Tab.java",
      "body": "public byte[] compressBitmap(Bitmap bitmap){\n  if (bitmap == null) {\n    return null;\n  }\n  ByteArrayOutputStream stream=new ByteArrayOutputStream();\n  bitmap.compress(CompressFormat.PNG,100,stream);\n  return stream.toByteArray();\n}\n",
      "types": [
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "io",
        "stream",
        "byte",
        "java",
        "array",
        "output"
      ]
    },
    {
      "method": "clearData@66",
      "body": "@Before public void clearData() throws Exception {\n  getMessages(false);\n  convertAndSend(\"foo\");\n  convertAndSend(\"bar\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/activemq/activemq-core/src/test/java/org/apache/activemq/bugs/RawRollbackSharedConsumerTests.java",
      "types": [
        "List",
        "String",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "list",
        "boolean",
        "array",
        "util",
        "string",
        "add"
      ]
    },
    {
      "method": "getPayload@199",
      "body": "@Override public BytesRef getPayload() throws IOException {\n  BytesRef payload=super.getPayload();\n  if (payload == null) {\n    return payload;\n  }\n else {\n    InputStream is=new ByteArrayInputStream(payload.bytes,payload.offset,payload.length);\n    decoder.reInit(is);\n    os.reset();\n    encoder.reInit(os);\n    long ordinal;\n    while ((ordinal=decoder.decode()) != IntDecoder.EOS) {\n      int newOrdinal=ordinalMap[(int)ordinal];\n      encoder.encode(newOrdinal);\n    }\n    encoder.close();\n    byte out[]=os.toByteArray();\n    payloadOut.bytes=out;\n    payloadOut.offset=0;\n    payloadOut.length=out.length;\n    return payloadOut;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[],int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.reset()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "_returns": "byte[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "BytesRef",
      "file": "./java_projects/lucene-solr/lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.java",
      "types": [
        "ByteArrayOutputStream",
        "ByteArrayInputStream",
        "Integer",
        "Byte"
      ],
      "apicalls": [
        "toByteArray",
        "reset"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[],int,int)",
            "java.io.ByteArrayOutputStream.reset()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "java",
        "byte",
        "integer",
        "input",
        "stream",
        "io",
        "array",
        "output",
        "reset"
      ]
    },
    {
      "method": "deleteFlowsForSwitch@588",
      "body": "@Override public void deleteFlowsForSwitch(long dpid){\n  String sDpid=HexString.toHexString(dpid);\n  for (  Entry<String,String> e : entry2dpid.entrySet()) {\n    if (e.getValue().equals(sDpid))     deleteFlow(e.getKey());\n  }\n}\n",
      "formalParam": [
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ubuntu-packaging-floodlight/src/main/java/net/floodlightcontroller/staticflowentry/StaticFlowEntryPusher.java",
      "types": [
        "Object",
        "Set",
        "Boolean",
        "Map",
        "String"
      ],
      "apicalls": [
        "entrySet",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "entry",
        "string",
        "map",
        "equals",
        "util",
        "lang",
        "java",
        "set"
      ]
    },
    {
      "method": "getFinalDataChoices@152",
      "body": "/** \n * Add to the given list all final data choices (i.e., the leafs of the datachoice tree)\n * @param finalDataChoices The list to add to\n */\npublic void getFinalDataChoices(List finalDataChoices){\n  super.getFinalDataChoices(finalDataChoices);\n  for (int i=0; i < dataChoices.size(); i++) {\n    ((DataChoice)dataChoices.get(i)).getFinalDataChoices(finalDataChoices);\n  }\n}\n",
      "formalParam": [
        "List"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/IDV/src/ucar/unidata/data/CompositeDataChoice.java",
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "java",
        "integer",
        "util",
        "list",
        "size"
      ]
    },
    {
      "method": "readNetcdf@454",
      "body": "/** \n * parse a netcdf JDOM Element, and add contents to the targetDS NetcdfDataset. <p/> This is a bit tricky, because it handles several cases When targetDS == refds, we are just modifying targetDS. When targetDS != refds, we keep them seperate, and copy from refds to newds. <p/> The user may be defining new elements or modifying old ones. The only way to tell is by seeing if the elements already exist.\n * @param ncmlLocation NcML URL location, or may be just a unique name for caching purposes.\n * @param targetDS     add the info to this one, never null\n * @param refds        the referenced dataset; may equal newds, never null\n * @param netcdfElem   JDOM netcdf element\n * @param cancelTask   allow user to cancel the task; may be null\n * @throws IOException on read error\n */\npublic void readNetcdf(String ncmlLocation,NetcdfDataset targetDS,NetcdfFile refds,Element netcdfElem,CancelTask cancelTask) throws IOException {\n  this.location=ncmlLocation;\n  if (debugOpen)   System.out.println(\"NcMLReader.readNetcdf ncml= \" + ncmlLocation + \" referencedDatasetUri= \"+ refds.getLocation());\n  Namespace use=netcdfElem.getNamespace();\n  if (!use.equals(ncNS)) {\n    throw new IllegalArgumentException(\"Incorrect namespace specified in NcML= \" + use.getURI() + \"\\n   must be=\"+ ncNS.getURI());\n  }\n  if (ncmlLocation != null)   targetDS.setLocation(ncmlLocation);\n  targetDS.setId(netcdfElem.getAttributeValue(\"id\"));\n  targetDS.setTitle(netcdfElem.getAttributeValue(\"title\"));\n  Element aggElem=netcdfElem.getChild(\"aggregation\",ncNS);\n  if (aggElem != null) {\n    Aggregation agg=readAgg(aggElem,ncmlLocation,targetDS,cancelTask);\n    targetDS.setAggregation(agg);\n    agg.finish(cancelTask);\n  }\n  readGroup(targetDS,refds,null,null,netcdfElem);\n  String errors=errlog.toString();\n  if (errors.length() > 0)   throw new IllegalArgumentException(\"NcML had fatal errors:\" + errors);\n  targetDS.finish();\n  Set<NetcdfDataset.Enhance> mode=NetcdfDataset.parseEnhanceMode(netcdfElem.getAttributeValue(\"enhance\"));\n  targetDS.enhance(mode);\n  String addRecords=netcdfElem.getAttributeValue(\"addRecords\");\n  if ((addRecords != null) && addRecords.equalsIgnoreCase(\"true\"))   targetDS.sendIospMessage(NetcdfFile.IOSP_MESSAGE_ADD_RECORD_STRUCTURE);\n}\n",
      "formalParam": [
        "String",
        "NetcdfDataset",
        "NetcdfFile",
        "Element",
        "CancelTask"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Formatter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/thredds/cdm/src/main/java/ucar/nc2/ncml/NcMLReader.java",
      "types": [
        "Integer",
        "Boolean",
        "PrintStream",
        "Character",
        "String",
        "Formatter"
      ],
      "apicalls": [
        "length",
        "toString",
        "equalsIgnoreCase",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.util.Formatter.toString()",
            "java.lang.String.length()",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "length",
        "java",
        "io",
        "equals",
        "string",
        "boolean",
        "integer",
        "util",
        "lang",
        "case",
        "character",
        "stream",
        "println",
        "formatter",
        "ignore"
      ]
    },
    {
      "method": "getUserRoles@480",
      "body": "/** \n * Returns an array of Role objects that indicate the Roles a user is associated to.\n * @param userId\n * @return\n */\npublic List<Role> getUserRoles(String userId){\n  if (userId == null)   throw new IllegalArgumentException(\"userIdId is null\");\n  List<Role> roleList=roleDao.findUserRoles(userId);\n  log.debug(\"getUserRoles for userId=\" + userId);\n  log.debug(\" - findUserRoles = \" + roleList);\n  Set<Role> newRoleSet=new HashSet();\n  if (roleList != null && !roleList.isEmpty()) {\n    updateRoleAssociation(roleList,RoleConstant.DIRECT,newRoleSet);\n  }\n  roleList=roleDao.findIndirectUserRoles(userId);\n  log.debug(\" - findIndirectUserRoles = \" + roleList);\n  if (roleList != null && !roleList.isEmpty()) {\n    updateRoleAssociation(roleList,RoleConstant.INDIRECT,newRoleSet);\n  }\n  if (newRoleSet == null || newRoleSet.size() == 0) {\n    return null;\n  }\n  List<Role> newRoles=new ArrayList<Role>(newRoleSet);\n  List<Role> newRoleList=new ArrayList<Role>();\n  for (  Role rl : newRoles) {\n    log.info(\"Role id=\" + rl.getId() + \" parentId=\"+ rl.getParentRoleId());\n    if (rl.getParentRoleId() == null) {\n      newRoleList.add(rl);\n    }\n else {\n      log.info(\"Get the parent role for parentId=\" + rl.getParentRoleId());\n      newRoleList.add(getParentRole(rl));\n    }\n  }\n  return newRoleList;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "List<Role>",
      "file": "./java_projects/openiam-idm-ce/openiam-pojo-services/src/main/java/org/openiam/idm/srvc/role/service/RoleDataServiceImpl.java",
      "types": [
        "HashSet",
        "Collection",
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.HashSet()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "list",
        "java",
        "collection",
        "util",
        "array",
        "set"
      ]
    },
    {
      "method": "lookup@90",
      "body": "/** \n * Compares the current timestamp with the last time we did an update plus the amount of time between updates. If our cache has become stale, we attempt to update it. Then, we check to see if such a state exists in our cache. If not, we throw an exception because, if someone is querying for a state that doesn't exist, we need to bring it to their immediate attention rather than returning an \"error\" value. Otherwise, the corresponding integer value is returned. It is recommended, but not required, to use the constants declared in the concrete cache class as the parameter. The complexity is O(n) if a refresh is required; otherwise, the  complexity of a Java Map object to lookup a key and return its value.\n * @param string The String whose corresponding integer value isbeing requested.\n * @return The corresponding integer value.\n * @throws CacheMissException Thrown if no such state exists.\n */\npublic int lookup(String string) throws CacheMissException {\n  if ((getLastUpdateTimestamp() + getUpdateFrequency()) <= System.currentTimeMillis()) {\n    refreshMap();\n  }\n  if (stringAndIdMap.containsKey(string)) {\n    return stringAndIdMap.getValue(string);\n  }\n else {\n    throw new CacheMissException(\"Unknown string for cache: \" + string);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "_returns": "long",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "_returns": "long",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "_returns": "long",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/Ohmage_Server_2/src/org/ohmage/cache/StringAndIdCache.java",
      "types": [
        "Long",
        "System"
      ],
      "apicalls": [
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.System.currentTimeMillis()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "time",
        "long",
        "system",
        "java",
        "lang",
        "current",
        "millis"
      ]
    },
    {
      "method": "toString@884",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"startGame_args(\");\n  boolean first=true;\n  sb.append(\"bid:\");\n  sb.append(this.bid);\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/server/connectFourServer/gen/WebInterface.java",
      "types": [
        "String",
        "Integer",
        "StringBuilder"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(int)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "builder",
        "string",
        "append",
        "integer",
        "java"
      ]
    },
    {
      "method": "contentHandlerNamespacePrefixes@54",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-framework/spring-core/src/test/java/org/springframework/util/xml/AbstractStaxContentHandlerTestCase.java",
      "body": "@Test public void contentHandlerNamespacePrefixes() throws Exception {\n  StringWriter stringWriter=new StringWriter();\n  AbstractStaxContentHandler handler=createStaxContentHandler(stringWriter);\n  xmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\",true);\n  xmlReader.setContentHandler(handler);\n  xmlReader.parse(new InputSource(new StringReader(XML_CONTENT_HANDLER)));\n  assertXMLEqual(\"Invalid result\",XML_CONTENT_HANDLER,stringWriter.toString());\n}\n",
      "types": [
        "StringWriter",
        "String",
        "StringReader"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "io",
        "java",
        "reader",
        "string",
        "writer"
      ]
    },
    {
      "method": "testGetJSDateWithDate@41",
      "body": "@Test public void testGetJSDateWithDate(){\n  GregorianCalendar calendar=new GregorianCalendar(2009,11,11);\n  String expectedJavascript=\"new Date(2009,11,11,0,0,0,0)\";\n  String generatedJavascript=DateHelper.getJSDate(calendar.getTime()).toString();\n  log.info(expectedJavascript);\n  log.info(generatedJavascript);\n  assertEquals(generatedJavascript,expectedJavascript);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.GregorianCalendar.GregorianCalendar(int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/wiquery/wiquery-core/src/test/java/org/odlabs/wiquery/core/javascript/helper/DateHelperTestCase.java",
      "types": [
        "GregorianCalendar",
        "Calendar",
        "Integer",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.GregorianCalendar.GregorianCalendar(int,int,int)",
            "java.util.Calendar.getTime()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "calendar",
        "java",
        "time",
        "date",
        "util",
        "get",
        "gregorian"
      ]
    },
    {
      "method": "isDomainRestricted@314",
      "body": "/** \n * Is the specified user is restricted to access the resource in its own domain?\n * @return true if he's restricted in its own domain, false otherwise.\n */\npublic boolean isDomainRestricted(){\n  return (GeneralPropertiesManager.getDomainVisibility() == GeneralPropertiesManager.DVIS_ONE || (GeneralPropertiesManager.getDomainVisibility() == GeneralPropertiesManager.DVIS_EACH && !\"0\".equals(getDomainId()))) && !isAccessAdmin();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Silverpeas-Core/lib-core/src/main/java/com/stratelia/webactiv/beans/admin/UserDetail.java",
      "types": [
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "lang",
        "string",
        "case",
        "boolean",
        "ignore",
        "java",
        "object"
      ]
    },
    {
      "method": "OChannelBinaryServer@44",
      "body": "public OChannelBinaryServer(final Socket iSocket,final OContextConfiguration iConfig) throws IOException {\n  super(iSocket,iConfig);\n  inStream=new BufferedInputStream(socket.getInputStream(),socketBufferSize);\n  outStream=new BufferedOutputStream(socket.getOutputStream(),socketBufferSize);\n  out=new DataOutputStream(outStream);\n  in=new DataInputStream(inStream);\n}\n",
      "formalParam": [
        "Socket",
        "OContextConfiguration"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/OrientDB/enterprise/src/main/java/com/orientechnologies/orient/enterprise/channel/binary/OChannelBinaryServer.java",
      "types": [
        "BufferedOutputStream",
        "DataInputStream",
        "Integer",
        "InputStream",
        "BufferedInputStream",
        "DataOutputStream",
        "OutputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)",
            "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream,int)",
            "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "java",
        "stream",
        "io",
        "data",
        "input",
        "buffered",
        "integer",
        "output"
      ]
    },
    {
      "method": "getSecretKeySpec@65",
      "body": "public static SecretKeySpec getSecretKeySpec(File keyFile) throws NoSuchAlgorithmException, IOException {\n  byte[] key=readKeyFile(keyFile);\n  SecretKeySpec sks=new SecretKeySpec(key,CryptoUtils.AES);\n  return sks;\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Scanner.Scanner(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Scanner.useDelimiter(java.lang.String)",
            "_throws": [],
            "_returns": "java.util.Scanner",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Scanner.next()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Scanner.close()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String,int)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "SecretKeySpec",
      "file": "./java_projects/LabBBDD/src/encrypt/CryptoUtils.java",
      "types": [
        "Integer",
        "FileNotFoundException",
        "File",
        "NumberFormatException",
        "String",
        "Scanner"
      ],
      "apicalls": [
        "parseInt",
        "close",
        "next",
        "substring",
        "useDelimiter"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Scanner.Scanner(java.io.File)",
            "java.util.Scanner.useDelimiter(java.lang.String)",
            "java.util.Scanner.next()",
            "java.util.Scanner.close()",
            "java.lang.String.substring(int,int)",
            "java.lang.Integer.parseInt(java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "substring",
        "delimiter",
        "next",
        "file",
        "found",
        "parse",
        "util",
        "scanner",
        "close",
        "exception",
        "use",
        "string",
        "int",
        "integer",
        "format",
        "java",
        "number"
      ]
    },
    {
      "method": "getApproveButtonText@104",
      "body": "/** \n * Invokes the <code>getApproveButtonText</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic String getApproveButtonText(JFileChooser a){\n  String returnValue=((FileChooserUI)(uis.elementAt(0))).getApproveButtonText(a);\n  for (int i=1; i < uis.size(); i++) {\n    ((FileChooserUI)(uis.elementAt(i))).getApproveButtonText(a);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JFileChooser"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/multi/MultiFileChooserUI.java",
      "types": [
        "Integer",
        "Vector"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "vector",
        "size",
        "java",
        "integer"
      ]
    },
    {
      "method": "JsonPrimitive@62",
      "body": "/** \n * Create a primitive containing a String value.\n * @param string the value to create the primitive with.\n */\npublic JsonPrimitive(String string){\n  setValue(string);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Character.charValue()",
                "node": "DAPICall",
                "_returns": "char",
                "_throws": []
              },
              {
                "_call": "java.lang.String.valueOf(char)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/gson/gson/src/main/java/com/google/gson/JsonPrimitive.java",
      "types": [
        "Boolean",
        "Class",
        "String",
        "Character"
      ],
      "apicalls": [
        "isAssignableFrom",
        "valueOf",
        "charValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        },
        {
          "calls": [
            "java.lang.Character.charValue()",
            "java.lang.String.valueOf(char)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "value",
        "assignable",
        "string",
        "boolean",
        "char",
        "java",
        "character",
        "class"
      ]
    },
    {
      "method": "C_OrderLine@607",
      "body": "/** \n * Create MRP record based in Order Line \n * @param MOrderLine\n */\npublic static void C_OrderLine(MOrderLine ol){\n  MPPMRP mrp=getQuery(ol,null,null).firstOnly();\n  if (mrp == null) {\n    mrp=new MPPMRP(ol.getCtx(),0,ol.get_TrxName());\n    mrp.setC_OrderLine_ID(ol.getC_OrderLine_ID());\n  }\n  mrp.setAD_Org_ID(ol.getAD_Org_ID());\n  mrp.setC_Order(ol.getParent());\n  mrp.setDescription(ol.getDescription());\n  mrp.setName(\"MRP\");\n  mrp.setDatePromised(ol.getDatePromised());\n  mrp.setDateStartSchedule(ol.getDatePromised());\n  mrp.setDateFinishSchedule(ol.getDatePromised());\n  mrp.setDateOrdered(ol.getDateOrdered());\n  mrp.setM_Warehouse_ID(ol.getM_Warehouse_ID());\n  mrp.setM_Product_ID(ol.getM_Product_ID());\n  mrp.setQty(ol.getQtyOrdered().subtract(ol.getQtyDelivered()));\n  mrp.saveEx();\n  MOrder o=ol.getParent();\n  MDocType dt=MDocType.get(o.getCtx(),o.getC_DocTypeTarget_ID());\n  String DocSubTypeSO=dt.getDocSubTypeSO();\n  if (MDocType.DOCSUBTYPESO_StandardOrder.equals(DocSubTypeSO)) {\n    MPPMRP.createMOMakeTo(ol,ol.getQtyOrdered());\n  }\n  return;\n}\n",
      "formalParam": [
        "MOrderLine"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.Timestamp.Timestamp(long)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/extension_libero_manufacturing/extension/eevolution/libero/src/main/java/org/eevolution/model/MPPMRP.java",
      "types": [
        "System",
        "Timestamp",
        "Long"
      ],
      "apicalls": [
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.sql.Timestamp.Timestamp(long)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "sql",
        "current",
        "millis",
        "timestamp",
        "java",
        "system",
        "long",
        "time"
      ]
    },
    {
      "method": "mlsd@679",
      "body": "/** \n * Performs remote directory listing on the given path. Sends 'MLSD &lt;path&gt;' command. \n * @param path directory to perform listing of. If null, listingof current directory will be performed.\n * @return Vector list of {@link MlsxEntry MlsxEntry} objects, representingremote files\n */\npublic Vector mlsd(String path) throws ServerException, ClientException, IOException {\n  ByteArrayDataSink sink=new ByteArrayDataSink();\n  mlsd(path,sink);\n  ByteArrayOutputStream received=sink.getData();\n  BufferedReader reader=new BufferedReader(new StringReader(received.toString()));\n  Vector fileList=new Vector();\n  MlsxEntry entry=null;\n  String line=null;\n  while ((line=reader.readLine()) != null) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"line ->\" + line);\n    }\n    try {\n      entry=new MlsxEntry(line);\n    }\n catch (    FTPException e) {\n      ClientException ce=new ClientException(ClientException.UNSPECIFIED,\"Could not create MlsxEntry\");\n      ce.setRootCause(e);\n      throw ce;\n    }\n    fileList.addElement(entry);\n  }\n  return fileList;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.BufferedReader.readLine()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "Vector",
      "file": "./java_projects/JGlobus/gridftp/src/main/java/org/globus/ftp/FTPClient.java",
      "types": [
        "BufferedReader",
        "Vector",
        "Object",
        "Reader",
        "String",
        "Integer",
        "StringReader",
        "ByteArrayOutputStream",
        "IOException"
      ],
      "apicalls": [
        "readLine",
        "toString",
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)",
            "java.io.ByteArrayOutputStream.toString()",
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.util.Vector.Vector()",
            "java.io.BufferedReader.readLine()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.io.BufferedReader.readLine()"
          ]
        }
      ],
      "keywords": [
        "array",
        "line",
        "element",
        "read",
        "integer",
        "exception",
        "java",
        "reader",
        "buffered",
        "object",
        "add",
        "vector",
        "io",
        "stream",
        "string",
        "output",
        "byte",
        "util"
      ]
    },
    {
      "method": "getPasswordAuthentication@1072",
      "body": "public PasswordAuthentication getPasswordAuthentication(String realm,URL tracker){\n  SEPasswordListener thread_listener=(SEPasswordListener)tls.get();\n  if (thread_listener != null) {\n    return (thread_listener.getAuthentication(realm,tracker));\n  }\n  Object[] handler=(Object[])password_handlers.get(tracker.toString());\n  if (handler != null) {\n    try {\n      return (((SEPasswordListener)handler[0]).getAuthentication(realm,(URL)handler[1]));\n    }\n catch (    Throwable e) {\n      Debug.printStackTrace(e);\n    }\n  }\n  Iterator it=password_listeners.iterator();\n  while (it.hasNext()) {\n    try {\n      PasswordAuthentication res=((SEPasswordListener)it.next()).getAuthentication(realm,tracker);\n      if (res != null) {\n        return (res);\n      }\n    }\n catch (    Throwable e) {\n      Debug.printStackTrace(e);\n    }\n  }\n  return (null);\n}\n",
      "formalParam": [
        "String",
        "URL"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "PasswordAuthentication",
      "file": "./java_projects/BitMate/azureus2/src/org/gudy/azureus2/core3/security/impl/SESecurityManagerImpl.java",
      "types": [
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "next",
        "java",
        "iterator",
        "util"
      ]
    },
    {
      "method": "setSource@163",
      "body": "/** \n * Resets the Loader object and sets the source of the data set to be  the supplied url.\n * @param url \tthe source url.\n * @throws IOException \tif an error occurs\n */\npublic void setSource(URL url) throws IOException {\n  m_structure=null;\n  m_XMLInstances=null;\n  setRetrieval(NONE);\n  setSource(url.openStream());\n  m_URL=url.toString();\n}\n",
      "formalParam": [
        "URL"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.openStream()",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.URL.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/weka/weka/src/main/java/weka/core/converters/XRFFLoader.java",
      "types": [
        "InputStream",
        "File",
        "Reader",
        "BufferedReader",
        "IOException",
        "String",
        "System",
        "URL",
        "InputStreamReader"
      ],
      "apicalls": [
        "getAbsolutePath",
        "openStream",
        "toString",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.openStream()",
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.net.URL.toString()"
          ]
        }
      ],
      "keywords": [
        "file",
        "java",
        "buffered",
        "path",
        "exception",
        "stream",
        "net",
        "string",
        "io",
        "lang",
        "property",
        "absolute",
        "open",
        "url",
        "system",
        "input",
        "get",
        "reader"
      ]
    },
    {
      "method": "getAllPackageLaunchCounts@1523",
      "body": "/** \n * Returns the launch count of each installed package.\n * @hide\n */\npublic Map<String,Integer> getAllPackageLaunchCounts(){\n  try {\n    IUsageStats usageStatsService=IUsageStats.Stub.asInterface(ServiceManager.getService(\"usagestats\"));\n    if (usageStatsService == null) {\n      return new HashMap<String,Integer>();\n    }\n    PkgUsageStats[] allPkgUsageStats=usageStatsService.getAllPkgUsageStats();\n    if (allPkgUsageStats == null) {\n      return new HashMap<String,Integer>();\n    }\n    Map<String,Integer> launchCounts=new HashMap<String,Integer>();\n    for (    PkgUsageStats pkgUsageStats : allPkgUsageStats) {\n      launchCounts.put(pkgUsageStats.packageName,pkgUsageStats.launchCount);\n    }\n    return launchCounts;\n  }\n catch (  RemoteException e) {\n    Log.w(TAG,\"Could not query launch counts\",e);\n    return new HashMap<String,Integer>();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)",
                "node": "DAPICall",
                "_returns": "java.lang.Integer",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Map<String,Integer>",
      "file": "./java_projects/device_allwinner_novo7a/overlay/frameworks/base/core/java/android/app/ActivityManager.java",
      "types": [
        "String",
        "Integer",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
            "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)"
          ]
        },
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()",
            "java.util.Map<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)",
            "java.util.HashMap<java.lang.String,java.lang.Integer>.HashMap<String,Integer>()"
          ]
        }
      ],
      "keywords": [
        "string",
        "put",
        "hash",
        "util",
        "integer",
        "java",
        "map"
      ]
    },
    {
      "method": "getRequestDispatcher@175",
      "body": "@Override public RequestDispatcher getRequestDispatcher(String path){\n  RequestDispatcher dispatcher;\n  if (targetContext.matches(\"^https?://.*\")) {\n    dispatcher=getDispatcher();\n    if (dispatcher == null) {\n      dispatcher=new HttpRequestDispatcher(getProxyService(),targetContext);\n    }\n  }\n else {\n    String dispatchPath=path.startsWith(\"/\") ? path : \"/\" + path;\n    dispatcher=context.getRequestDispatcher(dispatchPath);\n  }\n  return dispatcher;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "RequestDispatcher",
      "file": "./java_projects/repose/project-set/core/core-lib/src/main/java/com/rackspace/papi/filter/ServletContextWrapper.java",
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "startsWith",
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.matches(java.lang.String)",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.matches(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "starts",
        "boolean",
        "string",
        "lang",
        "matches"
      ]
    },
    {
      "method": "process@46",
      "body": "public boolean process(Set<? extends TypeElement> tes,RoundEnvironment renv){\n  messager.printMessage(NOTE,String.valueOf(eltUtils.getPackageElement(\"no.such.package\")));\n  PackageElement dir=eltUtils.getPackageElement(\"dir\");\n  messager.printMessage(NOTE,dir.getQualifiedName().toString());\n  for (  Element e : dir.getEnclosedElements())   messager.printMessage(NOTE,e.toString());\n  return true;\n}\n",
      "formalParam": [
        "Set<? extends TypeElement>",
        "RoundEnvironment"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.valueOf(char[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/langtools/test/tools/javac/processing/model/6341534/T6341534.java",
      "types": [
        "String",
        "Character",
        "CharSequence"
      ],
      "apicalls": [
        "valueOf",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.valueOf(char[])",
            "java.lang.CharSequence.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "sequence",
        "character",
        "string",
        "java",
        "value",
        "char"
      ]
    },
    {
      "method": "actionPerformed@80",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractButton.getText()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Endrov/ev/endrov/basicWindow/BatchWindow.java",
      "body": "public void actionPerformed(ActionEvent e){\n  if (bStop.getText().equals(\"Done\"))   disposeEvWindow();\n else   thread.die=true;\n}\n",
      "types": [
        "String",
        "Boolean",
        "Object",
        "AbstractButton"
      ],
      "apicalls": [
        "equals",
        "getText"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractButton.getText()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "button",
        "swing",
        "java",
        "get",
        "javax",
        "text",
        "abstract",
        "lang",
        "object",
        "string",
        "equals"
      ]
    },
    {
      "method": "test_clear@317",
      "body": "@Test public void test_clear(){\n  Set set=getSet(\"a\");\n  set.clear();\n  check(set.size() == 0,\"clear\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              },
              {
                "_call": "java.util.Set.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.Set.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ObjectFabric/objectfabric.tests/stm/com/objectfabric/TSetTests.java",
      "types": [
        "Integer",
        "Boolean",
        "Character",
        "String",
        "Set",
        "Object"
      ],
      "apicalls": [
        "size",
        "charAt",
        "clear",
        "add",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.util.Set.add(java.lang.Object)",
            "java.lang.String.length()",
            "java.util.Set.clear()",
            "java.util.Set.size()"
          ]
        }
      ],
      "keywords": [
        "clear",
        "char",
        "length",
        "character",
        "object",
        "add",
        "boolean",
        "java",
        "string",
        "integer",
        "util",
        "set",
        "size",
        "lang"
      ]
    },
    {
      "method": "isVideo@35",
      "body": "public static boolean isVideo(String aFileName){\n  return aFileName.toUpperCase().endsWith(\"MP4\") || aFileName.toUpperCase().endsWith(\"MPG\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ned-mobile-client/java/src/org/ned/client/utils/MediaTypeResolver.java",
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "endsWith",
        "toUpperCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toUpperCase()",
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.String.toUpperCase()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "upper",
        "case",
        "ends",
        "java",
        "string",
        "boolean"
      ]
    },
    {
      "method": "findRRset@214",
      "body": "/** \n * Determines if an RRset with the given name and type is already present in the given section.\n * @see RRset\n * @see Section\n */\npublic boolean findRRset(Name name,int type,int section){\n  if (sections[section] == null)   return false;\n  for (int i=0; i < sections[section].size(); i++) {\n    Record r=(Record)sections[section].get(i);\n    if (r.getType() == type && name.equals(r.getName()))     return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "Name",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/BitMate/azureus2/src/org/xbill/DNS/Message.java",
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "java",
        "list",
        "size",
        "integer",
        "util"
      ]
    },
    {
      "method": "load@48",
      "body": "public UrlMapping load(NutConfig config){\n  if (log.isInfoEnabled()) {\n    log.infof(\"Nutz Version : %s \",Nutz.version());\n    log.infof(\"Nutz.Mvc[%s] is initializing ...\",config.getAppName());\n  }\n  if (log.isDebugEnabled()) {\n    log.debug(\"Web Container Information:\");\n    log.debugf(\" - Default Charset : %s\",Encoding.defaultEncoding());\n    log.debugf(\" - Current . path  : %s\",new File(\".\").getAbsolutePath());\n    log.debugf(\" - Java Version    : %s\",System.getProperties().get(\"java.version\"));\n    log.debugf(\" - File separator  : %s\",System.getProperties().get(\"file.separator\"));\n    log.debugf(\" - Timezone        : %s\",System.getProperties().get(\"user.timezone\"));\n  }\n  UrlMapping mapping;\n  Stopwatch sw=Stopwatch.begin();\n  try {\n    Class<?> mainModule=config.getMainModule();\n    createContext(config);\n    createIoc(config,mainModule);\n    mapping=evalUrlMapping(config,mainModule);\n    evalLocalization(config,mainModule);\n    createSessionProvider(config,mainModule);\n    evalSetup(config,mainModule);\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(\"Error happend during start serivce!\",e);\n    throw Lang.wrapThrow(e,LoadingException.class);\n  }\n  sw.stop();\n  if (log.isInfoEnabled())   log.infof(\"Nutz.Mvc[%s] is up in %sms\",config.getAppName(),sw.getDuration());\n  return mapping;\n}\n",
      "formalParam": [
        "NutConfig"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.System.getProperties()",
            "node": "DAPICall",
            "_returns": "java.util.Properties",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.System.getProperties()",
            "node": "DAPICall",
            "_returns": "java.util.Properties",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.System.getProperties()",
            "node": "DAPICall",
            "_returns": "java.util.Properties",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "UrlMapping",
      "file": "./java_projects/nutz/src/org/nutz/mvc/impl/NutLoading.java",
      "types": [
        "Properties",
        "System",
        "Object",
        "Hashtable",
        "File",
        "String"
      ],
      "apicalls": [
        "getProperties",
        "get",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.lang.System.getProperties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "java.lang.System.getProperties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "java.lang.System.getProperties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "io",
        "lang",
        "properties",
        "path",
        "get",
        "file",
        "hashtable",
        "util",
        "absolute",
        "java",
        "system",
        "object"
      ]
    },
    {
      "method": "main@54",
      "body": "public static void main(String[] args) throws Exception {\n  System.out.println(\"Testing that inheriting the same getter from \" + \"more than one interface does not cause problems\");\n  DynamicMBean mbean=new StandardMBean(new Bar(),BarMBean.class);\n  MBeanAttributeInfo[] attrs=mbean.getMBeanInfo().getAttributes();\n  System.out.println(\"Attributes: \" + Arrays.toString(attrs));\n  if (attrs.length != 1)   throw new Exception(\"Wrong number of attributes: \" + attrs.length);\n  if (!attrs[0].getName().equals(\"NotificationInfo\"))   throw new Exception(\"Wrong attribute name: \" + attrs[0].getName());\n  System.out.println(\"Test passed\");\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.toString(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/javax/management/Introspector/DuplicateGetterTest.java",
      "types": [
        "Arrays",
        "Object",
        "String",
        "Boolean",
        "PrintStream"
      ],
      "apicalls": [
        "equals",
        "println",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.Arrays.toString(java.lang.Object[])",
            "java.io.PrintStream.println(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "stream",
        "arrays",
        "object",
        "io",
        "boolean",
        "println",
        "util",
        "print",
        "equals",
        "string",
        "java"
      ]
    },
    {
      "method": "getMedSavantDirectory@32",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.exists()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.mkdir()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/medsavant/MedSavantShared/src/org/ut/biolab/medsavant/util/DirectorySettings.java",
      "body": "/** \n * Retrieve the directory where MedSavant stores supporting files.\n * @return\n */\npublic static File getMedSavantDirectory(){\n  if (medSavantDir == null) {\n    File f=new File(System.getProperty(\"user.home\"),MiscUtils.WINDOWS ? \"medsavant\" : \".medsavant\");\n    if (!f.exists()) {\n      f.mkdir();\n    }\n    medSavantDir=f;\n  }\n  return medSavantDir;\n}\n",
      "types": [
        "File",
        "System",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "getProperty",
        "exists",
        "mkdir"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "$NOT$java.io.File.exists()",
            "java.io.File.mkdir()"
          ]
        },
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "$NOT$java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "file",
        "java",
        "exists",
        "system",
        "string",
        "lang",
        "mkdir",
        "get",
        "property",
        "io",
        "boolean"
      ]
    },
    {
      "method": "getServerAddress@37",
      "body": "/** \n * Returns preferences-specified local webserver address\n * @return\n */\npublic static InetAddress getServerAddress(){\n  String address=Platform.getPreferencesService().getString(WebServerCorePlugin.PLUGIN_ID,IWebServerPreferenceConstants.PREF_HTTP_SERVER_ADDRESS,null,new IScopeContext[]{EclipseUtil.instanceScope(),EclipseUtil.defaultScope()});\n  for (  InetAddress i : SocketUtil.getLocalAddresses()) {\n    if (i.getHostAddress().equals(address)) {\n      return i;\n    }\n  }\n  try {\n    return InetAddress.getByName(IWebServerPreferenceConstants.DEFAULT_HTTP_SERVER_ADDRESS);\n  }\n catch (  UnknownHostException e) {\n    return null;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.InetAddress.getHostAddress()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.net.InetAddress.getByName(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.net.InetAddress",
            "_throws": [
              "java.net.UnknownHostException"
            ]
          }
        ]
      },
      "returnType": "InetAddress",
      "file": "./java_projects/studio3/plugins/com.aptana.webserver.core/src/com/aptana/webserver/internal/core/preferences/WebServerPreferences.java",
      "types": [
        "InetAddress",
        "String",
        "Object",
        "UnknownHostException",
        "Boolean"
      ],
      "apicalls": [
        "equals",
        "getByName",
        "getHostAddress"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.InetAddress.getHostAddress()",
            "java.lang.String.equals(java.lang.Object)",
            "java.net.InetAddress.getByName(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "name",
        "exception",
        "unknown",
        "inet",
        "boolean",
        "net",
        "get",
        "equals",
        "object",
        "lang",
        "address",
        "host"
      ]
    },
    {
      "method": "interpret@1213",
      "body": "@Override public Object interpret(InterpreterContext context) throws InterpreterException, IOException, SAXException {\n  String enumearation=\"\";\n  NodeList childNodes=context.getSelectedFormItem().getChildNodes();\n  for (int i=0; i < childNodes.getLength(); i++) {\n    Node item=childNodes.item(i);\n    if (item.getNodeName().equals(\"choice\")) {\n      enumearation+=item.getTextContent().trim() + \"; \";\n    }\n  }\n  return enumearation;\n}\n",
      "formalParam": [
        "InterpreterContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.String.trim()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/cudl/VxmlInterpreter/src/cudl/VoiceXmlNode.java",
      "types": [
        "Object",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.trim()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "equals",
        "boolean",
        "object",
        "trim",
        "lang"
      ]
    },
    {
      "method": "parseDouble@43",
      "body": "/** \n * Returns a Double of the value represented by arg.\n * @author Klezst\n * @param arg the String to turn into a Double.\n * @return a Double of the value represented by arg.\n * @throws NumberFormatException if arg is not a valid Double.\n */\npublic static Double parseDouble(String arg) throws NumberFormatException {\n  Double result;\n  if (Util.isAny(arg,\"inf\",\"+inf\")) {\n    result=Double.MAX_VALUE;\n  }\n else   if (arg.equalsIgnoreCase(\"-inf\")) {\n    result=Double.MIN_VALUE;\n  }\n else {\n    result=Double.parseDouble(arg);\n  }\n  return result;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Double.parseDouble(java.lang.String)",
                "node": "DAPICall",
                "_returns": "double",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "Double",
      "file": "./java_projects/BukkitUtil/src/main/java/com/gmail/klezst/bukkit/bukkitutil/util/Format.java",
      "types": [
        "Double",
        "NumberFormatException",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "parseDouble",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.Double.parseDouble(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "exception",
        "java",
        "string",
        "boolean",
        "number",
        "ignore",
        "case",
        "lang",
        "format",
        "parse",
        "double"
      ]
    },
    {
      "method": "testConsumeStreamHistory@39",
      "body": "@Test public void testConsumeStreamHistory() throws IOException {\n  List<Transaction> transactions=new ArrayList<Transaction>();\n  XppStreamConsumer consumer=new HistoryConsumer(new DefaultLog(),transactions);\n  AccuRevJUnitUtil.consume(\"/streamHistory.xml\",consumer);\n  assertThat(transactions.size(),is(4));\n  Transaction t=transactions.get(0);\n  assertThat(t.getTranType(),is(\"promote\"));\n  assertThat(t.getWhen(),is(new Date(1233782838000L)));\n  assertThat(t.getAuthor(),is(\"ggardner\"));\n  assertThat(t.getId(),is(50L));\n  assertThat(t.getVersions().size(),is(2));\n  assertThat(t.getVersions(),hasItem(version(8L,\"/./tcktests/src/main/java/Application.java\",\"1/1\",\"2/3\")));\n  t=transactions.get(1);\n  assertThat(t.getComment(),is(\"hpromoting\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/maven-scm/maven-scm-providers/maven-scm-provider-accurev/src/test/java/org/apache/maven/scm/provider/accurev/cli/HistoryConsumerTest.java",
      "types": [
        "Long",
        "Date",
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "list",
        "long",
        "date",
        "array",
        "util"
      ]
    },
    {
      "method": "handleError@2799",
      "body": "public void handleError(SQLException newError){\n  if (batchException == null) {\n    int[] successCounts;\n    if (resultIndex >= updateCounts.length)     successCounts=updateCounts;\n else {\n      successCounts=new int[resultIndex];\n      System.arraycopy(updateCounts,0,successCounts,0,resultIndex);\n    }\n    String queryString=\"<unknown>\";\n    if (resultIndex < queries.length)     queryString=queries[resultIndex].toString(parameterLists[resultIndex]);\n    batchException=new BatchUpdateException(GT.tr(\"Batch entry {0} {1} was aborted.  Call getNextException to see the cause.\",new Object[]{new Integer(resultIndex),queryString}),newError.getSQLState(),successCounts);\n  }\n  batchException.setNextException(newError);\n}\n",
      "formalParam": [
        "SQLException"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.SQLException.getSQLState()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.sql.SQLException.setNextException(java.sql.SQLException)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pgjdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java",
      "types": [
        "SQLException",
        "Object",
        "System",
        "Integer",
        "String"
      ],
      "apicalls": [
        "setNextException",
        "arraycopy",
        "getSQLState"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.sql.SQLException.getSQLState()",
            "java.sql.SQLException.setNextException(java.sql.SQLException)"
          ]
        }
      ],
      "keywords": [
        "object",
        "lang",
        "integer",
        "system",
        "string",
        "next",
        "state",
        "exception",
        "get",
        "set",
        "sql",
        "java",
        "arraycopy"
      ]
    },
    {
      "method": "ByteStreamReadingMessageSource@48",
      "body": "public ByteStreamReadingMessageSource(InputStream stream,int bufferSize){\n  this.streamMonitor=stream;\n  if (stream instanceof BufferedInputStream) {\n    this.stream=(BufferedInputStream)stream;\n  }\n else   if (bufferSize > 0) {\n    this.stream=new BufferedInputStream(stream,bufferSize);\n  }\n else {\n    this.stream=new BufferedInputStream(stream);\n  }\n}\n",
      "formalParam": [
        "InputStream",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/spring-integration/spring-integration-stream/src/main/java/org/springframework/integration/stream/ByteStreamReadingMessageSource.java",
      "types": [
        "InputStream",
        "Integer",
        "BufferedInputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)"
          ]
        },
        {
          "calls": [
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)"
          ]
        }
      ],
      "keywords": [
        "buffered",
        "input",
        "stream",
        "java",
        "integer",
        "io"
      ]
    },
    {
      "method": "cancel@20",
      "body": "@Override public boolean cancel(boolean arg0){\n  if (!isDone() && cancelled.compareAndSet(false,true)) {\n    latch.countDown();\n    return true;\n  }\n else {\n    return false;\n  }\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.concurrent.atomic.AtomicBoolean.get()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.concurrent.CountDownLatch.countDown()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Joker/frontend/src/main/java/cl/own/usi/cache/impl/FutureCachedUser.java",
      "types": [
        "concurrent",
        "Boolean",
        "CountDownLatch"
      ],
      "apicalls": [
        "countDown",
        "get",
        "compareAndSet"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)",
            "java.util.concurrent.CountDownLatch.countDown()"
          ]
        }
      ],
      "keywords": [
        "atomic",
        "util",
        "get",
        "concurrent",
        "count",
        "boolean",
        "latch",
        "compare",
        "java",
        "set"
      ]
    },
    {
      "method": "Economy_Craftconomy3@48",
      "formalParam": [
        "Plugin"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.logging.Logger.info(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Vault/src/net/milkbowl/vault/economy/plugins/Economy_Craftconomy3.java",
      "body": "public Economy_Craftconomy3(Plugin plugin){\n  this.plugin=plugin;\n  Bukkit.getServer().getPluginManager().registerEvents(new EconomyServerListener(this),plugin);\n  if (economy == null) {\n    Plugin ec=plugin.getServer().getPluginManager().getPlugin(\"Craftconomy3\");\n    if (ec != null && ec.isEnabled() && ec.getClass().getName().equals(\"com.greatmancode.craftconomy3.BukkitLoader\")) {\n      economy=(BukkitLoader)ec;\n      log.info(String.format(\"[%s][Economy] %s hooked.\",plugin.getDescription().getName(),name));\n    }\n  }\n}\n",
      "types": [
        "String",
        "Locale",
        "Object",
        "Logger"
      ],
      "apicalls": [
        "info",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "java.util.logging.Logger.info(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "logger",
        "info",
        "object",
        "util",
        "string",
        "locale",
        "logging",
        "java",
        "format"
      ]
    },
    {
      "method": "getLaplacian@338",
      "formalParam": [
        "ImagePlus",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "node": "DAPICall",
            "_returns": "java.lang.Thread",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.isInterrupted()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "Callable<ArrayList<ImagePlus>>",
      "file": "./java_projects/fiji/src-plugins/Trainable_Segmentation/src/main/java/trainableSegmentation/FeatureStack3D.java",
      "body": "/** \n * Get Laplacian features (to be submitted in an ExecutorService)\n * @param originalImage input image\n * @param sigma smoothing scale\t\n * @return filter Laplacian filter image\n */\npublic Callable<ArrayList<ImagePlus>> getLaplacian(final ImagePlus originalImage,final double sigma){\n  if (Thread.currentThread().isInterrupted())   return null;\n  return new Callable<ArrayList<ImagePlus>>(){\n    public ArrayList<ImagePlus> call(){\n      ImagePlus[] channels=extractChannels(originalImage);\n      ArrayList<ImagePlus>[] results=new ArrayList[channels.length];\n      for (int ch=0; ch < channels.length; ch++) {\n        results[ch]=new ArrayList<ImagePlus>();\n        final ImagePlus channel=channels[ch].duplicate();\n        channel.getImageStack().addSlice(\"pad-back\",channels[ch].getImageStack().getProcessor(channels[ch].getImageStackSize()));\n        channel.getImageStack().addSlice(\"pad-front\",channels[ch].getImageStack().getProcessor(1),1);\n        imagescience.image.Image img=imagescience.image.Image.wrap(channel);\n        final Aspects aspects=img.aspects();\n        imagescience.image.Image newimg=new FloatImage(img);\n        final Laplacian laplace=new Laplacian();\n        newimg=laplace.run(newimg,sigma);\n        newimg.aspects(aspects);\n        final ImagePlus ip=newimg.imageplus();\n        ip.setTitle(availableFeatures[LAPLACIAN] + \"_\" + sigma);\n        ip.getImageStack().deleteLastSlice();\n        ip.getImageStack().deleteSlice(1);\n        results[ch].add(ip);\n      }\n      return mergeResultChannels(results);\n    }\n  }\n;\n}\n",
      "types": [
        "Thread",
        "Boolean"
      ],
      "apicalls": [
        "currentThread",
        "isInterrupted"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.isInterrupted()"
          ]
        }
      ],
      "keywords": [
        "thread",
        "lang",
        "current",
        "java",
        "interrupted",
        "boolean"
      ]
    },
    {
      "method": "purgeActions@225",
      "body": "public static void purgeActions(Thread t){\n  purgeActions(t,true);\n}\n",
      "formalParam": [
        "Thread"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadLocal.set(java.lang.Object)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Stack.empty()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/narayana/ArjunaCore/arjuna/classes/com/arjuna/ats/internal/arjuna/thread/ThreadActionData.java",
      "types": [
        "ThreadLocal",
        "Object",
        "Stack",
        "Boolean"
      ],
      "apicalls": [
        "empty",
        "set"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal.set(java.lang.Object)",
            "$NOT$java.util.Stack.empty()",
            "$NOT$java.util.Stack.empty()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "util",
        "thread",
        "java",
        "local",
        "object",
        "empty",
        "set",
        "stack"
      ]
    },
    {
      "method": "createConferenceTimer@253",
      "body": "/** \n * Create a timer for a conference notification. \n */\npublic Timer createConferenceTimer(final Conference info){\n  Timer startConference=new Timer();\n  Date start=info.getStartDate();\n  startConference.schedule(new TimerTask(){\n    @Override public void run(){\n      RosterGroup group=createGroup(info);\n      Message broadcastMessage=new Message();\n      broadcastMessage.setSubject(\"Broadcast\");\n      startDashboard();\n      broadcast(group,broadcastMessage);\n    }\n  }\n,start);\n  return startConference;\n}\n",
      "formalParam": [
        "Conference"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Timer.Timer()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Timer.schedule(java.util.TimerTask,java.util.Date)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Timer",
      "file": "./java_projects/OpenComm-Group/2012_2013/Sept14Cycle/OpenComm_Sean/src/edu/cornell/opencomm/network/SchedulingService.java",
      "types": [
        "TimerTask",
        "Date",
        "Timer"
      ],
      "apicalls": [
        "schedule"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Timer.Timer()",
            "java.util.Timer.schedule(java.util.TimerTask,java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "java",
        "task",
        "date",
        "timer",
        "util",
        "schedule"
      ]
    },
    {
      "method": "deleteRegRequest@724",
      "body": "/** \n * Deletes the registering user from the database following a disapproval from  an admin.\n * @param conn\n * @param username\n * @return 1 if successfully deleted.\n */\npublic static int deleteRegRequest(Connection conn,String username){\n  int status=-1;\n  String query=\"DELETE FROM main.registrationrequests WHERE username = ?\";\n  PreparedStatement pstmt=null;\n  try {\n    pstmt=conn.prepareStatement(query);\n    pstmt.setString(1,username);\n    status=pstmt.executeUpdate();\n  }\n catch (  SQLException e) {\n    if (DEBUG)     e.printStackTrace();\n    status=-1;\n  }\n finally {\n    DBManager.closePreparedStatement(pstmt);\n  }\n  return status;\n}\n",
      "formalParam": [
        "Connection",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.prepareStatement(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.sql.PreparedStatement",
                "_throws": [
                  "java.sql.SQLException"
                ]
              },
              {
                "_call": "java.sql.PreparedStatement.setString(int,java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.sql.SQLException"
                ]
              },
              {
                "_call": "java.sql.PreparedStatement.executeUpdate()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.sql.SQLException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/ChenSun/CS5430/src/database/DatabaseAdmin.java",
      "types": [
        "PreparedStatement",
        "String",
        "Throwable",
        "Connection",
        "Integer",
        "SQLException"
      ],
      "apicalls": [
        "printStackTrace",
        "setString",
        "executeUpdate",
        "prepareStatement"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.executeUpdate()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.executeUpdate()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "prepared",
        "sql",
        "trace",
        "connection",
        "java",
        "print",
        "statement",
        "string",
        "exception",
        "update",
        "set",
        "integer",
        "execute",
        "stack",
        "prepare",
        "lang"
      ]
    },
    {
      "method": "checkLibraryForUsage@162",
      "body": "/** \n * Utility method to check if the specified library name has been set by the configuration as one to use.\n * @param libName the library name to test\n * @return true if the useLibrary list has not been set, is empty, or if theprovided name starts with a useList entry on it (good for sets of libraries).\n */\npublic boolean checkLibraryForUsage(String libName){\n  boolean useLibrary=true;\n  List<String> libraryNames=getUseLibraries();\n  if (libraryNames != null && !libraryNames.isEmpty()) {\n    useLibrary=false;\n    for (    String libraryName : libraryNames) {\n      if (libName.startsWith(libraryName)) {\n        useLibrary=true;\n        break;\n      }\n    }\n  }\n  return useLibrary;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.List<java.lang.String>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/openmap/src/openmap/com/bbn/openmap/layer/vpf/LayerGraphicWarehouseSupport.java",
      "types": [
        "String",
        "List",
        "Boolean"
      ],
      "apicalls": [
        "startsWith",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.List<java.lang.String>.isEmpty()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.List<java.lang.String>.isEmpty()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "starts",
        "boolean",
        "util",
        "java",
        "empty",
        "lang",
        "string"
      ]
    },
    {
      "method": "run@467",
      "body": "public void run(Stack inStack) throws ParseException {\n  Object param=inStack.pop();\n  if (param instanceof Double) {\n    double dRolls=((Double)param).doubleValue();\n    if (dRolls > Integer.MAX_VALUE) {\n      throw new ParseException(\"Values greater than \" + Integer.MAX_VALUE + \" not allowed.\");\n    }\n    int iRolls=(int)Math.round(dRolls);\n    if (iRolls > 0) {\n      inStack.push(new TopRolls(iRolls));\n    }\n else {\n      throw new ParseException(\"Values less than 1 are not allowed\");\n    }\n  }\n else {\n    throw new ParseException(\"Invalid parameter type\");\n  }\n}\n",
      "formalParam": [
        "Stack"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Stack.pop()",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Double.doubleValue()",
            "_throws": [],
            "_returns": "double",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Stack.push(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pcgen-svn/code/src/java/pcgen/core/RollingMethods.java",
      "types": [
        "Object",
        "Double",
        "Stack"
      ],
      "apicalls": [
        "push",
        "pop",
        "doubleValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Stack.pop()",
            "java.lang.Double.doubleValue()",
            "java.util.Stack.push(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "double",
        "object",
        "lang",
        "java",
        "pop",
        "value",
        "push",
        "util",
        "stack"
      ]
    },
    {
      "method": "descendant@281",
      "body": "/** \n * Creates jquery descendant selector: <tt>#ancestorComponentId #descendantComponentId</tt>\n * @see <a\n\t *      href=\"http://api.jquery.com/descendant-selector/\">http://api.jquery.com/descendant-selector/</a>\n * @param ancestorComponent a ancestor component\n * @param descendantComponent a descendant component\n * @return\n */\npublic static final SBuilder descendant(Component ancestorComponent,Component descendantComponent){\n  return new SBuilder().descendant(ancestorComponent,descendantComponent);\n}\n",
      "formalParam": [
        "Component",
        "Component"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          }
        ]
      },
      "returnType": "SBuilder",
      "file": "./java_projects/jqwicket/jqwicket/src/main/java/com/google/code/jqwicket/api/S.java",
      "types": [
        "CharSequence",
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.CharSequence)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "append",
        "char",
        "buffer",
        "lang",
        "java",
        "sequence",
        "string"
      ]
    },
    {
      "method": "findNext@156",
      "formalParam": [
        "int",
        "Finder"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.List.get(int)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/Openbravo-POS-iPhone-App/UnicentaPOS/src-data/com/openbravo/data/user/BrowsableData.java",
      "body": "public final int findNext(int index,Finder f) throws BasicException {\n  int i=index + 1;\n  while (i < m_aData.size()) {\n    if (f.match(this.getElementAt(i))) {\n      return i;\n    }\n    i++;\n  }\n  i=0;\n  while (i < index) {\n    if (f.match(this.getElementAt(i))) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n}\n",
      "types": [
        "List",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.get(int)",
            "java.util.List.size()",
            "java.util.List.get(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "integer",
        "util",
        "size",
        "list",
        "object"
      ]
    },
    {
      "method": "testRespondingGatewayPRPAIN201305UV02NullNhinTargetCommunitiesType@382",
      "body": "@Test public void testRespondingGatewayPRPAIN201305UV02NullNhinTargetCommunitiesType(){\n  try {\n    EntityPatientDiscoveryProxyWebServiceSecuredImpl webProxy=new EntityPatientDiscoveryProxyWebServiceSecuredImpl(){\n      @Override protected Log createLogger(){\n        return mockLog;\n      }\n      @Override protected WebServiceProxyHelper createWebServiceProxyHelper(){\n        return mockWebServiceProxyHelper;\n      }\n      @Override protected String getEndpointURL(){\n        return \"\";\n      }\n    }\n;\n    context.checking(new Expectations(){\n{\n        allowing(mockLog).debug(with(any(String.class)));\n        oneOf(mockLog).error(\"NhinTargetCommunitiesType was null\");\n      }\n    }\n);\n    RespondingGatewayPRPAIN201306UV02ResponseType response=webProxy.respondingGatewayPRPAIN201305UV02(mockPdRequest,mockAssertion,null);\n    assertNull(\"RespondingGatewayPRPAIN201306UV02ResponseType was not null\",response);\n  }\n catch (  Throwable t) {\n    System.out.println(\"Error running testRespondingGatewayPRPAIN201305UV02NullNhinTargetCommunitiesType test: \" + t.getMessage());\n    t.printStackTrace();\n    fail(\"Error running testRespondingGatewayPRPAIN201305UV02NullNhinTargetCommunitiesType test: \" + t.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/CONNECT/Product/Production/Services/PatientDiscoveryCore/src/test/java/gov/hhs/fha/nhinc/patientdiscovery/entity/proxy/EntityPatientDiscoveryProxyWebServiceSecuredImplTest.java",
      "types": [
        "PrintStream",
        "String",
        "Throwable"
      ],
      "apicalls": [
        "println",
        "printStackTrace",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "message",
        "stack",
        "throwable",
        "io",
        "get",
        "string",
        "print",
        "java",
        "lang",
        "println",
        "trace",
        "stream"
      ]
    },
    {
      "method": "avas@277",
      "body": "/** \n * Return an immutable List of the AVAs in this RDN.\n */\npublic List<AVA> avas(){\n  List<AVA> list=avaList;\n  if (list == null) {\n    list=Collections.unmodifiableList(Arrays.asList(assertion));\n    avaList=list;\n  }\n  return list;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          }
        ]
      },
      "returnType": "List<AVA>",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/sun/security/x509/RDN.java",
      "types": [
        "List",
        "Arrays",
        "Collections"
      ],
      "apicalls": [
        "unmodifiableList",
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "arrays",
        "util",
        "unmodifiable",
        "java",
        "list"
      ]
    },
    {
      "method": "evaluate@63",
      "formalParam": [
        "Flow",
        "FlowExec"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.Collection<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Endrov/ev/endrov/flowBasic/collection/FlowUnitSize.java",
      "body": "public void evaluate(Flow flow,FlowExec exec) throws Exception {\n  Map<String,Object> lastOutput=exec.getLastOutput(this);\n  lastOutput.clear();\n  Object a=flow.getInputValue(this,exec,\"in\");\n  if (a instanceof String)   lastOutput.put(\"size\",((String)a).length());\n  if (a instanceof Collection<?>)   lastOutput.put(\"size\",((Collection<?>)a).size());\n else   throw new BadTypeFlowException(\"Unsupported collection type \" + a.getClass());\n}\n",
      "types": [
        "Integer",
        "String",
        "Object",
        "Collection",
        "Map"
      ],
      "apicalls": [
        "put",
        "clear",
        "size",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.clear()",
            "java.lang.String.length()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.util.Collection<Tau_E>.size()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "size",
        "string",
        "map",
        "put",
        "integer",
        "length",
        "object",
        "clear",
        "util",
        "java",
        "collection"
      ]
    },
    {
      "method": "setMicrobeamManipulationType@13711",
      "body": "public void setMicrobeamManipulationType(MicrobeamManipulationType type,int experimentIndex,int microbeamManipulationIndex){\n  for (Iterator iter=delegates.iterator(); iter.hasNext(); ) {\n    Object o=iter.next();\n    if (o instanceof MetadataStore) {\n      MetadataStore store=(MetadataStore)o;\n      store.setMicrobeamManipulationType(type,experimentIndex,microbeamManipulationIndex);\n    }\n  }\n}\n",
      "formalParam": [
        "MicrobeamManipulationType",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bioformats/components/scifio/src/loci/formats/meta/AggregateMetadata.java",
      "types": [
        "Object",
        "Boolean",
        "List",
        "Iterator"
      ],
      "apicalls": [
        "iterator",
        "hasNext",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "list",
        "java",
        "iterator",
        "object",
        "next",
        "boolean",
        "util"
      ]
    },
    {
      "method": "SysUtilRoogleGruppen@66",
      "body": "public SysUtilRoogleGruppen(){\n  super(new GridLayout(1,1));\n  this.setBorder(BorderFactory.createEmptyBorder(20,40,20,0));\n  setBackgroundPainter(Reha.thisClass.compoundPainter.get(\"SystemInit\"));\n  jscroll=new JScrollPane();\n  jscroll.setOpaque(false);\n  jscroll.getViewport().setOpaque(false);\n  jscroll.setBorder(null);\n  jscroll.getVerticalScrollBar().setUnitIncrement(15);\n  SwingUtilities.invokeLater(new Runnable(){\n    public void run(){\n      jscroll.setViewportView(getRoogleGruppenLayout());\n      jscroll.validate();\n      add(jscroll);\n      knopfGedoense(new int[]{1,1,1,0,0,0,0});\n      validate();\n    }\n  }\n);\n  return;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.border.Border"
          },
          {
            "_call": "javax.swing.JScrollPane.JScrollPane()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JScrollPane.getViewport()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.JViewport"
          },
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JScrollPane.getVerticalScrollBar()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.JScrollBar"
          },
          {
            "_call": "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/thera-pi-2/Reha/src/systemEinstellungen/SysUtilRoogleGruppen.java",
      "types": [
        "Integer",
        "Boolean",
        "Runnable",
        "Border",
        "JComponent",
        "JScrollPane",
        "JViewport",
        "JScrollBar",
        "BorderFactory",
        "SwingUtilities"
      ],
      "apicalls": [
        "setOpaque",
        "invokeLater",
        "createEmptyBorder",
        "setBorder",
        "getVerticalScrollBar",
        "getViewport"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",
            "javax.swing.JScrollPane.JScrollPane()",
            "javax.swing.JComponent.setOpaque(boolean)",
            "javax.swing.JScrollPane.getViewport()",
            "javax.swing.JComponent.setOpaque(boolean)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "javax.swing.JScrollPane.getVerticalScrollBar()",
            "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
          ]
        }
      ],
      "keywords": [
        "get",
        "set",
        "border",
        "vertical",
        "pane",
        "bar",
        "utilities",
        "j",
        "empty",
        "scroll",
        "later",
        "viewport",
        "component",
        "boolean",
        "factory",
        "create",
        "javax",
        "runnable",
        "invoke",
        "swing",
        "opaque",
        "integer"
      ]
    },
    {
      "method": "addRexpValue@1814",
      "formalParam": [
        "int",
        "org.godhuli.rhipe.REXPProtos.REXP"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.add(int,Tau_E)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Builder",
      "file": "./java_projects/RHIPE/code/java/org/godhuli/rhipe/REXPProtos.java",
      "body": "public Builder addRexpValue(int index,org.godhuli.rhipe.REXPProtos.REXP value){\n  if (rexpValueBuilder_ == null) {\n    if (value == null) {\n      throw new NullPointerException();\n    }\n    ensureRexpValueIsMutable();\n    rexpValue_.add(index,value);\n    onChanged();\n  }\n else {\n    rexpValueBuilder_.addMessage(index,value);\n  }\n  return this;\n}\n",
      "types": [
        "Integer",
        "Collection",
        "List",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.List<Tau_E>.add(int,Tau_E)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "array",
        "java",
        "list",
        "add",
        "integer",
        "util"
      ]
    },
    {
      "method": "hasNext@1044",
      "body": "@Override public boolean hasNext(){\n  return myReverse ? myIterator.hasPrevious() : myIterator.hasNext();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.ListIterator<Tau_E>.hasPrevious()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [
              {
                "_call": "java.util.ListIterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/MPS/editor/editor-runtime/source/jetbrains/mps/nodeEditor/cells/EditorCell_Collection.java",
      "types": [
        "ListIterator",
        "Boolean"
      ],
      "apicalls": [
        "hasPrevious",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ListIterator<Tau_E>.hasPrevious()"
          ]
        },
        {
          "calls": [
            "java.util.ListIterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "java",
        "boolean",
        "previous",
        "util",
        "next",
        "list"
      ]
    },
    {
      "method": "MenuBarView@20",
      "body": "/** \n * Constructor Registers the tools provided in the actions list for display as menu options. This constructor should not be accessed directly, but rather, the factory method provided by MiniDraw should be used. Only ToolControllers that are enabled, i.e. the tool is not null, are added to the ToolBar.\n * @param actions associated MiniDraw tools\n * @return Initialized MenuBarView\n */\nMenuBarView(ToolList actions){\n  JMenu toolMenu=new JMenu(\"Tool\");\n  ToolListIterator iter=actions.iterator();\n  while (iter.hasNext()) {\n    Action a=(Action)iter.next();\n    if (a.isEnabled())     toolMenu.add(a);\n  }\n  add(toolMenu);\n}\n",
      "formalParam": [
        "ToolList"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JMenu.JMenu(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JMenu.add(javax.swing.Action)",
            "node": "DAPICall",
            "_returns": "javax.swing.JMenuItem",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Software-Engineering-Languages-and-Tools/ObjectDraw2/src/MenuBarView.java",
      "types": [
        "JMenu",
        "JMenuItem",
        "Action",
        "String"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JMenu.JMenu(java.lang.String)",
            "javax.swing.JMenu.add(javax.swing.Action)"
          ]
        }
      ],
      "keywords": [
        "string",
        "j",
        "menu",
        "swing",
        "javax",
        "add",
        "action",
        "item"
      ]
    },
    {
      "method": "createContentTextCss@130",
      "body": "public void createContentTextCss(OutputStream out,Object data) throws IOException {\n  out.write(CSS_TEXT.getBytes());\n  out.flush();\n}\n",
      "formalParam": [
        "OutputStream",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.OutputStream.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/qa/metamer/application/src/main/java/org/richfaces/tests/metamer/bean/a4j/A4JMediaOutputBean.java",
      "types": [
        "String",
        "OutputStream",
        "IOException",
        "Byte"
      ],
      "apicalls": [
        "flush",
        "write",
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.io.OutputStream.write(byte[])",
            "java.io.OutputStream.flush()"
          ]
        }
      ],
      "keywords": [
        "output",
        "exception",
        "java",
        "bytes",
        "string",
        "byte",
        "write",
        "get",
        "io",
        "flush",
        "stream",
        "lang"
      ]
    },
    {
      "method": "registerKnowledgeBase@99",
      "body": "public void registerKnowledgeBase(ReteooRuleBase kbase){\n  KnowledgeBaseMonitoring mbean=new KnowledgeBaseMonitoring(kbase);\n  registerMBean(kbase,mbean,mbean.getName());\n}\n",
      "formalParam": [
        "ReteooRuleBase"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "_throws": [],
            "_returns": "javax.management.MBeanServer",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "javax.management.MBeanServer.registerMBean(java.lang.Object,javax.management.ObjectName)",
                "_throws": [
                  "javax.management.InstanceAlreadyExistsException",
                  "javax.management.MBeanRegistrationException",
                  "javax.management.NotCompliantMBeanException"
                ],
                "_returns": "javax.management.ObjectInstance",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Map<java.lang.Object,java.util.List<javax.management.ObjectName>>.get(java.lang.Object)",
                "_throws": [],
                "_returns": "java.util.List<javax.management.ObjectName>",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.LinkedList<javax.management.ObjectName>.LinkedList<ObjectName>()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Map<java.lang.Object,java.util.List<javax.management.ObjectName>>.put(java.lang.Object,java.util.List<javax.management.ObjectName>)",
                "_throws": [],
                "_returns": "java.util.List<javax.management.ObjectName>",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.List<javax.management.ObjectName>.add(javax.management.ObjectName)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$javax.management.MBeanServer.isRegistered(javax.management.ObjectName)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/drools/drools-core/src/main/java/org/drools/management/DroolsManagementAgent.java",
      "types": [
        "LinkedList",
        "Boolean",
        "Map",
        "Object",
        "MBeanRegistrationException",
        "ObjectName",
        "ObjectInstance",
        "MBeanServer",
        "InstanceAlreadyExistsException",
        "List",
        "ManagementFactory",
        "NotCompliantMBeanException"
      ],
      "apicalls": [
        "isRegistered",
        "getPlatformMBeanServer",
        "add",
        "get",
        "registerMBean",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "$NOT$javax.management.MBeanServer.isRegistered(javax.management.ObjectName)"
          ]
        },
        {
          "calls": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "$NOT$javax.management.MBeanServer.isRegistered(javax.management.ObjectName)",
            "javax.management.MBeanServer.registerMBean(java.lang.Object,javax.management.ObjectName)",
            "java.util.Map<java.lang.Object,java.util.List<javax.management.ObjectName>>.get(java.lang.Object)",
            "java.util.LinkedList<javax.management.ObjectName>.LinkedList<ObjectName>()",
            "java.util.Map<java.lang.Object,java.util.List<javax.management.ObjectName>>.put(java.lang.Object,java.util.List<javax.management.ObjectName>)",
            "java.util.List<javax.management.ObjectName>.add(javax.management.ObjectName)"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "map",
        "registration",
        "platform",
        "javax",
        "bean",
        "linked",
        "registered",
        "java",
        "name",
        "instance",
        "exists",
        "server",
        "put",
        "lang",
        "management",
        "register",
        "object",
        "get",
        "already",
        "add",
        "compliant",
        "factory",
        "list",
        "exception",
        "m"
      ]
    },
    {
      "method": "getExtensions@220",
      "body": "/** \n * Returns an unmodifiable collection of the packet extensions attached to the packet.\n * @return the packet extensions.\n */\npublic synchronized Collection<PacketExtension> getExtensions(){\n  if (packetExtensions == null) {\n    return Collections.emptyList();\n  }\n  return Collections.unmodifiableList(new ArrayList<PacketExtension>(packetExtensions));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.emptyList()",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          }
        ]
      },
      "returnType": "Collection<PacketExtension>",
      "file": "./java_projects/XMPP-for-Android/src/org/jivesoftware/smack/packet/Packet.java",
      "types": [
        "ArrayList",
        "List",
        "Collections",
        "Collection"
      ],
      "apicalls": [
        "emptyList",
        "unmodifiableList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.emptyList()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "array",
        "empty",
        "collection",
        "unmodifiable",
        "list",
        "collections",
        "util",
        "java"
      ]
    },
    {
      "method": "expandUrl@112",
      "body": "public String expandUrl(){\n  String result=expand();\n  if (StringUtils.hasContent(result)) {\n    try {\n      if (PathUtils.isFilePath(result) && !result.startsWith(\"file:\")) {\n        result=new File(result).toURI().toURL().toString();\n      }\n else {\n        result=new URL(result).toString();\n      }\n    }\n catch (    MalformedURLException e) {\n      SoapUI.logError(e);\n    }\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              },
              {
                "_call": "java.net.URL.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.File(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.File.toURI()",
                "node": "DAPICall",
                "_returns": "java.net.URI",
                "_throws": []
              },
              {
                "_call": "java.net.URI.toURL()",
                "node": "DAPICall",
                "_returns": "java.net.URL",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              },
              {
                "_call": "java.net.URL.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/soapui/src/java/com/eviware/soapui/impl/wsdl/teststeps/AbstractPathPropertySupport.java",
      "types": [
        "Throwable",
        "Boolean",
        "File",
        "URI",
        "String",
        "URL",
        "MalformedURLException"
      ],
      "apicalls": [
        "printStackTrace",
        "toURI",
        "toString",
        "startsWith",
        "toURL"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "$NOT$java.lang.String.startsWith(java.lang.String)",
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.toString()"
          ]
        },
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "$NOT$java.lang.String.startsWith(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.toURI()",
            "java.net.URI.toURL()",
            "java.net.URL.toString()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "stack",
        "lang",
        "print",
        "malformed",
        "throwable",
        "boolean",
        "url",
        "trace",
        "uri",
        "net",
        "starts",
        "io",
        "file",
        "string",
        "java"
      ]
    },
    {
      "method": "updateSafety@489",
      "body": "/** \n * Update the 'unsafeIn' and 'unsafeOut' sets of this node. \n */\npublic void updateSafety(){\n  int oldOutCardinality=unsafeOut.cardinality();\n  for (NodeCons cons=succ; cons != null; cons=cons.next) {\n    Node n=cons.node;\n    unsafeOut.or(n.unsafeIn);\n  }\n  if (unsafeOut.cardinality() != oldOutCardinality)   dirty=true;\n  unsafeIn.or(unsafeOut);\n  unsafeIn.andNot(def);\n  unsafeIn.or(alloc);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.cardinality()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.cardinality()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.andNot(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Open-Quark/src/CAL_Platform/src/org/openquark/cal/internal/javamodel/NullingClassAdapter.java",
      "types": [
        "Integer",
        "BitSet"
      ],
      "apicalls": [
        "or",
        "andNot",
        "cardinality"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.cardinality()",
            "java.util.BitSet.or(java.util.BitSet)",
            "java.util.BitSet.cardinality()",
            "java.util.BitSet.or(java.util.BitSet)",
            "java.util.BitSet.andNot(java.util.BitSet)",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "util",
        "set",
        "integer",
        "cardinality",
        "bit",
        "java"
      ]
    },
    {
      "method": "setColumnHeadersHeightUnified@641",
      "body": "/** \n * Sets the flag if the top-right, top-left corner and the column header will have the same height or different heights.\n * @param columnHeadersHeightUnified true or false.\n */\npublic void setColumnHeadersHeightUnified(boolean columnHeadersHeightUnified){\n  boolean old=_columnHeadersHeightUnified;\n  if (old != columnHeadersHeightUnified) {\n    _columnHeadersHeightUnified=columnHeadersHeightUnified;\n    firePropertyChange(PROPERTY_COLUMN_HEADERS_HEIGHT_UNIFIED,old,_horizontalScrollBarCoversWholeWidth);\n    invalidate();\n    doLayout();\n  }\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.invalidate()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.doLayout()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jide-oss/src/com/jidesoft/swing/JideScrollPane.java",
      "types": [
        "Boolean",
        "JComponent",
        "String",
        "Container"
      ],
      "apicalls": [
        "doLayout",
        "firePropertyChange",
        "invalidate"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "java.awt.Container.invalidate()",
            "java.awt.Container.doLayout()"
          ]
        }
      ],
      "keywords": [
        "string",
        "swing",
        "j",
        "java",
        "layout",
        "change",
        "component",
        "container",
        "javax",
        "invalidate",
        "boolean",
        "awt",
        "fire",
        "property"
      ]
    },
    {
      "method": "ConvertingMethod@207",
      "body": "private ConvertingMethod(Method m) throws OpenDataException {\n  this.method=m;\n  MXBeanMappingFactory mappingFactory=MXBeanMappingFactory.DEFAULT;\n  returnMapping=mappingFactory.mappingForType(m.getGenericReturnType(),mappingFactory);\n  Type[] params=m.getGenericParameterTypes();\n  paramMappings=new MXBeanMapping[params.length];\n  boolean identity=true;\n  for (int i=0; i < params.length; i++) {\n    paramMappings[i]=mappingFactory.mappingForType(params[i],mappingFactory);\n    identity&=DefaultMXBeanMappingFactory.isIdentity(paramMappings[i]);\n  }\n  paramConversionIsIdentity=identity;\n}\n",
      "formalParam": [
        "Method"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.reflect.Method.getGenericReturnType()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Type"
          },
          {
            "_call": "java.lang.reflect.Method.getGenericParameterTypes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Type[]"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/com/sun/jmx/mbeanserver/ConvertingMethod.java",
      "types": [
        "Type",
        "Method"
      ],
      "apicalls": [
        "getGenericReturnType",
        "getGenericParameterTypes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.Method.getGenericReturnType()",
            "java.lang.reflect.Method.getGenericParameterTypes()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "type",
        "method",
        "types",
        "get",
        "generic",
        "reflect",
        "parameter",
        "java"
      ]
    },
    {
      "method": "delimit@730",
      "formalParam": [
        "T[]",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jpropel-light/src/propel/core/utils/Linq.java",
      "body": "/** \n * Concatenates the given values using their toString() method and appending the given delimiter between all values. Returns String.Empty if an empty or null collection was provided. Ignores null collection items.\n * @throws NullPointerException An argument is null.\n */\npublic static <T>String delimit(T[] values,String delimiter){\n  return delimit(values,delimiter,null);\n}\n",
      "types": [
        "Integer",
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "builder",
        "integer",
        "length",
        "java",
        "lang"
      ]
    },
    {
      "method": "getUri@738",
      "body": "/** \n * This method populates all path, matrix, and query parameters and saves it internally. Once its called once it returns the cached value.\n * @return\n * @throws Exception\n */\npublic String getUri() throws Exception {\n  if (finalUri != null)   return finalUri;\n  UriBuilderImpl builder=(UriBuilderImpl)uri.clone();\n  if (matrixParameters != null) {\n    for (    Map.Entry<String,List<String>> entry : matrixParameters.entrySet()) {\n      List<String> values=entry.getValue();\n      for (      String value : values)       builder.matrixParam(entry.getKey(),value);\n    }\n  }\n  if (queryParameters != null) {\n    for (    Map.Entry<String,List<String>> entry : queryParameters.entrySet()) {\n      List<String> values=entry.getValue();\n      for (      String value : values)       builder.queryParam(entry.getKey(),value);\n    }\n  }\n  if (pathParameterList != null && !pathParameterList.isEmpty()) {\n    finalUri=builder.build(pathParameterList.toArray()).toString();\n  }\n else   if (pathParameters != null && !pathParameters.isEmpty()) {\n    for (    Map.Entry<String,List<String>> entry : pathParameters.entrySet()) {\n      List<String> values=entry.getValue();\n      for (      String value : values)       builder.substitutePathParam(entry.getKey(),value,false);\n    }\n  }\n  if (finalUri == null)   finalUri=builder.build().toString();\n  return finalUri;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.List<java.lang.String>.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.List<java.lang.String>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/resteasy-mobile/src/main/java/org/jboss/resteasy/client/ClientRequest.java",
      "types": [
        "List",
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "isEmpty",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.List<java.lang.String>.isEmpty()",
            "java.util.List<java.lang.String>.toArray()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.List<java.lang.String>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "array",
        "empty",
        "list",
        "util",
        "object",
        "string",
        "java"
      ]
    },
    {
      "method": "windowClosing@2593",
      "body": "public void windowClosing(WindowEvent we){\n  tw.setVisible(false);\n  tw.dispose();\n  System.exit(0);\n}\n",
      "formalParam": [
        "WindowEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Window.setVisible(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Window.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.exit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/security/tools/policytool/PolicyTool.java",
      "types": [
        "Boolean",
        "Window",
        "System",
        "Integer"
      ],
      "apicalls": [
        "dispose",
        "setVisible",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Window.setVisible(boolean)",
            "java.awt.Window.dispose()",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "dispose",
        "integer",
        "exit",
        "boolean",
        "window",
        "awt",
        "lang",
        "system",
        "set",
        "java",
        "visible"
      ]
    },
    {
      "method": "test1@29",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": [
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/drlvm/vm/tests/kernel/java/lang/reflect/ProtectedAccessCheck1.java",
      "body": "public void test1(){\n  B1 b=new B1();\n  new A1().new Inner1().invoke(b);\n}\n",
      "types": [
        "SecurityException",
        "InvocationTargetException",
        "IllegalArgumentException",
        "NoSuchMethodException",
        "Class",
        "Object",
        "String",
        "Method",
        "IllegalAccessException"
      ],
      "apicalls": [
        "invoke",
        "getDeclaredMethod"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "declared",
        "lang",
        "class",
        "security",
        "argument",
        "string",
        "invoke",
        "reflect",
        "get",
        "exception",
        "object",
        "illegal",
        "target",
        "invocation",
        "access",
        "method",
        "java"
      ]
    },
    {
      "method": "getAccessorList@678",
      "body": "/** \n * @return\n */\npublic ArrayList getAccessorList(){\n  LOG.debug(\"getAccessorList()\");\n  Iterator iter=forumManager.getAccessorsList(topic,(DiscussionForum)topic.getBaseForum()).iterator();\n  while (iter.hasNext()) {\n    accessorList.add((String)iter.next());\n  }\n  return accessorList;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "ArrayList",
      "file": "./java_projects/Fudan-Sakai/msgcntr/messageforums-app/src/java/org/sakaiproject/tool/messageforums/ui/DiscussionTopicBean.java",
      "types": [
        "Object",
        "ArrayList",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "list",
        "java",
        "boolean",
        "array",
        "object",
        "iterator",
        "add",
        "next",
        "util"
      ]
    },
    {
      "method": "get@45",
      "body": "public String get(){\n  int i=0;\n  final int index=getByteBufferPosition() + offset();\n  for (; (this.tsring[i]=getByteBuffer().get(i + DBCBaseStruct.this.stringBufPos + getByteBuffer().getInt(index))) != 0; i++) {\n  }\n  try {\n    return this.decoder.decode(ByteBuffer.wrap(this.tsring,0,i)).toString();\n  }\n catch (  final CharacterCodingException e) {\n    e.printStackTrace();\n  }\n  return \"\";\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.nio.ByteBuffer.wrap(byte[],int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.nio.ByteBuffer"
              },
              {
                "_call": "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer)",
                "_throws": [
                  "java.nio.charset.CharacterCodingException"
                ],
                "node": "DAPICall",
                "_returns": "java.nio.CharBuffer"
              },
              {
                "_call": "java.nio.CharBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/JMaNGOS/Tools/src/main/java/org/jmangos/tools/dbc/dataholder/DBCBaseStruct.java",
      "types": [
        "CharsetDecoder",
        "CharacterCodingException",
        "Integer",
        "CharBuffer",
        "Throwable",
        "Character",
        "String",
        "Byte",
        "ByteBuffer"
      ],
      "apicalls": [
        "wrap",
        "toString",
        "printStackTrace",
        "decode"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[],int,int)",
            "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer)",
            "java.nio.CharBuffer.toString()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[],int,int)",
            "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer)",
            "java.nio.CharBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "character",
        "string",
        "exception",
        "stack",
        "throwable",
        "decoder",
        "buffer",
        "char",
        "charset",
        "java",
        "print",
        "wrap",
        "coding",
        "decode",
        "nio",
        "byte",
        "integer",
        "lang",
        "trace"
      ]
    },
    {
      "method": "toString@8431",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"stats_args(\");\n  boolean first=true;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/indextank-engine/gen-java/com/flaptor/indextank/rpc/Indexer.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "string",
        "java",
        "lang",
        "builder"
      ]
    },
    {
      "method": "getMapValueElement@103",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<java.lang.Object,java.lang.Object>.LinkedHashMap<Object,Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.SortedMap<Tau_K,Tau_V>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/platform/dependencies/hive/0.8.1-wso2v2/hbase-handler/src/java/org/apache/hadoop/hive/hbase/LazyHBaseCellMap.java",
      "body": "/** \n * Get the value in the map for the given key.\n * @param key\n * @return\n */\n@Override public Object getMapValueElement(Object key){\n  if (!getParsed()) {\n    parse();\n  }\n  for (  Map.Entry<Object,Object> entry : cachedMap.entrySet()) {\n    LazyPrimitive<?,?> lazyKeyI=(LazyPrimitive<?,?>)entry.getKey();\n    Object keyI=lazyKeyI.getWritableObject();\n    if (keyI == null) {\n      continue;\n    }\n    if (keyI.equals(key)) {\n      LazyObject<?> v=(LazyObject<?>)entry.getValue();\n      return v == null ? v : v.getObject();\n    }\n  }\n  return null;\n}\n",
      "types": [
        "Set",
        "SortedMap",
        "Object",
        "LinkedHashMap"
      ],
      "apicalls": [
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<java.lang.Object,java.lang.Object>.LinkedHashMap<Object,Object>()",
            "java.util.SortedMap<Tau_K,Tau_V>.entrySet()"
          ]
        }
      ],
      "keywords": [
        "map",
        "entry",
        "object",
        "java",
        "set",
        "hash",
        "sorted",
        "linked",
        "util"
      ]
    },
    {
      "method": "getEffectivePort@983",
      "body": "/** \n * @hide \n */\npublic int getEffectivePort(){\n  return getEffectivePort(scheme,port);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/libcore_1/luni/src/main/java/java/net/URI.java",
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "boolean",
        "string",
        "java",
        "case",
        "lang",
        "ignore"
      ]
    },
    {
      "method": "exec@50",
      "body": "@Override public void exec() throws CommandAbstractException {\n  if (!getSession().getConfiguration().getFtpInternalConfiguration().isAcceptAuthProt()) {\n    throw new Reply534Exception(\"AUTH SSL / TLS not supported\");\n  }\n  if (getSession().isSsl()) {\n    throw new Reply503Exception(\"Session already using SSL / TLS\");\n  }\n  if (!hasArg()) {\n    throw new Reply501Exception(\"Missing Parameter: TLS or SSL\");\n  }\n  String[] types=getArgs();\n  if (types[0].equalsIgnoreCase(\"TLS\")) {\n    logger.debug(\"Start TLS\");\n    getSession().rein();\n    getSession().setNextCommand(this);\n    getSession().setReplyCode(ReplyCode.REPLY_234_SECURITY_DATA_EXCHANGE_COMPLETE,null);\n  }\n else   if (types[0].equalsIgnoreCase(\"SSL\")) {\n    logger.debug(\"Start SSL\");\n    getSession().rein();\n    getSession().setNextCommand(this);\n    getSession().setReplyCode(ReplyCode.REPLY_234_SECURITY_DATA_EXCHANGE_COMPLETE,null);\n    getSession().setDataSsl(true);\n  }\n else {\n    throw new Reply504Exception(\"Unknown Parameter: \" + types[0]);\n  }\n  logger.debug(\"End of AUTH \" + types[0]);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/WaarpFtp/src/main/java/org/waarp/ftp/core/command/rfc4217/AUTH.java",
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "ignore",
        "case",
        "equals",
        "string",
        "boolean"
      ]
    },
    {
      "method": "copy@75",
      "body": "public Random copy(){\n  ByteBuffer buffer=ByteBuffer.allocate(32);\n  buffer.put((ByteBuffer)this.buffer.duplicate().position(0));\n  return new Random(buffer);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.allocate(int)",
            "_throws": [],
            "_returns": "java.nio.ByteBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
            "_throws": [],
            "_returns": "java.nio.ByteBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.ByteBuffer.duplicate()",
            "_throws": [],
            "_returns": "java.nio.ByteBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.ByteBuffer.order(java.nio.ByteOrder)",
            "_throws": [],
            "_returns": "java.nio.ByteBuffer",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Random",
      "file": "./java_projects/classpath/gnu/javax/net/ssl/provider/Random.java",
      "types": [
        "ByteBuffer",
        "Integer",
        "ByteOrder"
      ],
      "apicalls": [
        "put",
        "order",
        "allocate",
        "duplicate"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.allocate(int)",
            "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
            "java.nio.ByteBuffer.duplicate()",
            "java.nio.ByteBuffer.order(java.nio.ByteOrder)"
          ]
        }
      ],
      "keywords": [
        "put",
        "allocate",
        "duplicate",
        "order",
        "java",
        "byte",
        "nio",
        "buffer",
        "integer"
      ]
    },
    {
      "method": "equals@278",
      "body": "/** \n * Returns true if the provided object is an RSModel with the same x, y and z points as this model. This method compares all of the values in the three vertex arrays.\n * @return <tt>true</tt> if the provided object is a model with the samepoints as this.\n */\n@Override public boolean equals(Object o){\n  if (o instanceof RSModel) {\n    RSModel m=(RSModel)o;\n    return Arrays.equals(indices1,m.indices1) && Arrays.equals(xPoints,m.xPoints) && Arrays.equals(yPoints,m.yPoints)&& Arrays.equals(zPoints,m.zPoints);\n  }\n  return false;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.equals(short[],short[])",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.equals(int[],int[])",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/RSBot/src/org/rsbot/script/wrappers/RSModel.java",
      "types": [
        "Short",
        "Arrays",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.equals(short[],short[])",
            "java.util.Arrays.equals(int[],int[])"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "equals",
        "java",
        "boolean",
        "arrays",
        "short"
      ]
    },
    {
      "method": "getView@58",
      "body": "@Override public View getView(final int position,View convertView,ViewGroup parent){\n  View row=convertView;\n  Amen amen=getItem(position);\n  ViewHolder holder;\n  if (row == null) {\n    holder=new ViewHolder();\n    row=inflater.inflate(textViewResourceId,parent,false);\n    holder.user=(TextView)row.findViewById(R.id.user);\n    holder.statementView=(TextView)row.findViewById(R.id.statement);\n    holder.userImage=(ImageView)row.findViewById(R.id.user_image);\n    holder.mediaPhoto=(ImageView)row.findViewById(R.id.media_photo);\n    holder.objektPhoto=(ImageView)row.findViewById(R.id.objekt_photo);\n    holder.objektPhotoWrapper=row.findViewById(R.id.objekt_photo_wrapper);\n    holder.sinceView=(TextView)row.findViewById(R.id.since);\n    holder.amenCountView=(TextView)row.findViewById(R.id.amen_count);\n    holder.commentsCountView=(TextView)row.findViewById(R.id.comments_count);\n    row.setTag(holder);\n  }\n else {\n    holder=(ViewHolder)row.getTag();\n  }\n  if (holder.user != null) {\n    holder.user.setTypeface(amenTypeThin);\n    String from=amen.getUser().getName();\n    if (amen.isAmen() && amen.getReferringAmen() != null) {\n      from=from + \" amen'd \" + amen.getReferringAmen().getUser().getName();\n    }\n    if (amen.isDispute() && amen.getReferringAmen() != null) {\n      from=from + \" disputes \" + amen.getReferringAmen().getUser().getName();\n    }\n    holder.user.setText(from);\n  }\n  holder.statementView.setTypeface(amenTypeBold);\n  holder.statementView.setText(styleAmenWithColor(amen,getContext()));\n  if (holder.userImage != null) {\n    String pictureUrl=amen.getUser().getPhoto();\n    if (TextUtils.isEmpty(pictureUrl)) {\n      pictureUrl=amen.getUser().getPicture();\n      if (!TextUtils.isEmpty(pictureUrl)) {\n        pictureUrl=pictureUrl + \"?type=normal\";\n      }\n    }\n    holder.userImage.setImageResource(R.drawable.placeholder);\n    holder.userImage.setTag(pictureUrl);\n  }\n  String amenMediaUrl=\"\";\n  final List<MediaItem> amenMediaItems=amen.getMedia();\n  holder.mediaPhoto.setVisibility(View.GONE);\n  if (amenMediaItems != null && amenMediaItems.size() > 0) {\n    for (    MediaItem item : amenMediaItems) {\n      amenMediaUrl=item.getContentUrl();\n      Log.d(TAG,\"amen mediaItem type: \" + item.getType() + \" url: \"+ amenMediaUrl);\n      if (item.getType().contains(\"photo\")) {\n        holder.mediaPhoto.setVisibility(View.VISIBLE);\n        holder.mediaPhoto.setImageResource(R.drawable.placeholder);\n        holder.mediaPhoto.setTag(amenMediaUrl);\n        break;\n      }\n    }\n  }\n  final List<MediaItem> objektMediaItems=amen.getStatement().getObjekt().getMedia();\n  holder.objektPhotoWrapper.setVisibility(View.GONE);\n  if (objektMediaItems != null && objektMediaItems.size() > 0) {\n    for (    MediaItem item : objektMediaItems) {\n      String mediaUrl=item.getContentUrl();\n      Log.d(TAG,\" objekt mediaItem type: \" + item.getType() + \" url: \"+ mediaUrl);\n      if (item.getType().contains(\"photo\") && !mediaUrl.equals(amenMediaUrl)) {\n        holder.objektPhotoWrapper.setVisibility(View.VISIBLE);\n        holder.objektPhoto.setImageResource(R.drawable.placeholder);\n        holder.objektPhoto.setTag(mediaUrl);\n        holder.objektPhotoWrapper.setVisibility(View.VISIBLE);\n        break;\n      }\n    }\n  }\n  long now=System.currentTimeMillis();\n  if (amen.getCreatedAt() != null) {\n    long createdAtDate=amen.getCreatedAt().getTime();\n    long since=now - createdAtDate;\n    since=since / 1000;\n    TextView sinceView=holder.sinceView;\n    sinceView.setText(renderShortDeltaT(since));\n  }\n  TextView amenCountView=holder.amenCountView;\n  if (amenCountView != null) {\n    amenCountView.setTypeface(amenTypeThin);\n    long count=0;\n    if (amen.getStatement().getAgreeingNetworkCount() != null) {\n      count=amen.getStatement().getAgreeingNetworkCount();\n    }\n else {\n      count=amen.getStatement().getTotalAmenCount();\n    }\n    if (count > 0) {\n      amenCountView.setText(count + \" Amen\");\n      amenCountView.setVisibility(View.VISIBLE);\n    }\n else {\n      amenCountView.setVisibility(View.INVISIBLE);\n    }\n  }\n  TextView commentsCountView=holder.commentsCountView;\n  if (commentsCountView != null && amen.getCommentsCount() != null) {\n    commentsCountView.setTypeface(amenTypeThin);\n    long count=amen.getCommentsCount();\n    if (amen.getCommentsCount() > 0) {\n      commentsCountView.setText(\" / \" + count + \" Comments\");\n      commentsCountView.setVisibility(View.VISIBLE);\n    }\n else {\n      commentsCountView.setVisibility(View.INVISIBLE);\n    }\n  }\n  return row;\n}\n",
      "formalParam": [
        "int",
        "View",
        "ViewGroup"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "View",
      "file": "./java_projects/AmDroid/AmDroid/src/main/java/com/jaeckel/amenoid/AmenListAdapter.java",
      "types": [
        "Object",
        "Boolean",
        "Long",
        "System",
        "String"
      ],
      "apicalls": [
        "equals",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "long",
        "millis",
        "java",
        "system",
        "time",
        "lang",
        "boolean",
        "object",
        "current",
        "string",
        "equals"
      ]
    },
    {
      "method": "containsJavaCode@250",
      "body": "@Test public void containsJavaCode() throws IOException {\n  String pathname=\"test/ceylondoc\";\n  String moduleName=\"com.redhat.ceylon.ceylondoc.test.modules.mixed\";\n  compileJavaModule(pathname,\"com/redhat/ceylon/ceylondoc/test/modules/mixed/Java.java\");\n  CeylonDocTool tool=tool(pathname,moduleName,true,\"build/ceylon-cars\");\n  tool.makeDoc();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ceylon-compiler/test/ceylondoc/com/redhat/ceylon/ceylondoc/test/CeylonDocToolTest.java",
      "types": [
        "ArrayList",
        "List",
        "String",
        "Boolean",
        "Arrays",
        "Integer"
      ],
      "apicalls": [
        "asList",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "array",
        "add",
        "arrays",
        "list",
        "integer",
        "boolean",
        "string"
      ]
    },
    {
      "method": "testLoadAllGroupsSummary@253",
      "body": "/** \n * Test groups summary loading\n */\n@Test public void testLoadAllGroupsSummary() throws Exception {\n  System.out.println(\">>> Loading all groups summary\");\n  UserTransaction tx=getUserTransaction();\n  try {\n    AdminEJBLocal instance=(AdminEJBLocal)getEJBInstance(AdminEJB.class.getSimpleName());\n    tx.begin();\n    List<GroupSummary> result=instance.getGroupsSummary();\n    tx.commit();\n    assertNotNull(\"List of groups summary is null.\",result);\n    assertFalse(\"List of groups summary is empty.\",result.size() <= 0);\n    System.out.println(\">>> Found \" + result.size() + \" groups summaries.\");\n  }\n catch (  Exception e) {\n    tx.rollback();\n    fail(e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/services/ejbs/admin/src/test/java/org/sola/services/ejbs/admin/AdminEJBIT.java",
      "types": [
        "Character",
        "Throwable",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "println",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "io",
        "get",
        "print",
        "throwable",
        "java",
        "lang",
        "stream",
        "string",
        "message",
        "println",
        "character"
      ]
    },
    {
      "method": "createTestInstance@63",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.logging.Logger.getLogger(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.util.logging.Logger",
                "_throws": []
              },
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.net.URI.URI(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.URISyntaxException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/jersey_1/jersey/jersey-json/src/test/java/com/sun/jersey/json/impl/SimpleBeanWithJustOneAttributeAndValue.java",
      "body": "public static Object createTestInstance(){\n  SimpleBeanWithJustOneAttributeAndValue instance=new SimpleBeanWithJustOneAttributeAndValue();\n  try {\n    instance.uri=new URI(\"http://localhost:8080/jedna/bedna/\");\n    instance.value=\"characters\";\n  }\n catch (  URISyntaxException ex) {\n    Logger.getLogger(SimpleBeanWithJustOneAttributeAndValue.class.getName()).log(Level.SEVERE,null,ex);\n  }\n  return instance;\n}\n",
      "types": [
        "String",
        "URISyntaxException",
        "URI",
        "Class",
        "Throwable",
        "Level",
        "Logger"
      ],
      "apicalls": [
        "getName",
        "getLogger",
        "log"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.URI(java.lang.String)",
            "java.lang.Class<Tau_T>.getName()",
            "java.util.logging.Logger.getLogger(java.lang.String)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        },
        {
          "calls": [
            "java.net.URI.URI(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "exception",
        "level",
        "util",
        "class",
        "log",
        "name",
        "throwable",
        "uri",
        "string",
        "syntax",
        "net",
        "logging",
        "lang",
        "get",
        "logger"
      ]
    },
    {
      "method": "testIsDuplicateKey_isDuplicateKey_usingCustomProperties@93",
      "body": "@Test public void testIsDuplicateKey_isDuplicateKey_usingCustomProperties() throws Exception {\n  Properties props=new Properties();\n  props.setProperty(\"MyCustom_Database_Engine.duplicateKeyCodes\",\"-104\");\n  String databaseProductName=\"MyCustom Database Engine\";\n  DataSource dataSource=createMockDataSource(databaseProductName);\n  SQLErrorCodesResolver sqlErrorCodesResolver=new SQLErrorCodesResolver(props,dataSource);\n  SQLException sqlException=new SQLException(\"test\",\"error\",-104);\n  boolean isDuplicateKey=sqlErrorCodesResolver.isDuplicateKeyViolation(new PersistenceException(\"error\",sqlException));\n  assertTrue(isDuplicateKey);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.DatabaseMetaData.getDatabaseProductName()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.Connection.getMetaData()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "java.sql.DatabaseMetaData",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.SQLException.SQLException(java.lang.String,java.lang.String,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AxonFramework/core/src/test/java/org/axonframework/eventstore/jpa/SQLErrorCodesResolverTest.java",
      "types": [
        "Properties",
        "Connection",
        "DatabaseMetaData",
        "SQLException",
        "String",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "getMetaData",
        "getDatabaseProductName",
        "setProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.sql.DatabaseMetaData.getDatabaseProductName()",
            "java.sql.Connection.getMetaData()",
            "java.sql.SQLException.SQLException(java.lang.String,java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "data",
        "property",
        "string",
        "database",
        "meta",
        "connection",
        "util",
        "get",
        "name",
        "integer",
        "java",
        "product",
        "object",
        "properties",
        "set",
        "exception",
        "sql"
      ]
    },
    {
      "method": "writeBoolean@1886",
      "body": "public void writeBoolean(boolean v) throws IOException {\n  if (pos >= MAX_BLOCK_SIZE) {\n    drain();\n  }\n  Bits.putBoolean(buf,pos++,v);\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.io.OutputStream.write(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/java/io/ObjectOutputStream.java",
      "types": [
        "IOException",
        "Integer",
        "Byte",
        "OutputStream"
      ],
      "apicalls": [
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "output",
        "io",
        "integer",
        "exception",
        "byte",
        "java",
        "write",
        "stream"
      ]
    },
    {
      "method": "testSessionManager@70",
      "body": "@Test public void testSessionManager(){\n  assertFalse(_sessionManager.contextExistsFor(\"A\"));\n  CASValue<Object> mockCasValue=mock(CASValue.class);\n  Map<String,Object> mockSession=new HashMap<String,Object>();\n  when(mockCasValue.getValue()).thenReturn(mockSession);\n  when(mockMemcacheClient.getAndTouch(eq(\"A\"),anyInt())).thenReturn(mockCasValue);\n  Map<String,Object> session=_sessionManager.getContext(\"A\");\n  assertTrue(session.isEmpty());\n  session.put(\"hello\",\"world\");\n  sleep(5 * 1000);\n  when(mockMemcacheClient.getAndTouch(eq(\"A\"),anyInt())).thenReturn(mockCasValue);\n  session=_sessionManager.getContext(\"A\");\n  assertEquals(\"world\",session.get(\"hello\"));\n  sleep(15 * 1000);\n  when(mockMemcacheClient.getAndTouch(eq(\"A\"),anyInt())).thenReturn(null);\n  session=_sessionManager.getContext(\"A\");\n  assertFalse(session.containsKey(\"hello\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/onebusaway-nyc/onebusaway-nyc-sms-webapp/src/test/java/org/onebusaway/nyc/sms/impl/MemcacheSessionManagerImplTest.java",
      "types": [
        "Thread",
        "Map",
        "Long",
        "Object",
        "String",
        "InterruptedException",
        "HashMap",
        "Boolean"
      ],
      "apicalls": [
        "put",
        "sleep",
        "get",
        "isEmpty",
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.lang.Thread.sleep(long)",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "java.lang.Thread.sleep(long)",
            "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "string",
        "boolean",
        "exception",
        "lang",
        "thread",
        "get",
        "interrupted",
        "empty",
        "put",
        "key",
        "object",
        "hash",
        "contains",
        "java",
        "long",
        "util",
        "sleep"
      ]
    },
    {
      "method": "process@495",
      "formalParam": [
        "EventObject"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/frameworks_base/voip/java/com/android/server/sip/SipSessionGroup.java",
      "body": "public boolean process(EventObject evt) throws SipException {\n  if (isLoggable(this,evt))   Log.d(TAG,\" ~~~~~   \" + this + \": \"+ SipSession.State.toString(mState)+ \": processing \"+ log(evt));\n  if (isRequestEvent(Request.INVITE,evt)) {\n    processNewInviteRequest((RequestEvent)evt);\n    return true;\n  }\n else   if (isRequestEvent(Request.OPTIONS,evt)) {\n    mSipHelper.sendResponse((RequestEvent)evt,Response.OK);\n    return true;\n  }\n else {\n    return false;\n  }\n}\n",
      "types": [
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "boolean",
        "lang",
        "java",
        "string",
        "equals"
      ]
    },
    {
      "method": "convertDateTimeFormat@354",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.text.DateFormat.parse(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.Date",
            "_throws": [
              "java.text.ParseException"
            ]
          },
          {
            "_call": "java.util.Date.getHours()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Date.setHours(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/EK2012/EK2012Predictions/src/EK2012/Predictions/EK2012PredictionsActivity.java",
      "body": "public String convertDateTimeFormat(String input) throws ParseException {\n  SimpleDateFormat dateFormat=new SimpleDateFormat(\"yyyyy-MM-dd kk:mm:ss\");\n  Date kickoffDate=dateFormat.parse(input);\n  kickoffDate.setHours(kickoffDate.getHours() + 2);\n  return (String)DateFormat.format(\"dd-MM-yyyy kk:mm\",kickoffDate);\n}\n",
      "types": [
        "Integer",
        "ParseException",
        "String",
        "SimpleDateFormat",
        "DateFormat",
        "Date"
      ],
      "apicalls": [
        "setHours",
        "parse",
        "getHours"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.parse(java.lang.String)",
            "java.util.Date.getHours()",
            "java.util.Date.setHours(int)"
          ]
        }
      ],
      "keywords": [
        "util",
        "get",
        "date",
        "integer",
        "hours",
        "set",
        "text",
        "format",
        "exception",
        "parse",
        "java",
        "simple",
        "string"
      ]
    },
    {
      "method": "testWithFile@43",
      "body": "public void testWithFile() throws Exception {\n  FileUtil.createFile(testFile,\"content\");\n  response.setBody(testFile);\n  response.sendTo(this);\n  assertTrue(closed);\n  ResponseParser result=new ResponseParser(new ByteArrayInputStream(output.toByteArray()));\n  assertEquals(200,result.getStatus());\n  assertEquals(7 + \"\",result.getHeader(\"Content-Length\"));\n  assertEquals(\"content\",result.getBody());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fitnesse/src/fitnesse/http/InputStreamResponseTest.java",
      "types": [
        "Byte",
        "ByteArrayInputStream",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "io",
        "byte",
        "stream",
        "input",
        "output",
        "array",
        "java"
      ]
    },
    {
      "method": "putObjectWithSignedUrl@976",
      "body": "/** \n * Puts an object using a pre-signed PUT URL generated for that object. <p> This operation does not required any CS functionality as it merely uploads the object by performing a standard HTTP PUT using the signed URL.\n * @param signedPutUrl a signed PUT URL generated with {@link com.snda.storage.service.CSService#createSignedPutUrl(String,String,java.util.Map,java.util.Date)}.\n * @param object the object to upload, which must correspond to the object for which the URL was signed.\n * @return the CSObject put to CS. The CSObject returned will represent the object created in CS.\n */\npublic CSObject putObjectWithSignedUrl(String signedPutUrl,CSObject object){\n  HttpPut putMethod=new HttpPut(signedPutUrl);\n  Map<String,Object> renamedMetadata=renameMetadataKeys(object.getMetadataMap());\n  addMetadataToHeaders(putMethod,renamedMetadata);\n  if (!object.containsMetadata(\"Content-Length\")) {\n    throw new IllegalStateException(\"Content-Length must be specified for objects put using signed PUT URLs\");\n  }\n  HttpEntity requestEntity=null;\n  boolean isLiveMD5HashingRequired=isLiveMD5HashingRequired(object);\n  String csEndpoint=this.getEndpoint();\n  if (object.getDataInputStream() != null) {\n    requestEntity=new InputStreamEntity(object.getDataInputStream(),object.getContentLength());\n    putMethod.setEntity(requestEntity);\n  }\n  HttpResponse httpResponse=performRequest(putMethod,new int[]{200,204});\n  releaseConnection(httpResponse);\n  try {\n    object.closeDataInputStream();\n  }\n catch (  IOException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Unable to close data input stream for object '\" + object.getKey() + \"'\",e);\n    }\n  }\n  try {\n    StorageObject uploadedObject=ServiceUtils.buildObjectFromUrl(putMethod.getURI().getHost(),putMethod.getURI().getRawPath(),csEndpoint);\n    uploadedObject.setBucketName(uploadedObject.getBucketName());\n    Map<String,Object> map=new HashMap<String,Object>();\n    map.putAll(convertHeadersToMap(httpResponse.getAllHeaders()));\n    uploadedObject.replaceAllMetadata(ServiceUtils.cleanRestMetadataMap(map,this.getRestHeaderPrefix(),this.getRestMetadataPrefix()));\n    return (CSObject)uploadedObject;\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new ServiceException(\"Unable to determine name of object created with signed PUT\",e);\n  }\n}\n",
      "formalParam": [
        "String",
        "CSObject"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.putAll(java.util.Map)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "CSObject",
      "file": "./java_projects/sndacs-java/src/main/java/com/snda/storage/service/impl/rest/httpclient/RestStorageService.java",
      "types": [
        "Object",
        "HashMap",
        "Map",
        "String"
      ],
      "apicalls": [
        "putAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.putAll(java.util.Map)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "map",
        "object",
        "put",
        "string",
        "java",
        "util"
      ]
    },
    {
      "method": "exception@97",
      "body": "@Override public void exception(Throwable t){\n  activeErrors.add(t);\n}\n",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/turmeric-releng/toolchain/banned-references-maven-plugin/src/test/java/org/ebayopensource/turmeric/maven/banrefs/reports/JunitReport.java",
      "types": [
        "Boolean",
        "String",
        "Object",
        "Class",
        "Locale",
        "List",
        "Throwable"
      ],
      "apicalls": [
        "getName",
        "add",
        "getMessage",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "class",
        "get",
        "java",
        "locale",
        "util",
        "lang",
        "add",
        "string",
        "list",
        "object",
        "throwable",
        "name",
        "boolean",
        "message",
        "format"
      ]
    },
    {
      "method": "putAll@173",
      "body": "public void putAll(Map<? extends K,? extends V> mapToCopy){\n  Iterator it=mapToCopy.entrySet().iterator();\n  while (it.hasNext()) {\n    Map.Entry entry=(Map.Entry)it.next();\n    K key=(K)entry.getKey();\n    V value=(V)entry.getValue();\n    validate(key,value);\n  }\n  map.putAll(mapToCopy);\n}\n",
      "formalParam": [
        "Map<? extends K,? extends V>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.entrySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geogebra/common/src/org/apache/commons/collections15/map/PredicatedMap.java",
      "types": [
        "Set",
        "Iterator",
        "Map",
        "Boolean"
      ],
      "apicalls": [
        "entrySet",
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.entrySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "set",
        "map",
        "next",
        "java",
        "iterator",
        "util",
        "boolean",
        "entry"
      ]
    },
    {
      "method": "print@10",
      "body": "public void print(){\n  String name=\"ffffffffffff\";\n  System.out.println(name);\n  System.out.println(legth);\n  System.out.println(isDeadly);\n  System.out.println(weight);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(double)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/test-repo-26062012/HelloWorld/src/pets/Snake.java",
      "types": [
        "Double",
        "PrintStream",
        "Boolean",
        "String",
        "Integer"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(int)",
            "java.io.PrintStream.println(boolean)",
            "java.io.PrintStream.println(double)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "double",
        "java",
        "print",
        "boolean",
        "integer",
        "println",
        "string",
        "io"
      ]
    },
    {
      "method": "toArray@42",
      "body": "/** \n * Converts the given <code>List&lt;T&gt;</code> to a an array of  <code>T[]</code>.\n * @param c the Class object of the items in the list\n * @param list the list to convert\n */\npublic static <T>T[] toArray(Class<T> c,List<T> list){\n  @SuppressWarnings(\"unchecked\") T[] ta=(T[])Array.newInstance(c,list.size());\n  for (int i=0; i < list.size(); i++)   ta[i]=list.get(i);\n  return ta;\n}\n",
      "formalParam": [
        "Class<T>",
        "List<T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "_throws": [],
                "_returns": "Tau_E",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "T[]",
      "file": "./java_projects/hadoop-20-warehouse/src/core/org/apache/hadoop/util/GenericsUtil.java",
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)",
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "java",
        "get",
        "list",
        "util",
        "integer"
      ]
    },
    {
      "method": "testDefaultConstructor@77",
      "body": "public void testDefaultConstructor(){\n  log.setMethod(\"testDefaultConstructor()\");\n  for (  Class<?> element : nexClasses) {\n    try {\n      if (Modifier.isAbstract(element.getModifiers())) {\n        continue;\n      }\n      NamingException nex=(NamingException)element.newInstance();\n      assertNull(nex.getMessage());\n    }\n catch (    Throwable e) {\n      log.log(\"Failed at \" + element);\n      log.log(e);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getModifiers()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.Modifier.isAbstract(int)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/NamingExceptionsTest.java",
      "types": [
        "Throwable",
        "Modifier",
        "Integer",
        "String",
        "Boolean",
        "Class"
      ],
      "apicalls": [
        "getModifiers",
        "getMessage",
        "isAbstract"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getModifiers()",
            "java.lang.reflect.Modifier.isAbstract(int)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "reflect",
        "message",
        "abstract",
        "integer",
        "boolean",
        "get",
        "throwable",
        "modifiers",
        "modifier",
        "string",
        "java",
        "class"
      ]
    },
    {
      "method": "SanerThreadPoolServer@147",
      "body": "public SanerThreadPoolServer(TProcessorFactory processorFactory,TServerTransport serverTransport,TTransportFactory inputTransportFactory,TTransportFactory outputTransportFactory,TProtocolFactory inputProtocolFactory,TProtocolFactory outputProtocolFactory,Options options){\n  super(new Args(serverTransport).processorFactory(processorFactory).inputTransportFactory(inputTransportFactory).outputTransportFactory(outputTransportFactory).inputProtocolFactory(inputProtocolFactory).outputProtocolFactory(outputProtocolFactory));\n  executorService_=null;\n  BlockingQueue<Runnable> executorQueue;\n  if (options.queueSize == 0) {\n    executorQueue=new SynchronousQueue<Runnable>();\n  }\n else {\n    executorQueue=new LinkedBlockingQueue<Runnable>(options.queueSize);\n  }\n  executorService_=new ThreadPoolExecutor(options.minWorkerThreads,options.maxWorkerThreads,60,TimeUnit.SECONDS,executorQueue);\n  options_=options;\n}\n",
      "formalParam": [
        "TProcessorFactory",
        "TServerTransport",
        "TTransportFactory",
        "TTransportFactory",
        "TProtocolFactory",
        "TProtocolFactory",
        "Options"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/brisk/src/java/src/org/apache/hadoop/thriftfs/SanerThreadPoolServer.java",
      "types": [
        "TimeUnit",
        "Runnable",
        "BlockingQueue",
        "Long",
        "Integer",
        "ThreadPoolExecutor",
        "LinkedBlockingQueue"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>(int)",
            "java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)"
          ]
        }
      ],
      "keywords": [
        "java",
        "blocking",
        "integer",
        "executor",
        "queue",
        "time",
        "util",
        "unit",
        "linked",
        "pool",
        "long",
        "concurrent",
        "thread",
        "runnable"
      ]
    },
    {
      "method": "ChangeTee@26",
      "body": "/** \n * Creates a new instance.\n * @param outputCount The number of output destinations to write to.\n */\npublic ChangeTee(int outputCount){\n  sinkList=new ArrayList<ProxyChangeSinkChangeSource>();\n  for (int i=0; i < outputCount; i++) {\n    sinkList.add(new ProxyChangeSinkChangeSource());\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/osmosis/core/src/main/java/org/openstreetmap/osmosis/core/tee/v0_6/ChangeTee.java",
      "types": [
        "Boolean",
        "ArrayList",
        "List"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "java",
        "add",
        "list",
        "array"
      ]
    },
    {
      "method": "getParameterNames@56",
      "body": "/** \n * Returns the set of parameter names provided by user.\n * @return set of parameter names provided by user\n */\npublic Set<String> getParameterNames(){\n  return Collections.unmodifiableSet(this.parametersMap.keySet());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.unmodifiableSet(java.util.Set)",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          }
        ]
      },
      "returnType": "Set<String>",
      "file": "./java_projects/xwiki-platform/xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-wikimacro/xwiki-platform-rendering-wikimacro-api/src/main/java/org/xwiki/rendering/macro/wikibridge/WikiMacroParameters.java",
      "types": [
        "Set",
        "Collections",
        "Map",
        "Object",
        "String"
      ],
      "apicalls": [
        "unmodifiableSet",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
            "java.util.Collections.unmodifiableSet(java.util.Set)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "java",
        "set",
        "key",
        "util",
        "string",
        "object",
        "map",
        "unmodifiable"
      ]
    },
    {
      "method": "factorBound@1327",
      "formalParam": [
        "ExpVector"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.multiply(java.math.BigInteger)",
            "node": "DAPICall",
            "_returns": "java.math.BigInteger",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.bitCount()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.shiftLeft(int)",
            "node": "DAPICall",
            "_returns": "java.math.BigInteger",
            "_throws": []
          }
        ]
      },
      "returnType": "BigInteger",
      "file": "./java_projects/geogebra_1/geogebra/edu/jas/poly/PolyUtil.java",
      "body": "/** \n * Factor coefficient bound. See SACIPOL.IPFCB: the product of all maxNorms of potential factors is less than or equal to 2**b times the maxNorm of A.\n * @param e degree vector of a GenPolynomial A.\n * @return 2**b.\n */\npublic static BigInteger factorBound(ExpVector e){\n  int n=0;\n  java.math.BigInteger p=java.math.BigInteger.ONE;\n  java.math.BigInteger v;\n  if (e == null || e.isZERO()) {\n    return BigInteger.ONE;\n  }\n  for (int i=0; i < e.length(); i++) {\n    if (e.getVal(i) > 0) {\n      n+=(2 * e.getVal(i) - 1);\n      v=new java.math.BigInteger(\"\" + (e.getVal(i) - 1));\n      p=p.multiply(v);\n    }\n  }\n  n+=(p.bitCount() + 1);\n  n/=2;\n  v=new java.math.BigInteger(\"\" + 2);\n  v=v.shiftLeft(n);\n  BigInteger N=new BigInteger(v);\n  return N;\n}\n",
      "types": [
        "Byte",
        "Integer",
        "BigInteger",
        "String"
      ],
      "apicalls": [
        "multiply",
        "bitCount",
        "shiftLeft"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(byte[])",
            "java.math.BigInteger.multiply(java.math.BigInteger)",
            "java.math.BigInteger.bitCount()",
            "java.math.BigInteger.BigInteger(java.lang.String)",
            "java.math.BigInteger.shiftLeft(int)"
          ]
        }
      ],
      "keywords": [
        "bit",
        "math",
        "java",
        "left",
        "shift",
        "count",
        "byte",
        "big",
        "multiply",
        "integer",
        "string"
      ]
    },
    {
      "method": "init@67",
      "body": "public void init(){\n  tokenDistributor=new Timer(\"Token Distributor\",true);\n  tokenDistributor.scheduleAtFixedRate(this,0,interval);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Timer.Timer(java.lang.String,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/DimSim/PreBuildBinaries/StreamingServer/red5/src/org/red5/server/stream/SimpleBWControlService.java",
      "types": [
        "TimerTask",
        "String",
        "Timer",
        "Boolean",
        "Long"
      ],
      "apicalls": [
        "scheduleAtFixedRate"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Timer.Timer(java.lang.String,boolean)",
            "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)"
          ]
        }
      ],
      "keywords": [
        "rate",
        "schedule",
        "boolean",
        "timer",
        "long",
        "java",
        "util",
        "task",
        "string",
        "fixed"
      ]
    },
    {
      "method": "PersistentObject@10",
      "body": "protected PersistentObject(DBTable table){\n  isNew=true;\n  myTable=table;\n  myProperties=new HashMap<String,Object>();\n  for (  String s : myTable.Fields) {\n    myProperties.put(s,null);\n  }\n}\n",
      "formalParam": [
        "DBTable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/MyPM-Scrum-Tool/MyPMScrumV8/src/pmPersistence/PersistentObject.java",
      "types": [
        "String",
        "Map",
        "HashMap",
        "Object"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "put",
        "util",
        "string",
        "hash",
        "java",
        "map"
      ]
    },
    {
      "method": "ImagePanel@19",
      "body": "public ImagePanel(Image img){\n  this.img=img;\n  Dimension size=new Dimension(img.getWidth(null),height);\n  setPreferredSize(size);\n  setMinimumSize(size);\n  setMaximumSize(size);\n  setSize(size);\n  setLayout(null);\n}\n",
      "formalParam": [
        "Image"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Dimension.Dimension(int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.setMaximumSize(java.awt.Dimension)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Component.setSize(java.awt.Dimension)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Vooga_1/src/levelEditor/ImagePanel.java",
      "types": [
        "Component",
        "Image",
        "Integer",
        "Dimension",
        "JComponent",
        "LayoutManager",
        "Container",
        "ImageObserver"
      ],
      "apicalls": [
        "setPreferredSize",
        "setLayout",
        "setMaximumSize",
        "setSize",
        "getWidth",
        "setMinimumSize"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "java.awt.Dimension.Dimension(int,int)",
            "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
            "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)",
            "javax.swing.JComponent.setMaximumSize(java.awt.Dimension)",
            "java.awt.Component.setSize(java.awt.Dimension)",
            "java.awt.Container.setLayout(java.awt.LayoutManager)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "container",
        "swing",
        "layout",
        "maximum",
        "component",
        "preferred",
        "dimension",
        "awt",
        "integer",
        "image",
        "width",
        "observer",
        "get",
        "j",
        "manager",
        "minimum",
        "java",
        "set",
        "size"
      ]
    },
    {
      "method": "appendTo@817",
      "formalParam": [
        "Appendable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(char[],int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(char[],int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/vjet/core/resource/VjoJavaLib/src3/vjo/sun/misc/FormattedFloatingDecimal.java",
      "body": "public void appendTo(Appendable appendable){\n  char ac[]=(char[])(char[])perThreadBuffer.get();\n  int i=getChars(ac);\n  if (appendable instanceof StringBuilder)   ((StringBuilder)appendable).append(ac,0,i);\n else   if (appendable instanceof StringBuffer)   ((StringBuffer)appendable).append(ac,0,i);\n else   if (!$assertionsDisabled)   throw new AssertionError();\n}\n",
      "types": [
        "Integer",
        "StringBuilder",
        "StringBuffer",
        "Character"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(char[],int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuilder.append(char[],int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "builder",
        "string",
        "append",
        "buffer",
        "java",
        "character",
        "lang"
      ]
    },
    {
      "method": "remove@141",
      "formalParam": [
        "IStructuredSelection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Object>.removeAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/IronJacamar/eclipse/src/main/java/org/jboss/jca/eclipse/wizards/PropsContentProvider.java",
      "body": "/** \n * Removes the given selection of the listing of elements and from the backing viewer\n * @param selection IStructuredSelection\n */\npublic void remove(IStructuredSelection selection){\n  Object[] array=selection.toArray();\n  elements.removeAll(Arrays.asList(array));\n  tableViewer.remove(array);\n}\n",
      "types": [
        "Boolean",
        "Arrays",
        "Object",
        "Collection",
        "List"
      ],
      "apicalls": [
        "asList",
        "removeAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.List<java.lang.Object>.removeAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "java",
        "collection",
        "boolean",
        "object",
        "remove",
        "arrays",
        "list",
        "util"
      ]
    },
    {
      "method": "getExtension@152",
      "body": "/** \n * Return the extension portion of the file's name .\n * @see #getExtension\n * @see FileFilter#accept\n */\npublic String getExtension(File f){\n  if (f != null) {\n    String filename=f.getName();\n    int i=filename.lastIndexOf('.');\n    if (i > 0 && i < filename.length() - 1) {\n      return filename.substring(i + 1).toLowerCase();\n    }\n    ;\n  }\n  return null;\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.substring(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.toLowerCase()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/com/sun/tools/example/debug/gui/JDBFileFilter.java",
      "types": [
        "String",
        "File",
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "getName",
        "length",
        "toLowerCase",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getName()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.toLowerCase()"
          ]
        },
        {
          "calls": [
            "java.io.File.getName()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "name",
        "case",
        "index",
        "substring",
        "java",
        "get",
        "lang",
        "last",
        "io",
        "lower",
        "length",
        "file",
        "integer",
        "string"
      ]
    },
    {
      "method": "deepCopy@10141",
      "body": "public queryStatusById_args deepCopy(){\n  return new queryStatusById_args(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "queryStatusById_args",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "or",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "clear",
        "bit",
        "set"
      ]
    },
    {
      "method": "invokesetup@277",
      "formalParam": [
        "CompletionStatus",
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "INTERNAL",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/POASystemException.java",
      "body": "public INTERNAL invokesetup(CompletionStatus cs,Throwable t){\n  INTERNAL exc=new INTERNAL(INVOKESETUP,cs);\n  if (t != null)   exc.initCause(t);\n  if (logger.isLoggable(Level.WARNING)) {\n    Object[] parameters=null;\n    doLog(Level.WARNING,\"POA.invokesetup\",parameters,POASystemException.class,exc);\n  }\n  return exc;\n}\n",
      "types": [
        "Logger",
        "Level",
        "Throwable",
        "Boolean"
      ],
      "apicalls": [
        "isLoggable",
        "initCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "cause",
        "lang",
        "loggable",
        "throwable",
        "boolean",
        "logging",
        "init",
        "level",
        "util",
        "java",
        "logger"
      ]
    },
    {
      "method": "readStringMap@59",
      "body": "/** \n * Reads a Map of String key and value pairs. This method will return <tt>null</tt> if the Map written to the stream was <tt>null</tt>.\n * @param in the input stream.\n * @return a Map of String key/value pairs.\n * @throws IOException if an error occurs.\n */\npublic Map<String,String> readStringMap(DataInput in) throws IOException {\n  int propertyCount=in.readInt();\n  if (propertyCount == -1) {\n    return null;\n  }\n else {\n    Map<String,String> stringMap=new HashMap<String,String>();\n    for (int i=0; i < propertyCount; i++) {\n      stringMap.put(ExternalizableHelper.readSafeUTF(in),ExternalizableHelper.readSafeUTF(in));\n    }\n    return stringMap;\n  }\n}\n",
      "formalParam": [
        "DataInput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataInput.readInt()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Map<String,String>",
      "file": "./java_projects/Openfire/src/plugins/clustering/src/java/com/jivesoftware/util/cache/CoherenceExternalizableUtil.java",
      "types": [
        "DataInput",
        "Map",
        "HashMap",
        "IOException",
        "String",
        "Integer"
      ],
      "apicalls": [
        "put",
        "readInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.DataInput.readInt()",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io",
        "string",
        "map",
        "hash",
        "integer",
        "java",
        "int",
        "put",
        "read",
        "input",
        "exception",
        "data",
        "util"
      ]
    },
    {
      "method": "load_one_cell_xls@51",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList<java.lang.String>.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/DataViewer/ETL/src/com/util/test/HxlsImpTest.java",
      "body": "@Test public void load_one_cell_xls(){\n  HxlsImp xls2csv;\n  ArrayList<String> headList;\n  try {\n    xls2csv=new HxlsImp(\"data/excel2003/one_cell.xls\");\n    xls2csv.process(\"\",\"\");\n    headList=xls2csv.getHeadList();\n    assertEquals(31,headList.size());\n    assertEquals(\"abc123\",headList.get(0));\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  SQLException e) {\n    e.printStackTrace();\n  }\n}\n",
      "types": [
        "ArrayList",
        "Throwable",
        "Integer",
        "String"
      ],
      "apicalls": [
        "printStackTrace",
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.size()",
            "java.util.ArrayList<java.lang.String>.get(int)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.size()",
            "java.util.ArrayList<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": [
        "size",
        "print",
        "java",
        "get",
        "util",
        "list",
        "stack",
        "trace",
        "integer",
        "lang",
        "throwable",
        "string",
        "array"
      ]
    },
    {
      "method": "writeEasyNpc@158",
      "body": "/** \n * Write the easyGUI version of this money condition.\n */\n@Override public void writeEasyNpc(final Writer target) throws IOException {\n  target.write(String.format(EASY_CODE,operator.getLuaComp(),value.getEasyNPC()));\n}\n",
      "formalParam": [
        "Writer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.Writer.write(char[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Illarion-Java/illaeasygui/src/illarion/easygui/parsed/talk/conditions/ConditionMoney.java",
      "types": [
        "Writer",
        "IOException",
        "Character",
        "String",
        "Object"
      ],
      "apicalls": [
        "write",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.io.Writer.write(char[])"
          ]
        }
      ],
      "keywords": [
        "java",
        "exception",
        "string",
        "writer",
        "io",
        "character",
        "format",
        "write",
        "object",
        "lang"
      ]
    },
    {
      "method": "getMaxFreqSet@505",
      "body": "public String getMaxFreqSet(){\n  return getMaxFreqSet(0);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.DataInputStream.readLine()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.FilterInputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/fauxclock/src/com/teamkang/fauxclock/cpu/CpuVddController.java",
      "types": [
        "FileNotFoundException",
        "InputStream",
        "FilterInputStream",
        "FileInputStream",
        "IOException",
        "Throwable",
        "DataInputStream",
        "BufferedInputStream",
        "String"
      ],
      "apicalls": [
        "readLine",
        "close",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.DataInputStream.readLine()",
            "java.io.FilterInputStream.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.DataInputStream.readLine()",
            "java.io.FilterInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "trace",
        "close",
        "line",
        "read",
        "input",
        "string",
        "file",
        "io",
        "print",
        "data",
        "java",
        "buffered",
        "exception",
        "filter",
        "found",
        "lang",
        "stream",
        "stack"
      ]
    },
    {
      "method": "getSmallFont@123",
      "body": "public FontUIResource getSmallFont(){\n  return this.getSubstanceFont(this.systemFontSet.getSmallFont(),false,1);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Font.isItalic()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.awt.Font.getStyle()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.Font.deriveFont(float)",
            "node": "DAPICall",
            "_returns": "java.awt.Font",
            "_throws": []
          },
          {
            "_call": "java.awt.Font.deriveFont(int)",
            "node": "DAPICall",
            "_returns": "java.awt.Font",
            "_throws": []
          }
        ]
      },
      "returnType": "FontUIResource",
      "file": "./java_projects/substance/src/org/pushingpixels/substance/api/fonts/SubstanceFontUtilities.java",
      "types": [
        "Integer",
        "Float",
        "Font",
        "Boolean"
      ],
      "apicalls": [
        "getStyle",
        "isItalic",
        "deriveFont"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Font.isItalic()",
            "java.awt.Font.getStyle()",
            "java.awt.Font.deriveFont(float)",
            "java.awt.Font.deriveFont(int)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "float",
        "italic",
        "java",
        "integer",
        "awt",
        "get",
        "font",
        "derive",
        "style"
      ]
    },
    {
      "method": "setUp@45",
      "body": "/** \n * Test-setup. Create the cache-file.\n * @throws Exception\n */\n@Before public void setUp() throws Exception {\n  new File(TEST_DIR.toString()).mkdirs();\n  File myFile=new File(CACHE_FILE_PATH);\n  myFile.createNewFile();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.mkdirs()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.createNewFile()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-common/hadoop-mapreduce-project/src/test/mapred/org/apache/hadoop/mapred/TestTaskTrackerSlotManagement.java",
      "types": [
        "String",
        "File",
        "IOException",
        "Boolean"
      ],
      "apicalls": [
        "createNewFile",
        "mkdirs"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.mkdirs()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.createNewFile()"
          ]
        }
      ],
      "keywords": [
        "java",
        "mkdirs",
        "file",
        "create",
        "new",
        "io",
        "string",
        "exception",
        "boolean"
      ]
    },
    {
      "method": "containsEL@220",
      "body": "/** \n * @return true if the expression contains a ${...}\n */\npublic boolean containsEL(){\n  Iterator<ELNode> iter=list.iterator();\n  while (iter.hasNext()) {\n    ELNode n=iter.next();\n    if (n instanceof Root) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/tomcat70/java/org/apache/jasper/compiler/ELNode.java",
      "types": [
        "List",
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "next",
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "iterator",
        "next",
        "list",
        "boolean"
      ]
    },
    {
      "method": "getOverlayPainters@720",
      "body": "/** \n * Returns a non-null, non-modifiable list of overlay painters associated with the specified decoration area type.\n * @param decorationAreaType Decoration area type.\n * @return A non-null, non-modifiable list of overlay painters associatedwith the specified decoration area type.\n */\npublic List<SubstanceOverlayPainter> getOverlayPainters(DecorationAreaType decorationAreaType){\n  if (!this.overlayPaintersMap.containsKey(decorationAreaType))   return Collections.emptyList();\n  return Collections.unmodifiableList(this.overlayPaintersMap.get(decorationAreaType));\n}\n",
      "formalParam": [
        "DecorationAreaType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.emptyList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "returnType": "List<SubstanceOverlayPainter>",
      "file": "./java_projects/frostwire-desktop/lib/jars-src/substance-58d3873/src/org/pushingpixels/substance/api/SubstanceSkin.java",
      "types": [
        "Collections",
        "List"
      ],
      "apicalls": [
        "emptyList",
        "unmodifiableList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.emptyList()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "java",
        "empty",
        "util",
        "list",
        "collections",
        "unmodifiable"
      ]
    },
    {
      "method": "letterDifferentToAnyBeginningOf@61",
      "formalParam": [
        "Set<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.Character>.add(java.lang.Character)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.util.Set<java.lang.Character>.contains(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "char",
      "file": "./java_projects/AtoCC/Core/util.bundle/src/de/hszg/atocc/core/util/CharacterHelper.java",
      "body": "public static char letterDifferentToAnyBeginningOf(Set<String> alphabet){\n  final Set<Character> beginnings=beginningsOf(alphabet);\n  for (char c='a'; c <= 'z'; ++c) {\n    if (!beginnings.contains(c)) {\n      return c;\n    }\n  }\n  throw new RuntimeException(\"No character found which is not beginning of set-element\");\n}\n",
      "types": [
        "String",
        "Set",
        "Object",
        "Character",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "contains",
        "add",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.charAt(int)",
            "java.util.Set<java.lang.Character>.add(java.lang.Character)",
            "$NOT$java.util.Set<java.lang.Character>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "char",
        "boolean",
        "java",
        "integer",
        "add",
        "util",
        "character",
        "contains",
        "object",
        "string",
        "set"
      ]
    },
    {
      "method": "func_48650_a@16",
      "body": "public void func_48650_a(){\n  double d=field_48654_a.posX - field_48654_a.prevPosX;\n  double d1=field_48654_a.posZ - field_48654_a.prevPosZ;\n  if (d * d + d1 * d1 > 2.5000002779052011E-007D) {\n    field_48654_a.renderYawOffset=field_48654_a.rotationYaw;\n    field_48654_a.rotationYawHead=func_48651_a(field_48654_a.renderYawOffset,field_48654_a.rotationYawHead,75F);\n    field_48653_c=field_48654_a.rotationYawHead;\n    field_48652_b=0;\n    return;\n  }\n  float f=75F;\n  if (Math.abs(field_48654_a.rotationYawHead - field_48653_c) > 15F) {\n    field_48652_b=0;\n    field_48653_c=field_48654_a.rotationYawHead;\n  }\n else {\n    field_48652_b++;\n    if (field_48652_b > 10) {\n      f=Math.max(1.0F - (float)(field_48652_b - 10) / 10F,0.0F) * 75F;\n    }\n  }\n  field_48654_a.renderYawOffset=func_48651_a(field_48654_a.rotationYawHead,field_48654_a.renderYawOffset,f);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.lang.Math.max(float,float)",
                "_throws": [],
                "_returns": "float",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Math.abs(int)",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/PandasModSquad/src/minecraft/net/minecraft/src/EntityBodyHelper.java",
      "types": [
        "Integer",
        "Math",
        "Float"
      ],
      "apicalls": [
        "max",
        "abs"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.abs(int)"
          ]
        },
        {
          "calls": [
            "java.lang.Math.abs(int)",
            "java.lang.Math.max(float,float)"
          ]
        }
      ],
      "keywords": [
        "float",
        "max",
        "abs",
        "java",
        "lang",
        "integer",
        "math"
      ]
    },
    {
      "method": "TestScatterPlot@19",
      "body": "public TestScatterPlot(String[] args) throws Exception {\n  super(args);\n  setName(\"ScatterPlot\");\n  String plotml=\"TestScatterPlot.plotml\";\n  InputStream in=getClass().getResourceAsStream(plotml);\n  XMLHistBuilder xhb=new XMLHistBuilder(new InputStreamReader(in),plotml);\n  plot=xhb.getSoloPlot();\n  plot.setAllowUserInteraction(false);\n  add(plot);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/freehep-vectorgraphics/freehep-graphicsio-tests/src/main/extra/TestScatterPlot.java",
      "types": [
        "Class",
        "InputStream",
        "String",
        "InputStreamReader"
      ],
      "apicalls": [
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "class",
        "get",
        "input",
        "lang",
        "java",
        "io",
        "resource",
        "stream",
        "string",
        "reader"
      ]
    },
    {
      "method": "getImage@212",
      "body": "/** \n * Get the image that this PDFImage generates.\n * @return a buffered image containing the decoded image data\n */\npublic Bitmap getImage(){\n  try {\n    Bitmap bi=(Bitmap)imageObj.getCache();\n    if (bi == null) {\n      if (!sShowImages)       throw new UnsupportedOperationException(\"do not show images\");\n      byte[] imgBytes=imageObj.getStream();\n      bi=parseData(imgBytes);\n      imageObj.setCache(bi);\n    }\n    return bi;\n  }\n catch (  IOException ioe) {\n    System.out.println(\"Error reading image\");\n    ioe.printStackTrace();\n    return null;\n  }\ncatch (  OutOfMemoryError e) {\n    Log.e(TAG,\"image too large (OutOfMemoryError)\");\n    int size=15;\n    int max=size - 1;\n    int half=size / 2 - 1;\n    Bitmap bi=Bitmap.createBitmap(size,size,Config.RGB_565);\n    Canvas c=new Canvas(bi);\n    c.drawColor(Color.RED);\n    Paint p=new Paint();\n    p.setColor(Color.WHITE);\n    c.drawLine(0,0,max,max,p);\n    c.drawLine(0,max,max,0,p);\n    c.drawLine(half,0,half,max,p);\n    c.drawLine(0,half,max,half,p);\n    return bi;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Bitmap",
      "file": "./java_projects/Android-Pdf-Viewer-Library/src/com/sun/pdfview/PDFImage.java",
      "types": [
        "String",
        "PrintStream",
        "Throwable"
      ],
      "apicalls": [
        "println",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "string",
        "print",
        "lang",
        "trace",
        "println",
        "java",
        "stream",
        "io",
        "stack"
      ]
    },
    {
      "method": "LockingBasicAlgorithm@25",
      "body": "public LockingBasicAlgorithm(Variable v,boolean s,int ws){\n  super(v);\n  subsetlocking=s;\n  windowsize=ws;\n  lockSet=new HashMap<Integer,Integer>();\n  lockMap=new HashMap<Integer,LockMsg>();\n  acceptSet=new HashSet<Integer>();\n  lockVal=-1;\n  waiting=false;\n  changed=false;\n  lockMsgTimer=0;\n  attempt=0;\n}\n",
      "formalParam": [
        "Variable",
        "boolean",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.Integer,java.lang.Integer>.HashMap<Integer,Integer>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet<java.lang.Integer>.HashSet<Integer>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/DimaX/old/dcop_old/algo/LockingBasicAlgorithm.java",
      "types": [
        "HashMap",
        "HashSet",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.Integer,java.lang.Integer>.HashMap<Integer,Integer>()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.HashSet<java.lang.Integer>.HashSet<Integer>()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "util",
        "integer",
        "java",
        "map",
        "set"
      ]
    },
    {
      "method": "test_skipJ@156",
      "body": "/** \n * @tests java.io.PushbackInputStream#skip(long)\n */\npublic void test_skipJ() throws Exception {\n  byte[] buf=new byte[50];\n  pis.skip(50);\n  pis.read(buf,0,buf.length);\n  assertTrue(\"a) Incorrect bytes read\",new String(buf,\"UTF-8\").equals(fileString.substring(50,100)));\n  pis.unread(buf);\n  pis.skip(25);\n  byte[] buf2=new byte[25];\n  pis.read(buf2,0,buf2.length);\n  assertTrue(\"b) Incorrect bytes read\",new String(buf2,\"UTF-8\").equals(fileString.substring(75,100)));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.String(byte[],java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(byte[],java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/PushbackInputStreamTest.java",
      "types": [
        "Object",
        "Integer",
        "Byte",
        "Boolean",
        "UnsupportedEncodingException",
        "String"
      ],
      "apicalls": [
        "substring",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.String(byte[],java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.String(byte[],java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "byte",
        "integer",
        "unsupported",
        "java",
        "encoding",
        "equals",
        "substring",
        "exception",
        "lang",
        "string"
      ]
    },
    {
      "method": "main@4",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toHexString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Long.toHexString(long)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.toHexString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Long.toHexString(long)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/blitzjavaspaces/src/org/dancres/util/BytePackerTest.java",
      "body": "public static void main(String args[]){\n  long myFirstLong=0x7654321076543210L;\n  long mySecondLong=0xfedcba98fedcba98L;\n  int myFirstInt=0x76543210;\n  int mySecondInt=0xfedcba98;\n  byte[] myBytes=new byte[12];\n  BytePacker myPacker=BytePacker.getMSBPacker(myBytes);\n  myPacker.putInt(myFirstInt,0);\n  myPacker.putLong(mySecondLong,4);\n  int myInt=myPacker.getInt(0);\n  long myLong=myPacker.getLong(4);\n  System.out.println(Integer.toHexString(myInt));\n  System.out.println(Long.toHexString(myLong));\n  myPacker.putInt(mySecondInt,0);\n  myPacker.putLong(myFirstLong,4);\n  myInt=myPacker.getInt(0);\n  myLong=myPacker.getLong(4);\n  System.out.println(Integer.toHexString(myInt));\n  System.out.println(Long.toHexString(myLong));\n}\n",
      "types": [
        "Integer",
        "PrintStream",
        "Long",
        "String"
      ],
      "apicalls": [
        "println",
        "toHexString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toHexString(int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Long.toHexString(long)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Integer.toHexString(int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Long.toHexString(long)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "string",
        "io",
        "java",
        "print",
        "println",
        "long",
        "stream",
        "hex"
      ]
    },
    {
      "method": "testPlaysEvent@46",
      "body": "public void testPlaysEvent(){\n  EnterTextEvent event=new EnterTextEvent(\"parent.textFieldName\",\"text\");\n  Mock mockComponentFinder=mock(ComponentFinder.class);\n  Mock mockContext=mock(WindowContext.class);\n  WindowContext context=(WindowContext)mockContext.proxy();\n  JTextField textField=new JTextField();\n  mockComponentFinder.expects(once()).method(\"findComponent\").with(same(context),eq(\"parent.textFieldName\")).will(returnValue(textField));\n  event.play(context,(ComponentFinder)mockComponentFinder.proxy(),null,null);\n  waitForIdle();\n  assertEquals(\"text\",textField.getText());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTextField.JTextField()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.text.JTextComponent.getText()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frankenstein/test/com/thoughtworks/frankenstein/events/EnterTextEventTest.java",
      "types": [
        "String",
        "JTextComponent",
        "JTextField"
      ],
      "apicalls": [
        "getText"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTextField.JTextField()",
            "javax.swing.text.JTextComponent.getText()"
          ]
        }
      ],
      "keywords": [
        "swing",
        "text",
        "javax",
        "j",
        "string",
        "field",
        "get",
        "component"
      ]
    },
    {
      "method": "ControlFlowGraph@33",
      "body": "public ControlFlowGraph(IProgram<T> program,IGraphCreator<T> graphCreator){\n  this.myProgram=program;\n  this.myGraphCreator=graphCreator;\n  ControlFlowGraph.this.buildBlocks();\n}\n",
      "formalParam": [
        "IProgram<T>",
        "IGraphCreator<T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/MPS/workbench/mps-workbench/source_gen/jetbrains/mps/ide/dataFlow/presentation/ControlFlowGraph.java",
      "types": [
        "HashMap",
        "HashSet"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.HashSet<Tau_E>.HashSet()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "map",
        "java",
        "util",
        "set"
      ]
    },
    {
      "method": "convertToHtml@56",
      "body": "public String convertToHtml(String text,String mimeType){\n  BlobHolder bh=new SimpleBlobHolder(new StringBlob(text,mimeType,\"UTF-8\"));\n  Map<String,Serializable> parameters=new HashMap<String,Serializable>();\n  parameters.put(\"bodyContentOnly\",Boolean.TRUE);\n  try {\n    bh=Framework.getLocalService(ConversionService.class).convertToMimeType(\"text/html\",bh,parameters);\n    text=bh.getBlob().getString();\n  }\n catch (  Exception e) {\n    log.error(\"Failed to convert to HTML.\",e);\n  }\n  return text;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)",
            "node": "DAPICall",
            "_returns": "java.io.Serializable",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/nuxeo-jsf/nuxeo-platform-forms-layout-client/src/main/java/org/nuxeo/ecm/platform/forms/layout/actions/RichTextEditorActions.java",
      "types": [
        "String",
        "Serializable",
        "HashMap",
        "Map"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()",
            "java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "string",
        "java",
        "map",
        "util",
        "put",
        "serializable"
      ]
    },
    {
      "method": "getReduceTime@153",
      "body": "public int getReduceTime(int tunnel){\n  return getProperty(tunnel,\"i2cp.reduceIdleTime\",20 * 60 * 1000) / (60 * 1000);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/i2p/apps/i2ptunnel/java/src/net/i2p/i2ptunnel/web/EditBean.java",
      "types": [
        "Integer",
        "Properties",
        "NumberFormatException",
        "String"
      ],
      "apicalls": [
        "parseInt",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "property",
        "number",
        "lang",
        "parse",
        "properties",
        "integer",
        "java",
        "string",
        "int",
        "get",
        "util",
        "format",
        "exception"
      ]
    },
    {
      "method": "paint@749",
      "body": "public void paint(Graphics g){\n  Icon icon=frame.getFrameIcon();\n  if (icon == null) {\n    icon=(Icon)DefaultLookup.get(frame,frame.getUI(),\"InternalFrame.icon\");\n  }\n  if (icon != null) {\n    if (icon instanceof ImageIcon && (icon.getIconWidth() > 16 || icon.getIconHeight() > 16)) {\n      Image img=((ImageIcon)icon).getImage();\n      ((ImageIcon)icon).setImage(img.getScaledInstance(16,16,Image.SCALE_SMOOTH));\n    }\n    icon.paintIcon(this,g,0,0);\n  }\n}\n",
      "formalParam": [
        "Graphics"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JInternalFrame.getFrameIcon()",
            "_throws": [],
            "_returns": "javax.swing.Icon",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.ImageIcon.getImage()",
            "_throws": [],
            "_returns": "java.awt.Image",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Image.getScaledInstance(int,int,int)",
            "_throws": [],
            "_returns": "java.awt.Image",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.ImageIcon.setImage(java.awt.Image)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
      "types": [
        "Image",
        "ImageIcon",
        "Integer",
        "Icon",
        "JInternalFrame"
      ],
      "apicalls": [
        "getScaledInstance",
        "getFrameIcon",
        "setImage",
        "getImage"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JInternalFrame.getFrameIcon()",
            "javax.swing.ImageIcon.getImage()",
            "java.awt.Image.getScaledInstance(int,int,int)",
            "javax.swing.ImageIcon.setImage(java.awt.Image)"
          ]
        }
      ],
      "keywords": [
        "instance",
        "j",
        "get",
        "javax",
        "java",
        "scaled",
        "awt",
        "frame",
        "internal",
        "set",
        "image",
        "integer",
        "icon",
        "swing"
      ]
    },
    {
      "method": "updatePhoneNumber@15",
      "body": "public void updatePhoneNumber(PhoneNumber number,CouchModel model,String forwardId) throws IOException {\n  Map<String,Object> properties=objectMapper.convertValue(number,Map.class);\n  Map<String,Object> outputs=new HashMap<String,Object>();\n  outputs.put(\"startnode\",forwardId);\n  model.setOutputs(outputs);\n  updateCouchModel(model,properties);\n}\n",
      "formalParam": [
        "PhoneNumber",
        "CouchModel",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/wavilon-settings-portlet/liferay-plugins-sdk-6.0.6-20110225/portlets/wavilon-settings-portlet/docroot/WEB-INF/src/com/aimprosoft/wavilon/service/impl/PhoneNumberDBServiceImpl.java",
      "types": [
        "String",
        "Object",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "put",
        "hash",
        "map",
        "string",
        "java",
        "util",
        "object"
      ]
    },
    {
      "method": "newThread@211",
      "body": "/** \n * {@inheritDoc}\n */\n@Override public Thread newThread(Runnable r){\n  Thread t=new Thread(group,r);\n  t.setName(name + \"-\" + threadNumber.getAndIncrement());\n  t.setPriority(prio);\n  t.setUncaughtExceptionHandler(new ThreadUncaughtExceptionHandler());\n  return t;\n}\n",
      "formalParam": [
        "Runnable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.setName(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.setPriority(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Thread",
      "file": "./java_projects/Aion-Energy-Life-/AL-Login/src/com/aionemu/loginserver/utils/ThreadPoolManager.java",
      "types": [
        "Thread",
        "String",
        "UncaughtExceptionHandler",
        "ThreadGroup",
        "Integer",
        "Runnable"
      ],
      "apicalls": [
        "setName",
        "setPriority",
        "setUncaughtExceptionHandler"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable)",
            "java.lang.Thread.setName(java.lang.String)",
            "java.lang.Thread.setPriority(int)",
            "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
          ]
        }
      ],
      "keywords": [
        "string",
        "priority",
        "runnable",
        "uncaught",
        "set",
        "group",
        "integer",
        "exception",
        "thread",
        "name",
        "java",
        "handler",
        "lang"
      ]
    },
    {
      "method": "parseInteger@42",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.CharSequence.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.subSequence(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.CharSequence",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.CharSequence.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "BigInteger",
      "file": "./java_projects/SOCIETIES-Platform/platform-infrastructure/client-frwk/Examples/JaxbAndroidApi/src/main/java/javax/xml/bind/DatatypeConverterImpl.java",
      "body": "public BigInteger parseInteger(String lexicalXSDInteger){\n  return _parseInteger(lexicalXSDInteger);\n}\n",
      "types": [
        "CharSequence",
        "String",
        "BigInteger",
        "Character",
        "Integer"
      ],
      "apicalls": [
        "toString",
        "subSequence",
        "charAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.CharSequence.length()",
            "java.lang.CharSequence.charAt(int)",
            "java.lang.CharSequence.subSequence(int,int)",
            "java.lang.CharSequence.charAt(int)",
            "java.lang.CharSequence.toString()",
            "java.math.BigInteger.BigInteger(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "big",
        "character",
        "lang",
        "string",
        "integer",
        "sequence",
        "char",
        "java",
        "sub",
        "math",
        "length"
      ]
    },
    {
      "method": "getPropertyNameForForeignKey@75",
      "body": "@Override public String getPropertyNameForForeignKey(String fkName,EntityType entityType){\n  if (fkName.toLowerCase().startsWith(\"fk_\")) {\n    fkName=fkName.substring(3) + \"_\" + fkName.substring(0,2);\n  }\n  return getPropertyName(fkName,entityType);\n}\n",
      "formalParam": [
        "String",
        "EntityType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.toLowerCase()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.substring(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/querydsl/querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/DefaultNamingStrategy.java",
      "types": [
        "String",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "substring",
        "startsWith",
        "toLowerCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "starts",
        "case",
        "java",
        "integer",
        "lower",
        "lang",
        "substring",
        "string"
      ]
    },
    {
      "method": "runInstrumentedManyTimes@125",
      "body": "/** \n * Run multithreaded test case multiple times using the default or global settings for clock period and run limit. This method adds instrumentation to count the number of times failures occur (an exception is thrown). If the array <code>failureCount</code> is initialized to be of at least size 1, it returns this count in <code>failureCount[0]</code>. If failures do occur, it saves the first failure, and then throws it after running the test <code>count</code> times.\n * @param test The multithreaded test case to run\n * @param count the number of times to run the test case\n * @param failureCount if this array is initialzed to at least size 1, the number of failures is returned in <code>failureCount[0]</code>\n * @throws Throwable if there is at least one failure -- the first failure is thrown\n */\npublic static void runInstrumentedManyTimes(final MultithreadedTestCase test,int count,int[] failureCount) throws Throwable {\n  int failures=0;\n  Throwable t=null;\n  boolean failed=false;\n  System.out.println(\"Testing \" + test.getClass());\n  for (int i=0; i < count; i++) {\n    try {\n      runOnce(test);\n    }\n catch (    Throwable e) {\n      failed=true;\n      failures++;\n      if (t == null)       t=e;\n    }\n    if (i % 10 == 9) {\n      if (failed) {\n        System.out.print(\"f\");\n        failed=false;\n      }\n else       System.out.print(\".\");\n      if (i % 100 == 99)       System.out.println(\" \" + (i + 1));\n    }\n  }\n  if (failureCount != null && failureCount.length > 0)   failureCount[0]=failures;\n  if (t != null)   throw t;\n}\n",
      "formalParam": [
        "MultithreadedTestCase",
        "int",
        "int[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.print(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.print(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/multithreadedtc-junit4/src/main/java/edu/umd/cs/mtc/RunThreadsThenInvokeMethod.java",
      "types": [
        "String",
        "PrintStream",
        "Character"
      ],
      "apicalls": [
        "println",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io",
        "print",
        "stream",
        "java",
        "string",
        "character",
        "println"
      ]
    },
    {
      "method": "toString@11062",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"schema_args(\");\n  boolean first=true;\n  sb.append(\"table:\");\n  if (this.table == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.table);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "append",
        "java",
        "lang",
        "string"
      ]
    },
    {
      "method": "testSphere@135",
      "body": "@Test public void testSphere(){\n  bgMesh=SphereBuilder.createShuffledSphereMesh(3);\n  assertTrue(\"Original mesh is not valid\",bgMesh.isValid());\n  assertTrue(\"Original mesh contains inverted triangles\",bgMesh.checkNoInvertedTriangles());\n  final Map<String,String> options=new HashMap<String,String>();\n  options.put(\"size\",\"0.02\");\n  Mesh newMesh=new Remesh(new MeshLiaison(bgMesh),options).compute().getOutputMesh();\n  assertTrue(\"Mesh is not valid\",newMesh.isValid());\n  assertTrue(\"Mesh contains inverted triangles\",newMesh.checkNoInvertedTriangles());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jCAE/amibe/src-test/org/jcae/mesh/amibe/algos3d/RemeshTest.java",
      "types": [
        "Map",
        "HashMap",
        "String"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "map",
        "put",
        "java",
        "hash",
        "util"
      ]
    },
    {
      "method": "apply@287",
      "body": "public String apply(String... args){\n  if (args.length < 3 || args.length > 4) {\n    return null;\n  }\n  String tz=\"\";\n  if (args.length == 4)   tz=args[3];\n  String timeString=toTime(args[0],args[1],args[2]) + tz;\n  if (!checkValue(timeString,\"time\"))   return null;\n  return timeString;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/pellet/pellet-common/src/main/java/com/clarkparsia/pellet/rules/builtins/DateTimeOperators.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "indexOf",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.substring(int)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "substring",
        "index",
        "java",
        "length",
        "integer"
      ]
    },
    {
      "method": "testCreateNewVoid_5@116",
      "body": "public void testCreateNewVoid_5() throws Throwable {\n  this.setUserOnSession(\"editorCustomers\");\n  this.initAction(\"/do/jacms/Content\",\"createNewVoid\");\n  this.addParameter(\"contentTypeCode\",\"ART\");\n  this.addParameter(\"contentDescription\",\"Description\");\n  this.addParameter(\"contentMainGroup\",Group.FREE_GROUP_NAME);\n  String result=this.executeAction();\n  assertEquals(Action.INPUT,result);\n  ActionSupport action=this.getAction();\n  Map<String,List<String>> fieldErros=action.getFieldErrors();\n  assertEquals(1,fieldErros.size());\n  assertEquals(1,fieldErros.get(\"contentMainGroup\").size());\n  this.initAction(\"/do/jacms/Content\",\"createNewVoid\");\n  this.addParameter(\"contentTypeCode\",\"ART\");\n  this.addParameter(\"contentDescription\",\"Description\");\n  this.addParameter(\"contentMainGroup\",\"customers\");\n  result=this.executeAction();\n  assertEquals(Action.SUCCESS,result);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List<java.lang.String>"
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jAPS2/src/test/com/agiletec/plugins/jacms/apsadmin/content/TestIntroNewContentAction.java",
      "types": [
        "Map",
        "String",
        "List",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.size()",
            "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.get(java.lang.Object)",
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "get",
        "java",
        "object",
        "integer",
        "size",
        "map",
        "string",
        "util",
        "list"
      ]
    },
    {
      "method": "Server@227",
      "body": "public Server() throws IOException {\n  serverChannel=SctpMultiChannel.open().bind(null);\n  java.util.Set<SocketAddress> addrs=serverChannel.getAllLocalAddresses();\n  if (addrs.isEmpty())   debug(\"addrs should not be empty\");\n  serverAddr=(InetSocketAddress)addrs.iterator().next();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Set<java.net.SocketAddress>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jdk7u-jdk/test/com/sun/nio/sctp/SctpMultiChannel/Send.java",
      "types": [
        "Boolean",
        "SocketAddress",
        "PrintStream",
        "String",
        "Set"
      ],
      "apicalls": [
        "isEmpty",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.net.SocketAddress>.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.Set<java.net.SocketAddress>.isEmpty()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "empty",
        "stream",
        "util",
        "print",
        "println",
        "java",
        "socket",
        "string",
        "boolean",
        "address",
        "io",
        "set"
      ]
    },
    {
      "method": "resolve@35",
      "formalParam": [
        "SootClass"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.io.InputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "Dependencies",
      "file": "./java_projects/soot/src/soot/JimpleClassSource.java",
      "body": "public Dependencies resolve(SootClass sc){\n  if (Options.v().verbose())   G.v().out.println(\"resolving [from .jimple]: \" + className);\n  soot.jimple.parser.JimpleAST jimpAST=new soot.jimple.parser.JimpleAST(classFile);\n  jimpAST.getSkeleton(sc);\n  JimpleMethodSource mtdSrc=new JimpleMethodSource(jimpAST);\n  Iterator mtdIt=sc.methodIterator();\n  while (mtdIt.hasNext()) {\n    SootMethod sm=(SootMethod)mtdIt.next();\n    sm.setSource(mtdSrc);\n  }\n  Dependencies deps=new Dependencies();\n  deps.typesToSignature.addAll(jimpAST.getCstPool());\n  try {\n    classFile.close();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"!?\");\n  }\n  return deps;\n}\n",
      "types": [
        "InputStream",
        "Iterator",
        "Boolean",
        "IOException"
      ],
      "apicalls": [
        "hasNext",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "io",
        "iterator",
        "boolean",
        "java",
        "input",
        "next",
        "util",
        "close",
        "stream",
        "exception"
      ]
    },
    {
      "method": "create@35",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.File.exists()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.io.File.mkdirs()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.io.File.isDirectory()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.io.File.canWrite()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/GeoGit/src/core/src/main/java/org/geogit/storage/fs/FileObjectDatabase.java",
      "body": "@Override public void create(){\n  if (!environment.exists() && !environment.mkdirs()) {\n    throw new IllegalStateException(\"Can't create environment: \" + environment.getAbsolutePath());\n  }\n  if (!environment.isDirectory()) {\n    throw new IllegalStateException(\"Environment but is not a directory: \" + environment.getAbsolutePath());\n  }\n  if (!environment.canWrite()) {\n    throw new IllegalStateException(\"Environment is not writable: \" + environment.getAbsolutePath());\n  }\n}\n",
      "types": [
        "Boolean",
        "File"
      ],
      "apicalls": [
        "exists",
        "isDirectory",
        "mkdirs",
        "canWrite"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.mkdirs()",
            "$NOT$java.io.File.isDirectory()",
            "$NOT$java.io.File.canWrite()"
          ]
        }
      ],
      "keywords": [
        "io",
        "boolean",
        "file",
        "mkdirs",
        "directory",
        "exists",
        "write",
        "java"
      ]
    },
    {
      "method": "toString@1595",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"pushMessageSync_result(\");\n  boolean first=true;\n  sb.append(\"success:\");\n  sb.append(this.success);\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ubuntu-packaging-floodlight/lib/gen-java/net/floodlightcontroller/packetstreamer/thrift/PacketStreamer.java",
      "types": [
        "Integer",
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(int)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "builder",
        "java",
        "append",
        "lang",
        "string"
      ]
    },
    {
      "method": "getCodeStreamPos@346",
      "body": "/** \n * This method creates and returns an array of positions to contiguous codestreams in the file\n * @return The positions of the contiguous codestreams in the file\n */\npublic long[] getCodeStreamPos(){\n  int size=codeStreamPos.size();\n  long[] pos=new long[size];\n  for (int i=0; i < size; i++)   pos[i]=((Integer)(codeStreamPos.elementAt(i))).longValue();\n  return pos;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.longValue()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "long[]",
      "file": "./java_projects/thredds/grib/src/main/java/ucar/jpeg/jj2000/j2k/fileformat/reader/FileFormatReader.java",
      "types": [
        "Long",
        "Vector",
        "Integer"
      ],
      "apicalls": [
        "size",
        "longValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.lang.Integer.longValue()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "size",
        "vector",
        "integer",
        "java",
        "util",
        "long",
        "value"
      ]
    },
    {
      "method": "setInput@112",
      "body": "public synchronized void setInput(byte[] b,int off,int len){\n  if (b == null) {\n    throw new NullPointerException();\n  }\n  if (off < 0 || len < 0 || off > b.length - len) {\n    throw new ArrayIndexOutOfBoundsException();\n  }\n  this.userBuf=b;\n  this.userBufOff=off;\n  this.userBufLen=len;\n  setInputFromSavedData();\n  compressedDirectBuf.limit(directBufferSize);\n  compressedDirectBuf.position(directBufferSize);\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.Buffer.rewind()",
            "_throws": [],
            "_returns": "java.nio.Buffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.ByteBuffer.put(byte[],int,int)",
            "_throws": [],
            "_returns": "java.nio.ByteBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.Buffer.limit(int)",
            "_throws": [],
            "_returns": "java.nio.Buffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.nio.Buffer.position(int)",
            "_throws": [],
            "_returns": "java.nio.Buffer",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/core/org/apache/hadoop/io/compress/lzma/LzmaCompressor.java",
      "types": [
        "Buffer",
        "Integer",
        "Byte",
        "ByteBuffer"
      ],
      "apicalls": [
        "put",
        "position",
        "limit",
        "rewind"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.Buffer.rewind()",
            "java.nio.ByteBuffer.put(byte[],int,int)",
            "java.nio.Buffer.limit(int)",
            "java.nio.Buffer.position(int)"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "position",
        "rewind",
        "put",
        "nio",
        "byte",
        "java",
        "limit",
        "integer"
      ]
    },
    {
      "method": "invalidateRepositories@654",
      "body": "/** \n * Invalidate the current list of known repositories!\n * @param repos The new repositories\n */\npublic void invalidateRepositories(Collection<? extends RepositoryInfo> repos){\n  if (repos == null || repos.isEmpty()) {\n    repositories.clear();\n  }\n else {\n    Map<String,Repository> nrep=new HashMap<String,Repository>(repos.size());\n    for (    RepositoryInfo i : repos) {\n      try {\n        Repository r=RepositoryFactory.getRepository(i);\n        if (r == null) {\n          log.log(Level.WARNING,\"Failed to instanciate internal repository data for \" + i.getType() + \" in \"+ i.getDirectoryName());\n        }\n else {\n          nrep.put(r.getDirectoryName(),r);\n        }\n      }\n catch (      InstantiationException ex) {\n        log.log(Level.WARNING,\"Could not create \" + i.getType() + \" for '\"+ i.getDirectoryName()+ \"', could not instantiate the repository.\",ex);\n      }\ncatch (      IllegalAccessException iae) {\n        log.log(Level.WARNING,\"Could not create \" + i.getType() + \" for '\"+ i.getDirectoryName()+ \"', missing access rights.\",iae);\n      }\n    }\n    repositories=nrep;\n  }\n}\n",
      "formalParam": [
        "Collection<? extends RepositoryInfo>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.util.Collection<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DExcept",
                "_catch": [
                  {
                    "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ],
                "_try": [
                  {
                    "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Collection<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/opengrok/src/org/opensolaris/opengrok/history/HistoryGuru.java",
      "types": [
        "Integer",
        "Level",
        "Logger",
        "Boolean",
        "Collection",
        "String",
        "HashMap",
        "Throwable"
      ],
      "apicalls": [
        "size",
        "log",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<Tau_E>.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Collection<Tau_E>.size()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Collection<Tau_E>.size()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "empty",
        "util",
        "java",
        "size",
        "map",
        "string",
        "level",
        "throwable",
        "logging",
        "boolean",
        "logger",
        "integer",
        "log",
        "hash",
        "collection"
      ]
    },
    {
      "method": "appendThreeBytes@129",
      "body": "public void appendThreeBytes(int b24){\n  if ((_currBlockPtr + 2) < _currBlock.length) {\n    _currBlock[_currBlockPtr++]=(byte)(b24 >> 16);\n    _currBlock[_currBlockPtr++]=(byte)(b24 >> 8);\n    _currBlock[_currBlockPtr++]=(byte)b24;\n  }\n else {\n    append(b24 >> 16);\n    append(b24 >> 8);\n    append(b24);\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jackson_1/src/java/org/codehaus/jackson/util/ByteArrayBuilder.java",
      "types": [
        "Boolean",
        "Math",
        "Integer",
        "LinkedList"
      ],
      "apicalls": [
        "max",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.max(int,int)",
            "java.util.LinkedList<Tau_E>.add(Tau_E)",
            "java.lang.Math.max(int,int)",
            "java.util.LinkedList<Tau_E>.add(Tau_E)",
            "java.lang.Math.max(int,int)",
            "java.util.LinkedList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "max",
        "linked",
        "add",
        "java",
        "lang",
        "boolean",
        "list",
        "integer",
        "math",
        "util"
      ]
    },
    {
      "method": "getAvailableServers@203",
      "body": "/** \n * Get the addresses of available servers. <p> This is based on a snapshot in time so shouldn't be considered completely accurate, but is a useful for getting a feel for what's working and what's not working. </p>\n * @return point-in-time view of currently available servers\n */\npublic Collection<SocketAddress> getAvailableServers(){\n  ArrayList<SocketAddress> rv=new ArrayList<SocketAddress>();\n  for (  MemcachedNode node : mconn.getLocator().getAll()) {\n    if (node.isActive()) {\n      rv.add(node.getSocketAddress());\n    }\n  }\n  return rv;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.net.SocketAddress>.ArrayList<SocketAddress>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.net.SocketAddress>.add(java.net.SocketAddress)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Collection<SocketAddress>",
      "file": "./java_projects/java-memcached-client/src/main/java/net/spy/memcached/MemcachedClient.java",
      "types": [
        "SocketAddress",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.net.SocketAddress>.ArrayList<SocketAddress>()",
            "java.util.ArrayList<java.net.SocketAddress>.add(java.net.SocketAddress)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "add",
        "util",
        "array",
        "list",
        "socket",
        "address"
      ]
    },
    {
      "method": "optJSONArray@477",
      "body": "/** \n * Get the optional JSONArray associated with an index.\n * @param index subscript\n * @return      A JSONArray value, or null if the index has no value,or if the value is not a JSONArray.\n */\npublic JSONArray optJSONArray(int index){\n  Object o=opt(index);\n  return o instanceof JSONArray ? (JSONArray)o : null;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.util.ArrayList.get(int)",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "JSONArray",
      "file": "./java_projects/kolmafia/lib/org/json/JSONArray.java",
      "types": [
        "Integer",
        "Object",
        "ArrayList"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "java",
        "size",
        "list",
        "integer",
        "array",
        "get"
      ]
    },
    {
      "method": "getWarnClassIsSealed@3130",
      "body": "public Boolean getWarnClassIsSealed(){\n  return getCompilerWarnings().get(\"warn-class-is-sealed\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<java.lang.String,java.lang.Boolean>.LinkedHashMap<String,Boolean>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Boolean.valueOf(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Boolean",
      "file": "./java_projects/flexmojos/flexmojos-maven-plugin/src/main/java/net/flexmojos/oss/plugin/compiler/AbstractFlexCompilerMojo.java",
      "types": [
        "String",
        "Set",
        "Boolean",
        "Object",
        "LinkedHashMap",
        "Map"
      ],
      "apicalls": [
        "put",
        "valueOf",
        "entrySet",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<java.lang.String,java.lang.Boolean>.LinkedHashMap<String,Boolean>()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.lang.Boolean.valueOf(java.lang.String)",
            "java.util.Map<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)",
            "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "set",
        "linked",
        "lang",
        "entry",
        "value",
        "get",
        "boolean",
        "map",
        "java",
        "string",
        "util",
        "hash",
        "put"
      ]
    },
    {
      "method": "resetChildColors@118",
      "body": "public void resetChildColors(){\n  Iterator it=getChildren().iterator();\n  while (it.hasNext()) {\n    Object next=it.next();\n    if (next instanceof CFGNodeEditPart) {\n      ((CFGNodeEditPart)next).resetColors();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/soot/eclipse/ca.mcgill.sable.soot/src/ca/mcgill/sable/soot/cfg/editParts/CFGGraphEditPart.java",
      "types": [
        "Iterator",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "next",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "next",
        "boolean",
        "util",
        "java",
        "object"
      ]
    },
    {
      "method": "testCreateSuccess4@535",
      "body": "public static void testCreateSuccess4(){\n  for (int bitMap=0, n=1 << 4; bitMap < n; bitMap++) {\n    for (int failure=0; failure < 2; failure++) {\n      List<Integer> closedList=new ArrayList<Integer>();\n      try (Resource r0=createResource(0,bitMap,closedList);Resource r1=createResource(1,bitMap,closedList);Resource r2=createResource(2,bitMap,closedList);Resource r3=createResource(3,bitMap,closedList)){\n        if (failure != 0)         throw new MyKindOfException();\n      }\n catch (      Resource.CreateFailException e) {\n        throw new AssertionError(\"Resource creation failed: \" + e.resourceId());\n      }\ncatch (      MyKindOfException e) {\n        if (failure == 0)         throw new AssertionError(\"Unexpected MyKindOfException\");\n        checkSuppressedExceptions(e.getSuppressed(),bitMap);\n      }\ncatch (      Resource.CloseFailException e) {\n        if (failure == 1)         throw new AssertionError(\"Secondary exception suppression failed\");\n        int id=e.resourceId();\n        if (bitMap == 0)         throw new AssertionError(\"Unexpected CloseFailException: \" + id);\n        int highestCloseFailBit=Integer.highestOneBit(bitMap);\n        if (1 << id != highestCloseFailBit) {\n          throw new AssertionError(\"CloseFailException: got id \" + id + \", expected lg(\"+ highestCloseFailBit+ \")\");\n        }\n        checkSuppressedExceptions(e.getSuppressed(),bitMap & ~highestCloseFailBit);\n      }\n      checkClosedList(closedList,4);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(int,java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.util.List<java.lang.Integer>.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ceylon-compiler/langtools/test/tools/javac/TryWithResources/TwrTests.java",
      "types": [
        "Integer",
        "Boolean",
        "ArrayList",
        "List",
        "Object"
      ],
      "apicalls": [
        "add",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(int)",
            "java.util.List<java.lang.Integer>.add(int,java.lang.Integer)",
            "$NOT$java.util.List<java.lang.Integer>.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "list",
        "equals",
        "add",
        "java",
        "integer",
        "array",
        "boolean",
        "util",
        "object"
      ]
    },
    {
      "method": "toString@185",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\n@Override public String toString(){\n  if (eIsProxy())   return super.toString();\n  StringBuffer result=new StringBuffer(super.toString());\n  result.append(\" (name: \");\n  result.append(name);\n  result.append(\", type: \");\n  result.append(type);\n  result.append(')');\n  return result.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/xtext/tests/org.eclipse.xtext.tests/src-gen/org/eclipse/xtext/parsetree/formatter/formattertestlanguage/impl/ParamImpl.java",
      "types": [
        "String",
        "Character",
        "Object",
        "StringBuffer"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "character",
        "string",
        "buffer",
        "java",
        "append",
        "object"
      ]
    },
    {
      "method": "main@35",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.Socket.Socket()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.InetSocketAddress.InetSocketAddress(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.Socket.connect(java.net.SocketAddress)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.net.Socket.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/com/sun/tools/attach/Shutdown.java",
      "body": "public static void main(String args[]) throws IOException {\n  int port=Integer.parseInt(args[0]);\n  System.out.println(\"Connecting to port \" + port + \" to shutdown Application ...\");\n  Socket s=new Socket();\n  s.connect(new InetSocketAddress(port));\n  s.close();\n}\n",
      "types": [
        "SocketAddress",
        "IOException",
        "Socket",
        "NumberFormatException",
        "String",
        "Integer",
        "PrintStream",
        "InetSocketAddress"
      ],
      "apicalls": [
        "parseInt",
        "close",
        "println",
        "connect"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.net.Socket.Socket()",
            "java.net.InetSocketAddress.InetSocketAddress(int)",
            "java.net.Socket.connect(java.net.SocketAddress)",
            "java.net.Socket.close()"
          ]
        }
      ],
      "keywords": [
        "net",
        "number",
        "lang",
        "inet",
        "format",
        "string",
        "int",
        "println",
        "integer",
        "print",
        "socket",
        "stream",
        "java",
        "close",
        "io",
        "parse",
        "address",
        "connect",
        "exception"
      ]
    },
    {
      "method": "isTagged@74",
      "body": "@Override public boolean isTagged(){\n  if (!hasRevisions()) {\n    return false;\n  }\n  for (  BazaarRevision revision : this.revisions) {\n    if (revision.isTagged()) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$$NOT$java.util.List<Tau_E>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/bazaar-plugin/src/main/java/hudson/plugins/bazaar/BazaarTagAction.java",
      "types": [
        "List",
        "String",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$$NOT$java.util.List<Tau_E>.isEmpty()",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "empty",
        "list",
        "array",
        "java",
        "string"
      ]
    },
    {
      "method": "getLong@463",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.Number.longValue()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/tesb-rt-se/job/job-api/src/test/java/routines/system/JSONObject.java",
      "body": "/** \n * Get the long value associated with a key. If the number value is too long for a long, it will be clipped.\n * @param key A key string.\n * @return The long value.\n * @throws JSONException if the key is not found or if the value cannot be converted to a long.\n */\npublic long getLong(String key) throws JSONException {\n  Object o=get(key);\n  return o instanceof Number ? ((Number)o).longValue() : (long)getDouble(key);\n}\n",
      "types": [
        "Object",
        "Long",
        "Map",
        "Number"
      ],
      "apicalls": [
        "get",
        "longValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.get(java.lang.Object)",
            "java.lang.Number.longValue()"
          ]
        }
      ],
      "keywords": [
        "long",
        "java",
        "lang",
        "map",
        "number",
        "object",
        "value",
        "get",
        "util"
      ]
    },
    {
      "method": "read_float@537",
      "body": "public final float read_float(){\n  return Float.intBitsToFloat(read_long());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              },
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              },
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              },
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              },
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              },
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              },
              {
                "_call": "java.nio.ByteBuffer.get(int)",
                "node": "DAPICall",
                "_returns": "byte",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.Float.intBitsToFloat(int)",
            "node": "DAPICall",
            "_returns": "float",
            "_throws": []
          }
        ]
      },
      "returnType": "float",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/corba/src/share/classes/com/sun/corba/se/impl/encoding/CDRInputStream_1_0.java",
      "types": [
        "Integer",
        "Float",
        "Byte",
        "ByteBuffer"
      ],
      "apicalls": [
        "intBitsToFloat",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.get(int)",
            "java.nio.ByteBuffer.get(int)",
            "java.nio.ByteBuffer.get(int)",
            "java.nio.ByteBuffer.get(int)",
            "java.lang.Float.intBitsToFloat(int)"
          ]
        }
      ],
      "keywords": [
        "get",
        "int",
        "float",
        "byte",
        "lang",
        "integer",
        "nio",
        "buffer",
        "java",
        "bits"
      ]
    },
    {
      "method": "getIndentClass@190",
      "body": "public String getIndentClass(){\n  String result=ValueBindings.get(this,\"indentClass\",indentClass);\n  if (result == null && getPopupMenuParent() != null) {\n    result=getPopupMenuParent().indentClass;\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/OpenFaces/openFaces/source/org/openfaces/component/command/PopupMenu.java",
      "types": [
        "Boolean",
        "Class"
      ],
      "apicalls": [
        "isAssignableFrom"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "assignable",
        "java",
        "lang",
        "class"
      ]
    },
    {
      "method": "testLong@79",
      "body": "public void testLong(){\n  String s=\"126476513274\";\n  long i=126476513274L;\n  TypedLiteralImpl l=new TypedLiteralImpl(s,XsdTypes.LONG);\n  assertEquals(i,Conversions.toLong(s));\n  assertEquals(l,Conversions.toLiteral(i));\n  roundTrip(Long.valueOf(i),l);\n  invalid(\"156432418974561566571\",XsdTypes.LONG);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.valueOf(long)",
            "node": "DAPICall",
            "_returns": "java.lang.Long",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spark/spark-spi/src/test/java/spark/spi/TestConversions.java",
      "types": [
        "String",
        "Long",
        "Throwable"
      ],
      "apicalls": [
        "valueOf",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.valueOf(long)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "java",
        "throwable",
        "value",
        "message",
        "lang",
        "get",
        "string",
        "long"
      ]
    },
    {
      "method": "toString@256",
      "body": "/** \n * Produce a comma delimited text from a JSONArray of JSONObjects using a provided list of names. The list of names is not included in the output.\n * @param names A JSONArray of strings.\n * @param ja A JSONArray of JSONObjects.\n * @return A comma delimited text.\n * @throws JSONException\n */\npublic static String toString(JSONArray names,JSONArray ja) throws JSONException {\n  if (names == null || names.length() == 0) {\n    return null;\n  }\n  StringBuffer sb=new StringBuffer();\n  for (int i=0; i < ja.length(); i+=1) {\n    JSONObject jo=ja.optJSONObject(i);\n    if (jo != null) {\n      sb.append(rowToString(jo.toJSONArray(names)));\n    }\n  }\n  return sb.toString();\n}\n",
      "formalParam": [
        "JSONArray",
        "JSONArray"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/wicket/wicket-core/src/main/java/org/apache/wicket/ajax/json/CDL.java",
      "types": [
        "String",
        "Object",
        "StringBuffer"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "string",
        "buffer",
        "object",
        "append"
      ]
    },
    {
      "method": "childrenRemoved@134",
      "body": "public void childrenRemoved(BeanContextMembershipEvent bcme){\n  Iterator<?> it=bcme.iterator();\n  while (it.hasNext()) {\n    findAndUndo(it.next());\n  }\n}\n",
      "formalParam": [
        "BeanContextMembershipEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ee-INS/src/main/java/dk/frv/enav/ins/gui/ComponentFrame.java",
      "types": [
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "next",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "boolean",
        "java",
        "next",
        "util"
      ]
    },
    {
      "method": "doAcknowlegement@127",
      "body": "@Override public void doAcknowlegement(Message msg) throws JMSException {\n  super.doAcknowlegement(msg);\n  try {\n    prepBroker(msg.getIntProperty(INDEX));\n  }\n catch (  Exception e) {\n    fail(\"Unable to prep new broker,\" + e.getMessage());\n  }\n}\n",
      "formalParam": [
        "Message"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "node": "DBranch",
                "_else": [
                  {
                    "_call": "$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": [
                      "java.lang.InterruptedException"
                    ]
                  },
                  {
                    "_call": "java.lang.System.getProperty(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  },
                  {
                    "_call": "java.io.File.File(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "void",
                    "_throws": []
                  }
                ],
                "_cond": [],
                "_then": [
                  {
                    "_call": "$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": [
                      "java.lang.InterruptedException"
                    ]
                  },
                  {
                    "_call": "java.lang.System.getProperty(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  },
                  {
                    "_call": "java.io.File.File(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "void",
                    "_throws": []
                  }
                ]
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/andes/java/systests/src/main/java/org/wso2/andes/test/unit/ack/AcknowledgeAfterFailoverTest.java",
      "types": [
        "CountDownLatch",
        "Throwable",
        "InterruptedException",
        "TimeUnit",
        "System",
        "Long",
        "Boolean",
        "File",
        "String"
      ],
      "apicalls": [
        "getMessage",
        "getProperty",
        "await"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "latch",
        "long",
        "property",
        "io",
        "java",
        "await",
        "file",
        "system",
        "concurrent",
        "throwable",
        "util",
        "exception",
        "interrupted",
        "count",
        "boolean",
        "get",
        "string",
        "message",
        "lang",
        "time",
        "unit"
      ]
    },
    {
      "method": "VersionPrinter@19",
      "body": "public VersionPrinter(){\n  try {\n    Properties props=new Properties();\n    String pomPropertiesLocation=\"META-INF/maven/com.cmaxinc.test/testlib/pom.properties\";\n    InputStream stream=this.getClass().getClassLoader().getResourceAsStream(pomPropertiesLocation);\n    if (stream == null)     throw new RuntimeException(\"Couldn't find stream using \" + pomPropertiesLocation);\n    props.load(stream);\n    System.out.println(\"Test Library version \" + props.get(\"version\"));\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Can't find properties\",e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Class.getClassLoader()",
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader",
            "_throws": []
          },
          {
            "_call": "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": []
          },
          {
            "_call": "java.util.Properties.load(java.io.InputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/m2e-core-tests/org.eclipse.m2e.tests/projects/MNGECLIPSE-369/testlib/src/main/java/com/cmaxinc/test/VersionPrinter.java",
      "types": [
        "PrintStream",
        "ClassLoader",
        "Properties",
        "IOException",
        "Hashtable",
        "InputStream",
        "Object",
        "Class",
        "String"
      ],
      "apicalls": [
        "getClassLoader",
        "get",
        "getResourceAsStream",
        "load",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "java.util.Properties.load(java.io.InputStream)",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.get(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "load",
        "println",
        "get",
        "util",
        "resource",
        "object",
        "io",
        "properties",
        "input",
        "java",
        "class",
        "loader",
        "print",
        "stream",
        "string",
        "exception",
        "hashtable",
        "lang"
      ]
    },
    {
      "method": "run@91",
      "body": "public void run(){\n  upload_counter=upload_interval;\n  Environment.logInfo(\"Failmon Executor thread started successfully.\");\n  while (true) {\n    try {\n      Thread.sleep(interval * 1000);\n      for (int i=0; i < monitors.size(); i++) {\n        monitors.get(i).counter-=interval;\n        if (monitors.get(i).counter <= 0) {\n          monitors.get(i).reset();\n          Environment.logInfo(\"Calling \" + monitors.get(i).job.getInfo() + \"...\\t\");\n          monitors.get(i).job.monitor(lstore);\n        }\n      }\n      upload_counter-=interval;\n      if (upload_counter <= 0) {\n        lstore.upload();\n        upload_counter=upload_interval;\n      }\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Thread.sleep(long)",
                "_throws": [
                  "java.lang.InterruptedException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20-warehouse/src/contrib/failmon/src/java/org/apache/hadoop/contrib/failmon/Executor.java",
      "types": [
        "Thread",
        "Long",
        "Throwable",
        "InterruptedException"
      ],
      "apicalls": [
        "sleep",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "trace",
        "print",
        "lang",
        "sleep",
        "interrupted",
        "exception",
        "java",
        "stack",
        "thread",
        "throwable",
        "long"
      ]
    },
    {
      "method": "radians@390",
      "body": "public static double radians(double v){\n  return check(Math.toRadians(v));\n}\n",
      "formalParam": [
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.toRadians(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Double.isNaN(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Double.isInfinite(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/jython-on-android/src/org/python/modules/math.java",
      "types": [
        "Double",
        "Math",
        "Boolean"
      ],
      "apicalls": [
        "isInfinite",
        "toRadians",
        "isNaN"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.toRadians(double)",
            "java.lang.Double.isNaN(double)",
            "java.lang.Double.isInfinite(double)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "double",
        "java",
        "math",
        "radians",
        "n",
        "infinite",
        "na"
      ]
    },
    {
      "method": "sign@259",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.lang.String.String(byte[],java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/platform/dependencies/openid4java/0.9.6-wso2v2/src/org/openid4java/association/Association.java",
      "body": "public String sign(String text) throws AssociationException {\n  if (DEBUG)   _log.debug(\"Computing signature for input data:\\n\" + text);\n  try {\n    String signature=new String(Base64.encodeBase64(sign(text.getBytes(\"utf-8\"))),\"utf-8\");\n    if (DEBUG)     _log.debug(\"Calculated signature: \" + signature);\n    return signature;\n  }\n catch (  UnsupportedEncodingException e) {\n    throw new AssociationException(\"Unsupported encoding for signed text.\",e);\n  }\n}\n",
      "types": [
        "UnsupportedEncodingException",
        "Byte",
        "String"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.lang.String.String(byte[],java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "bytes",
        "byte",
        "lang",
        "encoding",
        "exception",
        "string",
        "unsupported",
        "get",
        "java"
      ]
    },
    {
      "method": "testInvokeDynamicPrintArgs@102",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperties()",
            "node": "DAPICall",
            "_returns": "java.util.Properties",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.toString(java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/java/lang/invoke/InvokeDynamicPrintArgs.java",
      "body": "@Test public void testInvokeDynamicPrintArgs() throws IOException {\n  System.err.println(System.getProperties());\n  String testClassPath=System.getProperty(\"build.test.classes.dir\");\n  if (testClassPath == null)   throw new RuntimeException();\n  String[] args=new String[]{\"--verify-specifier-count=3\",\"--verbose\",\"--expand-properties\",\"--classpath\",testClassPath,\"--java\",\"test.java.lang.invoke.InvokeDynamicPrintArgs\",\"--check-output\"};\n  System.err.println(\"Indify: \" + Arrays.toString(args));\n  indify.Indify.main(args);\n}\n",
      "types": [
        "Object",
        "Arrays",
        "PrintStream",
        "Properties",
        "System",
        "String"
      ],
      "apicalls": [
        "getProperties",
        "toString",
        "println",
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperties()",
            "java.io.PrintStream.println(java.lang.Object)",
            "java.lang.System.getProperty(java.lang.String)",
            "java.util.Arrays.toString(java.lang.Object[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "arrays",
        "java",
        "property",
        "get",
        "system",
        "util",
        "stream",
        "print",
        "io",
        "lang",
        "properties",
        "string",
        "println",
        "object"
      ]
    },
    {
      "method": "checkExtModifiersOnPress@93",
      "body": "public static void checkExtModifiersOnPress(int testModifier,HashMap h,int button){\n  String ethalon=\"\";\nswitch (testModifier) {\ncase SHIFT:\n{\n      ethalon=\"Shift+\";\n      break;\n    }\ncase ALT:\n{\n    ethalon=\"Alt+\";\n    break;\n  }\ncase CTRL:\n{\n  ethalon=\"Ctrl+\";\n  break;\n}\n}\nethalon=ethalon + \"Button\" + button;\nif (!h.get(\"extModifiers\").equals(ethalon)) {\nMessageLogger.reportError(\"Test failed :  Pressed. extModifiers = \" + h.get(\"extModifiers\") + \" instead of : \"+ ethalon);\n}\n}\n",
      "formalParam": [
        "int",
        "HashMap",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.HashMap.get(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.HashMap.get(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/awt/Mouse/MouseModifiersUnitTest/MouseModifiersUnitTest_Extra.java",
      "types": [
        "HashMap",
        "Object",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "println",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.HashMap.get(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.HashMap.get(java.lang.Object)",
            "java.util.HashMap.get(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "map",
        "print",
        "hash",
        "util",
        "object",
        "stream",
        "println",
        "io",
        "get",
        "java"
      ]
    },
    {
      "method": "getCharacters@394",
      "body": "@Ignore public static List<? extends Character> getCharacters(java.lang.String value){\n  int length=value.length();\n  if (length == 0) {\n    return (List)empty_.getEmpty$();\n  }\n  Character[] chars=new Character[(int)getSize(value)];\n  for (int offset=0, i=0; offset < length; i++) {\n    int codePoint=value.codePointAt(offset);\n    chars[i]=Character.instance(codePoint);\n    offset+=java.lang.Character.charCount(codePoint);\n  }\n  return new ArraySequence<Character>(chars);\n}\n",
      "formalParam": [
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.codePointAt(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.charCount(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "List<? extends Character>",
      "file": "./java_projects/ceylon.language/runtime/ceylon/language/String.java",
      "types": [
        "Integer",
        "String",
        "Character"
      ],
      "apicalls": [
        "charCount",
        "codePointAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.codePointAt(int)",
            "java.lang.Character.charCount(int)"
          ]
        }
      ],
      "keywords": [
        "length",
        "integer",
        "character",
        "code",
        "lang",
        "string",
        "point",
        "char",
        "count",
        "java"
      ]
    },
    {
      "method": "setUp@59",
      "body": "/** \n * @throws java.lang.Exception\n */\n@Before public void setUp() throws Exception {\n  SPINModuleRegistry.get().reset();\n  SPINModuleRegistry.get().init();\n  log.info(\"Loading domain ontology...\");\n  queryModel=loadModelWithImports(\"http://www.co-ode.org/ontologies/pizza/2007/02/12/pizza.owl\");\n  Assert.assertEquals(\"Test resource was not loaded correctly\",2332,queryModel.size());\n  newTriples=ModelFactory.createDefaultModel(ReificationStyle.Minimal);\n  queryModel.addSubModel(newTriples);\n  log.info(\"Loading OWL RL ontology...\");\n  OntModel owlrlModel=loadModelWithImports(\"http://topbraid.org/spin/owlrl-all\");\n  Assert.assertEquals(\"OWL RL ontology was not loaded correctly\",3324,owlrlModel.size());\n  SPINModuleRegistry.get().registerAll(owlrlModel,\"http://topbraid.org/spin/owlrl-all\");\n  MultiUnion multiUnion=new MultiUnion(new Graph[]{queryModel.getGraph(),owlrlModel.getGraph()});\n  unionModel=ModelFactory.createModelForGraph(multiUnion);\n  validFunctionSources=new HashSet<Object>();\n  validFunctionSources.add(\"http://topbraid.org/spin/owlrl-all\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.lang.Object>.HashSet<Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<java.lang.Object>.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spin/spin-examples/src/test/java/org/topbraid/spin/examples/OWLRLTest.java",
      "types": [
        "HashSet",
        "Set",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.lang.Object>.HashSet<Object>()",
            "java.util.Set<java.lang.Object>.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "java",
        "hash",
        "add",
        "set",
        "util",
        "object"
      ]
    },
    {
      "method": "main@188",
      "body": "public static void main(String[] args){\n  try {\n    InputStream in=DocxProjectWithVelocity2PDF.class.getResourceAsStream(\"DocxProjectWithVelocity.docx\");\n    IXDocReport report=XDocReportRegistry.getRegistry().loadReport(in,TemplateEngineKind.Velocity);\n    IContext context=report.createContext();\n    Project project=new Project(\"XDocReport\");\n    context.put(\"project\",project);\n    OutputStream out=new FileOutputStream(new File(\"DocxProjectWithVelocity_Out.pdf\"));\n    Options options=Options.getTo(ConverterTypeTo.PDF).via(ConverterTypeVia.ITEXT);\n    report.convert(context,options,out);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  XDocReportException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.io.InputStream",
                "_throws": []
              },
              {
                "_call": "java.io.File.File(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.FileNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xdocreport-demo/samples/fr.opensagres.xdocreport.samples.docxandvelocity.converters/src/fr/opensagres/xdocreport/samples/docxandvelocity/DocxProjectWithVelocity2PDF.java",
      "types": [
        "Throwable",
        "String",
        "Class",
        "File",
        "FileNotFoundException",
        "InputStream",
        "FileOutputStream"
      ],
      "apicalls": [
        "printStackTrace",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "get",
        "input",
        "class",
        "java",
        "file",
        "stack",
        "stream",
        "io",
        "output",
        "lang",
        "string",
        "trace",
        "exception",
        "resource",
        "found",
        "throwable",
        "print"
      ]
    },
    {
      "method": "run@159",
      "body": "public void run(){\n  try {\n    while (Clock.asMillis() < wakeupTime) {\n      sleep(minimalSleepMsec);\n    }\n  }\n catch (  InterruptedException ie) {\n  }\n  qc.executeTriggerWithoutDelay(trig);\n  triggerThreads.remove(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          },
          {
            "_call": "java.util.List<Tau_E>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/qualm/src/qualm/QController.java",
      "types": [
        "Long",
        "Boolean",
        "List",
        "Thread",
        "InterruptedException",
        "Object"
      ],
      "apicalls": [
        "sleep",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.util.List<Tau_E>.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "remove",
        "object",
        "long",
        "boolean",
        "util",
        "java",
        "interrupted",
        "lang",
        "thread",
        "exception",
        "list"
      ]
    },
    {
      "method": "testJDKString@50",
      "body": "/** \n * This test actually checks if your JDK is misbehaving.  On my own Debian machine, changing the system to use UTF-8 suddenly broke Java, and I put in this test to check for its brokenness.  If your tests suddenly stop running, check if this one is failing too.  If it is, your platform is broken.  If it's not, seek for the bug in your code.\n */\npublic void testJDKString() throws Exception {\n  String src=\"abc\\u00e4\\u00e5\\u00a6\";\n  String res=new String(src.getBytes(\"ISO-8859-1\"),\"ISO-8859-1\");\n  assertEquals(src,res);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.lang.String.String(byte[],java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jspwiki/tests/org/apache/wiki/FileUtilTest.java",
      "types": [
        "UnsupportedEncodingException",
        "Byte",
        "String"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.lang.String.String(byte[],java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "unsupported",
        "byte",
        "bytes",
        "lang",
        "exception",
        "string",
        "get",
        "encoding"
      ]
    },
    {
      "method": "testWrite_EnzymeClassification@86",
      "body": "@Test public void testWrite_EnzymeClassification() throws Exception {\n  byte[] actual=getActualByteArray(new EnzymeClassification(new ECNumber(\"1.1.1.85\")));\n  byte[] expected=getExpectedByteArray(\"enzyme-classification-annotation\",actual.length);\n  Assert.assertArrayEquals(expected,actual);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "_returns": "java.io.InputStream",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.InputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/mdk/io/annotation-data-io/src/test/java/uk/ac/ebi/mdk/io/annotation/CrossReferenceWriterTest.java",
      "types": [
        "Byte",
        "InputStream",
        "Integer",
        "Class",
        "String",
        "IOException"
      ],
      "apicalls": [
        "getResourceAsStream",
        "read",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStream.read(byte[])"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStream.read(byte[])",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "input",
        "io",
        "read",
        "exception",
        "integer",
        "lang",
        "stream",
        "string",
        "byte",
        "class",
        "close",
        "resource",
        "get",
        "java"
      ]
    },
    {
      "method": "getSystemClasspathElements@731",
      "body": "public List<String> getSystemClasspathElements() throws DependencyResolutionRequiredException {\n  List<String> list=new ArrayList<String>(getArtifacts().size());\n  String d=getBuild().getOutputDirectory();\n  if (d != null) {\n    list.add(d);\n  }\n  for (  Artifact a : getArtifacts()) {\n    if (a.getArtifactHandler().isAddedToClasspath()) {\n      if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {\n        addArtifactPath(a,list);\n      }\n    }\n  }\n  return list;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/maven-3/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
      "types": [
        "Boolean",
        "ArrayList",
        "String",
        "Collection",
        "List"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "java",
        "string",
        "add",
        "array",
        "collection",
        "list",
        "util"
      ]
    },
    {
      "method": "main@35",
      "body": "public static void main(String args[]) throws Exception {\n  URL url=new URL(\"file://bogus/index.html\");\n  URL url2=new URL(url,\"here.pl?notaspec:atall\");\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URL.URL(java.net.URL,java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/net/URL/Protocol.java",
      "types": [
        "String",
        "URL",
        "MalformedURLException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.URL(java.net.URL,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "java",
        "net",
        "string",
        "url",
        "malformed"
      ]
    },
    {
      "method": "getTotalClassCoverage@136",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "float",
      "file": "./java_projects/emma-plugin/src/main/java/hudson/plugins/emma/portlet/bean/EmmaCoverageResultSummary.java",
      "body": "/** \n * Getter of the total of class coverage.\n * @return float the total of class coverage.\n */\npublic float getTotalClassCoverage(){\n  if (this.getCoverageResults().size() <= 0) {\n    return 0.0f;\n  }\n else {\n    float totalClass=this.getClassCoverage() / this.getCoverageResults().size();\n    totalClass=Utils.roundFLoat(1,BigDecimal.ROUND_HALF_EVEN,totalClass);\n    return totalClass;\n  }\n}\n",
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "list",
        "java",
        "size",
        "util",
        "integer"
      ]
    },
    {
      "method": "valueChanged@74",
      "body": "public void valueChanged(ListSelectionEvent evt){\n  if (!evt.getValueIsAdjusting()) {\n    int i=m_jlist.getSelectedIndex();\n    if (i >= 0) {\n      if (!m_bd.isAdjusting()) {\n        try {\n          m_bd.moveTo(i);\n        }\n catch (        BasicException eD) {\n          MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,LocalRes.getIntString(\"message.nomove\"),eD);\n          msg.show(this);\n        }\n      }\n      Rectangle oRect=m_jlist.getCellBounds(i,i);\n      m_jlist.scrollRectToVisible(oRect);\n    }\n  }\n}\n",
      "formalParam": [
        "ListSelectionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JList.getSelectedIndex()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "javax.swing.JList.getCellBounds(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Rectangle"
          },
          {
            "_call": "javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pos_1/src-data/com/openbravo/data/gui/JListNavigator.java",
      "types": [
        "JList",
        "JComponent",
        "Rectangle",
        "Integer"
      ],
      "apicalls": [
        "getCellBounds",
        "scrollRectToVisible",
        "getSelectedIndex"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JList.getSelectedIndex()",
            "javax.swing.JList.getCellBounds(int,int)",
            "javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)"
          ]
        }
      ],
      "keywords": [
        "j",
        "javax",
        "index",
        "rectangle",
        "swing",
        "bounds",
        "get",
        "visible",
        "component",
        "integer",
        "rect",
        "cell",
        "list",
        "selected",
        "scroll"
      ]
    },
    {
      "method": "FindCommit@154",
      "formalParam": [
        "byte[]",
        "ProjectInterface"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.sql.ResultSet.next()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": [
                  "java.sql.SQLException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "CommitModel",
      "file": "./java_projects/File-Dependency-Client/src/com/projectchanged/server/businessLogic/DbObjectServiceModel.java",
      "body": "public CommitModel FindCommit(byte[] revision,ProjectInterface project){\n  String sql=\"SELECT CommitId FROM Commits WHERE Revision = ? AND Project = ?\";\n  try {\n    ResultSet rs=QueryExecutor.ExecuteReader(sql,new Object[]{revision,project.GetId()});\n    if (rs.next()) {\n      return (CommitModel)ObjectFinder.GetCommit(rs.getLong(\"CommitId\"));\n    }\n    return null;\n  }\n catch (  SQLException sqlException) {\n    sqlException.printStackTrace();\n    return null;\n  }\n}\n",
      "types": [
        "Throwable",
        "Boolean",
        "SQLException",
        "ResultSet"
      ],
      "apicalls": [
        "printStackTrace",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.ResultSet.next()"
          ]
        },
        {
          "calls": [
            "java.sql.ResultSet.next()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "print",
        "result",
        "exception",
        "sql",
        "java",
        "stack",
        "throwable",
        "set",
        "next",
        "lang",
        "trace",
        "boolean"
      ]
    },
    {
      "method": "getCategories@62",
      "body": "public final List<ApplicationCategory> getCategories() throws Exception {\n  ApplicationRegistryService service=getApplicationComponent(ApplicationRegistryService.class);\n  UserACL acl=Util.getUIPortalApplication().getApplicationComponent(UserACL.class);\n  String remoteUser=((WebuiRequestContext)WebuiRequestContext.getCurrentInstance()).getRemoteUser();\n  List<ApplicationCategory> listCategories=new ArrayList<ApplicationCategory>();\n  Iterator<ApplicationCategory> appCateIte=service.getApplicationCategories(remoteUser,ApplicationType.GADGET).iterator();\n  while (appCateIte.hasNext()) {\n    ApplicationCategory cate=appCateIte.next();\n    for (    String p : cate.getAccessPermissions()) {\n      if (acl.hasPermission(p)) {\n        List<Application> listGadgets=cate.getApplications();\n        if (listGadgets != null && listGadgets.size() > 0) {\n          listCategories.add(cate);\n          break;\n        }\n      }\n    }\n  }\n  Collections.sort(listCategories,new Comparator<ApplicationCategory>(){\n    public int compare(    ApplicationCategory cate1,    ApplicationCategory cate2){\n      return cate1.getDisplayName(true).compareToIgnoreCase(cate2.getDisplayName(true));\n    }\n  }\n);\n  categories=listCategories;\n  return categories;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "List<ApplicationCategory>",
      "file": "./java_projects/gatein-portal/webui/dashboard/src/main/java/org/exoplatform/dashboard/webui/component/UIDashboardSelectContainer.java",
      "types": [
        "ArrayList",
        "List",
        "Collections",
        "Comparator"
      ],
      "apicalls": [
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "util",
        "collections",
        "java",
        "sort",
        "comparator"
      ]
    },
    {
      "method": "addHeaderColumn@132",
      "body": "/** \n * Fuegt der Tabelle einen neuen Spaltenkopf hinzu.\n * @param text\n * @param align\n * @param width\n * @param color\n */\npublic void addHeaderColumn(String text,int align,int width,BaseColor color){\n  headers.add(getDetailCell(text,align,color));\n  widths.add(new Integer(width));\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "BaseColor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hibiscus/src/de/willuhn/jameica/hbci/io/Reporter.java",
      "types": [
        "List",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.List<java.lang.Integer>.add(java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "add",
        "boolean",
        "java",
        "integer",
        "util",
        "lang",
        "list"
      ]
    },
    {
      "method": "getAttributeNameFromString@32",
      "body": "public String getAttributeNameFromString(Attribute attribute,String inputString){\n  int delimiter=inputString.indexOf(\":\");\n  if (delimiter != -1 && delimiter < inputString.length()) {\n    String token=inputString.substring(0,delimiter);\n    return getPropertyNameFromString(attribute,token);\n  }\n  return getPropertyNameFromString(attribute,inputString);\n}\n",
      "formalParam": [
        "Attribute",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/InformationSystem/designs/is/plugins/org.obeonetwork.dsl.is.design/src/org/obeonetwork/dsl/is/design/service/EntityService.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "indexOf",
        "length",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "java",
        "substring",
        "integer",
        "length",
        "index",
        "string",
        "lang"
      ]
    },
    {
      "method": "testAfterBinaryOperation_03@374",
      "body": "@Test public void testAfterBinaryOperation_03() throws Exception {\n  newBuilder().append(\"(''+'')\").assertText(expect(STRING_OPERATORS,CAST_INSTANCEOF));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xtext/plugins/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/ui/AbstractXbaseContentAssistTest.java",
      "types": [
        "Collection",
        "Boolean",
        "Arrays",
        "String",
        "List"
      ],
      "apicalls": [
        "asList",
        "addAll",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "java.util.List<java.lang.String>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "string",
        "list",
        "arrays",
        "array",
        "collection",
        "java",
        "add",
        "boolean",
        "util"
      ]
    },
    {
      "method": "addActiveProfile@529",
      "body": "public MavenExecutionRequest addActiveProfile(String profile){\n  if (!getActiveProfiles().contains(profile)) {\n    getActiveProfiles().add(profile);\n  }\n  return this;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.List<java.lang.String>.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "MavenExecutionRequest",
      "file": "./java_projects/maven-3/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
      "types": [
        "String",
        "List",
        "ArrayList",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "contains",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.contains(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.contains(java.lang.Object)",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "boolean",
        "add",
        "java",
        "contains",
        "object",
        "array",
        "list"
      ]
    },
    {
      "method": "getToTime@666",
      "body": "/** \n * Returns a sub-treeMap whose keys are less than or equals to timeEnd. If timeEnd is greater than the last key of the holoSDIFdata's sdifTreeMap, then it returns the holoSDIFdata's sdifTreeMap.\n * @param timeEnd - high endpoint (inclusive) of the subMap.\n */\npublic TreeMap<Double,Vector<Vector<Double>>> getToTime(double timeEnd){\n  if (sdifTreeMap.isEmpty())   return null;\n  if (timeEnd >= sdifTreeMap.lastKey())   return sdifTreeMap;\n  TreeMap<Double,Vector<Vector<Double>>> map=new TreeMap<Double,Vector<Vector<Double>>>(sdifTreeMap.headMap(timeEnd));\n  if (sdifTreeMap.containsKey(timeEnd))   map.put(timeEnd,sdifTreeMap.get(timeEnd));\n  return map;\n}\n",
      "formalParam": [
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.AbstractMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.isEmpty()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.lastKey()",
            "_throws": [],
            "_returns": "java.lang.Double",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.headMap(java.lang.Double)",
            "_throws": [],
            "_returns": "java.util.SortedMap",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.TreeMap<Double,Vector<Vector<Double>>>(java.util.Comparator)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.get(java.lang.Object)",
                "_throws": [],
                "_returns": "java.util.Vector<java.util.Vector<java.lang.Double>>",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.put(java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>)",
                "_throws": [],
                "_returns": "java.util.Vector<java.util.Vector<java.lang.Double>>",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.containsKey(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "TreeMap<Double,Vector<Vector<Double>>>",
      "file": "./java_projects/Holo-Edit/holoedit/data/HoloSDIFdata.java",
      "types": [
        "TreeMap",
        "Object",
        "Vector",
        "Comparator",
        "AbstractMap",
        "Double",
        "SortedMap",
        "Boolean"
      ],
      "apicalls": [
        "containsKey",
        "lastKey",
        "put",
        "isEmpty",
        "get",
        "headMap"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.AbstractMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.isEmpty()",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.lastKey()",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.headMap(java.lang.Double)",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.TreeMap<Double,Vector<Vector<Double>>>(java.util.Comparator)",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.containsKey(java.lang.Object)",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.get(java.lang.Object)",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.put(java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>)"
          ]
        },
        {
          "calls": [
            "java.util.AbstractMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.isEmpty()",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.lastKey()",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.headMap(java.lang.Double)",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.TreeMap<Double,Vector<Vector<Double>>>(java.util.Comparator)",
            "java.util.TreeMap<java.lang.Double,java.util.Vector<java.util.Vector<java.lang.Double>>>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "vector",
        "abstract",
        "object",
        "util",
        "get",
        "last",
        "java",
        "empty",
        "tree",
        "key",
        "double",
        "put",
        "boolean",
        "comparator",
        "map",
        "head",
        "sorted",
        "contains"
      ]
    },
    {
      "method": "testEmptyNavigationHandler@239",
      "body": "public void testEmptyNavigationHandler(){\n  String configFile=(String)Utilities.STUBBED_RESOURCEPATH.toArray()[0];\n  String manageBean=Utilities.getManagedBean(\"good\",Pojo.class,\"none\");\n  String application=\"<application>\" + \"<navigation-handler></navigation-handler>\" + \"</application>\";\n  String facesConfig=Utilities.getFacesConfig(manageBean + application);\n  StreamProvider streamProvider=new StringStreamProvider(facesConfig);\n  ApplicationTestSuite testSuite=new ApplicationTestSuite(\"ApplicationTestSuite_TestCase\");\n  testSuite.setStreamProvider(streamProvider);\n  setStreamProvider(streamProvider);\n  Test test=testSuite.getSuite(configFile,getApplicationNode(getDomDocument(configFile),configFile),null);\n  assertEquals(0,test.countTestCases());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "_returns": "byte[]",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "_returns": "org.w3c.dom.Document",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jsfunit/jboss-jsfunit-analysis/src/test/java/org/jboss/jsfunit/analysis/ApplicationTestSuite_TestCase.java",
      "types": [
        "IOException",
        "ByteArrayInputStream",
        "InputStream",
        "Byte",
        "DocumentBuilder",
        "String"
      ],
      "apicalls": [
        "getBytes",
        "parse"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "parse",
        "input",
        "array",
        "io",
        "parsers",
        "builder",
        "bytes",
        "java",
        "byte",
        "exception",
        "get",
        "lang",
        "stream",
        "xml",
        "string",
        "document",
        "javax"
      ]
    },
    {
      "method": "getKeyFromEntity@82",
      "body": "public static Object getKeyFromEntity(Method keyGetter,Object entity){\n  Object key=null;\n  if (null == keyGetter) {\n    return null;\n  }\n  if (null == entity) {\n    return null;\n  }\n  try {\n    key=keyGetter.invoke(entity,null);\n  }\n catch (  IllegalAccessException e) {\n    e.printStackTrace();\n  }\ncatch (  InvocationTargetException e) {\n    e.printStackTrace();\n  }\n  return key;\n}\n",
      "formalParam": [
        "Method",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/jdev11g_examples/ADF_JavaEJB_DC/LovUtils/src/nl/amis/jsf/model/EntityLovModelUtil.java",
      "types": [
        "InvocationTargetException",
        "IllegalAccessException",
        "IllegalArgumentException",
        "Throwable",
        "Object",
        "Method"
      ],
      "apicalls": [
        "invoke",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        },
        {
          "calls": [
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "java",
        "target",
        "throwable",
        "illegal",
        "reflect",
        "print",
        "stack",
        "access",
        "argument",
        "trace",
        "object",
        "exception",
        "method",
        "invocation",
        "lang",
        "invoke"
      ]
    },
    {
      "method": "read@6346",
      "body": "public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n  org.apache.thrift.protocol.TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == org.apache.thrift.protocol.TType.STOP) {\n      break;\n    }\nswitch (field.id) {\ncase 0:\n      if (field.type == org.apache.thrift.protocol.TType.LIST) {\n{\n          org.apache.thrift.protocol.TList _list16=iprot.readListBegin();\n          this.success=new ArrayList<String>(_list16.size);\n          for (int _i17=0; _i17 < _list16.size; ++_i17) {\n            String _elem18;\n            _elem18=iprot.readString();\n            this.success.add(_elem18);\n          }\n          iprot.readListEnd();\n        }\n      }\n else {\n        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n      }\n    break;\ndefault :\n  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n}\niprot.readFieldEnd();\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "org.apache.thrift.protocol.TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cloumon/src/thrift/gen-java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "ArrayList",
        "Boolean",
        "String",
        "Collection",
        "List"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "add",
        "boolean",
        "java",
        "array",
        "list",
        "collection",
        "util"
      ]
    },
    {
      "method": "testGetDslFile@105",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0.x/drools-repository/src/test/java/org/drools/resource/SvnResourceHandlerTest.java",
      "body": "public void testGetDslFile(){\n  ResourceHandler rHandler=new SvnResourceHandler();\n  rHandler.setRepositoryUrl(svnUrl);\n  rHandler.setCredentials(\"mrtrout\",\"drools\");\n  RepositoryBean bean=new RepositoryBean();\n  bean.setName(\"test\");\n  bean.setResourceType(ResourceType.DSL_FILE);\n  try {\n    File f=new File(testFilePath + \"/dsls/test.dsl\");\n    System.out.println(rHandler.getResourceStream(bean));\n    assertEquals(SvnUtil.getByteArrayOutputFromFile(f).toString(),rHandler.getResourceStream(bean).toString());\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "types": [
        "Character",
        "String",
        "File",
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "println",
        "string",
        "io",
        "character",
        "file",
        "stream",
        "print",
        "java"
      ]
    },
    {
      "method": "testBug353969_01@234",
      "body": "@Test public void testBug353969_01() throws Exception {\n  Processor p=(Processor)model.getComponents().get(0);\n  EList<Mode> modes=p.getMode();\n  assertEquals(2,modes.size());\n  Mode m1=modes.get(0);\n  ITextRegionWithLineInformation m1FullRegion=(ITextRegionWithLineInformation)locationInFileProvider.getFullTextRegion(m1);\n  assertEquals(modelAsString.indexOf(\"mode m1;\"),m1FullRegion.getOffset());\n  assertEquals(\"mode m1;\".length(),m1FullRegion.getLength());\n  assertEquals(3,m1FullRegion.getLineNumber());\n  assertEquals(3,m1FullRegion.getEndLineNumber());\n  ITextRegionWithLineInformation m1SignificantRegion=(ITextRegionWithLineInformation)locationInFileProvider.getSignificantTextRegion(m1);\n  assertEquals(modelAsString.indexOf(\"m1;\"),m1SignificantRegion.getOffset());\n  assertEquals(\"m1\".length(),m1SignificantRegion.getLength());\n  assertEquals(3,m1SignificantRegion.getLineNumber());\n  assertEquals(3,m1SignificantRegion.getEndLineNumber());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xtext/tests/org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/LocationInFileProviderTest.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "length",
        "index",
        "java",
        "string",
        "integer",
        "lang"
      ]
    },
    {
      "method": "isUTC@847",
      "body": "/** \n * @hide\n * @deprecated use {@link android.text.format.Time}Return true if this date string is local time\n */\npublic static boolean isUTC(String s){\n  if (s.length() == 16 && s.charAt(15) == 'Z') {\n    return true;\n  }\n  if (s.length() == 9 && s.charAt(8) == 'Z') {\n    return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/android_framework_base_1/core/java/android/text/format/DateUtils.java",
      "types": [
        "Integer",
        "String",
        "Character"
      ],
      "apicalls": [
        "length",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "char",
        "length",
        "character",
        "lang",
        "string",
        "integer"
      ]
    },
    {
      "method": "processHumidityData@64",
      "body": "public static Float processHumidityData(List<Float> tmpRelHumidityValues){\n  return getAverage(tmpRelHumidityValues);\n}\n",
      "formalParam": [
        "List<Float>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<java.lang.Float>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Float"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Float>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List<java.lang.Float>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "Float",
      "file": "./java_projects/PTSense/PTSense/src/com/cloud2bubble/ptsense/sensingservice/DataProcessor.java",
      "types": [
        "List",
        "Float",
        "Integer"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Float>.size()",
            "java.util.List<java.lang.Float>.get(int)",
            "java.util.List<java.lang.Float>.size()",
            "java.util.List<java.lang.Float>.size()"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "size",
        "float",
        "get",
        "list",
        "integer"
      ]
    },
    {
      "method": "naturalTime@146",
      "body": "@Test public void naturalTime() throws IOException, InterruptedException {\n  Calendar calendar=Calendar.getInstance();\n  Date now=calendar.getTime();\n  Thread.sleep(1000);\n  assertEquals(\"moments ago\",handlebars.compile(\"{{naturalTime this locale=\\\"en_US\\\"}}\").apply(now));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "_throws": [],
            "_returns": "java.util.Calendar",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "_returns": "java.util.Date",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/handlebars.java_1/handlebars-humanize/src/test/java/com/github/jknack/handlebars/HumanizeHelperTest.java",
      "types": [
        "Long",
        "Thread",
        "Calendar",
        "Date",
        "InterruptedException"
      ],
      "apicalls": [
        "getInstance",
        "sleep",
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "get",
        "long",
        "calendar",
        "date",
        "java",
        "time",
        "exception",
        "util",
        "interrupted",
        "thread",
        "instance",
        "lang"
      ]
    },
    {
      "method": "setAssessmentMetaDataSet@484",
      "body": "public void setAssessmentMetaDataSet(Set publishedMetaDataSet){\n  this.publishedMetaDataSet=publishedMetaDataSet;\n  this.data.setAssessmentMetaDataSet(publishedMetaDataSet);\n  this.publishedMetaDataMap=getAssessmentMetaDataMap(publishedMetaDataSet);\n}\n",
      "formalParam": [
        "Set"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Fudan-Sakai/sam/samigo-services/src/java/org/sakaiproject/tool/assessment/facade/PublishedAssessmentFacade.java",
      "types": [
        "Boolean",
        "Iterator",
        "Object",
        "HashMap",
        "Set"
      ],
      "apicalls": [
        "iterator",
        "put",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "map",
        "iterator",
        "object",
        "util",
        "set",
        "java",
        "put",
        "boolean",
        "next",
        "hash"
      ]
    },
    {
      "method": "readLines@759",
      "body": "/** \n * Reads the stream into a list, with one element for each line.\n * @param stream a stream\n * @return a List of lines\n * @throws IOException if an IOException occurs.\n * @see #readLines(java.io.Reader)\n * @since 1.0\n */\npublic static List<String> readLines(InputStream stream) throws IOException {\n  return readLines(newReader(stream));\n}\n",
      "formalParam": [
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/groovy-core/src/main/org/codehaus/groovy/runtime/IOGroovyMethods.java",
      "types": [
        "InputStream",
        "BufferedReader",
        "InputStreamReader",
        "Reader"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)"
          ]
        }
      ],
      "keywords": [
        "input",
        "java",
        "stream",
        "io",
        "reader",
        "buffered"
      ]
    },
    {
      "method": "getTextNormalize@499",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Project-Library/jdom/src/java/org/jdom/Element.java",
      "body": "/** \n * Returns the textual content of this element with all surrounding whitespace removed and internal whitespace normalized to a single space. If no textual value exists for the element, or if only whitespace exists, the empty string is returned.\n * @return                     normalized text content for this element, orempty string if none\n */\npublic String getTextNormalize(){\n  return Text.normalizeString(getText());\n}\n",
      "types": [
        "StringBuffer",
        "Object",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "lang",
        "string",
        "java",
        "object",
        "append"
      ]
    },
    {
      "method": "getEditor@266",
      "body": "public FlexoEditor getEditor(){\n  if (_editor == null) {\n    if (logger.isLoggable(Level.SEVERE)) {\n      logger.severe(\"Sorry, NO FlexoEditor instance available\");\n    }\n  }\n  return _editor;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.logging.Logger.severe(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "FlexoEditor",
      "file": "./java_projects/openflexo/flexodesktop/model/flexofoundation/src/main/java/org/openflexo/foundation/rm/FlexoResourceManager.java",
      "types": [
        "String",
        "Level",
        "Logger",
        "Boolean"
      ],
      "apicalls": [
        "isLoggable",
        "severe"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.severe(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "logging",
        "level",
        "string",
        "severe",
        "util",
        "loggable",
        "logger"
      ]
    },
    {
      "method": "matchEmptyLine@76",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Matcher.matches()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ToolkitForAndroid/src/main/java/com/apkits/android/common/CommonRegex.java",
      "body": "/** \n * <b>description :</b>     \u5339\u914d\u7a7a\u884c </br><b>time :</b>       2012-8-16 \u4e0b\u534810:03:26\n * @param line\t\t\t\t\u5b57\u7b26\u5185\u5bb9\n * @return\t\t\t\t\t\u5982\u679c\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6210\u529f\uff0c\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\n */\npublic static boolean matchEmptyLine(String line){\n  return null == line ? true : matcherRegex(EMPTY_LINE,line);\n}\n",
      "types": [
        "String",
        "Matcher",
        "CharSequence",
        "Boolean",
        "Pattern"
      ],
      "apicalls": [
        "matcher",
        "compile",
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "pattern",
        "regex",
        "char",
        "string",
        "boolean",
        "util",
        "compile",
        "sequence",
        "matcher",
        "java",
        "matches"
      ]
    },
    {
      "method": "clearInput@270",
      "body": "public void clearInput() throws IOException {\n  if (in != null)   while (in.available() > 0)   in.read();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.FilterInputStream.read()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.FilterInputStream.available()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/OrientDB/enterprise/src/main/java/com/orientechnologies/orient/enterprise/channel/binary/OChannelBinary.java",
      "types": [
        "IOException",
        "Integer",
        "FilterInputStream"
      ],
      "apicalls": [
        "read",
        "available"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FilterInputStream.available()",
            "java.io.FilterInputStream.read()",
            "java.io.FilterInputStream.available()"
          ]
        }
      ],
      "keywords": [
        "io",
        "stream",
        "available",
        "read",
        "integer",
        "input",
        "java",
        "exception",
        "filter"
      ]
    },
    {
      "method": "getOptionAsString@154",
      "body": "/** \n * Gets the string value of current option for the given key. Raises exception if the given key is not an option.\n */\npublic String getOptionAsString(String key){\n  return getOption(key).toString();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.indexOf(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialTestHelper.java",
      "types": [
        "Object",
        "String",
        "List",
        "Integer"
      ],
      "apicalls": [
        "indexOf",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.indexOf(java.lang.Object)",
            "java.util.List.get(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "list",
        "java",
        "util",
        "index",
        "string",
        "integer",
        "get"
      ]
    },
    {
      "method": "getFilePath@28",
      "body": "/** \n * Get the path from a File object\n * @param f The file\n * @return The canonical path. If there is an IOException getting thecanonical path, return the absolute path\n */\npublic static String getFilePath(File f){\n  String path;\n  try {\n    path=f.getCanonicalPath();\n  }\n catch (  IOException e) {\n    path=f.getAbsolutePath();\n    logger.warning(\"Unable to obtain canonical path for file \" + \"[\" + f.getName() + \"], returning absolute path: \"+ path);\n  }\n  return path;\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.File.getAbsolutePath()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.io.File.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.logging.Logger.warning(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.getCanonicalPath()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Rio/rio-resolver/resolver-aether/src/test/java/org/rioproject/resolver/FileUtils.java",
      "types": [
        "String",
        "File",
        "IOException",
        "Logger"
      ],
      "apicalls": [
        "warning",
        "getCanonicalPath",
        "getAbsolutePath",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getCanonicalPath()",
            "java.io.File.getAbsolutePath()",
            "java.io.File.getName()",
            "java.util.logging.Logger.warning(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.File.getCanonicalPath()"
          ]
        }
      ],
      "keywords": [
        "warning",
        "java",
        "get",
        "io",
        "util",
        "logging",
        "file",
        "absolute",
        "logger",
        "name",
        "canonical",
        "exception",
        "path",
        "string"
      ]
    },
    {
      "method": "write@328",
      "body": "/** \n * Writes the given buffer to the current entry.\n * @exception IOException if an I/O error occured.\n * @exception ZipException if no entry is active.\n */\npublic void write(byte[] b,int off,int len) throws IOException {\n  if (curEntry == null)   throw new ZipException(\"No open entry.\");\nswitch (curMethod) {\ncase DEFLATED:\n    super.write(b,off,len);\n  break;\ncase STORED:\nout.write(b,off,len);\nbreak;\n}\ncrc.update(b,off,len);\nsize+=len;\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/classpath/java/util/zip/ZipOutputStream.java",
      "types": [
        "Byte",
        "IOException",
        "OutputStream",
        "Integer"
      ],
      "apicalls": [
        "write"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "io",
        "stream",
        "java",
        "byte",
        "write",
        "integer",
        "output",
        "exception"
      ]
    },
    {
      "method": "withOKActions@391",
      "formalParam": [
        "java.util.Collection<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "PutMetricAlarmRequest",
      "file": "./java_projects/aws-sdk-for-android/src/com/amazonaws/services/cloudwatch/model/PutMetricAlarmRequest.java",
      "body": "/** \n * The list of actions to execute when this alarm transitions into an <code>OK</code> state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy. <p> Returns a reference to this object so that method calls can be chained together. <p> <b>Constraints:</b><br/> <b>Length: </b>0 - 5<br/>\n * @param oKActions The list of actions to execute when this alarm transitions into an<code>OK</code> state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy.\n * @return A reference to this updated object so that method calls can be chained together. \n */\npublic PutMetricAlarmRequest withOKActions(java.util.Collection<String> oKActions){\n  if (oKActions == null) {\n    this.oKActions=null;\n  }\n else {\n    java.util.List<String> oKActionsCopy=new java.util.ArrayList<String>(oKActions.size());\n    oKActionsCopy.addAll(oKActions);\n    this.oKActions=oKActionsCopy;\n  }\n  return this;\n}\n",
      "types": [
        "List",
        "Collection",
        "String",
        "Boolean",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "size",
        "addAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.String>.size()",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "java.util.List<java.lang.String>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "array",
        "string",
        "java",
        "collection",
        "add",
        "size",
        "util",
        "integer",
        "list",
        "boolean"
      ]
    },
    {
      "method": "next@75",
      "body": "/** \n * Handle the next mode. This method must be called before first call to any other getter's method.\n */\npublic void next(){\n  if (terminated())   return;\n  char c=_parameters[0].charAt(_codeIndex++);\n  if (c == '-') {\n    _positive=false;\n    next();\n    return;\n  }\n  if (c == '+') {\n    _positive=true;\n    next();\n    return;\n  }\n  _currentMode=\"-\";\n  if (_positive)   _currentMode=\"+\";\n  _currentMode+=c;\n  _currentModeChar=c;\n  if (hasParameter(_positive,c) && _paramIndex < _parameters.length) {\n    _currentHasParameter=true;\n    _currentParameter=_parameters[_paramIndex++];\n  }\n else {\n    _currentHasParameter=false;\n    _currentParameter=\"\";\n  }\n  _currentPrefix=inside(_prefix,c);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frostwire-desktop/gui/irc/MultiModeHandler.java",
      "types": [
        "Integer",
        "Character",
        "String"
      ],
      "apicalls": [
        "length",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "char",
        "length",
        "integer",
        "string",
        "character",
        "lang",
        "java"
      ]
    },
    {
      "method": "testShortBufferException01@54",
      "body": "/** \n * Test for <code>ShortBufferException()</code> constructor Assertion: constructs ShortBufferException with no detail message\n */\npublic void testShortBufferException01(){\n  ShortBufferException tE=new ShortBufferException();\n  assertNull(\"getMessage() must return null.\",tE.getMessage());\n  assertNull(\"getCause() must return null\",tE.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/ShortBufferExceptionTest.java",
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getCause",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "get",
        "cause",
        "java",
        "throwable",
        "message",
        "lang",
        "string"
      ]
    },
    {
      "method": "paddingBottom@1531",
      "body": "/** \n * Get the padding-bottom css property.\n */\n@Override public final String paddingBottom(){\n  return css(STYLE_PADDING_BOTTOM);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Guit/src/main/java/com/guit/junit/dom/ElementMock.java",
      "types": [
        "Object",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "split",
        "equals",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.split(java.lang.String)",
            "java.lang.String.isEmpty()",
            "java.lang.String.split(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "empty",
        "lang",
        "java",
        "split",
        "object",
        "string",
        "equals"
      ]
    },
    {
      "method": "testClassGetMethodsNoDupes@152",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getMethods()",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method[]",
            "_throws": [
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.reflect.Method.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frameworks_base/tests/CoreTests/android/core/ClassTest.java",
      "body": "@MediumTest public void testClassGetMethodsNoDupes(){\n  Method[] methods=Button.class.getMethods();\n  Set<String> set=new HashSet<String>();\n  for (int i=0; i < methods.length; i++) {\n    String signature=methods[i].toString();\n    int par=signature.indexOf('(');\n    int dot=signature.lastIndexOf('.',par);\n    signature=signature.substring(dot + 1);\n    assertFalse(\"Duplicate \" + signature,set.contains(signature));\n    set.add(signature);\n  }\n}\n",
      "types": [
        "Set",
        "String",
        "HashSet",
        "Boolean",
        "Integer",
        "Method",
        "Class",
        "SecurityException",
        "Object"
      ],
      "apicalls": [
        "indexOf",
        "toString",
        "contains",
        "getMethods",
        "add",
        "lastIndexOf",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getMethods()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.lang.reflect.Method.toString()",
            "java.lang.String.indexOf(int)",
            "java.lang.String.lastIndexOf(int,int)",
            "java.lang.String.substring(int)",
            "java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "class",
        "exception",
        "object",
        "lang",
        "methods",
        "boolean",
        "contains",
        "security",
        "last",
        "java",
        "set",
        "index",
        "string",
        "add",
        "integer",
        "substring",
        "get",
        "hash",
        "reflect",
        "method"
      ]
    },
    {
      "method": "equals@7938",
      "body": "public boolean equals(modifyMonitorItemToHosts_args that){\n  if (that == null)   return false;\n  boolean this_present_monitorItemId=true && this.isSetMonitorItemId();\n  boolean that_present_monitorItemId=true && that.isSetMonitorItemId();\n  if (this_present_monitorItemId || that_present_monitorItemId) {\n    if (!(this_present_monitorItemId && that_present_monitorItemId))     return false;\n    if (!this.monitorItemId.equals(that.monitorItemId))     return false;\n  }\n  boolean this_present_hostsIs=true && this.isSetHostsIs();\n  boolean that_present_hostsIs=true && that.isSetHostsIs();\n  if (this_present_hostsIs || that_present_hostsIs) {\n    if (!(this_present_hostsIs && that_present_hostsIs))     return false;\n    if (!this.hostsIs.equals(that.hostsIs))     return false;\n  }\n  return true;\n}\n",
      "formalParam": [
        "modifyMonitorItemToHosts_args"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.util.List<java.lang.String>.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/cloumon/src/thrift/gen-java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "List",
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.util.List<java.lang.String>.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "boolean",
        "equals",
        "list",
        "object",
        "util",
        "java"
      ]
    },
    {
      "method": "getRegisters@245",
      "body": "@Test public void getRegisters() throws Throwable {\n  MIStoppedEvent stoppedEvent=getInitialStoppedEvent();\n  IFrameDMContext frameDmc=SyncUtil.getStackFrame(stoppedEvent.getDMContext(),0);\n  final IRegisterDMContext[] regDMCs=getRegisters(frameDmc);\n  List<String> regNames=get_X86_REGS();\n  Query<IRegisterDMData[]> query=new Query<IRegisterDMData[]>(){\n    @Override protected void execute(    DataRequestMonitor<IRegisterDMData[]> rm){\n      final IRegisterDMData[] datas=new IRegisterDMData[regDMCs.length];\n      rm.setData(datas);\n      final CountingRequestMonitor countingRm=new ImmediateCountingRequestMonitor(rm);\n      countingRm.setDoneCount(regDMCs.length);\n      for (int i=0; i < regDMCs.length; i++) {\n        final int index=i;\n        fRegService.getRegisterData(regDMCs[index],new ImmediateDataRequestMonitor<IRegisterDMData>(countingRm){\n          @Override protected void handleSuccess(){\n            datas[index]=getData();\n            countingRm.done();\n          }\n        }\n);\n      }\n    }\n  }\n;\n  fSession.getExecutor().execute(query);\n  IRegisterDMData[] datas=query.get();\n  for (  IRegisterDMData data : datas) {\n    String regName=data.getName();\n    Assert.assertFalse(\"GDB does not support register name: \" + regName,!regNames.contains(regName));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.LinkedList<java.lang.String>.LinkedList<String>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.util.List<java.lang.String>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cdt/dsf-gdb/org.eclipse.cdt.tests.dsf.gdb/src/org/eclipse/cdt/tests/dsf/gdb/tests/MIRegistersTest.java",
      "types": [
        "Object",
        "Boolean",
        "List",
        "Collection",
        "Arrays",
        "String",
        "LinkedList"
      ],
      "apicalls": [
        "asList",
        "contains",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.LinkedList<java.lang.String>.LinkedList<String>(java.util.Collection)",
            "java.util.List<java.lang.String>.remove(java.lang.Object)",
            "$NOT$java.util.List<java.lang.String>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "remove",
        "object",
        "arrays",
        "java",
        "list",
        "string",
        "util",
        "contains",
        "linked",
        "boolean"
      ]
    },
    {
      "method": "loadResourceBundle@936",
      "body": "/** \n * Return a named ResourceBundle for a particular locale.  This method mimics the behavior of ResourceBundle.getBundle().\n * @param className Name of local-specific subclass.\n * @return the ResourceBundle\n * @throws MissingResourceException\n */\npublic static final XPATHErrorResources loadResourceBundle(String className) throws MissingResourceException {\n  Locale locale=Locale.getDefault();\n  String suffix=getResourceSuffix(locale);\n  try {\n    return (XPATHErrorResources)ResourceBundle.getBundle(className + suffix,locale);\n  }\n catch (  MissingResourceException e) {\n    try {\n      return (XPATHErrorResources)ResourceBundle.getBundle(className,new Locale(\"en\",\"US\"));\n    }\n catch (    MissingResourceException e2) {\n      throw new MissingResourceException(\"Could not load any resource bundles.\",className,\"\");\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Locale.getDefault()",
            "_throws": [],
            "_returns": "java.util.Locale",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Locale.getLanguage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Locale.getCountry()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "XPATHErrorResources",
      "file": "./java_projects/xalan-j/src/org/apache/xpath/res/XPATHErrorResources.java",
      "types": [
        "Object",
        "Boolean",
        "String",
        "Locale"
      ],
      "apicalls": [
        "equals",
        "getCountry",
        "getLanguage",
        "getDefault"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Locale.getDefault()",
            "java.util.Locale.getLanguage()",
            "java.util.Locale.getCountry()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "equals",
        "get",
        "boolean",
        "country",
        "default",
        "language",
        "object",
        "java",
        "lang",
        "string",
        "locale"
      ]
    },
    {
      "method": "getContent@363",
      "body": "public String getContent(){\n  StringBuilder result=new StringBuilder(8 * 1024);\n  doGetContent(result);\n  return result.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/xtext/plugins/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/output/TreeAppendable.java",
      "types": [
        "Integer",
        "StringBuilder",
        "String",
        "Object"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(int)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "object",
        "string",
        "append",
        "builder",
        "java",
        "lang"
      ]
    },
    {
      "method": "loadLibrary@1062",
      "body": "/** \n * Loads the system library specified by the <code>libname</code> argument. The manner in which a library name is mapped to the actual system library is system dependent. <p> The call <code>System.loadLibrary(name)</code> is effectively equivalent to the call <blockquote><pre> Runtime.getRuntime().loadLibrary(name) </pre></blockquote>\n * @param libname   the name of the library.\n * @exception SecurityException  if a security manager exists and its<code>checkLink</code> method doesn't allow loading of the specified dynamic library\n * @exception UnsatisfiedLinkError  if the library does not exist.\n * @exception NullPointerException if <code>libname</code> is<code>null</code>\n * @see java.lang.Runtime#loadLibrary(java.lang.String)\n * @see java.lang.SecurityManager#checkLink(java.lang.String)\n */\npublic static void loadLibrary(String libname){\n  Runtime.getRuntime().loadLibrary0(getCallerClass(),libname);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Runtime.getRuntime()",
            "node": "DAPICall",
            "_returns": "java.lang.Runtime",
            "_throws": []
          },
          {
            "_call": "java.lang.Runtime.loadLibrary0(java.lang.Class,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/lang/System.java",
      "types": [
        "String",
        "Runtime",
        "Class"
      ],
      "apicalls": [
        "getRuntime",
        "loadLibrary0"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.loadLibrary0(java.lang.Class,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "load",
        "string",
        "get",
        "runtime",
        "java",
        "class",
        "lang",
        "library0"
      ]
    },
    {
      "method": "packClusterPolygon@112",
      "body": "/** \n * Calculates the convex hull of all its children. Then changes the cluster-polygon to represent that convex hull and adds it as a child.\n */\npublic void packClusterPolygon(){\n  ArrayList<Vector3D> allClusteredVerts=new ArrayList<Vector3D>();\n  int shapes=0;\n  MTPolygon clusterPoly=getClusterPolygon();\n  this.removeChild(clusterPoly);\n  MTComponent[] children=this.getChildren();\n  for (  MTComponent component : children) {\n    if (component instanceof AbstractShape) {\n      shapes++;\n      AbstractShape shape=(AbstractShape)component;\n      Vector3D[] verts=null;\n      if (shape.hasBounds()) {\n        if (shape.getBounds() instanceof BoundsZPlaneRectangle || shape.getBounds() instanceof BoundsArbitraryPlanarPolygon) {\n          verts=shape.getBounds().getVectorsGlobal();\n        }\n else {\n          BoundsZPlaneRectangle b=new BoundsZPlaneRectangle(shape);\n          verts=b.getVectorsGlobal();\n        }\n      }\n else {\n        BoundsZPlaneRectangle b=new BoundsZPlaneRectangle(shape);\n        verts=b.getVectorsGlobal();\n      }\n      allClusteredVerts.addAll(Arrays.asList(verts));\n    }\n  }\n  if (shapes != 0 && shapes == children.length) {\n    ArrayList<Vector3D> hull=ConvexQuickHull2D.getConvexHull2D(allClusteredVerts);\n    if (hull.size() > 0) {\n      hull.add(hull.get(0).getCopy());\n      Vertex[] newVerts=new Vertex[hull.size()];\n      for (int i=0; i < hull.size(); i++) {\n        Vector3D vec=hull.get(i);\n        newVerts[i]=new Vertex(vec);\n      }\n      for (      Vertex v : newVerts) {\n        v.setRGBA(100,150,250,50);\n      }\n      clusterPoly.setVertices(newVerts);\n      clusterPoly.setBoundsBehaviour(AbstractShape.BOUNDS_DONT_USE);\n      clusterPoly.setLocalMatrix(new Matrix());\n      clusterPoly.scale(1.1f,1.1f,1,clusterPoly.getCenterPointLocal(),TransformSpace.LOCAL);\n      this.addChild(clusterPoly);\n    }\n else {\n      System.err.println(\"Couldnt pack polygon.\");\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Connectable/mt4j-core/src/org/mt4j/components/clusters/Cluster.java",
      "types": [
        "List",
        "String",
        "PrintStream",
        "ArrayList",
        "Arrays"
      ],
      "apicalls": [
        "asList",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "array",
        "string",
        "println",
        "io",
        "arrays",
        "stream",
        "java",
        "print",
        "util",
        "list"
      ]
    },
    {
      "method": "ExecutableExtensionProxy@34",
      "body": "/** \n * Constructor.\n * @param element The configuration element. Must not be <code>null</code>.\n * @throws CoreException In case the configuration element attribute <i>id</i> is <code>null</code> or empty.\n */\npublic ExecutableExtensionProxy(IConfigurationElement element) throws CoreException {\n  Assert.isNotNull(element);\n  this.element=element;\n  id=element.getAttribute(\"id\");\n  if (id == null || id.trim().length() == 0) {\n    throw new CoreException(new Status(IStatus.ERROR,CoreBundleActivator.getUniqueIdentifier(),0,NLS.bind(Messages.Extension_error_missingRequiredAttribute,\"id\",element.getContributor().getName()),null));\n  }\n  instance=null;\n}\n",
      "formalParam": [
        "IConfigurationElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/tcf/target_explorer/plugins/org.eclipse.tcf.te.runtime/src/org/eclipse/tcf/te/runtime/extensions/ExecutableExtensionProxy.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "integer",
        "java",
        "length",
        "lang",
        "trim"
      ]
    },
    {
      "method": "containsOnlyAlphaDigitHyphen@499",
      "body": "public static boolean containsOnlyAlphaDigitHyphen(final Collection<String> values){\n  if (values == null) {\n    return true;\n  }\n  final int upperAlphabetFirst=0x41;\n  final int upperAlphabetAfterLast=0x5b;\n  final int lowerAlphabetFirst=0x61;\n  final int lowerAlphabetAfterLast=0x7b;\n  final int digitFirst=0x30;\n  final int digitAfterLast=0x3A;\n  final int hyphen='-';\n  for (  final String str : values) {\n    if (TextUtils.isEmpty(str)) {\n      continue;\n    }\n    final int length=str.length();\n    for (int i=0; i < length; i=str.offsetByCodePoints(i,1)) {\n      int codepoint=str.codePointAt(i);\n      if (!((lowerAlphabetFirst <= codepoint && codepoint < lowerAlphabetAfterLast) || (upperAlphabetFirst <= codepoint && codepoint < upperAlphabetAfterLast) || (digitFirst <= codepoint && codepoint < digitAfterLast)|| (codepoint == hyphen))) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
      "formalParam": [
        "Collection<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.codePointAt(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.offsetByCodePoints(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/android_packages_apps_Tag/src/com/android/vcard/VCardUtils.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "codePointAt",
        "offsetByCodePoints"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.codePointAt(int)",
            "java.lang.String.offsetByCodePoints(int,int)"
          ]
        }
      ],
      "keywords": [
        "length",
        "integer",
        "offset",
        "java",
        "points",
        "point",
        "code",
        "lang",
        "string"
      ]
    },
    {
      "method": "Thread@206",
      "body": "/** \n * Creates a new thread object for the thread attached to VM.      The first attached thread is the main thread.\n * @param group determines the thread group to place the thread in\n * @param name thread's name\n * @param nativeAddr address of the attached native thread\n * @param stackeSize size of the thread's stack\n * @param priority thread's priority\n * @param daemon true if the thread is daemon, false otherwise\n */\nThread(ThreadGroup group,String name,long nativeAddr,long stackSize,int priority,boolean daemon){\n  ClassLoader contextLoader=null;\n  if (group == null) {\n    if (systemThreadGroup == null) {\n      systemThreadGroup=new ThreadGroup();\n      mainThreadGroup=new ThreadGroup(systemThreadGroup,\"main\");\n      group=mainThreadGroup;\n    }\n else {\n      group=mainThreadGroup;\n    }\n  }\n  this.group=group;\n  this.stackSize=stackSize;\n  this.priority=priority;\n  this.daemon=daemon;\n  this.threadId=getNextThreadId();\n  this.name=(name != null) ? name : THREAD + threadId;\n  this.contextClassLoader=contextLoader;\n  this.target=null;\n  this.isAlive=true;\n  this.started=true;\n  ThreadWeakRef newRef=new ThreadWeakRef(this);\n  newRef.setNativeAddr(nativeAddr);\n  SecurityUtils.putContext(this,AccessController.getContext());\n  group.add(this);\n  Thread parent=currentThread();\n  if (parent != null && parent.inheritableValues != null) {\n    inheritableValues=new ThreadLocal.Values(parent.inheritableValues);\n  }\n}\n",
      "formalParam": [
        "ThreadGroup",
        "String",
        "long",
        "long",
        "int",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadGroup.ThreadGroup()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.ThreadGroup.ThreadGroup(java.lang.ThreadGroup,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.security.AccessController.getContext()",
            "node": "DAPICall",
            "_returns": "java.security.AccessControlContext",
            "_throws": []
          },
          {
            "_call": "java.lang.ThreadGroup.add(java.lang.Thread)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/harmony_1/drlvm/vm/vmcore/src/kernel_classes/javasrc/java/lang/Thread.java",
      "types": [
        "AccessControlContext",
        "AccessController",
        "ThreadGroup",
        "String",
        "Thread"
      ],
      "apicalls": [
        "getContext",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadGroup.ThreadGroup()",
            "java.lang.ThreadGroup.ThreadGroup(java.lang.ThreadGroup,java.lang.String)",
            "java.security.AccessController.getContext()",
            "java.lang.ThreadGroup.add(java.lang.Thread)"
          ]
        }
      ],
      "keywords": [
        "controller",
        "string",
        "add",
        "thread",
        "control",
        "group",
        "get",
        "security",
        "access",
        "context",
        "lang",
        "java"
      ]
    },
    {
      "method": "println@209",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.print(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.print(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Log",
      "file": "./java_projects/OpenComm/sipvoip/src/org/zoolu/tools/Log.java",
      "body": "/** \n * Prints the <i>log</i> if <i>level</i> isn't greater than the Log <i>verbose_level</i>\n */\npublic Log println(String message,int level){\n  return print(message + \"\\r\\n\",level).flush();\n}\n",
      "types": [
        "Integer",
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "flush",
        "println",
        "length",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.lang.String.length()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.flush()"
          ]
        }
      ],
      "keywords": [
        "java",
        "length",
        "stream",
        "io",
        "println",
        "integer",
        "string",
        "print",
        "flush",
        "lang"
      ]
    },
    {
      "method": "equals@7938",
      "body": "public boolean equals(modifyMonitorItemToHosts_args that){\n  if (that == null)   return false;\n  boolean this_present_monitorItemId=true && this.isSetMonitorItemId();\n  boolean that_present_monitorItemId=true && that.isSetMonitorItemId();\n  if (this_present_monitorItemId || that_present_monitorItemId) {\n    if (!(this_present_monitorItemId && that_present_monitorItemId))     return false;\n    if (!this.monitorItemId.equals(that.monitorItemId))     return false;\n  }\n  boolean this_present_hostsIs=true && this.isSetHostsIs();\n  boolean that_present_hostsIs=true && that.isSetHostsIs();\n  if (this_present_hostsIs || that_present_hostsIs) {\n    if (!(this_present_hostsIs && that_present_hostsIs))     return false;\n    if (!this.hostsIs.equals(that.hostsIs))     return false;\n  }\n  return true;\n}\n",
      "formalParam": [
        "modifyMonitorItemToHosts_args"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.util.List<java.lang.String>.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/cloumon/src/java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "Object",
        "List",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.util.List<java.lang.String>.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "equals",
        "lang",
        "boolean",
        "list",
        "object",
        "util",
        "string"
      ]
    },
    {
      "method": "editPermWipeOnEnter@12",
      "body": "public void editPermWipeOnEnter(Region r,boolean val){\n  Configuration c=r.getConfigFile();\n  c.load();\n  Map<String,Object> all=c.getAll();\n  all.remove(\"Region.Inventory.PermWipeOnEnter\");\n  for (  Entry<String,Object> entry : all.entrySet()) {\n    c.setProperty(entry.getKey(),entry.getValue());\n  }\n  c.setProperty(\"Region.Inventory.PermWipeOnEnter\",val);\n  r.setPermWipeOnEnter(val);\n  c.save();\n}\n",
      "formalParam": [
        "Region",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Regios/src/couk/Adamki11s/Regios/Mutable/MutableInventory.java",
      "types": [
        "Map",
        "Set",
        "String",
        "Object"
      ],
      "apicalls": [
        "entrySet",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.entrySet()"
          ]
        }
      ],
      "keywords": [
        "entry",
        "java",
        "map",
        "remove",
        "set",
        "object",
        "string",
        "util"
      ]
    },
    {
      "method": "orderedGroups@97",
      "body": "public List<String> orderedGroups(){\n  ArrayList<String> groups=new ArrayList<String>();\n  for (int i=1; i <= groupCount(); i++) {\n    groups.add(group(i));\n  }\n  return groups;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.regex.Matcher.group(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.regex.Matcher.groupCount()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/loop/src/loop/runtime/regex/NamedMatcher.java",
      "types": [
        "Matcher",
        "String",
        "Boolean",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "groupCount",
        "add",
        "group"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.regex.Matcher.groupCount()",
            "java.util.regex.Matcher.group(int)",
            "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
            "java.util.regex.Matcher.groupCount()"
          ]
        }
      ],
      "keywords": [
        "group",
        "array",
        "integer",
        "string",
        "add",
        "util",
        "boolean",
        "count",
        "java",
        "regex",
        "list",
        "matcher"
      ]
    },
    {
      "method": "write@107",
      "body": "@Override public void write(DataOutput out) throws IOException {\n  int numValues=size();\n  out.writeInt(numValues);\n  for (int i=0; i < numValues; i++) {\n    get(i).write(out);\n  }\n}\n",
      "formalParam": [
        "DataOutput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.DataOutput.writeInt(int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/giraph/src/main/java/org/apache/giraph/utils/ArrayListWritable.java",
      "types": [
        "Integer",
        "ArrayList",
        "DataOutput",
        "IOException"
      ],
      "apicalls": [
        "size",
        "writeInt",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()",
            "java.io.DataOutput.writeInt(int)",
            "java.util.ArrayList<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "io",
        "exception",
        "int",
        "util",
        "list",
        "output",
        "write",
        "data",
        "size",
        "array",
        "integer"
      ]
    },
    {
      "method": "existsTable_result@8856",
      "formalParam": [
        "existsTable_result"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/cloudata/src/java/org/cloudata/thrift/generated/ThriftCloudataService.java",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic existsTable_result(existsTable_result other){\n  __isset_bit_vector.clear();\n  __isset_bit_vector.or(other.__isset_bit_vector);\n  this.success=other.success;\n  if (other.isSetTioe()) {\n    this.tioe=new ThriftIOException(other.tioe);\n  }\n}\n",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "clear",
        "or"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "clear",
        "java",
        "bit",
        "util",
        "set"
      ]
    },
    {
      "method": "testInjection@110",
      "body": "@Test public void testInjection() throws IOException {\n  MiniDFSCluster cluster=null;\n  String testFile=\"/replication-test-file\";\n  Path testPath=new Path(testFile);\n  byte buffer[]=new byte[1024];\n  for (int i=0; i < buffer.length; i++) {\n    buffer[i]='1';\n  }\n  try {\n    Configuration conf=new HdfsConfiguration();\n    conf.set(DFSConfigKeys.DFS_REPLICATION_KEY,Integer.toString(numDataNodes));\n    conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,checksumSize);\n    SimulatedFSDataset.setFactory(conf);\n    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build();\n    cluster.waitActive();\n    String bpid=cluster.getNamesystem().getBlockPoolId();\n    DFSClient dfsClient=new DFSClient(new InetSocketAddress(\"localhost\",cluster.getNameNodePort()),conf);\n    DFSTestUtil.createFile(cluster.getFileSystem(),testPath,filesize,filesize,blockSize,(short)numDataNodes,0L);\n    waitForBlockReplication(testFile,dfsClient.getNamenode(),numDataNodes,20);\n    Iterable<Block>[] blocksList=cluster.getAllBlockReports(bpid);\n    cluster.shutdown();\n    cluster=null;\n    LOG.info(\"Restarting minicluster\");\n    conf=new HdfsConfiguration();\n    SimulatedFSDataset.setFactory(conf);\n    conf.set(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY,\"0.0f\");\n    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build();\n    cluster.waitActive();\n    Set<Block> uniqueBlocks=new HashSet<Block>();\n    for (int i=0; i < blocksList.length; ++i) {\n      for (      Block b : blocksList[i]) {\n        uniqueBlocks.add(new Block(b));\n      }\n    }\n    LOG.info(\"Inserting \" + uniqueBlocks.size() + \" blocks\");\n    cluster.injectBlocks(0,uniqueBlocks);\n    dfsClient=new DFSClient(new InetSocketAddress(\"localhost\",cluster.getNameNodePort()),conf);\n    waitForBlockReplication(testFile,dfsClient.getNamenode(),numDataNodes,-1);\n  }\n  finally {\n    if (cluster != null) {\n      cluster.shutdown();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-common/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestInjectionForSimulatedStorage.java",
      "types": [
        "Integer",
        "String",
        "HashSet",
        "InetSocketAddress"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "net",
        "set",
        "address",
        "socket",
        "inet",
        "java",
        "string",
        "lang",
        "util",
        "hash",
        "integer"
      ]
    },
    {
      "method": "convertProducts@247",
      "body": "/** \n * Convert a list of konakart products to a list of KKProductDocument\n * @param productIfs list of konakart products\n */\npublic List<KKProductDocument> convertProducts(HstRequest hstRequest,ProductIf[] productIfs){\n  if (productIfs == null || productIfs.length == 0) {\n    return Collections.emptyList();\n  }\n  LinkedList<KKProductDocument> documents=new LinkedList<KKProductDocument>();\n  for (  ProductIf productIf : productIfs) {\n    KKProductDocument document=convertProduct(hstRequest,productIf);\n    if (document != null) {\n      documents.addLast(document);\n    }\n  }\n  return documents;\n}\n",
      "formalParam": [
        "HstRequest",
        "ProductIf[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.emptyList()",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "List<KKProductDocument>",
      "file": "./java_projects/Hippo-CMS-Konakart/konakart/hst-client/src/main/java/org/onehippo/forge/konakart/hst/components/KKBaseHstComponent.java",
      "types": [
        "Collections",
        "List",
        "LinkedList"
      ],
      "apicalls": [
        "emptyList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.emptyList()",
            "java.util.LinkedList<Tau_E>.LinkedList()"
          ]
        }
      ],
      "keywords": [
        "empty",
        "util",
        "collections",
        "list",
        "java",
        "linked"
      ]
    },
    {
      "method": "test@129",
      "body": "public static int test(String testName,float input,float result,float expected){\n  if (Float.compare(expected,result) != 0) {\n    System.err.println(\"Failure for \" + testName + \":\\n\"+ \"\\tFor input \"+ input+ \"\\t(\"+ toHexString(input)+ \")\\n\"+ \"\\texpected  \"+ expected+ \"\\t(\"+ toHexString(expected)+ \")\\n\"+ \"\\tgot       \"+ result+ \"\\t(\"+ toHexString(result)+ \").\");\n    return 1;\n  }\n else   return 0;\n}\n",
      "formalParam": [
        "String",
        "float",
        "float",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Float.compare(float,float)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/java/lang/Math/Tests.java",
      "types": [
        "PrintStream",
        "Float",
        "String",
        "Integer"
      ],
      "apicalls": [
        "println",
        "compare"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Float.compare(float,float)"
          ]
        },
        {
          "calls": [
            "java.lang.Float.compare(float,float)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "compare",
        "float",
        "lang",
        "io",
        "java",
        "print",
        "stream",
        "string",
        "println"
      ]
    },
    {
      "method": "write@179",
      "body": "/** \n * writes the XML-serialized object to the given Writer.\n * @param writer the Writer\n * @param toSerialize the object to write\n * @return true if everything goes ok\n * @throws Exception if something goes wrong\n */\npublic static boolean write(Writer writer,Object toSerialize) throws Exception {\n  Class<?> xstreamClass;\n  java.lang.reflect.Constructor constructor;\n  Object xstream;\n  Class[] serializeArgsClasses=new Class[2];\n  Object[] serializeArgs=new Object[2];\n  java.lang.reflect.Method methodSerialize;\n  boolean result=false;\n  xstreamClass=Class.forName(\"com.thoughtworks.xstream.XStream\");\n  constructor=xstreamClass.getConstructor();\n  xstream=constructor.newInstance();\n  serializeArgsClasses[0]=Object.class;\n  serializeArgsClasses[1]=Writer.class;\n  serializeArgs[0]=toSerialize;\n  serializeArgs[1]=writer;\n  methodSerialize=xstreamClass.getMethod(\"toXML\",serializeArgsClasses);\n  try {\n    methodSerialize.invoke(xstream,serializeArgs);\n    result=true;\n  }\n catch (  Exception ex) {\n    result=false;\n  }\n  return result;\n}\n",
      "formalParam": [
        "Writer",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.forName(java.lang.String)",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getConstructor(java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Constructor"
          },
          {
            "_call": "java.lang.reflect.Constructor.newInstance(java.lang.Object[])",
            "_throws": [
              "java.lang.InstantiationException",
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method"
          },
          {
            "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "_throws": [
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Weka-for-Android/src/weka/core/xml/XStream.java",
      "types": [
        "SecurityException",
        "NoSuchMethodException",
        "InstantiationException",
        "Constructor",
        "IllegalAccessException",
        "Method",
        "Object",
        "Class",
        "String",
        "InvocationTargetException",
        "IllegalArgumentException",
        "ClassNotFoundException"
      ],
      "apicalls": [
        "newInstance",
        "getConstructor",
        "forName",
        "getMethod",
        "invoke"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class<Tau_T>.getConstructor(java.lang.Class[])",
            "java.lang.reflect.Constructor.newInstance(java.lang.Object[])",
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "get",
        "exception",
        "security",
        "illegal",
        "string",
        "argument",
        "lang",
        "instantiation",
        "new",
        "instance",
        "method",
        "found",
        "constructor",
        "java",
        "name",
        "object",
        "access",
        "invocation",
        "invoke",
        "reflect",
        "target",
        "class"
      ]
    },
    {
      "method": "actionPerformed@3592",
      "body": "public void actionPerformed(ActionEvent e){\n  us.setVisible(false);\n  us.dispose();\n}\n",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Dialog.setVisible(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Window.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/security/tools/policytool/PolicyTool.java",
      "types": [
        "Dialog",
        "Window",
        "Boolean"
      ],
      "apicalls": [
        "dispose",
        "setVisible"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Dialog.setVisible(boolean)",
            "java.awt.Window.dispose()"
          ]
        }
      ],
      "keywords": [
        "set",
        "awt",
        "java",
        "visible",
        "dialog",
        "window",
        "dispose",
        "boolean"
      ]
    },
    {
      "method": "shouldSerializeCollectionWithPrefixTag@195",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/vraptor/vraptor-core/src/test/java/br/com/caelum/vraptor/serialization/xstream/XStreamJSONSerializationTest.java",
      "body": "@Test public void shouldSerializeCollectionWithPrefixTag(){\n  String expectedResult=\"{\\\"price\\\": 15.0,\\\"comments\\\": \\\"pack it nicely, please\\\"}\";\n  expectedResult+=\",\" + expectedResult;\n  expectedResult=\"{\\\"orders\\\": [\" + expectedResult + \"]}\";\n  Order order=new Order(new Client(\"guilherme silveira\"),15.0,\"pack it nicely, please\");\n  serialization.from(Arrays.asList(order,order),\"orders\").serialize();\n  assertThat(result(),is(equalTo(expectedResult)));\n}\n",
      "types": [
        "ByteArrayOutputStream",
        "Byte",
        "String",
        "ArrayList",
        "Arrays",
        "List",
        "Collection"
      ],
      "apicalls": [
        "asList",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Arrays.asList(T[])",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.lang.String.String(byte[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "stream",
        "string",
        "io",
        "list",
        "arrays",
        "output",
        "array",
        "byte",
        "java",
        "collection",
        "lang"
      ]
    },
    {
      "method": "decode@77",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.toCharArray()",
                "node": "DAPICall",
                "_returns": "char[]",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.trim()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/voms-api-java/src/main/java/org/glite/voms/contact/VOMSDecoder.java",
      "body": "public static byte[] decode(String s){\n  if (s.indexOf('\\n') != -1) {\n    return Base64.decode(s.trim().replaceAll(\"\\n\",\"\"));\n  }\n else   return mydecode(s);\n}\n",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "indexOf",
        "trim",
        "replaceAll",
        "toCharArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.toCharArray()"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.trim()",
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "trim",
        "java",
        "lang",
        "integer",
        "replace",
        "index",
        "string",
        "array",
        "char"
      ]
    },
    {
      "method": "newRound@76",
      "body": "public void newRound(SecretState secretState,int current_round){\n  currentLetters=new ArrayList<Character>();\n  for (  Letter l : secretState.getSecretLetters()) {\n    currentLetters.add(l.getCharacter());\n  }\n}\n",
      "formalParam": [
        "SecretState",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Character>.ArrayList<Character>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<java.lang.Character>.add(java.lang.Character)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/LetterGame/src/seven/g0/ThreePlayer.java",
      "types": [
        "ArrayList",
        "Character",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Character>.ArrayList<Character>()",
            "java.util.ArrayList<java.lang.Character>.add(java.lang.Character)"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "boolean",
        "util",
        "java",
        "character",
        "add"
      ]
    },
    {
      "method": "doGetCommand@74",
      "body": "@Override public Command doGetCommand(Request request,EditPart targetEditPart){\n  List<EObject> objectsToDrop=getSourceEObjects(request);\n  if (objectsToDrop.isEmpty()) {\n    return null;\n  }\n  Object newValue;\n  EObject targetElement=getTargetSemanticElement(targetEditPart);\n  EStructuralFeature targetFeature=getTargetFeature(request,targetEditPart);\n  if (targetFeature == null) {\n    return null;\n  }\n  if (targetFeature.getUpperBound() == 1) {\n    newValue=objectsToDrop.get(0);\n  }\n else {\n    EList<?> currentValues=(EList<?>)targetElement.eGet(targetFeature);\n    List<? extends Object> values=new LinkedList<Object>(currentValues);\n    values.addAll((List)objectsToDrop);\n    newValue=values;\n  }\n  EditingDomain domain=getEditingDomain(targetEditPart);\n  SetRequest setRequest=new SetRequest((TransactionalEditingDomain)domain,targetElement,targetFeature,newValue);\n  ICommand command=new SetValueCommand(setRequest);\n  Command graphicalCommand=getGraphicalCommand(request,targetEditPart);\n  if (graphicalCommand != null) {\n    command=command.compose(new CommandProxy(graphicalCommand));\n  }\n  return new ICommandProxy(command);\n}\n",
      "formalParam": [
        "Request",
        "EditPart"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.lang.Object>.LinkedList<Object>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Command",
      "file": "./java_projects/ju4pa/org.eclipse.papyrus.infra.gmfdiag.dnd/src/org/eclipse/papyrus/infra/gmfdiag/dnd/strategy/MoveDropStrategy.java",
      "types": [
        "Boolean",
        "Object",
        "List",
        "LinkedList",
        "Collection"
      ],
      "apicalls": [
        "addAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.lang.Object>.LinkedList<Object>(java.util.Collection)",
            "java.util.List<Tau_E>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "object",
        "collection",
        "boolean",
        "java",
        "linked",
        "util",
        "add",
        "list"
      ]
    },
    {
      "method": "getPageIndex@238",
      "body": "/** \n * Returns the zero-based index of a page that hosts the the given option.\n * @param option template option for which a page index is being requested\n * @return zero-based index of a page that hosts the option or -1 if none ofthe pages contain the option.\n */\npublic int getPageIndex(TemplateOption option){\n  for (int i=0; i < pages.size(); i++) {\n    TemplatePage tpage=(TemplatePage)pages.get(i);\n    if (tpage.options.contains(option))     return i;\n  }\n  return -1;\n}\n",
      "formalParam": [
        "TemplateOption"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList.contains(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/PDE/org.eclipse.pde.ui/src/org/eclipse/pde/ui/templates/OptionTemplateSection.java",
      "types": [
        "Object",
        "Boolean",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "contains",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.contains(java.lang.Object)",
            "java.util.ArrayList.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "list",
        "size",
        "boolean",
        "util",
        "java",
        "object",
        "array",
        "contains"
      ]
    },
    {
      "method": "get@53",
      "formalParam": [
        "CallableStatement",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.Character(char)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/sql-processor/sql-processor/src/main/java/org/sqlproc/engine/jdbc/type/JdbcCharType.java",
      "body": "/** \n * {@inheritDoc}\n */\n@Override public Object get(CallableStatement cs,int index) throws SQLException {\n  String result=cs.getString(index);\n  if (cs.wasNull() || result == null)   return null;\n  return new Character(result.charAt(0));\n}\n",
      "types": [
        "Integer",
        "Character",
        "String"
      ],
      "apicalls": [
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.charAt(int)",
            "java.lang.Character.Character(char)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "character",
        "lang",
        "integer",
        "char"
      ]
    },
    {
      "method": "acquire@28",
      "body": "public void acquire(int permits){\n  try {\n    sem.acquire(permits);\n  }\n catch (  InterruptedException ex) {\n    Logger.getLogger(Semaforo.class.getName()).log(Level.SEVERE,null,ex);\n    System.exit(1);\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.logging.Logger.getLogger(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.util.logging.Logger",
                "_throws": []
              },
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.System.exit(int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.Semaphore.acquire(int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.InterruptedException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Zinep/src/com/zinep/utils/Semaforo.java",
      "types": [
        "Level",
        "Integer",
        "System",
        "String",
        "Class",
        "Throwable",
        "InterruptedException",
        "Semaphore",
        "Logger"
      ],
      "apicalls": [
        "getName",
        "acquire",
        "log",
        "getLogger",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.Semaphore.acquire(int)",
            "java.lang.Class<Tau_T>.getName()",
            "java.util.logging.Logger.getLogger(java.lang.String)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
            "java.lang.System.exit(int)"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.Semaphore.acquire(int)"
          ]
        }
      ],
      "keywords": [
        "level",
        "util",
        "get",
        "interrupted",
        "logging",
        "name",
        "integer",
        "semaphore",
        "acquire",
        "exception",
        "class",
        "log",
        "lang",
        "java",
        "logger",
        "string",
        "exit",
        "system",
        "concurrent",
        "throwable"
      ]
    },
    {
      "method": "render@431",
      "body": "@Override public void render(Context context,Host host,SafeHtmlBuilder safeHtmlBuilder){\n  safeHtmlBuilder.append(HOST_TEMPLATE.message(clip(host.getName(),clipAt)));\n}\n",
      "formalParam": [
        "Context",
        "Host",
        "SafeHtmlBuilder"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.substring(int,int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/console/gui/src/main/java/org/jboss/as/console/client/domain/hosts/HostServerTable.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "length",
        "substring",
        "integer",
        "java",
        "lang",
        "string"
      ]
    },
    {
      "method": "getAdditionalSrcPathComputers@183",
      "body": "public HashSet getAdditionalSrcPathComputers(){\n  init();\n  return additionalSrcPathComputerIds;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.HashSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "HashSet",
      "file": "./java_projects/geronimo-devtools/plugins/org.apache.geronimo.st.core/src/main/java/org/apache/geronimo/st/core/GeronimoSourcePathComputerDelegate.java",
      "types": [
        "HashSet",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.HashSet()",
            "java.util.HashSet.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "java",
        "object",
        "hash",
        "set",
        "add"
      ]
    },
    {
      "method": "Annotation@74",
      "body": "public Annotation(URL url) throws IOException {\n  super(url);\n  setEditable(false);\n  addHyperlinkListener(this);\n  addMouseListener(new PopupListener());\n  popup=new JPopupMenu();\n  JMenuItem backMenu=new JMenuItem(\"Back\");\n  popup.add(backMenu);\n  backMenu.addActionListener(new ActionListener(){\n    public void actionPerformed(    ActionEvent e){\n      goBack();\n    }\n  }\n);\n  back.add(url);\n}\n",
      "formalParam": [
        "URL"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.setEditable(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JPopupMenu.JPopupMenu()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JMenuItem.JMenuItem(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JPopupMenu.add(javax.swing.JMenuItem)",
            "node": "DAPICall",
            "_returns": "javax.swing.JMenuItem",
            "_throws": []
          },
          {
            "_call": "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Artemis/uk/ac/sanger/artemis/editor/Annotation.java",
      "types": [
        "JPopupMenu",
        "Vector",
        "Object",
        "JMenuItem",
        "ActionListener",
        "String",
        "AbstractButton",
        "JTextComponent",
        "Boolean",
        "MouseListener",
        "Component"
      ],
      "apicalls": [
        "setEditable",
        "add",
        "addMouseListener",
        "addActionListener"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.setEditable(boolean)",
            "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "javax.swing.JPopupMenu.JPopupMenu()",
            "javax.swing.JMenuItem.JMenuItem(java.lang.String)",
            "javax.swing.JPopupMenu.add(javax.swing.JMenuItem)",
            "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "java.util.Vector.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "item",
        "abstract",
        "mouse",
        "text",
        "awt",
        "editable",
        "popup",
        "j",
        "swing",
        "component",
        "object",
        "vector",
        "add",
        "button",
        "string",
        "java",
        "util",
        "action",
        "set",
        "menu",
        "boolean",
        "listener",
        "javax"
      ]
    },
    {
      "method": "escapedChar@86",
      "body": "@Test public void escapedChar(){\n  final ErlangCharRule rule=new ErlangCharRule(token);\n  scanner=new StringCharacterScanner(\"$\\\\b\");\n  final IToken tk=rule.evaluate(scanner);\n  assertEquals(token,tk);\n  assertEquals(\"\",scanner.getCurrentContent());\n  assertEquals(\"$\\\\b\",scanner.getScannedContent());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/erlide/org.erlide.ui.tests/src/org/erlide/ui/editors/erl/scanner/ErlangCharRuleTest.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "substring",
        "integer",
        "lang"
      ]
    },
    {
      "method": "checkElementsNotNullUnique@207",
      "body": "public static void checkElementsNotNullUnique(Collection c,String property,String msg){\n  if (c.contains(null) || new HashSet(c).size() != c.size()) {\n    signalViolation(property,Messages.getString(\"Validator.already.exists\",msg));\n  }\n}\n",
      "formalParam": [
        "Collection",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.HashSet.HashSet(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Collection.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/rawr/lib/rawr/launch4j/src/net/sf/launch4j/binding/Validator.java",
      "types": [
        "Collection",
        "Boolean",
        "HashSet",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "contains",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection.contains(java.lang.Object)",
            "java.util.HashSet.HashSet(java.util.Collection)",
            "java.util.HashSet.size()",
            "java.util.Collection.size()"
          ]
        }
      ],
      "keywords": [
        "contains",
        "integer",
        "size",
        "set",
        "util",
        "java",
        "object",
        "hash",
        "collection",
        "boolean"
      ]
    },
    {
      "method": "select@136",
      "body": "public Queue<AuthOption> select(final Map<String,Header> challenges,final HttpHost authhost,final HttpResponse response,final HttpContext context) throws MalformedChallengeException {\n  if (challenges == null) {\n    throw new IllegalArgumentException(\"Map of auth challenges may not be null\");\n  }\n  if (authhost == null) {\n    throw new IllegalArgumentException(\"Host may not be null\");\n  }\n  if (response == null) {\n    throw new IllegalArgumentException(\"HTTP response may not be null\");\n  }\n  if (context == null) {\n    throw new IllegalArgumentException(\"HTTP context may not be null\");\n  }\n  Queue<AuthOption> options=new LinkedList<AuthOption>();\n  AuthSchemeRegistry registry=(AuthSchemeRegistry)context.getAttribute(ClientContext.AUTHSCHEME_REGISTRY);\n  if (registry == null) {\n    this.log.debug(\"Auth scheme registry not set in the context\");\n    return options;\n  }\n  CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);\n  if (credsProvider == null) {\n    this.log.debug(\"Credentials provider not set in the context\");\n    return options;\n  }\n  @SuppressWarnings(\"unchecked\") List<String> authPrefs=(List<String>)response.getParams().getParameter(this.prefParamName);\n  if (authPrefs == null) {\n    authPrefs=DEFAULT_SCHEME_PRIORITY;\n  }\n  if (this.log.isDebugEnabled()) {\n    this.log.debug(\"Authentication schemes in the order of preference: \" + authPrefs);\n  }\n  for (  String id : authPrefs) {\n    Header challenge=challenges.get(id.toLowerCase(Locale.US));\n    if (challenge != null) {\n      try {\n        AuthScheme authScheme=registry.getAuthScheme(id,response.getParams());\n        authScheme.processChallenge(challenge);\n        AuthScope authScope=new AuthScope(authhost.getHostName(),authhost.getPort(),authScheme.getRealm(),authScheme.getSchemeName());\n        Credentials credentials=credsProvider.getCredentials(authScope);\n        if (credentials != null) {\n          options.add(new AuthOption(authScheme,credentials));\n        }\n      }\n catch (      IllegalStateException e) {\n        if (this.log.isWarnEnabled()) {\n          this.log.warn(\"Authentication scheme \" + id + \" not supported\");\n        }\n      }\n    }\n else {\n      if (this.log.isDebugEnabled()) {\n        this.log.debug(\"Challenge for \" + id + \" authentication scheme not available\");\n      }\n    }\n  }\n  return options;\n}\n",
      "formalParam": [
        "Map<String,Header>",
        "HttpHost",
        "HttpResponse",
        "HttpContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toLowerCase(java.util.Locale)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "Queue<AuthOption>",
      "file": "./java_projects/httpclient/httpclient/src/main/java/org/apache/http/impl/client/AuthenticationStrategyImpl.java",
      "types": [
        "LinkedList",
        "Locale",
        "String"
      ],
      "apicalls": [
        "toLowerCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.lang.String.toLowerCase(java.util.Locale)"
          ]
        }
      ],
      "keywords": [
        "lower",
        "linked",
        "util",
        "string",
        "list",
        "lang",
        "case",
        "locale",
        "java"
      ]
    },
    {
      "method": "ClientConsole@21",
      "body": "public ClientConsole(AlcatrazClient client){\n  this.reader=new BufferedReader(new InputStreamReader(System.in));\n  this.client=client;\n  this.run=true;\n}\n",
      "formalParam": [
        "AlcatrazClient"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/ads/ads_client/src/at/tuwien/ads11/ClientConsole.java",
      "types": [
        "InputStreamReader",
        "Reader",
        "BufferedReader",
        "InputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)"
          ]
        }
      ],
      "keywords": [
        "reader",
        "input",
        "java",
        "buffered",
        "stream",
        "io"
      ]
    },
    {
      "method": "read@58",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.io.InputStream.read(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/riak-java-client/src/main/java/com/basho/riak/client/util/BranchableInputStream.java",
      "body": "@Override public int read() throws IOException {\n  int curpos=pos;\n  if (readUntil(curpos))   return lastChunk.get(curpos);\n  return -1;\n}\n",
      "types": [
        "IOException",
        "Integer",
        "Math",
        "Byte",
        "InputStream"
      ],
      "apicalls": [
        "min",
        "read",
        "max"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.io.InputStream.read(byte[],int,int)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "min",
        "exception",
        "input",
        "math",
        "stream",
        "integer",
        "read",
        "io",
        "java",
        "max",
        "byte"
      ]
    },
    {
      "method": "setOutputStream@228",
      "body": "public <E extends DataWriter>E setOutputStream(OutputStream os,String charSetName) throws UnsupportedEncodingException {\n  this.setWriter(new OutputStreamWriter(os,charSetName));\n  return Tools.cast(this);\n}\n",
      "formalParam": [
        "OutputStream",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer,boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "E",
      "file": "./java_projects/Basis/src/org/kernelab/basis/DataWriter.java",
      "types": [
        "UnsupportedEncodingException",
        "Writer",
        "OutputStream",
        "String",
        "Boolean",
        "PrintWriter",
        "OutputStreamWriter"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "java.io.PrintWriter.PrintWriter(java.io.Writer,boolean)"
          ]
        }
      ],
      "keywords": [
        "string",
        "exception",
        "unsupported",
        "boolean",
        "encoding",
        "print",
        "io",
        "output",
        "java",
        "writer",
        "stream"
      ]
    },
    {
      "method": "getElementLimit1@69",
      "body": "public Integer getElementLimit1(){\n  if (Compatibility.isTableLimited()) {\n    return new Integer(Compatibility.getTableLimit());\n  }\n  return new Integer(-1);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Integer",
      "file": "./java_projects/studio2/plugins/com.aptana.ide.search.epl/src/com/aptana/ide/search/epl/filesystem/ui/text/FileSystemSearchPage.java",
      "types": [
        "String",
        "NumberFormatException",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(java.lang.String)",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "format",
        "exception",
        "string",
        "integer",
        "java",
        "lang",
        "number"
      ]
    },
    {
      "method": "filterObject@79",
      "formalParam": [
        "CaptureSearchResult"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/wayback/wayback-core/src/main/java/org/archive/wayback/resourceindex/filters/HttpCodeFilter.java",
      "body": "public int filterObject(CaptureSearchResult o){\n  String code=o.getHttpCode();\n  if (excludes != null) {\n    if (excludes.containsKey(code)) {\n      return FILTER_EXCLUDE;\n    }\n  }\n  if (includes != null) {\n    if (!includes.containsKey(code)) {\n      return FILTER_EXCLUDE;\n    }\n  }\n  return FILTER_INCLUDE;\n}\n",
      "types": [
        "Boolean",
        "Object",
        "String",
        "Map"
      ],
      "apicalls": [
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "$NOT$java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key",
        "string",
        "object",
        "util",
        "contains",
        "map",
        "boolean",
        "java"
      ]
    },
    {
      "method": "remove@116",
      "body": "public void remove(String offerId){\n  if (m_offers.containsKey(offerId)) {\n    m_offers.remove(offerId);\n    m_dirty=true;\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Hashtable.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Hashtable.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Harpoon/ImageRec/contrib/JacORB1_3_30/src/org/jacorb/trading/db/simple/offers/OfferList.java",
      "types": [
        "Hashtable",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "containsKey",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)",
            "java.util.Hashtable.remove(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "remove",
        "object",
        "contains",
        "boolean",
        "java",
        "hashtable",
        "key"
      ]
    },
    {
      "method": "testCreateWriter@92",
      "body": "public void testCreateWriter() throws Exception {\n  final ByteArrayOutputStream output=new ByteArrayOutputStream();\n  final StreamFactory streamFactory=mockFactoryForOutput(output);\n  IoFactory factory=new IoFactory(streamFactory);\n  Writer writer=factory.writer(OutputMode.OVERWRITE);\n  writer.write(\"content\".toCharArray());\n  writer.close();\n  ensure.that(output.toString()).eq(\"content\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "node": "DAPICall",
            "_returns": "char[]",
            "_throws": []
          },
          {
            "_call": "java.io.Writer.write(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.Writer.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cotta/core/behaviour/src/net/sf/cotta/io/IoFactoryTest.java",
      "types": [
        "ByteArrayOutputStream",
        "Writer",
        "IOException",
        "String",
        "Character"
      ],
      "apicalls": [
        "toCharArray",
        "toString",
        "write",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.lang.String.toCharArray()",
            "java.io.Writer.write(char[])",
            "java.io.Writer.close()",
            "java.io.ByteArrayOutputStream.toString()"
          ]
        }
      ],
      "keywords": [
        "write",
        "io",
        "java",
        "string",
        "stream",
        "char",
        "close",
        "writer",
        "byte",
        "lang",
        "output",
        "array",
        "character",
        "exception"
      ]
    },
    {
      "method": "LocalVariable@47",
      "body": "public LocalVariable(MemberDefinition field,int slot){\n  if (field == null) {\n    new Exception().printStackTrace();\n  }\n  this.field=field;\n  this.slot=slot;\n  to=-1;\n}\n",
      "formalParam": [
        "MemberDefinition",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Exception.Exception()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/tools/asm/LocalVariable.java",
      "types": [
        "Throwable",
        "Exception"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Exception.Exception()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "print",
        "stack",
        "exception",
        "lang",
        "java",
        "trace"
      ]
    },
    {
      "method": "createCompatibleDestRaster@98",
      "body": "/** \n * Creates a compatible  {@code Raster} to dither into.Only  {@code IndexColorModel} allowed.\n * @param pSrc\n * @return a {@code WritableRaster}\n */\npublic final WritableRaster createCompatibleDestRaster(Raster pSrc){\n  return createCompatibleDestRaster(pSrc,getICM(pSrc));\n}\n",
      "formalParam": [
        "Raster"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.Raster.getWidth()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.image.Raster.getHeight()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.image.BufferedImage.setData(java.awt.image.Raster)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.image.Raster.getWidth()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.image.Raster.getHeight()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "WritableRaster",
      "file": "./java_projects/TwelveMonkeys/common/common-image/src/main/java/com/twelvemonkeys/image/CopyDither.java",
      "types": [
        "Raster",
        "BufferedImage",
        "Integer"
      ],
      "apicalls": [
        "getWidth",
        "getHeight",
        "setData"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.Raster.getWidth()",
            "java.awt.image.Raster.getHeight()",
            "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "java.awt.image.BufferedImage.setData(java.awt.image.Raster)",
            "java.awt.image.Raster.getWidth()",
            "java.awt.image.Raster.getHeight()"
          ]
        }
      ],
      "keywords": [
        "height",
        "raster",
        "data",
        "java",
        "buffered",
        "integer",
        "awt",
        "image",
        "set",
        "get",
        "width"
      ]
    },
    {
      "method": "endTime@41",
      "body": "@Test public void endTime(){\n  final TestTimeoutBase t=new TestTimeoutBase();\n  final Date d=Calendar.getInstance().getTime();\n  t.setEndTime(d);\n  assertEquals(d,t.getEndTime());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Calendar"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ovirt-engine/backend/manager/modules/dal/src/test/java/org/ovirt/engine/core/dal/dbbroker/auditloghandling/TimeoutBaseTest.java",
      "types": [
        "Date",
        "Calendar"
      ],
      "apicalls": [
        "getTime",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()"
          ]
        }
      ],
      "keywords": [
        "time",
        "get",
        "util",
        "date",
        "calendar",
        "java",
        "instance"
      ]
    },
    {
      "method": "capturePacket@131",
      "body": "@Override public int capturePacket(ByteBuffer buffer){\nsynchronized (captureLock) {\n    int remaining=captureBuffer.remaining();\n    if (remaining > 0) {\n      buffer.put(captureBuffer);\n      return remaining;\n    }\n  }\n  try {\n    Thread.sleep(10);\n  }\n catch (  InterruptedException e) {\n  }\n  return 0;\n}\n",
      "formalParam": [
        "ByteBuffer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.Buffer.remaining()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/PSP-NetParty/src/pspnetparty/client/swt/WlanProxyLibrary.java",
      "types": [
        "Integer",
        "Buffer",
        "Thread",
        "ByteBuffer",
        "Long",
        "InterruptedException"
      ],
      "apicalls": [
        "remaining",
        "put",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.Buffer.remaining()",
            "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "byte",
        "buffer",
        "long",
        "nio",
        "sleep",
        "interrupted",
        "remaining",
        "lang",
        "exception",
        "integer",
        "thread",
        "put",
        "java"
      ]
    },
    {
      "method": "createImage@271",
      "body": "@Override public RenderedImage createImage(int level){\n  final ImageManager imageManager=ImageManager.getInstance();\n  final RenderedImage geophysicalImage=imageManager.getGeophysicalImage(sourceRaster,level);\n  if (getOperator() == MIN) {\n    final MinFilterShape maskSquare=MinFilterDescriptor.MIN_MASK_SQUARE;\n    return MinFilterDescriptor.create(geophysicalImage,maskSquare,subWindowSize,null);\n  }\n  if (getOperator() == MAX) {\n    final MaxFilterShape maskSquare=MaxFilterDescriptor.MAX_MASK_SQUARE;\n    return MaxFilterDescriptor.create(geophysicalImage,maskSquare,subWindowSize,null);\n  }\n  if (getOperator() == MEDIAN) {\n    final MedianFilterShape maskSquare=MedianFilterDescriptor.MEDIAN_MASK_SQUARE;\n    return MedianFilterDescriptor.create(geophysicalImage,maskSquare,subWindowSize,null);\n  }\n  if (getOperator() == MEAN) {\n    final int kernelSize=subWindowSize * subWindowSize;\n    float[] meanFilter=new float[kernelSize];\n    Arrays.fill(meanFilter,1.0f / kernelSize);\n    int keyOrigin=(int)Math.ceil(subWindowSize / 2.0f);\n    KernelJAI kernel=new KernelJAI(subWindowSize,subWindowSize,keyOrigin,keyOrigin,meanFilter);\n    RenderingHints rh=new RenderingHints(JAI.KEY_BORDER_EXTENDER,noDataExtender);\n    return ConvolveDescriptor.create(geophysicalImage,kernel,rh);\n  }\n  if (getOperator() == STDDEV) {\n  }\n  if (getOperator() == RMS) {\n  }\n  throw new IllegalStateException(String.format(\"Operator class %s not supported.\",getOperator().getClass()));\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.fill(float[],float)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.RenderingHints.RenderingHints(java.awt.RenderingHints.Key,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "RenderedImage",
      "file": "./java_projects/beam/beam-core/src/main/java/org/esa/beam/framework/datamodel/GeneralFilterBand.java",
      "types": [
        "Arrays",
        "RenderingHints",
        "Key",
        "Object",
        "Float"
      ],
      "apicalls": [
        "fill"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.fill(float[],float)",
            "java.awt.RenderingHints.RenderingHints(java.awt.RenderingHints.Key,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "hints",
        "rendering",
        "object",
        "fill",
        "key",
        "arrays",
        "util",
        "float",
        "awt"
      ]
    },
    {
      "method": "testWritesTwoFiles@122",
      "body": "public void testWritesTwoFiles(){\n  FilePersistenceStrategy strategy=new FilePersistenceStrategy(baseDir);\n  strategy.put(\"guilherme\",\"aCuteString\");\n  strategy.put(\"silveira\",\"anotherCuteString\");\n  assertTrue(new File(baseDir,\"string@guilherme.xml\").isFile());\n  assertTrue(new File(baseDir,\"string@silveira.xml\").isFile());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.isFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.isFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xstream_1/xstream/src/test/com/thoughtworks/xstream/persistence/FilePersistenceStrategyTest.java",
      "types": [
        "String",
        "File",
        "Boolean"
      ],
      "apicalls": [
        "isFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.isFile()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.isFile()"
          ]
        }
      ],
      "keywords": [
        "file",
        "java",
        "boolean",
        "string",
        "io"
      ]
    },
    {
      "method": "reduce@335",
      "body": "@Override public void reduce(IntWritable key,Iterator<NullWritable> values,OutputCollector<NullWritable,NullWritable> output,Reporter reporter) throws IOException {\n  LOG.info(taskNumber + \" has started.\");\n  FileStatus[] files=listSignalFiles(fs,false);\n  String[] sigFileComps=files[0].getPath().getName().split(\"_\");\n  String signalType=sigFileComps[0];\n  int noOfTasks=Integer.parseInt(sigFileComps[1]);\n  while (!signalType.equals(\"REDUCES\") || taskNumber + 1 > noOfTasks) {\n    LOG.info(\"Signal type found : \" + signalType + \" .Number of tasks to be finished by this signal : \"+ noOfTasks+ \" . My id : \"+ taskNumber);\n    LOG.info(taskNumber + \" is still alive.\");\n    try {\n      reporter.progress();\n      Thread.sleep(1000);\n    }\n catch (    InterruptedException ie) {\n      LOG.info(taskNumber + \" is still alive.\");\n      break;\n    }\n    files=listSignalFiles(fs,false);\n    sigFileComps=files[0].getPath().getName().split(\"_\");\n    signalType=sigFileComps[0];\n    noOfTasks=Integer.parseInt(sigFileComps[1]);\n  }\n  LOG.info(\"Signal type found : \" + signalType + \" .Number of tasks to be finished by this signal : \"+ noOfTasks+ \" . My id : \"+ taskNumber);\n  LOG.info(taskNumber + \" is finished.\");\n}\n",
      "formalParam": [
        "IntWritable",
        "Iterator<NullWritable>",
        "OutputCollector<NullWritable,NullWritable>",
        "Reporter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.Thread.sleep(long)",
                "_throws": [
                  "java.lang.InterruptedException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20-warehouse/src/test/org/apache/hadoop/mapred/ControlledMapReduceJob.java",
      "types": [
        "String",
        "Long",
        "NumberFormatException",
        "Object",
        "Boolean",
        "Integer",
        "Thread",
        "InterruptedException"
      ],
      "apicalls": [
        "parseInt",
        "equals",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.lang.Thread.sleep(long)",
            "java.lang.Integer.parseInt(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "interrupted",
        "exception",
        "thread",
        "parse",
        "string",
        "format",
        "equals",
        "java",
        "integer",
        "sleep",
        "number",
        "int",
        "object",
        "lang",
        "boolean",
        "long"
      ]
    },
    {
      "method": "execute@36",
      "body": "/** \n * Execute the function.  The function must return a valid object.\n * @param xctxt The current execution context.\n * @return A valid XObject.\n * @throws javax.xml.transform.TransformerException\n */\npublic XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {\n  String lang=m_arg0.execute(xctxt).str();\n  int parent=xctxt.getCurrentNode();\n  boolean isLang=false;\n  DTM dtm=xctxt.getDTM(parent);\n  while (DTM.NULL != parent) {\n    if (DTM.ELEMENT_NODE == dtm.getNodeType(parent)) {\n      int langAttr=dtm.getAttributeNode(parent,\"http://www.w3.org/XML/1998/namespace\",\"lang\");\n      if (DTM.NULL != langAttr) {\n        String langVal=dtm.getNodeValue(langAttr);\n        if (langVal.toLowerCase().startsWith(lang.toLowerCase())) {\n          int valLen=lang.length();\n          if ((langVal.length() == valLen) || (langVal.charAt(valLen) == '-')) {\n            isLang=true;\n          }\n        }\n        break;\n      }\n    }\n    parent=dtm.getParent(parent);\n  }\n  return isLang ? XBoolean.S_TRUE : XBoolean.S_FALSE;\n}\n",
      "formalParam": [
        "XPathContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.toLowerCase()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              }
            ]
          }
        ]
      },
      "returnType": "XObject",
      "file": "./java_projects/xalan-j/src/org/apache/xpath/functions/FuncLang.java",
      "types": [
        "Integer",
        "Character",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "startsWith",
        "toLowerCase",
        "charAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "char",
        "length",
        "lang",
        "java",
        "boolean",
        "integer",
        "case",
        "character",
        "lower",
        "starts",
        "string"
      ]
    },
    {
      "method": "list@57",
      "body": "/** \n * Returns a user-friendly string with a list of generator names\n * @return List of generator names\n */\npublic static String list(){\n  List<BaseGenerator> generators=MineReset.getGenerators();\n  String list=\"\";\n  for (  BaseGenerator gen : generators) {\n    list=list + ChatColor.GOLD + gen.getName()+ ChatColor.WHITE+ \", \";\n  }\n  list=list.substring(0,list.length() - 2);\n  return list;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/MineReset/src/com/wolvencraft/MineReset/util/GeneratorUtil.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "integer",
        "java",
        "lang",
        "string",
        "length"
      ]
    },
    {
      "method": "test_close@95",
      "body": "/** \n * @tests java.io.PipedOutputStream#close()\n */\npublic void test_close() throws Exception {\n  out=new PipedOutputStream();\n  rt=new Thread(reader=new PReader(out));\n  rt.start();\n  out.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/PipedOutputStreamTest.java",
      "types": [
        "Thread",
        "Runnable",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "start",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "start",
        "string",
        "runnable",
        "print",
        "io",
        "thread",
        "lang",
        "stream",
        "println",
        "java"
      ]
    },
    {
      "method": "startServer@101",
      "body": "@Before public void startServer() throws Exception {\n  new Thread(getClass().getSimpleName() + \" - server\"){\n    @Override public void run(){\n      try {\n        final URL url=getClass().getClassLoader().getResource(CERT_FILE_NAME);\n        XmppAppenderTest.this.server=new XMPPServer(XMPP_DOMAIN);\n        final StorageProviderRegistry providerRegistry=new MemoryStorageProviderRegistry();\n        final AccountManagement accountManagement=(AccountManagement)providerRegistry.retrieve(AccountManagement.class);\n        accountManagement.addUser(ADMIN,ADMIN_PASSWORD);\n        accountManagement.addUser(USER,USER_PASSWORD);\n        final TCPEndpoint endpoint=new TCPEndpoint();\n        endpoint.setPort(PORT);\n        XmppAppenderTest.this.server.addEndpoint(endpoint);\n        XmppAppenderTest.this.server.setTLSCertificateInfo(new File(url.getFile()),SERVER_CERT_PASSWORD);\n        XmppAppenderTest.this.server.setStorageProviderRegistry(providerRegistry);\n        XmppAppenderTest.this.server.start();\n        XmppAppenderTest.this.server.addModule(new MUCModule(XMPP_MUC_CHAT_DOMAIN));\n        XmppAppenderTest.this.serverStart.countDown();\n        XmppAppenderTest.this.serverTermination.await();\n      }\n catch (      final Exception e) {\n        XmppAppenderTest.this.serverTermination.countDown();\n        throw new RuntimeException(e.getMessage(),e);\n      }\n finally {\n        XmppAppenderTest.this.serverStart.countDown();\n      }\n    }\n  }\n.start();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getSimpleName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/logback-messaging-appenders/xmpp/src/test/java/se/pp/gustafson/marten/logback/appender/XmppAppenderTest.java",
      "types": [
        "Class",
        "Thread",
        "String"
      ],
      "apicalls": [
        "getSimpleName",
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getSimpleName()",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "class",
        "string",
        "java",
        "lang",
        "thread",
        "simple",
        "start",
        "name",
        "get"
      ]
    },
    {
      "method": "deepCopy@2265",
      "body": "public containsKey_result deepCopy(){\n  return new containsKey_result(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "containsKey_result",
      "file": "./java_projects/Remus/thrift/src/main/java/org/remus/thrift/RemusNet.java",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "clear",
        "or"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "clear",
        "set",
        "java",
        "bit",
        "util"
      ]
    },
    {
      "method": "setAttribute@83",
      "body": "public void setAttribute(String name,String value){\n  if (mAttributes == null) {\n    mAttributes=new HashMap<String,String>();\n  }\n  mAttributes.put(name,value);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/metawidget/modules/gwt/core/src/main/java/org/metawidget/gwt/client/ui/Stub.java",
      "types": [
        "String",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "string",
        "util",
        "java",
        "put",
        "map"
      ]
    },
    {
      "method": "test_isNaND@377",
      "body": "/** \n * @tests java.lang.Double#isNaN(double)\n */\npublic void test_isNaND(){\n  Double d=new Double(0.0 / 0.0);\n  assertTrue(\"NAN check failed\",Double.isNaN(d.doubleValue()));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Double.Double(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Double.doubleValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Double.isNaN(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/DoubleTest.java",
      "types": [
        "Boolean",
        "Double"
      ],
      "apicalls": [
        "isNaN",
        "doubleValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.Double(double)",
            "java.lang.Double.doubleValue()",
            "java.lang.Double.isNaN(double)"
          ]
        }
      ],
      "keywords": [
        "n",
        "na",
        "value",
        "double",
        "lang",
        "java",
        "boolean"
      ]
    },
    {
      "method": "submitFormToStartProcess@387",
      "formalParam": [
        "String",
        "String",
        "String",
        "FormData",
        "Map<String,String>",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.trim()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "WorkflowProcessResult",
      "file": "./java_projects/jw-community/wflow-core/src/main/java/org/joget/apps/app/service/AppServiceImpl.java",
      "body": "/** \n * Start a process through a form submission\n * @param appId\n * @param version\n * @param processDefId\n * @param formData\n * @param workflowVariableMap\n * @param originProcessId\n * @param formUrl\n * @return\n */\n@Override public WorkflowProcessResult submitFormToStartProcess(String appId,String version,String processDefId,FormData formData,Map<String,String> workflowVariableMap,String originProcessId,String formUrl){\n  WorkflowProcessResult result=null;\n  if (formData == null) {\n    formData=new FormData();\n  }\n  AppDefinition appDef=getAppDefinition(appId,version);\n  PackageDefinition packageDef=appDef.getPackageDefinition();\n  String processDefIdWithVersion=AppUtil.getProcessDefIdWithVersion(packageDef.getId(),packageDef.getVersion().toString(),processDefId);\n  PackageActivityForm startFormDef=viewStartProcessForm(appId,appDef.getVersion().toString(),processDefId,formData,formUrl);\n  if (startFormDef != null && startFormDef.getForm() != null) {\n    Form startForm=startFormDef.getForm();\n    FormData formResult=formService.executeFormActions(startForm,formData);\n    if (formResult.getFormResult(AssignmentCompleteButton.DEFAULT_ID) != null) {\n      formData=FormUtil.executeElementFormatDataForValidation(startForm,formData);\n      formResult=formService.validateFormData(startForm,formData);\n      Map<String,String> errors=formResult.getFormErrors();\n      if (!formResult.getStay() && (errors == null || errors.isEmpty())) {\n        if (originProcessId == null && formResult.getRequestParameter(FormUtil.FORM_META_ORIGINAL_ID) != null && !formResult.getRequestParameter(FormUtil.FORM_META_ORIGINAL_ID).isEmpty()) {\n          originProcessId=formResult.getRequestParameter(FormUtil.FORM_META_ORIGINAL_ID);\n        }\n        result=workflowManager.processStart(processDefIdWithVersion,null,workflowVariableMap,null,originProcessId,true);\n        String processId=result.getProcess().getInstanceId();\n        String originId=(originProcessId != null && originProcessId.trim().length() > 0) ? originProcessId : processId;\n        originId=getOriginProcessId(originId);\n        formResult.setPrimaryKeyValue(originId);\n        formResult.setProcessId(processId);\n        formResult=formService.submitForm(startForm,formData,true);\n        result=workflowManager.processStartWithInstanceId(processDefIdWithVersion,processId,workflowVariableMap);\n        boolean autoContinue=(startFormDef != null) && startFormDef.isAutoContinue();\n        if (!autoContinue) {\n          result.setActivities(new ArrayList<WorkflowActivity>());\n        }\n      }\n    }\n  }\n  return result;\n}\n",
      "types": [
        "Map",
        "String",
        "ArrayList",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "length",
        "isEmpty",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.isEmpty()",
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "list",
        "string",
        "map",
        "trim",
        "empty",
        "integer",
        "boolean",
        "java",
        "length",
        "array",
        "util"
      ]
    },
    {
      "method": "getIntAttribute@908",
      "body": "/** \n * Returns the value of an attribute.\n * @param name the non-null full name of the attribute.\n * @param defaultValue the default value of the attribute.\n * @return the value, or defaultValue if the attribute does not exist.\n */\npublic int getIntAttribute(String name,int defaultValue){\n  String value=this.getAttribute(name,Integer.toString(defaultValue));\n  return Integer.parseInt(value);\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/maple-ide/core/src/processing/xml/XMLElement.java",
      "types": [
        "Integer",
        "String",
        "NumberFormatException"
      ],
      "apicalls": [
        "toString",
        "parseInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "parse",
        "int",
        "integer",
        "exception",
        "format",
        "number",
        "lang",
        "string",
        "java"
      ]
    },
    {
      "method": "testMemberCall_02@106",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xtext/tests/org.eclipse.xtext.xbase.tests/xtend-gen/org/eclipse/xtext/xbase/tests/typesystem/StringLiteralTest.java",
      "body": "@Test @Ignore(value=\"Improve typing according to expectation\") public void testMemberCall_02() throws Exception {\n  this.resolvesStringLiteralsTo(\"\\'1\\'.charValue\",\"char\");\n}\n",
      "types": [
        "List",
        "Integer",
        "String",
        "CharSequence"
      ],
      "apicalls": [
        "replace",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "char",
        "lang",
        "java",
        "replace",
        "size",
        "list",
        "integer",
        "string",
        "util",
        "sequence"
      ]
    },
    {
      "method": "normalisedVersion@350",
      "body": "public static String normalisedVersion(String version){\n  return normalisedVersion(version,\".\",4);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern",
            "_throws": []
          },
          {
            "_call": "java.util.regex.Pattern.split(java.lang.CharSequence)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/simple-region-market/src/main/java/com/thezorro266/simpleregionmarket/Utils.java",
      "types": [
        "Object",
        "Integer",
        "StringBuilder",
        "CharSequence",
        "String",
        "Pattern"
      ],
      "apicalls": [
        "split",
        "compile",
        "format",
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String,int)",
            "java.util.regex.Pattern.split(java.lang.CharSequence)",
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "compile",
        "object",
        "append",
        "sequence",
        "string",
        "regex",
        "char",
        "pattern",
        "util",
        "builder",
        "format",
        "java",
        "lang",
        "integer",
        "split"
      ]
    },
    {
      "method": "addAbsoluteOrderingOthers@86",
      "body": "public void addAbsoluteOrderingOthers(){\n  if (absoluteOrdering == null) {\n    absoluteOrdering=new LinkedHashSet<String>();\n  }\n  absoluteOrdering.add(ORDER_OTHERS);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/tomcat70/java/org/apache/catalina/deploy/WebXml.java",
      "types": [
        "Set",
        "LinkedHashSet",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "add",
        "string",
        "linked",
        "java",
        "boolean",
        "util",
        "set",
        "hash"
      ]
    },
    {
      "method": "reset@65",
      "body": "@Override public void reset(){\n  _stack.clear();\n  if (_dir.isFile()) {\n    _currentIterator=Arrays.asList(new File[]{_dir}).iterator();\n  }\n else {\n    _currentIterator=Arrays.asList(_dir.listFiles()).iterator();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<java.util.Iterator<java.io.File>>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.listFiles()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.io.File[]"
              },
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              },
              {
                "_call": "java.util.List.iterator()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Iterator"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.File.isFile()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              },
              {
                "_call": "java.util.List.iterator()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Iterator"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/zoie/zoie-core/src/main/java/proj/zoie/impl/indexing/FileDataProvider.java",
      "types": [
        "Vector",
        "Arrays",
        "File",
        "Boolean",
        "List",
        "Iterator"
      ],
      "apicalls": [
        "clear",
        "iterator",
        "listFiles",
        "asList",
        "isFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<java.util.Iterator<java.io.File>>.clear()",
            "java.io.File.isFile()",
            "java.io.File.listFiles()",
            "java.util.Arrays.asList(T[])",
            "java.util.List.iterator()"
          ]
        },
        {
          "calls": [
            "java.util.Vector<java.util.Iterator<java.io.File>>.clear()",
            "java.io.File.isFile()",
            "java.util.Arrays.asList(T[])",
            "java.util.List.iterator()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "io",
        "util",
        "list",
        "files",
        "clear",
        "iterator",
        "arrays",
        "java",
        "vector",
        "file"
      ]
    },
    {
      "method": "writesMapOfListsCorrectly@579",
      "body": "/** \n * @see DATAMONGO-235\n */\n@Test public void writesMapOfListsCorrectly(){\n  ClassWithMapProperty input=new ClassWithMapProperty();\n  input.mapOfLists=Collections.singletonMap(\"Foo\",Arrays.asList(\"Bar\"));\n  BasicDBObject result=new BasicDBObject();\n  converter.write(input,result);\n  Object field=result.get(\"mapOfLists\");\n  assertThat(field,is(instanceOf(DBObject.class)));\n  DBObject map=(DBObject)field;\n  Object foo=map.get(\"Foo\");\n  assertThat(foo,is(instanceOf(BasicDBList.class)));\n  BasicDBList value=(BasicDBList)foo;\n  assertThat(value.size(),is(1));\n  assertThat((String)value.get(0),is(\"Bar\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collections.singletonMap(Tau_K,Tau_V)",
            "_throws": [],
            "_returns": "java.util.Map",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-data-mongodb/spring-data-mongodb/src/test/java/org/springframework/data/mongodb/core/convert/MappingMongoConverterUnitTests.java",
      "types": [
        "Collections",
        "Arrays",
        "Map",
        "List"
      ],
      "apicalls": [
        "asList",
        "singletonMap"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.Collections.singletonMap(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "map",
        "arrays",
        "util",
        "collections",
        "java",
        "singleton",
        "list"
      ]
    },
    {
      "method": "ServiceBeanMethodInvocation@39",
      "body": "public ServiceBeanMethodInvocation(Object target,Class<?> targetClass,Method method,Object[] arguments){\n  _target=target;\n  _targetClass=targetClass;\n  _method=method;\n  _arguments=arguments;\n  if (!_method.isAccessible()) {\n    boolean enabled=PortalSecurityManagerThreadLocal.isEnabled();\n    try {\n      PortalSecurityManagerThreadLocal.setEnabled(false);\n      _method.setAccessible(true);\n    }\n  finally {\n      PortalSecurityManagerThreadLocal.setEnabled(enabled);\n    }\n  }\n}\n",
      "formalParam": [
        "Object",
        "Class<?>",
        "Method",
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.reflect.AccessibleObject.isAccessible()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.SecurityException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/liferay-portal/portal-impl/src/com/liferay/portal/spring/aop/ServiceBeanMethodInvocation.java",
      "types": [
        "AccessibleObject",
        "SecurityException",
        "Boolean"
      ],
      "apicalls": [
        "isAccessible",
        "setAccessible"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.reflect.AccessibleObject.isAccessible()"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
          ]
        }
      ],
      "keywords": [
        "java",
        "set",
        "accessible",
        "exception",
        "object",
        "lang",
        "boolean",
        "reflect",
        "security"
      ]
    },
    {
      "method": "AtMap@20",
      "body": "public AtMap(){\n  ats=new HashMap<String,String>();\n  methods=new HashMap<String,Method>();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.reflect.Method>.HashMap<String,Method>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/nutz/src/org/nutz/mvc/config/AtMap.java",
      "types": [
        "Method",
        "HashMap",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.HashMap<java.lang.String,java.lang.reflect.Method>.HashMap<String,Method>()"
          ]
        }
      ],
      "keywords": [
        "method",
        "hash",
        "util",
        "string",
        "map",
        "java"
      ]
    },
    {
      "method": "onStartUse@62",
      "body": "/** \n * Start gathering process\n * @param player\n */\npublic void onStartUse(final Player player){\n  final GatherableTemplate template=this.getOwner().getObjectTemplate();\n  if (!checkPlayerSkill(player,template))   return;\n  List<Material> materials=template.getMaterials().getMaterial();\n  int index=0;\n  Material material=materials.get(index);\n  int count=materials.size();\n  if (count < 1) {\n    return;\n  }\n else   if (count == 1) {\n  }\n else {\n    int gatherRate=1;\n    float maxrate=0;\n    int rate=0;\n    int i=0;\n    SortedMap<Integer,Integer> hasMat=new TreeMap<Integer,Integer>();\n    for (    Material mat : materials) {\n      maxrate+=mat.getRate();\n      hasMat.put(mat.getRate(),i);\n      i++;\n    }\n    Iterator<Integer> it=hasMat.keySet().iterator();\n    while (it.hasNext()) {\n      rate=it.next();\n      float percent=Rnd.get() * 100f;\n      float chance=((rate / maxrate) * 100f * gatherRate);\n      if (percent < chance) {\n        index=hasMat.get(rate);\n        material=materials.get(index);\n        break;\n      }\n    }\n  }\n  final Material finalMaterial=material;\n  if (state != GatherState.GATHERING) {\n    state=GatherState.GATHERING;\n    currentGatherer=player.getObjectId();\n    player.getObserveController().attach(new StartMovingListener(){\n      @Override public void moved(){\n        finishGathering(player);\n      }\n    }\n);\n    int skillLvlDiff=player.getSkillList().getSkillLevel(template.getHarvestSkill()) - template.getSkillLevel();\n    task=taskFactory.gatheringTask(player,getOwner(),finalMaterial,skillLvlDiff);\n    task.start();\n  }\n}\n",
      "formalParam": [
        "Player"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeMap<java.lang.Integer,java.lang.Integer>.TreeMap<Integer,Integer>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          },
          {
            "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Set.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<java.lang.Integer>.next()",
                "node": "DAPICall",
                "_returns": "java.lang.Integer",
                "_throws": []
              },
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.get(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Integer",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.Integer>.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AU-AD/AE-go_GameServer/src/com/aionemu/gameserver/controllers/GatherableController.java",
      "types": [
        "SortedMap",
        "Map",
        "Boolean",
        "TreeMap",
        "Set",
        "Iterator",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "iterator",
        "next",
        "hasNext",
        "put",
        "get",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeMap<java.lang.Integer,java.lang.Integer>.TreeMap<Integer,Integer>()",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator<java.lang.Integer>.hasNext()",
            "java.util.Iterator<java.lang.Integer>.next()",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.get(java.lang.Object)",
            "java.util.Iterator<java.lang.Integer>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "tree",
        "integer",
        "iterator",
        "put",
        "object",
        "map",
        "set",
        "java",
        "get",
        "util",
        "next",
        "sorted",
        "key"
      ]
    },
    {
      "method": "setDriverClassName@196",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bundlerepo/templates/org.apache.commons/com.springsource.org.apache.commons.dbcp/dbcp-patched/src/java/org/apache/commons/dbcp/BasicDataSource.java",
      "body": "/** \n * <p>Sets the jdbc driver class name.</p> <p> Note: this method currently has no effect once the pool has been initialized.  The pool is initialized the first time one of the following methods is invoked: <code>getConnection, setLogwriter, setLoginTimeout, getLoginTimeout, getLogWriter.</code></p>\n * @param driverClassName the class name of the jdbc driver\n */\npublic synchronized void setDriverClassName(String driverClassName){\n  if ((driverClassName != null) && (driverClassName.trim().length() > 0)) {\n    this.driverClassName=driverClassName;\n  }\n else {\n    this.driverClassName=null;\n  }\n  this.restartNeeded=true;\n}\n",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "integer",
        "length",
        "trim",
        "lang"
      ]
    },
    {
      "method": "_findPropertyFields@518",
      "body": "/** \n * @param ignoredProperties (optional) names of properties to ignore;any fields that would be recognized as one of these properties is ignored.\n * @param forSerialization If true, will collect serializable propertyfields; if false, deserializable\n * @return Ordered Map with logical property name as key, andmatching field as value.\n */\npublic LinkedHashMap<String,AnnotatedField> _findPropertyFields(Collection<String> ignoredProperties,boolean forSerialization){\n  LinkedHashMap<String,AnnotatedField> results=new LinkedHashMap<String,AnnotatedField>();\n  for (  BeanPropertyDefinition property : _properties) {\n    AnnotatedField f=property.getField();\n    if (f != null) {\n      String name=property.getName();\n      if (ignoredProperties != null) {\n        if (ignoredProperties.contains(name)) {\n          continue;\n        }\n      }\n      results.put(name,f);\n    }\n  }\n  return results;\n}\n",
      "formalParam": [
        "Collection<String>",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collection<java.lang.String>.contains(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "LinkedHashMap<String,AnnotatedField>",
      "file": "./java_projects/jackson-databind/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
      "types": [
        "Boolean",
        "Collection",
        "LinkedHashMap",
        "Object",
        "String"
      ],
      "apicalls": [
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()",
            "java.util.Collection<java.lang.String>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "string",
        "util",
        "object",
        "contains",
        "collection",
        "boolean",
        "map",
        "java",
        "linked"
      ]
    },
    {
      "method": "refresh@76",
      "body": "@Override public void refresh(){\n  SWTControlUtil.setText(nameText,clone != null ? clone.name : \"\");\n  SWTControlUtil.setText(typeText,clone != null ? clone.getFileType() : \"\");\n  String location=clone == null || clone.isRoot() ? Messages.GeneralInformationPage_Computer : clone.getLocation();\n  SWTControlUtil.setText(locationText,location);\n  SWTControlUtil.setText(modifiedText,clone != null ? getDateText(clone.attr.mtime) : \"\");\n  super.refresh();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.DateFormat.getDateTimeInstance(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.text.DateFormat"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/tcf/target_explorer/plugins/org.eclipse.tcf.te.tcf.filesystem.ui/src/org/eclipse/tcf/te/tcf/filesystem/ui/internal/tabbed/BasicFolderSection.java",
      "types": [
        "Integer",
        "DateFormat",
        "Long",
        "String",
        "Date"
      ],
      "apicalls": [
        "getDateTimeInstance",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.DateFormat.getDateTimeInstance(int,int)",
            "java.util.Date.Date(long)",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "instance",
        "get",
        "format",
        "text",
        "integer",
        "string",
        "time",
        "long",
        "date",
        "java",
        "util"
      ]
    },
    {
      "method": "incrementCount@455",
      "body": "/** \n * Equivalent to incrementCount(l, 1.0).\n */\npublic void incrementCount(List<K> l){\n  incrementCount(l,1.0);\n}\n",
      "formalParam": [
        "List<K>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<Tau_E>.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Iterator<Tau_E>.next()",
            "_throws": [],
            "_returns": "Tau_E",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
                "_throws": [],
                "_returns": "Tau_V",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
                "_throws": [],
                "_returns": "Tau_V",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "_returns": "Tau_E",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/stanford-corenlp/src/main/java/edu/stanford/nlp/stats/GeneralizedCounter.java",
      "types": [
        "Map",
        "Object",
        "Integer",
        "List",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "get",
        "next",
        "put",
        "hasNext",
        "size",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "map",
        "get",
        "integer",
        "put",
        "iterator",
        "list",
        "boolean",
        "next",
        "java",
        "size",
        "object"
      ]
    },
    {
      "method": "newDecoder@162",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.charset.Charset.forName(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.nio.charset.Charset",
            "_throws": []
          },
          {
            "_call": "java.nio.charset.Charset.newDecoder()",
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder",
            "_throws": []
          }
        ]
      },
      "returnType": "CharsetDecoder",
      "file": "./java_projects/libcore_1/luni/src/test/java/org/apache/harmony/nio_char/tests/java/nio/charset/CharsetEncoderTest.java",
      "body": "public CharsetDecoder newDecoder(){\n  return Charset.forName(\"UTF-8\").newDecoder();\n}\n",
      "types": [
        "Character",
        "Charset",
        "CharsetDecoder",
        "String"
      ],
      "apicalls": [
        "forName",
        "newDecoder"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.charset.Charset.forName(java.lang.String)",
            "java.nio.charset.Charset.newDecoder()"
          ]
        }
      ],
      "keywords": [
        "java",
        "charset",
        "new",
        "decoder",
        "string",
        "name",
        "nio",
        "character"
      ]
    },
    {
      "method": "encodeToURL@184",
      "body": "public static String encodeToURL(String string){\n  try {\n    return java.net.URLEncoder.encode(string,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    LOGGER.error(\"Unable to encode string \" + string,e);\n    e.printStackTrace();\n  }\n  return null;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.net.URLEncoder.encode(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/MEditor/editor-common/editor-common-server/src/main/java/cz/mzk/editor/server/fedora/utils/FoxmlUtils.java",
      "types": [
        "URLEncoder",
        "UnsupportedEncodingException",
        "String",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace",
        "encode"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URLEncoder.encode(java.lang.String,java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.net.URLEncoder.encode(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "trace",
        "print",
        "throwable",
        "string",
        "url",
        "encode",
        "encoding",
        "net",
        "java",
        "stack",
        "encoder",
        "exception",
        "lang"
      ]
    },
    {
      "method": "debug@207",
      "body": "public static void debug(String key,String[] values){\n  String msg=key;\n  if (values != null) {\n    msg=dblook.lookupMessage(key,values);\n  }\n  logFile.println(\"-- **--> DEBUG: \" + msg);\n  if (verbose)   System.err.println(\"-- **--> DEBUG: \" + msg);\n  atLeastOneDebug=true;\n}\n",
      "formalParam": [
        "String",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintWriter.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/derby/java/tools/org/apache/derby/impl/tools/dblook/Logs.java",
      "types": [
        "String",
        "PrintStream",
        "PrintWriter"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintWriter.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "io",
        "string",
        "stream",
        "java",
        "writer",
        "println"
      ]
    },
    {
      "method": "toLengthOctets@85",
      "body": "public static final byte[] toLengthOctets(int i){\n  byte abyte0[]=null;\n  if (i < 128) {\n    abyte0=new byte[1];\n    abyte0[0]=(byte)i;\n  }\n else {\n    byte abyte1[]=intToBytes(i);\n    abyte0=new byte[1 + abyte1.length];\n    System.arraycopy(abyte1,0,abyte0,1,abyte1.length);\n    abyte0[0]=(byte)(abyte1.length | 0x80);\n  }\n  return abyte0;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toHexString(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/jcManager/src/com/braicu/jcm/utils/ByteUtils.java",
      "types": [
        "Integer",
        "System",
        "Object",
        "String"
      ],
      "apicalls": [
        "arraycopy",
        "toHexString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toHexString(int)",
            "java.lang.String.length()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "hex",
        "system",
        "integer",
        "java",
        "object",
        "string",
        "length",
        "arraycopy"
      ]
    },
    {
      "method": "getManyToManyAFoos@120",
      "body": "public List<ManyToManyAFoo> getManyToManyAFoos(){\n  List<ManyToManyAFoo> l=new ArrayList<ManyToManyAFoo>();\n  for (  ManyToManyAFooToBar o : this.getManyToManyAFooToBars()) {\n    l.add(o.getManyToManyAFoo());\n  }\n  return Collections.unmodifiableList(l);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "returnType": "List<ManyToManyAFoo>",
      "file": "./java_projects/joist/features/src/codegen/features/domain/ManyToManyABarCodegen.java",
      "types": [
        "List",
        "ArrayList",
        "Collections"
      ],
      "apicalls": [
        "unmodifiableList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "unmodifiable",
        "list",
        "collections",
        "array"
      ]
    },
    {
      "method": "testToGregorianCalendar@696",
      "body": "public void testToGregorianCalendar(){\n  DateTime test=new DateTime(TEST_TIME1);\n  GregorianCalendar result=test.toGregorianCalendar();\n  assertEquals(test.getMillis(),result.getTime().getTime());\n  assertEquals(TimeZone.getTimeZone(\"Europe/London\"),result.getTimeZone());\n  test=new DateTime(TEST_TIME1,PARIS);\n  result=test.toGregorianCalendar();\n  assertEquals(test.getMillis(),result.getTime().getTime());\n  assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"),result.getTimeZone());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getTime()",
            "node": "DAPICall",
            "_returns": "java.util.Date",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.TimeZone.getTimeZone(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.TimeZone",
            "_throws": []
          },
          {
            "_call": "java.util.GregorianCalendar.getTimeZone()",
            "node": "DAPICall",
            "_returns": "java.util.TimeZone",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "node": "DAPICall",
            "_returns": "java.util.Date",
            "_throws": []
          },
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.TimeZone.getTimeZone(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.TimeZone",
            "_throws": []
          },
          {
            "_call": "java.util.GregorianCalendar.getTimeZone()",
            "node": "DAPICall",
            "_returns": "java.util.TimeZone",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/joda-time/src/test/java/org/joda/time/TestDateTime_Basics.java",
      "types": [
        "Calendar",
        "TimeZone",
        "GregorianCalendar",
        "Long",
        "Date",
        "String"
      ],
      "apicalls": [
        "getTimeZone",
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getTime()",
            "java.util.Date.getTime()",
            "java.util.TimeZone.getTimeZone(java.lang.String)",
            "java.util.GregorianCalendar.getTimeZone()",
            "java.util.Calendar.getTime()",
            "java.util.Date.getTime()",
            "java.util.TimeZone.getTimeZone(java.lang.String)",
            "java.util.GregorianCalendar.getTimeZone()"
          ]
        }
      ],
      "keywords": [
        "gregorian",
        "long",
        "zone",
        "string",
        "get",
        "calendar",
        "time",
        "util",
        "java",
        "date"
      ]
    },
    {
      "method": "getDefaultRenderer@3477",
      "body": "/** \n * Get the default renderer for rendering the given data type.\n * @param columnClass the data that must be rendered\n * @return the appropriate defauld renderer for rendering that data type.\n */\npublic TableCellRenderer getDefaultRenderer(Class<?> columnClass){\n  if (defaultRenderersByColumnClass.containsKey(columnClass))   return (TableCellRenderer)defaultRenderersByColumnClass.get(columnClass);\n else {\n    TableCellRenderer r=new DefaultTableCellRenderer();\n    defaultRenderersByColumnClass.put(columnClass,r);\n    return r;\n  }\n}\n",
      "formalParam": [
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Hashtable.containsKey(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "TableCellRenderer",
      "file": "./java_projects/classpath/javax/swing/JTable.java",
      "types": [
        "Boolean",
        "Hashtable",
        "Object"
      ],
      "apicalls": [
        "put",
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "boolean",
        "contains",
        "key",
        "put",
        "util",
        "java",
        "hashtable"
      ]
    },
    {
      "method": "queryFriends@432",
      "body": "/** \n * Query the list of friends for the specified contact.\n * @param contact the contact\n * @return the friends of the contact\n */\npublic Set<ContactInfo> queryFriends(ContactInfo contact){\n  Set<ContactInfo> friends=friendsMap.get(contact.getId());\n  if (friends == null) {\n    friends=new HashSet<ContactInfo>();\n    int numContacts=dataProvider.getList().size();\n    int friendCount=2 + Random.nextInt(8);\n    for (int i=0; i < friendCount; i++) {\n      friends.add(dataProvider.getList().get(Random.nextInt(numContacts)));\n    }\n    friendsMap.put(contact.getId(),friends);\n  }\n  return friends;\n}\n",
      "formalParam": [
        "ContactInfo"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.Integer,java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.Integer,java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>>.put(java.lang.Integer,java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>)",
            "node": "DAPICall",
            "_returns": "java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>",
            "_throws": []
          }
        ]
      },
      "returnType": "Set<ContactInfo>",
      "file": "./java_projects/netnumeri/lib/gwt-2.5.0.rc1/samples/Showcase/src/com/google/gwt/sample/showcase/client/content/cell/ContactDatabase.java",
      "types": [
        "Object",
        "HashSet",
        "Set",
        "Map",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "get",
        "add",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.Integer,java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>>.get(java.lang.Object)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Set<Tau_E>.add(Tau_E)",
            "java.util.Map<java.lang.Integer,java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>>.put(java.lang.Integer,java.util.Set<com.google.gwt.sample.showcase.client.content.cell.ContactDatabase.ContactInfo>)"
          ]
        }
      ],
      "keywords": [
        "util",
        "set",
        "add",
        "put",
        "integer",
        "boolean",
        "hash",
        "object",
        "java",
        "map",
        "get"
      ]
    },
    {
      "method": "getLastScanned@806",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          },
          {
            "_call": "java.util.Date.Date(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Date",
      "file": "./java_projects/supersonic/subsonic-main/src/main/java/net/sourceforge/subsonic/service/SettingsService.java",
      "body": "public Date getLastScanned(){\n  String lastScanned=properties.getProperty(KEY_LAST_SCANNED);\n  return lastScanned == null ? null : new Date(Long.parseLong(lastScanned));\n}\n",
      "types": [
        "Date",
        "NumberFormatException",
        "Long",
        "Properties",
        "String"
      ],
      "apicalls": [
        "getProperty",
        "parseLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.Long.parseLong(java.lang.String)",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "util",
        "properties",
        "format",
        "string",
        "date",
        "exception",
        "java",
        "number",
        "property",
        "lang",
        "long",
        "get",
        "parse"
      ]
    },
    {
      "method": "updateCategories_args@4172",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic updateCategories_args(updateCategories_args other){\n  if (other.is_set_docid()) {\n    this.docid=other.docid;\n  }\n  if (other.is_set_categories()) {\n    Map<String,String> __this__categories=new HashMap<String,String>();\n    for (    Map.Entry<String,String> other_element : other.categories.entrySet()) {\n      String other_element_key=other_element.getKey();\n      String other_element_value=other_element.getValue();\n      String __this__categories_copy_key=other_element_key;\n      String __this__categories_copy_value=other_element_value;\n      __this__categories.put(__this__categories_copy_key,__this__categories_copy_value);\n    }\n    this.categories=__this__categories;\n  }\n}\n",
      "formalParam": [
        "updateCategories_args"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/indextank-engine/gen-java/com/flaptor/indextank/rpc/Indexer.java",
      "types": [
        "Set",
        "String",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "put",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "set",
        "util",
        "java",
        "entry",
        "put",
        "string",
        "map",
        "hash"
      ]
    },
    {
      "method": "removeElementAt@313",
      "body": "/** \n * Deletes the component at the specified index. <p> Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is invalid. <blockquote> <b>Note:</b> Although this method is not deprecated, the preferred method to use is <code>remove(int)</code>, which implements the <code>List</code> interface defined in the 1.2 Collections framework. </blockquote>\n * @param index   the index of the object to remove\n * @see #remove(int)\n * @see Vector#removeElementAt(int)\n */\npublic void removeElementAt(int index){\n  delegate.removeElementAt(index);\n  fireIntervalRemoved(this,index,index);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.removeElementAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractListModel.fireIntervalRemoved(java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/DefaultListModel.java",
      "types": [
        "Vector",
        "Integer",
        "AbstractListModel",
        "Object"
      ],
      "apicalls": [
        "removeElementAt",
        "fireIntervalRemoved"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.removeElementAt(int)",
            "javax.swing.AbstractListModel.fireIntervalRemoved(java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "abstract",
        "element",
        "model",
        "vector",
        "removed",
        "util",
        "javax",
        "remove",
        "list",
        "integer",
        "fire",
        "swing",
        "object",
        "java",
        "interval"
      ]
    },
    {
      "method": "runRestore@46",
      "body": "/** \n * @param string\n * @param string2\n * @param binary\n */\npublic void runRestore(String tableName,String[] columnNames,int numOfVersion,String inputPath) throws IOException {\n  CloudataConf nconf=new CloudataConf();\n  JobConf partitionJob=new JobConf(BackupJob.class);\n  FileSystem fs=FileSystem.get(partitionJob);\n  if (!fs.exists(new Path(inputPath))) {\n    throw new IOException(\"input path not exists:\" + inputPath);\n  }\n  if (CTable.existsTable(nconf,tableName)) {\n    throw new IOException(\"table already exists\" + tableName);\n  }\n  TableSchema tableSchema=new TableSchema(tableName,\"\",columnNames);\n  tableSchema.setNumOfVersion(numOfVersion);\n  CTable.createTable(nconf,tableSchema);\n  String columns=\"\";\n  for (  String eachColumn : columnNames) {\n    columns+=eachColumn.trim() + \",\";\n  }\n  columns=columns.substring(0,columns.length() - 1);\n  String jobName=tableName + \" restore\";\n  String tempDir=jobName + \"_\" + System.currentTimeMillis();\n  partitionJob.setJobName(tableName + \" restore\");\n  partitionJob.setMapperClass(RestoreBinaryPartitionMap.class);\n  FileInputFormat.addInputPath(partitionJob,new Path(inputPath));\n  partitionJob.setInputFormat(RestoreSequenceFileAsBinaryInputFormat.class);\n  partitionJob.set(DefaultTabletInputFormat.OUTPUT_TABLE,tableName);\n  FileOutputFormat.setOutputPath(partitionJob,new Path(tempDir));\n  partitionJob.setNumReduceTasks(0);\n  JobClient.runJob(partitionJob);\n  fs.delete(new Path(tempDir),true);\n  JobConf jobConf=new JobConf(BackupJob.class);\n  jobConf.setJobName(tableName + \" restore\");\n  jobConf.setMapperClass(RestoreBinaryMap.class);\n  FileInputFormat.addInputPath(jobConf,new Path(inputPath));\n  jobConf.setInputFormat(RestoreSequenceFileAsBinaryInputFormat.class);\n  jobConf.set(DefaultTabletInputFormat.OUTPUT_TABLE,tableName);\n  jobConf.set(DefaultTabletInputFormat.INPUT_COLUMN_LIST,columns);\n  FileOutputFormat.setOutputPath(jobConf,new Path(tempDir));\n  jobConf.setMaxMapAttempts(0);\n  jobConf.setNumReduceTasks(0);\n  JobClient.runJob(jobConf);\n  fs.delete(new Path(tempDir),true);\n}\n",
      "formalParam": [
        "String",
        "String[]",
        "int",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cloudata/src/java/org/cloudata/core/tablet/backup/RestoreBinaryJob.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "trim",
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "length",
        "trim",
        "string",
        "integer",
        "lang",
        "substring"
      ]
    },
    {
      "method": "concatAllArrays@42",
      "body": "public static byte[] concatAllArrays(byte[] data1,byte[]... remaining){\n  int bufLength=data1.length;\n  for (  byte[] arr : remaining) {\n    if (arr.length == 0) {\n      return data1;\n    }\n    bufLength+=arr.length;\n  }\n  int offset=data1.length;\n  byte[] buffer=Arrays.copyOf(data1,bufLength);\n  for (  byte[] arr : remaining) {\n    System.arraycopy(arr,0,buffer,offset,arr.length);\n    offset+=arr.length;\n  }\n  return buffer;\n}\n",
      "formalParam": [
        "byte[]",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.copyOf(byte[],int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/YubiHSM-java-api/src/main/java/org/unitedid/yhsm/utility/Utils.java",
      "types": [
        "Byte",
        "Arrays",
        "System",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "arraycopy",
        "copyOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.copyOf(byte[],int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "copy",
        "object",
        "util",
        "byte",
        "system",
        "integer",
        "lang",
        "arrays",
        "arraycopy",
        "java"
      ]
    },
    {
      "method": "markValid@96",
      "body": "public void markValid(){\n  _button.setBackground(_validColor);\n  _button.requestFocusInWindow();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.setBackground(java.awt.Color)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.requestFocusInWindow()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/launch4j-maven-plugin_1/src/main/java/net/sf/launch4j/binding/JToggleButtonBinding.java",
      "types": [
        "JComponent",
        "Color",
        "Boolean"
      ],
      "apicalls": [
        "requestFocusInWindow",
        "setBackground"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.setBackground(java.awt.Color)",
            "javax.swing.JComponent.requestFocusInWindow()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "request",
        "javax",
        "background",
        "swing",
        "j",
        "color",
        "window",
        "focus",
        "set",
        "component"
      ]
    },
    {
      "method": "setValueAt@1243",
      "body": "public void setValueAt(Object value,int row,int viewColumn){\n  getModel().setValueAt(value,row,convertColumnIndexToModel(viewColumn));\n}\n",
      "formalParam": [
        "Object",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.table.TableColumnModel.getColumn(int)",
            "node": "DAPICall",
            "_returns": "javax.swing.table.TableColumn",
            "_throws": []
          },
          {
            "_call": "javax.swing.table.TableModel.setValueAt(java.lang.Object,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/main/java/common/javax/swing/JTable.java",
      "types": [
        "Object",
        "TableModel",
        "TableColumn",
        "Integer",
        "TableColumnModel"
      ],
      "apicalls": [
        "getColumn",
        "setValueAt"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.table.TableColumnModel.getColumn(int)",
            "javax.swing.table.TableModel.setValueAt(java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "get",
        "object",
        "value",
        "integer",
        "set",
        "javax",
        "column",
        "swing",
        "model",
        "table"
      ]
    },
    {
      "method": "fail@219",
      "body": "public static synchronized void fail(String whyFailed){\n  Sysout.println(\"The test failed: \" + whyFailed);\n  Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n  if (mainThread == Thread.currentThread()) {\n    throw new RuntimeException(whyFailed);\n  }\n  theTestPassed=false;\n  testGeneratedInterrupt=true;\n  failureMessage=whyFailed;\n  mainThread.interrupt();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "_returns": "java.lang.Thread",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/java/awt/event/MouseEvent/SpuriousExitEnter/SpuriousExitEnter_2.java",
      "types": [
        "Integer",
        "Thread"
      ],
      "apicalls": [
        "interrupt",
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "current",
        "interrupt",
        "integer",
        "java",
        "thread"
      ]
    },
    {
      "method": "testAppendable@211",
      "body": "/** \n * Tests the  {@link Appendable} code.\n */\n@Test public void testAppendable(){\n  StringWriter writer=new StringWriter();\n  new JsonAppendableWriter(writer).object().value(\"abc\",\"def\").end().done();\n  assertEquals(\"{\\\"abc\\\":\\\"def\\\"}\",writer.toString());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/playn/core/tests/playn/core/json/InternalJsonWriterTest.java",
      "types": [
        "StringWriter",
        "String"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "writer",
        "io",
        "java",
        "string"
      ]
    },
    {
      "method": "testExecuteQueryShouldTakeCallbackParameterIntoAccountForScriptLanguageWhenNoResult@217",
      "body": "@Test public void testExecuteQueryShouldTakeCallbackParameterIntoAccountForScriptLanguageWhenNoResult(){\n  OpenStreetMap street=GisgraphyTestHelper.createOpenStreetMapForJohnKenedyStreet();\n  this.openStreetMapDao.save(street);\n  Pagination pagination=paginate().from(20).to(25);\n  Output output=Output.withFormat(OutputFormat.PHP).withIndentation();\n  StreetSearchQuery query=new StreetSearchQuery(street.getLocation(),1,pagination,output,street.getStreetType(),street.isOneWay(),null,null);\n  query.withCallback(\"doit\");\n  String content=streetSearchEngine.executeQueryToString(query);\n  Assert.assertTrue(content.startsWith(\"doit(\"));\n  Assert.assertTrue(content.endsWith(\");\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gisgraphy-mirror/gisgraphy/src/test/java/com/gisgraphy/domain/geoloc/service/geoloc/StreetSearchEngineTest.java",
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "startsWith",
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "starts",
        "lang",
        "string",
        "boolean",
        "java",
        "ends"
      ]
    },
    {
      "method": "isAccelerated@195",
      "body": "public boolean isAccelerated(){\n  GraphicsConfiguration tmpGc=gc;\n  if (tmpGc == null) {\n    tmpGc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\n  }\n  if (tmpGc instanceof ProxiedGraphicsConfig) {\n    Object proxyKey=((ProxiedGraphicsConfig)tmpGc).getProxyKey();\n    if (proxyKey != null) {\n      SurfaceDataProxy sdp=(SurfaceDataProxy)getCacheData(proxyKey);\n      return (sdp != null && sdp.isAccelerated());\n    }\n  }\n  return false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.GraphicsEnvironment"
          },
          {
            "_call": "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "java.awt.GraphicsDevice"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/awt/image/SurfaceManager.java",
      "types": [
        "HeadlessException",
        "GraphicsDevice",
        "GraphicsEnvironment"
      ],
      "apicalls": [
        "getLocalGraphicsEnvironment",
        "getDefaultScreenDevice"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()"
          ]
        }
      ],
      "keywords": [
        "awt",
        "local",
        "graphics",
        "device",
        "screen",
        "default",
        "get",
        "environment",
        "exception",
        "java",
        "headless"
      ]
    },
    {
      "method": "tabForCoordinate@71",
      "body": "/** \n * Invokes the <code>tabForCoordinate</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic int tabForCoordinate(JTabbedPane a,int b,int c){\n  int returnValue=((TabbedPaneUI)(uis.elementAt(0))).tabForCoordinate(a,b,c);\n  for (int i=1; i < uis.size(); i++) {\n    ((TabbedPaneUI)(uis.elementAt(i))).tabForCoordinate(a,b,c);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JTabbedPane",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/multi/MultiTabbedPaneUI.java",
      "types": [
        "Integer",
        "Vector"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "vector",
        "integer",
        "java"
      ]
    },
    {
      "method": "isSet@14692",
      "body": "/** \n * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise \n */\npublic boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase SUCCESS:\n    return isSetSuccess();\ncase EX:\n  return isSetEx();\n}\nthrow new IllegalStateException();\n}\n",
      "formalParam": [
        "_Fields"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.get(int)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/blur/interface/gen-java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "BitSet",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.get(int)"
          ]
        }
      ],
      "keywords": [
        "util",
        "integer",
        "bit",
        "java",
        "get",
        "boolean",
        "set"
      ]
    },
    {
      "method": "test_ConstructorIIIIII@98",
      "body": "/** \n * @tests java.util.Date#Date(int, int, int, int, int, int)\n */\n@TestTargetNew(level=TestLevel.COMPLETE,notes=\"\",method=\"Date\",args={int.class,int.class,int.class,int.class,int.class,int.class}) public void test_ConstructorIIIIII(){\n  Date d1=new Date(70,0,1,1,1,1);\n  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000 + 1000);\n  assertTrue(\"Created incorrect date\",d1.equals(d2));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date(int,int,int,int,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Date.getTimezoneOffset()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Date.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/tests/api/java/util/DateTest.java",
      "types": [
        "Date",
        "Integer",
        "Boolean",
        "Long",
        "Object"
      ],
      "apicalls": [
        "equals",
        "getTimezoneOffset"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date(int,int,int,int,int,int)",
            "java.util.Date.getTimezoneOffset()",
            "java.util.Date.Date(long)",
            "java.util.Date.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "get",
        "java",
        "boolean",
        "timezone",
        "long",
        "util",
        "offset",
        "object",
        "date",
        "integer"
      ]
    },
    {
      "method": "getContentLengthHeader@387",
      "body": "public BigInteger getContentLengthHeader(){\n  String lengthStr=getHeader(\"Content-Length\");\n  if (lengthStr == null) {\n    return null;\n  }\n  try {\n    return new BigInteger(lengthStr);\n  }\n catch (  NumberFormatException e) {\n    return null;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase(java.util.Locale)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.List<java.lang.String>",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "BigInteger",
      "file": "./java_projects/chemistry-opencmis/chemistry-opencmis-client/chemistry-opencmis-client-bindings/src/main/java/org/apache/chemistry/opencmis/client/bindings/spi/http/HttpUtils.java",
      "types": [
        "Map",
        "List",
        "Integer",
        "BigInteger",
        "String",
        "Boolean",
        "Object",
        "Locale"
      ],
      "apicalls": [
        "get",
        "isEmpty",
        "toLowerCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase(java.util.Locale)",
            "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.get(java.lang.Object)",
            "java.util.List<java.lang.String>.isEmpty()",
            "java.util.List<java.lang.String>.get(int)",
            "java.math.BigInteger.BigInteger(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "math",
        "boolean",
        "string",
        "get",
        "empty",
        "case",
        "locale",
        "map",
        "lang",
        "big",
        "lower",
        "object",
        "java",
        "list",
        "util"
      ]
    },
    {
      "method": "launchCriteriaBuilder@861",
      "body": "public void launchCriteriaBuilder(){\n  MappingClass mc=mappingAdapter.getMappingClass(icoChoiceObject.getChoice());\n  if (mc == null) {\n    EObject parent=icoChoiceObject.getParent();\n    while (parent != null && mc == null) {\n      mc=mappingAdapter.getMappingClass(parent);\n      parent=parent.eContainer();\n    }\n  }\n  if (mc == null) {\n    Shell shell=UiPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getShell();\n    MessageDialog.openError(shell,NEED_MAPPING_CLASS_TITLE,NEED_MAPPING_CLASS_MSG);\n    return;\n  }\n  new BuilderTreeProvider();\n  ElementViewerFactory.setCriteriaStrategy(new ChoiceCriteriaStrategy());\n  List lstMappingClassWrapper=new ArrayList(1);\n  lstMappingClassWrapper.addAll(getParentMappingClasses(mc));\n  lstMappingClassWrapper.add(mc);\n  ElementViewerFactory.setViewerInput(lstMappingClassWrapper);\n  CriteriaBuilder builder=getCriteriaBuilder();\n  String sSql=icoChoiceObject.getSqlCriteria(getSelectedOption());\n  if (sSql != null && !sSql.trim().equals(\"\")) {\n    builder.setLanguageObject(getCriteria(mc,sSql));\n  }\n else {\n    builder.setLanguageObject(null);\n  }\n  int status=builder.open();\n  if (status == Window.OK) {\n    LanguageObject newCriteria=builder.getLanguageObject();\n    final String sqlCriteria=SQLStringVisitor.getSQLString(newCriteria);\n    newCriteria=getCriteria(mc,sqlCriteria);\n    updateCriteriaForSelectedRow(sqlCriteria,newCriteria);\n  }\n  getLaunchCriteriaBuilderAction().selectionChanged();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.mapping.ui/src/org/teiid/designer/mapping/ui/choice/ChoicePanel.java",
      "types": [
        "ArrayList",
        "String",
        "Object",
        "Integer",
        "Collection",
        "List",
        "Boolean"
      ],
      "apicalls": [
        "addAll",
        "equals",
        "trim",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList(int)",
            "java.util.List.addAll(java.util.Collection)",
            "java.util.List.add(java.lang.Object)",
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "add",
        "trim",
        "object",
        "collection",
        "util",
        "lang",
        "list",
        "string",
        "array",
        "equals",
        "integer"
      ]
    },
    {
      "method": "SQLException@129",
      "body": "/** \n * Constructs a <code>SQLException</code> object. The <code>reason</code>, <code>SQLState</code> are initialized to <code>null</code> and the vendor code is initialized to 0. The <code>cause</code> is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method.<p>\n */\npublic SQLException(){\n  super();\n  this.SQLState=null;\n  this.vendorCode=0;\n  if (!(this instanceof SQLWarning)) {\n    if (DriverManager.getLogWriter() != null) {\n      printStackTrace(DriverManager.getLogWriter());\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.sql.DriverManager.getLogWriter()",
                "node": "DAPICall",
                "_returns": "java.io.PrintWriter",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.sql.DriverManager.getLogWriter()",
                "node": "DAPICall",
                "_returns": "java.io.PrintWriter",
                "_throws": []
              },
              {
                "_call": "java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/java/sql/SQLException.java",
      "types": [
        "DriverManager",
        "PrintWriter",
        "Throwable"
      ],
      "apicalls": [
        "getLogWriter",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.DriverManager.getLogWriter()",
            "java.sql.DriverManager.getLogWriter()",
            "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
          ]
        },
        {
          "calls": [
            "java.sql.DriverManager.getLogWriter()"
          ]
        }
      ],
      "keywords": [
        "sql",
        "stack",
        "log",
        "java",
        "get",
        "writer",
        "trace",
        "lang",
        "print",
        "driver",
        "throwable",
        "manager"
      ]
    },
    {
      "method": "waitFor@377",
      "body": "/** \n * <p>Waits for this  {@link BayeuxClient} to reach the given state(s) within the given time.</p>\n * @param waitMs the time to wait to reach the given state(s)\n * @param state  the state to reach\n * @param states additional states to reach in alternative\n * @return true if one of the state(s) has been reached within the given time, false otherwise\n */\npublic boolean waitFor(long waitMs,State state,State... states){\n  long start=System.nanoTime();\n  List<State> waitForStates=new ArrayList<>();\n  waitForStates.add(state);\n  waitForStates.addAll(Arrays.asList(states));\nsynchronized (this) {\n    long elapsed=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    while (elapsed < waitMs) {\n      if (stateUpdaters == 0) {\n        State currentState=getState();\n        for (        State s : waitForStates) {\n          if (currentState.implies(s))           return true;\n        }\n      }\n      try {\n        wait(waitMs - elapsed);\n      }\n catch (      InterruptedException x) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n      elapsed=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    }\n    return false;\n  }\n}\n",
      "formalParam": [
        "long",
        "State",
        "State"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.nanoTime()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.nanoTime()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.TimeUnit.toMillis(long)",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "_returns": "java.lang.Thread",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.System.nanoTime()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.TimeUnit.toMillis(long)",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/cometd/cometd-java/cometd-java-client/src/main/java/org/cometd/client/BayeuxClient.java",
      "types": [
        "Long",
        "Arrays",
        "Integer",
        "System",
        "Thread",
        "TimeUnit",
        "List"
      ],
      "apicalls": [
        "nanoTime",
        "currentThread",
        "asList",
        "interrupt",
        "toMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.nanoTime()",
            "java.util.Arrays.asList(T[])",
            "java.lang.System.nanoTime()",
            "java.util.concurrent.TimeUnit.toMillis(long)",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()",
            "java.lang.System.nanoTime()",
            "java.util.concurrent.TimeUnit.toMillis(long)"
          ]
        }
      ],
      "keywords": [
        "system",
        "integer",
        "current",
        "nano",
        "concurrent",
        "time",
        "arrays",
        "util",
        "millis",
        "list",
        "interrupt",
        "long",
        "java",
        "thread",
        "unit",
        "lang"
      ]
    },
    {
      "method": "Change@405",
      "formalParam": [
        "Change.Key",
        "Change.Id",
        "Account.Id",
        "Branch.NameKey"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.sql.Timestamp.Timestamp(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/gerrit/gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/Change.java",
      "body": "public Change(final Change.Key newKey,final Change.Id newId,final Account.Id ownedBy,final Branch.NameKey forBranch){\n  changeKey=newKey;\n  changeId=newId;\n  createdOn=new Timestamp(System.currentTimeMillis());\n  lastUpdatedOn=createdOn;\n  owner=ownedBy;\n  dest=forBranch;\n  setStatus(Status.NEW);\n  setLastSha1MergeTested(null);\n}\n",
      "types": [
        "Long",
        "System",
        "Timestamp"
      ],
      "apicalls": [
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.sql.Timestamp.Timestamp(long)"
          ]
        }
      ],
      "keywords": [
        "time",
        "millis",
        "system",
        "current",
        "sql",
        "lang",
        "timestamp",
        "java",
        "long"
      ]
    },
    {
      "method": "showOpenDialog@47",
      "body": "public static File showOpenDialog(String[] exts){\n  JFileChooser dialog=new JFileChooser();\n  if (exts != null) {\n    dialog.setFileFilter(new ExtensionFilter(exts));\n  }\n  int returnVal=dialog.showOpenDialog(null);\n  if (returnVal == JFileChooser.APPROVE_OPTION) {\n    return dialog.getSelectedFile();\n  }\n  return null;\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JFileChooser.JFileChooser()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JFileChooser.setFileFilter(javax.swing.filechooser.FileFilter)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JFileChooser.showOpenDialog(java.awt.Component)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.awt.HeadlessException"
            ]
          },
          {
            "_call": "javax.swing.JFileChooser.getSelectedFile()",
            "node": "DAPICall",
            "_returns": "java.io.File",
            "_throws": []
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/worldedit/src/main/java/com/sk89q/worldedit/util/FileDialogUtil.java",
      "types": [
        "JFileChooser",
        "Collection",
        "FileFilter",
        "List",
        "Integer",
        "Component",
        "HashSet",
        "Arrays",
        "File",
        "HeadlessException",
        "String"
      ],
      "apicalls": [
        "asList",
        "setFileFilter",
        "showOpenDialog",
        "getSelectedFile"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JFileChooser.JFileChooser()",
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
            "javax.swing.JFileChooser.setFileFilter(javax.swing.filechooser.FileFilter)",
            "javax.swing.JFileChooser.showOpenDialog(java.awt.Component)",
            "javax.swing.JFileChooser.getSelectedFile()"
          ]
        }
      ],
      "keywords": [
        "component",
        "javax",
        "hash",
        "string",
        "selected",
        "chooser",
        "arrays",
        "util",
        "exception",
        "swing",
        "show",
        "set",
        "get",
        "integer",
        "open",
        "list",
        "collection",
        "j",
        "filter",
        "dialog",
        "headless",
        "file",
        "java"
      ]
    },
    {
      "method": "readCustomArguments@42",
      "body": "public List<String> readCustomArguments(){\n  File file=new File(parentDirectory,FILE_NAME);\n  if (!file.exists()) {\n    return emptyList();\n  }\n  try {\n    List<String> lines=Files.readLines(file,Charsets.UTF_8);\n    return buildArgumentList(lines);\n  }\n catch (  IOException e) {\n    return emptyList();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/infinitest/infinitest-lib/src/main/java/org/infinitest/FileCustomJvmArgumentReader.java",
      "types": [
        "List",
        "File",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "split",
        "add",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "$NOT$java.io.File.exists()",
            "java.lang.String.split(java.lang.String)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "split",
        "add",
        "list",
        "lang",
        "string",
        "exists",
        "file",
        "io",
        "boolean",
        "util"
      ]
    },
    {
      "method": "getInstance@80",
      "body": "/** \n * Instance getter.\n * @return Singleton Instance\n */\npublic static IManager getInstance(){\n  if (AdapterManager.selfInstance == null) {\n    if (Config.getString(Constants.idbProperties,\"useMockManager\").equals(\"true\")) {\n      try {\n        AdapterManager.selfInstance=MockNrpsManager.getInstance();\n      }\n catch (      final DatabaseException e) {\n        e.printStackTrace();\n      }\n    }\n else {\n      AdapterManager.selfInstance=new AdapterManager(false);\n    }\n  }\n  return AdapterManager.selfInstance;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "IManager",
      "file": "./java_projects/harmony/harmony.idb/src/main/java/org/opennaas/extensions/idb/reservation/AdapterManager.java",
      "types": [
        "String",
        "HashMap",
        "NumberFormatException",
        "Long"
      ],
      "apicalls": [
        "parseLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.lang.Long.parseLong(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "parse",
        "java",
        "number",
        "format",
        "lang",
        "hash",
        "long",
        "map",
        "string",
        "util"
      ]
    },
    {
      "method": "addOutcome@107",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.listIterator()",
            "node": "DAPICall",
            "_returns": "java.util.ListIterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ListIterator<Tau_E>.next()",
                "node": "DAPICall",
                "_returns": "Tau_E",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ListIterator<Tau_E>.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/recommenders/plugins/org.eclipse.recommenders.jayes/src/org/eclipse/recommenders/jayes/BayesNode.java",
      "body": "public int addOutcome(final String name){\n  if (!outcomeIndices.containsKey(name)) {\n    outcomeIndices.put(name,outcomes);\n    outcomes++;\n    adjustFactordimensions();\n    return outcomes - 1;\n  }\n  throw new IllegalArgumentException(\"Outcome already exists\");\n}\n",
      "types": [
        "ListIterator",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "next",
        "hasNext",
        "listIterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.listIterator()",
            "java.util.ListIterator<Tau_E>.hasNext()",
            "java.util.ListIterator<Tau_E>.next()",
            "java.util.ListIterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "next",
        "iterator",
        "java",
        "list",
        "boolean"
      ]
    },
    {
      "method": "notifyEnd@352",
      "body": "public void notifyEnd(){\n  printResponse(\"<response command=\\\"run\\\"\\r\\n\" + \"status=\\\"stopped\\\"\" + \" reason=\\\"ok\\\"\"+ \" transaction_id=\\\"\" + m_runTransctionId + \"\\\">\\r\\n\"+ \"</response>\\r\\n\"+ \"\");\n  cleanUpTempFiles();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.PrintStream.print(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.write(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.write(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/vjet/core/runtime/org.ebayopensource.vjet.rt.jsdebugger/src/org/ebayopensource/dsf/js/dbgp/DBGPDebugger.java",
      "types": [
        "Integer",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "flush",
        "length",
        "print",
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.io.PrintStream.print(int)",
            "java.io.PrintStream.write(int)",
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.write(int)",
            "java.io.PrintStream.flush()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "lang",
        "print",
        "length",
        "flush",
        "write",
        "integer",
        "string",
        "io",
        "java"
      ]
    },
    {
      "method": "contains@82",
      "formalParam": [
        "AWTEventListener",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.Map<java.awt.event.AWTEventListener,java.lang.Long>.containsKey(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.awt.event.AWTEventListener,java.lang.Long>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Long",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/fest-swing-1.x/fest-swing/src/test/java/org/fest/swing/test/awt/ToolkitStub.java",
      "body": "public boolean contains(AWTEventListener listener,long eventMask){\n  if (!eventListeners.containsKey(listener))   return false;\n  long storedMask=eventListeners.get(listener);\n  return storedMask == eventMask;\n}\n",
      "types": [
        "Long",
        "AWTEventListener",
        "Object",
        "Boolean",
        "Map"
      ],
      "apicalls": [
        "containsKey",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map<java.awt.event.AWTEventListener,java.lang.Long>.containsKey(java.lang.Object)",
            "java.util.Map<java.awt.event.AWTEventListener,java.lang.Long>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "contains",
        "boolean",
        "java",
        "awt",
        "event",
        "key",
        "util",
        "listener",
        "map",
        "object",
        "long",
        "get"
      ]
    },
    {
      "method": "createValidMask@2557",
      "body": "/** \n * Creates a bit-packed valid-mask for all pixels of the scene covered by this product. The given expression is considered to be boolean, if it evaluates to <code>true</code> the related bit in the mask is set.\n * @param expression the boolean expression, e.g. \"l2_flags.LAND && reflec_10 >= 0.0\"\n * @param pm         a progress monitor\n * @return a bit-packed mask for all pixels of the scene, never null\n * @throws IOException if an I/O error occurs\n * @see #parseExpression(String)\n * @deprecated since BEAM 4.7, use {@link #getMaskGroup()} instead\n */\n@Deprecated public BitRaster createValidMask(final String expression,final ProgressMonitor pm) throws IOException {\n  try {\n    final Term term=getProduct().parseExpression(expression);\n    return createValidMask(term,pm);\n  }\n catch (  ParseException e) {\n    final IOException ioException=new IOException(\"Unable to load the valid pixel mask, parse error: \" + e.getMessage());\n    ioException.initCause(e);\n    throw ioException;\n  }\n}\n",
      "formalParam": [
        "String",
        "ProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.IOException.IOException(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "BitRaster",
      "file": "./java_projects/beam/beam-core/src/main/java/org/esa/beam/framework/datamodel/Product.java",
      "types": [
        "Throwable",
        "String",
        "IOException"
      ],
      "apicalls": [
        "initCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.IOException.IOException(java.lang.String)",
            "java.lang.Throwable.initCause(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "init",
        "lang",
        "string",
        "cause",
        "exception",
        "java",
        "io",
        "throwable"
      ]
    },
    {
      "method": "createStream@246",
      "body": "public DataStream createStream(){\n  try {\n    LabeledGaussianStream stream=LabeledGaussianStream.createFromXML(getXML());\n    return stream;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.StringBuffer.StringBuffer()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer",
                "_throws": []
              },
              {
                "_call": "java.lang.StringBuffer.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "DataStream",
      "file": "./java_projects/streams/stream-generator/src/main/java/stream/generator/ui/StreamEditor.java",
      "types": [
        "StringBuffer",
        "Object",
        "Throwable",
        "String"
      ],
      "apicalls": [
        "toString",
        "append",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "java",
        "throwable",
        "append",
        "buffer",
        "print",
        "string",
        "trace",
        "stack",
        "object",
        "lang"
      ]
    },
    {
      "method": "testFieldModifyEvent@49",
      "body": "/** \n * This testcase is for FIELD_MODIFICATION event. <BR>It FieldModification002Debuggee that modifies the value of its own fields  and verifies that requested FIELD_MODIFICATION events occur and correct type tag is returned for each event.\n */\npublic void testFieldModifyEvent(){\n  logWriter.println(\"FieldModification002Test started\");\n  logWriter.println(\"=> Check capability: canWatchFieldModification\");\n  debuggeeWrapper.vmMirror.capabilities();\n  boolean isCapability=debuggeeWrapper.vmMirror.targetVMCapabilities.canWatchFieldModification;\n  if (!isCapability) {\n    logWriter.println(\"##WARNING: this VM doesn't possess capability: canWatchFieldModification\");\n    return;\n  }\n  synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY);\n  String classSignature=\"L\" + getDebuggeeClassName().replace('.','/') + \";\";\n  hookFieldModification(classSignature,\"testBoolField\",JDWPConstants.Tag.BOOLEAN_TAG);\n  hookFieldModification(classSignature,\"testByteField\",JDWPConstants.Tag.BYTE_TAG);\n  hookFieldModification(classSignature,\"testCharField\",JDWPConstants.Tag.CHAR_TAG);\n  hookFieldModification(classSignature,\"testShortField\",JDWPConstants.Tag.SHORT_TAG);\n  hookFieldModification(classSignature,\"testIntField\",JDWPConstants.Tag.INT_TAG);\n  hookFieldModification(classSignature,\"testLongField\",JDWPConstants.Tag.LONG_TAG);\n  hookFieldModification(classSignature,\"testFloatField\",JDWPConstants.Tag.FLOAT_TAG);\n  hookFieldModification(classSignature,\"testDoubleField\",JDWPConstants.Tag.DOUBLE_TAG);\n  hookFieldModification(classSignature,\"testObjectField\",JDWPConstants.Tag.OBJECT_TAG);\n  hookFieldModification(classSignature,\"testThreadField\",JDWPConstants.Tag.THREAD_TAG);\n  hookFieldModification(classSignature,\"testThreadGroupField\",JDWPConstants.Tag.THREAD_GROUP_TAG);\n  hookFieldModification(classSignature,\"testClassField\",JDWPConstants.Tag.CLASS_OBJECT_TAG);\n  hookFieldModification(classSignature,\"testClassLoaderField\",JDWPConstants.Tag.CLASS_LOADER_TAG);\n  hookFieldModification(classSignature,\"testStringField\",JDWPConstants.Tag.STRING_TAG);\n  hookFieldModification(classSignature,\"testIntArrayField\",JDWPConstants.Tag.ARRAY_TAG);\n  hookFieldModification(classSignature,\"testStringArrayField\",JDWPConstants.Tag.ARRAY_TAG);\n  hookFieldModification(classSignature,\"testObjectArrayField\",JDWPConstants.Tag.ARRAY_TAG);\n  logWriter.println(\"FieldModification002Test done\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.replace(char,char)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/jdwp/Events/FieldModification002Test.java",
      "types": [
        "Class",
        "String",
        "Character"
      ],
      "apicalls": [
        "getName",
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.replace(char,char)"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "class",
        "character",
        "java",
        "replace",
        "name",
        "string"
      ]
    },
    {
      "method": "acquire@1184",
      "body": "/** \n * Acquires in exclusive mode, ignoring interrupts.  Implemented by invoking at least once  {@link #tryAcquire}, returning on success.  Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking  {@link #tryAcquire} until success.  This method can be usedto implement method  {@link Lock#lock}.\n * @param arg the acquire argument.  This value is conveyed to{@link #tryAcquire} but is otherwise uninterpreted andcan represent anything you like.\n */\npublic final void acquire(int arg){\n  if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE),arg))   selfInterrupt();\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "_returns": "java.lang.Thread",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Thread.interrupt()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "_returns": "java.lang.Thread",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Thread.interrupted()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/java/util/concurrent/locks/AbstractQueuedSynchronizer.java",
      "types": [
        "Thread",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "currentThread",
        "interrupt",
        "interrupted"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupted()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupted()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "current",
        "interrupt",
        "java",
        "integer",
        "boolean",
        "thread",
        "interrupted"
      ]
    },
    {
      "method": "ProjectElementHelper@65",
      "body": "ProjectElementHelper(@NotNull ProjectBuilder pb,@NotNull ProjectElement element){\n  super(pb.getBaseEnvironment());\n  this.element=element;\n  executedCommands=new HashSet<Command>();\n  infoMap=new TreeMap<String,Object>();\n  sourceFile=pb.sourceFile(element);\n  projectDirectory=findProjectDir(element,sourceFile);\n  initialized=false;\n  putProperty(NAME_PROP_KEY,getName());\n  putProperty(ID_PROP_KEY,getId());\n  putProperty(DIR_PROP_KEY,element.getDir());\n}\n",
      "formalParam": [
        "ProjectBuilder",
        "ProjectElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.Object>.TreeMap<String,Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/apb/modules/apb-base/src/apb/ProjectElementHelper.java",
      "types": [
        "String",
        "HashSet",
        "TreeMap",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.TreeMap<java.lang.String,java.lang.Object>.TreeMap<String,Object>()"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "hash",
        "string",
        "map",
        "set",
        "tree",
        "object"
      ]
    },
    {
      "method": "PTimerReplPort@165",
      "body": "public PTimerReplPort(IEventReceiver actor,String name,int localId,Address[] addr,Address[] peerAddress){\n  replication=addr == null ? 0 : addr.length;\n  ports=new ArrayList<PTimer.PTimerPort>(replication);\n  for (int i=0; i < replication; ++i) {\n    ports.add(new PTimerPort(actor,name + i,localId,i,addr[i],peerAddress[i]));\n  }\n}\n",
      "formalParam": [
        "IEventReceiver",
        "String",
        "int",
        "Address[]",
        "Address[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/etrice/runtime/org.eclipse.etrice.modellib.java/src-gen/room/basic/service/timing/PTimer.java",
      "types": [
        "Boolean",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "add",
        "boolean",
        "java",
        "util",
        "integer",
        "list",
        "array"
      ]
    },
    {
      "method": "testJobTrackerRestartWithCS@26",
      "body": "/** \n * Test single queue. <p> Submit a job with more M/R tasks than total capacity. Full queue capacity should be utilized and remaining M/R tasks should wait for slots to be available.\n * @throws Exception\n */\npublic void testJobTrackerRestartWithCS() throws Exception {\n  try {\n    Properties schedulerProps=new Properties();\n    schedulerProps.put(\"mapred.capacity-scheduler.queue.default.guaranteed-capacity\",\"100\");\n    Properties clusterProps=new Properties();\n    clusterProps.put(\"mapred.tasktracker.map.tasks.maximum\",String.valueOf(2));\n    clusterProps.put(\"mapred.tasktracker.reduce.tasks.maximum\",String.valueOf(0));\n    startCluster(1,clusterProps,schedulerProps);\n    ControlledMapReduceJobRunner jobRunner=ControlledMapReduceJobRunner.getControlledMapReduceJobRunner(getJobConf(),4,0);\n    jobRunner.start();\n    ControlledMapReduceJob controlledJob=jobRunner.getJob();\n    JobID myJobID=jobRunner.getJobID();\n    JobInProgress myJob=getJobTracker().getJob(myJobID);\n    ControlledMapReduceJob.waitTillNTasksStartRunning(myJob,true,2);\n    LOG.info(\"Trying to finish 2 maps\");\n    controlledJob.finishNTasks(true,2);\n    ControlledMapReduceJob.waitTillNTotalTasksFinish(myJob,true,2);\n    assertTrue(\"Number of maps finished\",myJob.finishedMaps() == 2);\n    JobClient jobClient=new JobClient(getMrCluster().createJobConf());\n    getMrCluster().stopJobTracker();\n    getMrCluster().getJobTrackerConf().setBoolean(\"mapred.jobtracker.restart.recover\",true);\n    getMrCluster().startJobTracker();\n    UtilsForTests.waitForJobTracker(jobClient);\n    ControlledMapReduceJob.waitTillNTasksStartRunning(myJob,true,1);\n    controlledJob.finishNTasks(true,2);\n    ControlledMapReduceJob.waitTillNTotalTasksFinish(myJob,true,2);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    tearDown();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.Properties.Properties()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.util.Properties.Properties()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.String.valueOf(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              },
              {
                "_call": "java.lang.String.valueOf(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/contrib/capacity-scheduler/src/test/org/apache/hadoop/mapred/TestJobTrackerRestartWithCS.java",
      "types": [
        "String",
        "Integer",
        "Properties",
        "Object",
        "Throwable",
        "Hashtable"
      ],
      "apicalls": [
        "printStackTrace",
        "valueOf",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "java.util.Properties.Properties()",
            "java.lang.String.valueOf(int)",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "java.lang.String.valueOf(int)",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "java.util.Properties.Properties()",
            "java.lang.String.valueOf(int)",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "java.lang.String.valueOf(int)",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "stack",
        "trace",
        "util",
        "java",
        "integer",
        "print",
        "throwable",
        "string",
        "properties",
        "hashtable",
        "object",
        "lang",
        "value",
        "put"
      ]
    },
    {
      "method": "formatter@58",
      "body": "public static DateFormat formatter(String template,String zoneName){\n  return formatter(template,TimeZone.getTimeZone(zoneName));\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TimeZone.getTimeZone(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.TimeZone"
          },
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.setTimeZone(java.util.TimeZone)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "DateFormat",
      "file": "./java_projects/BeeQueue/src/org/beequeue/time/DateUtil.java",
      "types": [
        "DateFormat",
        "SimpleDateFormat",
        "TimeZone",
        "String"
      ],
      "apicalls": [
        "getTimeZone",
        "setTimeZone"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TimeZone.getTimeZone(java.lang.String)",
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.setTimeZone(java.util.TimeZone)"
          ]
        }
      ],
      "keywords": [
        "simple",
        "util",
        "text",
        "string",
        "date",
        "zone",
        "time",
        "get",
        "java",
        "format",
        "set"
      ]
    },
    {
      "method": "prepareAndCommit@351",
      "body": "public int prepareAndCommit(TxnState aState) throws UnknownTransactionException {\n  try {\n    theLock.readLock().lock();\n    aState.vote();\n    boolean dontLog=((aState.isIdentity()) || (aState.hasNoOps()));\n    Integer myResult=(Integer)execute(new PrepCommitCommand(aState),dontLog);\n    theLock.readLock().unlock();\n    aState.doFinalize();\n    theCheckpointTrigger.loggedCommand();\n    return myResult.intValue();\n  }\n catch (  InterruptedException anIE) {\n    theLogger.log(Level.SEVERE,\"Failed to log prepCommit\",anIE);\n    throw new UnknownTransactionException(\"Failed to log prepCommit - interrupted\");\n  }\ncatch (  Exception anE) {\n    theLock.readLock().unlock();\n    theLogger.log(Level.SEVERE,\"Failed to log prepCommit\",anE);\n    throw new UnknownTransactionException(\"Failed to log prepCommit\");\n  }\n}\n",
      "formalParam": [
        "TxnState"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
                "node": "DAPICall",
                "_returns": "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock",
                "_throws": []
              },
              {
                "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
                "node": "DAPICall",
                "_returns": "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock",
                "_throws": []
              },
              {
                "_call": "java.lang.Integer.intValue()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/blitzjavaspaces/src/org/dancres/blitz/txn/TxnManager.java",
      "types": [
        "String",
        "Level",
        "concurrent",
        "Integer",
        "Throwable",
        "Logger"
      ],
      "apicalls": [
        "log",
        "readLock",
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
            "java.lang.Integer.intValue()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
            "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": [
        "locks",
        "util",
        "lang",
        "value",
        "reentrant",
        "lock",
        "read",
        "concurrent",
        "java",
        "level",
        "write",
        "log",
        "logger",
        "int",
        "integer",
        "logging",
        "string",
        "throwable"
      ]
    },
    {
      "method": "updateCustomers@86",
      "body": "@Override public Response updateCustomers(ArrayList<Doc02Customers> customers){\n  try {\n    ArrayList list=new ArrayList();\n    for (    Doc02Customers o : customers) {\n      o=em.merge(o);\n      list.add(o);\n    }\n    em.flush();\n    customers.clear();\n    customers.addAll(list);\n    return new VOListResponse(customers,false,customers.size());\n  }\n catch (  OptimisticLockException ex) {\n    return new ErrorResponse(\"Customer has been already updated by another user.\");\n  }\ncatch (  Throwable ex) {\n    ex.printStackTrace();\n    Throwable t=ex;\n    while (t.getCause() != null)     t=t.getCause();\n    return new ErrorResponse(t.getMessage());\n  }\n}\n",
      "formalParam": [
        "ArrayList<Doc02Customers>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Response",
      "file": "./java_projects/oswing/srcdemo/demo47/demo47EJB/ejbModule/demo47/server/CustomersBean.java",
      "types": [
        "ArrayList",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "add",
        "object",
        "list",
        "boolean",
        "java",
        "util",
        "array"
      ]
    },
    {
      "method": "sort@132",
      "formalParam": [
        "C[]",
        "Comparator<C>",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
                    "node": "DAPICall",
                    "_returns": "int",
                    "_throws": []
                  }
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/eXist-1.4.x/src/org/exist/util/InsertionSort.java",
      "body": "public final static <C>void sort(C[] a,Comparator<C> comp,int lo0,int hi0){\n  if (lo0 >= hi0)   return;\n  if (comp.compare(a[lo0],a[lo0 + 1]) > 0) {\n    SwapVals.swap(a,lo0,lo0 + 1);\n  }\n  if (lo0 + 1 == hi0)   return;\n  for (int i=lo0 + 1; i < hi0; i++) {\n    C temp=a[i + 1];\n    if (comp.compare(temp,a[i]) < 0) {\n      int j;\n      for (j=i; j >= lo0 && comp.compare(temp,a[j]) < 0; j--) {\n        a[j + 1]=a[j];\n      }\n      a[j + 1]=temp;\n    }\n  }\n}\n",
      "types": [
        "Comparator",
        "Integer"
      ],
      "apicalls": [
        "compare"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
            "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)"
          ]
        },
        {
          "calls": [
            "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
            "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
            "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)",
            "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)"
          ]
        }
      ],
      "keywords": [
        "compare",
        "comparator",
        "util",
        "integer",
        "java"
      ]
    },
    {
      "method": "testConvertToStringFromDataHandler@274",
      "body": "public void testConvertToStringFromDataHandler(){\n  String inStr=\"Sample Data\";\n  DataSource ds=new ByteArrayDataSource(inStr.getBytes());\n  DataHandler dh=new DataHandler(ds);\n  String rawOutStr=ConverterUtil.convertToString(dh);\n  String outStr=new String(Base64.decode(rawOutStr));\n  assertEquals(\"Not expected content\",inStr,outStr);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/axis2-java/modules/adb/test/org/apache/axis2/databinding/utils/ConverterUtilTest.java",
      "types": [
        "String"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.lang.String.String(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "bytes",
        "string",
        "lang"
      ]
    },
    {
      "method": "nextGaussian@154",
      "body": "/** \n * Pseudo-randomly generates (approximately) a normally distributed {@code double} value with mean 0.0 and a standard deviation valueof  {@code 1.0} using the <i>polar method<i> of G. E. P. Box, M.E. Muller, and G. Marsaglia, as described by Donald E. Knuth in <i>The Art of Computer Programming, Volume 2: Seminumerical Algorithms</i>, section 3.4.1, subsection C, algorithm P.\n * @return a random {@code double}\n * @see #nextDouble\n */\npublic synchronized double nextGaussian(){\n  if (haveNextNextGaussian) {\n    haveNextNextGaussian=false;\n    return nextNextGaussian;\n  }\n  double v1, v2, s;\n  do {\n    v1=2 * nextDouble() - 1;\n    v2=2 * nextDouble() - 1;\n    s=v1 * v1 + v2 * v2;\n  }\n while (s >= 1);\n  double norm=Math.sqrt(-2 * Math.log(s) / s);\n  nextNextGaussian=v2 * norm;\n  haveNextNextGaussian=true;\n  return v1 * norm;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.log(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.sqrt(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/harmony-classlib/modules/luni/src/main/java/java/util/Random.java",
      "types": [
        "Math",
        "Double"
      ],
      "apicalls": [
        "log",
        "sqrt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.log(double)",
            "java.lang.Math.sqrt(double)"
          ]
        }
      ],
      "keywords": [
        "double",
        "math",
        "log",
        "java",
        "lang",
        "sqrt"
      ]
    },
    {
      "method": "buildWidget@45",
      "body": "public Widget buildWidget(String elementName,Map<String,String> attributes,GwtMetawidget metawidget){\n  String name=attributes.get(NAME);\n  if (name == null) {\n    return null;\n  }\n  Widget widget=null;\n  Set<Widget> existingUnusedWidgets=metawidget.fetchExistingUnusedWidgets();\n  for (  Widget widgetExisting : existingUnusedWidgets) {\n    if (!(widgetExisting instanceof HasName)) {\n      continue;\n    }\n    if (name.equals(((HasName)widgetExisting).getName())) {\n      widget=widgetExisting;\n      break;\n    }\n  }\n  if (widget != null) {\n    existingUnusedWidgets.remove(widget);\n  }\n  return widget;\n}\n",
      "formalParam": [
        "String",
        "Map<String,String>",
        "GwtMetawidget"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "Widget",
      "file": "./java_projects/metawidget/modules/gwt/core/src/main/java/org/metawidget/gwt/client/widgetbuilder/OverriddenWidgetBuilder.java",
      "types": [
        "String",
        "Object",
        "Boolean",
        "Map"
      ],
      "apicalls": [
        "equals",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "util",
        "map",
        "object",
        "boolean",
        "string",
        "equals",
        "java",
        "lang"
      ]
    },
    {
      "method": "read@194",
      "body": "public static StringBuffer read(Reader reader) throws IOException {\n  StringBuffer s=new StringBuffer();\n  try {\n    char[] charBuffer=new char[8196];\n    int chars=reader.read(charBuffer);\n    while (chars != -1) {\n      s.append(charBuffer,0,chars);\n      chars=reader.read(charBuffer);\n    }\n  }\n  finally {\n    try {\n      reader.close();\n    }\n catch (    IOException e) {\n    }\n  }\n  return s;\n}\n",
      "formalParam": [
        "Reader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.Reader.read(char[])",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.lang.StringBuffer.append(char[],int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.io.Reader.read(char[])",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.Reader.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "StringBuffer",
      "file": "./java_projects/eclipse.platform.text/org.eclipse.core.filebuffers.tests/src/org/eclipse/core/filebuffers/tests/FileTool.java",
      "types": [
        "Character",
        "StringBuffer",
        "Integer",
        "Reader",
        "IOException"
      ],
      "apicalls": [
        "append",
        "read",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.io.Reader.read(char[])",
            "java.lang.StringBuffer.append(char[],int,int)",
            "java.io.Reader.read(char[])",
            "java.io.Reader.close()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "read",
        "io",
        "integer",
        "lang",
        "exception",
        "buffer",
        "reader",
        "close",
        "append",
        "character"
      ]
    },
    {
      "method": "isEmpty@193",
      "body": "/** \n * Check if time series data present for index If row == -1 return false if non-empty data entry exists for at least one row associated with index\n */\npublic boolean isEmpty(int index,int row){\n  if (index >= size)   return true;\n  if (row == -1) {\n    for (int RowCount=0; RowCount < dimension; RowCount++) {\n      if (!Double.isNaN(data.get(RowCount,index)))       return false;\n    }\n    return true;\n  }\n  if (isValidRow(row)) {\n    if (Double.isNaN(data.get(row,index)))     return true;\n else     return false;\n  }\n  return false;\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Double.isNaN(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Double.isNaN(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/netnumeri/src/com/netnumeri/shared/finance/beans/TimeSeries.java",
      "types": [
        "Double",
        "Boolean"
      ],
      "apicalls": [
        "isNaN"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Double.isNaN(double)",
            "java.lang.Double.isNaN(double)"
          ]
        }
      ],
      "keywords": [
        "na",
        "lang",
        "double",
        "java",
        "n",
        "boolean"
      ]
    },
    {
      "method": "list@117",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "HashMap<String,WidgetBean>",
      "file": "./java_projects/HiTune_1/chukwa-hitune-dist/src/java/org/apache/hadoop/chukwa/datastore/WidgetStore.java",
      "body": "public static HashMap<String,WidgetBean> list() throws IllegalAccessException {\n  if (list.size() == 0) {\n    cacheWidgets();\n  }\n  return list;\n}\n",
      "types": [
        "StringBuilder",
        "Byte",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()",
            "java.lang.String.String(byte[])"
          ]
        }
      ],
      "keywords": [
        "builder",
        "byte",
        "string",
        "java",
        "append",
        "lang"
      ]
    },
    {
      "method": "read@128",
      "formalParam": [
        "String",
        "String",
        "Set<String>",
        "HashMap<String,ByteIterator>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "Tau_V",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.keySet()",
                "node": "DAPICall",
                "_returns": "java.util.Set",
                "_throws": []
              },
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "Tau_V",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/YCSB/gemfire/src/main/java/com/yahoo/ycsb/db/GemFireClient.java",
      "body": "@Override public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){\n  Region<String,Map<String,byte[]>> r=getRegion(table);\n  Map<String,byte[]> val=r.get(key);\n  if (val != null) {\n    if (fields == null) {\n      for (      String k : val.keySet()) {\n        result.put(key,new ByteArrayByteIterator(val.get(key)));\n      }\n    }\n else {\n      for (      String field : fields) {\n        result.put(field,new ByteArrayByteIterator(val.get(field)));\n      }\n    }\n    return SUCCESS;\n  }\n  return ERROR;\n}\n",
      "types": [
        "Object",
        "Map",
        "Set"
      ],
      "apicalls": [
        "get",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.keySet()",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "java",
        "map",
        "util",
        "key",
        "set",
        "get"
      ]
    },
    {
      "method": "onGenerationEnd@41",
      "body": "public void onGenerationEnd() throws IOException {\n  try {\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.BufferedWriter.flush()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.io.BufferedWriter.close()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SubtitleEditor/src/com/ii/subtitle/editor/AbstractSubtitlesWriter.java",
      "types": [
        "Throwable",
        "IOException",
        "BufferedWriter"
      ],
      "apicalls": [
        "close",
        "printStackTrace",
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedWriter.flush()",
            "java.io.BufferedWriter.close()"
          ]
        },
        {
          "calls": [
            "java.io.BufferedWriter.flush()",
            "java.io.BufferedWriter.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "buffered",
        "exception",
        "close",
        "io",
        "lang",
        "throwable",
        "flush",
        "stack",
        "java",
        "writer",
        "trace",
        "print"
      ]
    },
    {
      "method": "close@115",
      "body": "public void close() throws IOException {\n  if (!closed) {\n    finish();\n    if (mydeflater) {\n      deflater.end();\n    }\n    if (close_out)     out.close();\n    closed=true;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStream.write(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.OutputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jzlib_1/src/main/java/com/jcraft/jzlib/DeflaterOutputStream.java",
      "types": [
        "Byte",
        "OutputStream",
        "IOException",
        "Integer"
      ],
      "apicalls": [
        "write",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "java",
        "close",
        "write",
        "output",
        "exception",
        "stream",
        "byte",
        "integer",
        "io"
      ]
    },
    {
      "method": "downloadAdded@119",
      "body": "public void downloadAdded(final Download download){\n  if (!download.isPersistent()) {\n    return;\n  }\n  if (download.getFlag(Download.FLAG_LOW_NOISE)) {\n    DiskManagerFileInfo[] files=download.getDiskManagerFileInfo();\n    if (files.length == 1) {\n      DiskManagerFileInfo file=files[0];\n      if (file.getDownloaded() == file.getLength() && !file.getFile().exists()) {\n        log.log(\"Removing low-noise download '\" + download.getName() + \" as data missing\");\n        removeDownload(download,false);\n      }\n    }\n  }\n  DownloadTrackerListener listener=new DownloadTrackerListener(){\n    public void scrapeResult(    DownloadScrapeResult response){\n      if (closing) {\n        return;\n      }\n      handleScrape(download,response);\n    }\n    public void announceResult(    DownloadAnnounceResult response){\n      if (closing) {\n        return;\n      }\n      handleAnnounce(download,response);\n    }\n  }\n;\n  monitored_downloads.add(download);\n  dm_listener_map.put(download,listener);\n  download.addTrackerListener(listener);\n}\n",
      "formalParam": [
        "Download"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/BitMate/azureus2/src/com/aelitis/azureus/plugins/removerules/DownloadRemoveRulesPlugin.java",
      "types": [
        "Boolean",
        "Object",
        "Map",
        "List"
      ],
      "apicalls": [
        "add",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.add(java.lang.Object)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "java",
        "put",
        "map",
        "list",
        "boolean",
        "add"
      ]
    },
    {
      "method": "limparCampos@22",
      "body": "public void limparCampos(JPanel pn){\n  for (int cont=0; cont < pn.getComponentCount(); cont++) {\n    Component comp=pn.getComponent(cont);\n    if (comp instanceof JTextField) {\n      JTextField tf=(JTextField)comp;\n      tf.setText(\"\");\n    }\n    if (comp instanceof JFormattedTextField) {\n      JFormattedTextField tf=(JFormattedTextField)comp;\n      tf.setText(\"\");\n    }\n    if (comp instanceof JPasswordField) {\n      JPasswordField tf=(JPasswordField)comp;\n      tf.setText(\"\");\n    }\n  }\n}\n",
      "formalParam": [
        "JPanel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.awt.Container.getComponent(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Component"
              },
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.awt.Container.getComponentCount()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ERP/src/br/system/tools/ConfigurarCampos.java",
      "types": [
        "Container",
        "Integer",
        "Component",
        "String",
        "JTextComponent"
      ],
      "apicalls": [
        "getComponent",
        "getComponentCount",
        "setText"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.getComponentCount()",
            "java.awt.Container.getComponent(int)",
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "java.awt.Container.getComponentCount()"
          ]
        }
      ],
      "keywords": [
        "component",
        "javax",
        "text",
        "integer",
        "container",
        "j",
        "set",
        "swing",
        "awt",
        "string",
        "get",
        "java",
        "count"
      ]
    },
    {
      "method": "writeRequested@211",
      "body": "@Override public void writeRequested(ChannelHandlerContext ctx,MessageEvent e) throws Exception {\nsynchronized (this.handshakeMutex) {\n    if (this.handshakeFailed.get()) {\n      return;\n    }\n    if (this.handshakeComplete.get()) {\n      out(\"+++ SERVER-HS :: Handshake already completed, not \" + \"appending '\" + e.getMessage().toString().trim() + \"' to queue!\");\n      super.writeRequested(ctx,e);\n    }\n else {\n      this.messages.offer(e);\n    }\n  }\n}\n",
      "formalParam": [
        "ChannelHandlerContext",
        "MessageEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicBoolean.get()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.concurrent.atomic.AtomicBoolean.get()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/netty-tutorials/handshake/src/main/java/com/biasedbit/nettytutorials/handshake/server/ServerHandshakeHandler.java",
      "types": [
        "PrintStream",
        "String",
        "concurrent",
        "Boolean"
      ],
      "apicalls": [
        "get",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.util.concurrent.atomic.AtomicBoolean.get()"
          ]
        }
      ],
      "keywords": [
        "get",
        "string",
        "stream",
        "java",
        "concurrent",
        "println",
        "boolean",
        "util",
        "print",
        "atomic",
        "io"
      ]
    },
    {
      "method": "dump@439",
      "body": "/** \n * For test purpose only: dumps the content of the DNS on console.\n */\npublic synchronized void dump(){\n  for (  String cle : registeredHosts.keySet()) {\n    RemoteHostDescriptor courant=registeredHosts.get(cle);\n    if (courant.isClockShiftAvailable())     System.out.println(\"Host ID: \" + cle + \" TTL: \"+ courant.getTimeToLive()+ \" clock shift: \"+ courant.getClockShift()+ \" +/-\"+ (courant.getClockAccuracy() / 2));\n else     System.out.println(\"Host ID: \" + cle + \" TTL: \"+ courant.getTimeToLive()+ \" clock shift: not available\");\n    HashMap<String,RemoteHostAddressDescriptor> descrs=courant.getRemoteHostAddresseDescriptors();\n    for (    String adresse : descrs.keySet()) {\n      System.out.println(\"  \" + adresse + \" ajoute =\"+ descrs.get(adresse).isAdded()+ \" direct =\"+ descrs.get(adresse).isDirect());\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/kevoree-library/kalimucho/org.kevoree.library.kalimucho.kalimuchoNode/src/main/java/platform/plugins/installables/network/DNS/KalimuchoDNS.java",
      "types": [
        "PrintStream",
        "Character"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "print",
        "character",
        "java",
        "io",
        "println",
        "stream"
      ]
    },
    {
      "method": "unmarshal@62",
      "body": "public Map<String,Object> unmarshal(byte[] bytes) throws IOException {\n  MethodArgumentReader reader=new MethodArgumentReader(new ValueReader(new DataInputStream(new ByteArrayInputStream(bytes))));\n  return reader.readTable();\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Map<String,Object>",
      "file": "./java_projects/rabbitmq-java-client/test/src/com/rabbitmq/client/test/TableTest.java",
      "types": [
        "Byte",
        "DataInputStream",
        "InputStream",
        "ByteArrayInputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "byte",
        "stream",
        "data",
        "io",
        "java",
        "input",
        "array"
      ]
    },
    {
      "method": "setUploadDate@160",
      "body": "/** \n */\npublic void setUploadDate(Date uploadDate){\n  this.uploadDate=new Timestamp(uploadDate.getTime());\n}\n",
      "formalParam": [
        "Date"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.sql.Timestamp.Timestamp(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/lor-jamwiki/jamwiki-core/src/main/java/org/jamwiki/model/WikiFileVersion.java",
      "types": [
        "Timestamp",
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.getTime()",
            "java.sql.Timestamp.Timestamp(long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "timestamp",
        "sql",
        "long",
        "time",
        "util",
        "date",
        "get"
      ]
    },
    {
      "method": "createRecord@68",
      "body": "/** \n * Utility method to create and return new metrics record instance within the given context. This record is tagged with the host name.\n * @param context the context\n * @param recordName name of the record\n * @return newly created metrics record\n */\npublic static MetricsRecord createRecord(MetricsContext context,String recordName){\n  MetricsRecord metricsRecord=context.createRecord(recordName);\n  metricsRecord.setTag(\"hostName\",getHostName());\n  return metricsRecord;\n}\n",
      "formalParam": [
        "MetricsContext",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.InetAddress.getLocalHost()",
            "_throws": [
              "java.net.UnknownHostException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.InetAddress"
          },
          {
            "_call": "java.net.InetAddress.getHostName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "MetricsRecord",
      "file": "./java_projects/hadoop-20-warehouse/src/core/org/apache/hadoop/metrics/MetricsUtil.java",
      "types": [
        "String",
        "InetAddress",
        "UnknownHostException"
      ],
      "apicalls": [
        "getHostName",
        "getLocalHost"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetAddress.getHostName()"
          ]
        }
      ],
      "keywords": [
        "net",
        "local",
        "name",
        "unknown",
        "host",
        "inet",
        "exception",
        "string",
        "get",
        "address",
        "java"
      ]
    },
    {
      "method": "listChildren@238",
      "body": "public Iterator<Content> listChildren(String path) throws StorageClientException {\n  long t=System.currentTimeMillis();\n  try {\n    final DisposableIterator<Map<String,Object>> childContent=client.listChildren(keySpace,contentColumnFamily,path,this);\n    return new PreemptiveIterator<Content>(){\n      private Content content;\n      @Override protected boolean internalHasNext(){\n        content=null;\n        while (content == null && childContent.hasNext()) {\n          try {\n            Map<String,Object> structureMap=childContent.next();\n            LOGGER.debug(\"Loaded Next as {} \",structureMap);\n            if (exists(structureMap)) {\n              String path=(String)structureMap.get(PATH_FIELD);\n              content=get(path);\n            }\n          }\n catch (          AccessDeniedException e) {\n            LOGGER.debug(e.getMessage(),e);\n          }\ncatch (          StorageClientException e) {\n            LOGGER.debug(e.getMessage(),e);\n          }\n        }\n        if (content == null) {\n          childContent.close();\n          super.close();\n          return false;\n        }\n        return true;\n      }\n      @Override protected Content internalNext(){\n        return content;\n      }\n    }\n;\n  }\n  finally {\n    statsService.apiCall(ContentManagerImpl.class.getName(),\"listChildren\",System.currentTimeMillis() - t);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "Iterator<Content>",
      "file": "./java_projects/sparsemapcontent/core/src/main/java/org/sakaiproject/nakamura/lite/content/ContentManagerImpl.java",
      "types": [
        "System",
        "String",
        "Long",
        "Class"
      ],
      "apicalls": [
        "getName",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "get",
        "time",
        "class",
        "name",
        "current",
        "java",
        "long",
        "system",
        "millis"
      ]
    },
    {
      "method": "toString@37",
      "body": "@Override public String toString(){\n  StringBuilder builder=new StringBuilder(\"MenuBarBuilder : \");\n  String newline=System.getProperty(\"line.separator\");\n  for (  Object o : getMenus()) {\n    MenuBuilder item=(MenuBuilder)o;\n    builder.append(newline).append(item.toString());\n  }\n  return builder.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/codjo-mad/codjo-mad-gui/src/main/java/net/codjo/mad/gui/menu/MenuBarBuilder.java",
      "types": [
        "StringBuilder",
        "String",
        "Object",
        "System"
      ],
      "apicalls": [
        "getProperty",
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.System.getProperty(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "system",
        "lang",
        "property",
        "append",
        "get",
        "builder",
        "object",
        "java",
        "string"
      ]
    },
    {
      "method": "testConstructor3@901",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.builder/src/org/eclipse/jdt/core/groovy/tests/search/GenericInferencingTests.java",
      "body": "public void testConstructor3() throws Exception {\n  String contents=\"class O {\\n\" + \"  boolean aa\\n\" + \"  int bb\\n\"+ \"}\\n\"+ \"new O([8: 1, bb:8])\";\n  int start=contents.lastIndexOf(\"bb\");\n  int end=start + \"bb\".length();\n  assertType(contents,start,end,\"java.lang.Integer\");\n  assertDeclaration(contents,start,end,\"O\",\"bb\",DeclarationKind.FIELD);\n}\n",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "length",
        "java",
        "lang",
        "last",
        "index",
        "string",
        "integer"
      ]
    },
    {
      "method": "testSaveAs@58",
      "body": "@Test public void testSaveAs(){\n  String filename=\"test.test\";\n  List<Reference> references=new ArrayList<Reference>();\n  assertTrue(fileManager.saveAs(references,filename));\n  File file=new File(filename);\n  file.delete();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.delete()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Dokuemttantiajarjestelmaa/src/test/java/Data_Access/FileManagerTest.java",
      "types": [
        "File",
        "Boolean",
        "ArrayList",
        "String"
      ],
      "apicalls": [
        "delete"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.delete()"
          ]
        }
      ],
      "keywords": [
        "io",
        "string",
        "java",
        "boolean",
        "list",
        "array",
        "util",
        "file",
        "delete"
      ]
    },
    {
      "method": "getSortedList@119",
      "body": "/** \n * Sorts the list of blocks in the mine from the one with the largest percentage to the one with the lowest and returns the formatted list\n * @param curMine Mine to check\n * @return Formatted list\n */\npublic static List<String> getSortedList(Mine curMine){\n  List<MineBlock> blocks=curMine.getBlocks();\n  List<String> finalList=new ArrayList<String>(blocks.size());\n  MineBlock tempBlock;\n  for (int j=blocks.size(); j > 0; j--) {\n    for (int i=0; i < (j - 1); i++) {\n      if (blocks.get(i + 1).getChance() > blocks.get(i).getChance()) {\n        tempBlock=blocks.get(i).clone();\n        blocks.set(i,blocks.get(i + 1).clone());\n        blocks.set(i + 1,tempBlock.clone());\n      }\n    }\n  }\n  for (  MineBlock block : blocks) {\n    String blockName=block.getBlock().getItemType().toString().toLowerCase().replace(\"_\",\" \");\n    if (block.getBlock().getData() != 0) {\n      String[] tempBlockName={block.getBlock().getItemTypeId() + \"\",block.getBlock().getData() + \"\"};\n      blockName=Util.parseMetadata(tempBlockName,true) + \" \" + blockName;\n    }\n    String blockWeight=Util.format(block.getChance());\n    if (!blockWeight.equalsIgnoreCase(\"0.0%\"))     finalList.add(ChatColor.WHITE + blockWeight + \" \"+ ChatColor.GREEN+ blockName+ ChatColor.WHITE);\n  }\n  return finalList;\n}\n",
      "formalParam": [
        "Mine"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/MineReset/src/com/wolvencraft/MineReset/util/MineUtil.java",
      "types": [
        "String",
        "List",
        "Boolean",
        "Collection",
        "ArrayList"
      ],
      "apicalls": [
        "equalsIgnoreCase",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "ignore",
        "list",
        "equals",
        "lang",
        "java",
        "boolean",
        "array",
        "util",
        "case",
        "add",
        "string"
      ]
    },
    {
      "method": "getPassivePeriod@46",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Long>.containsKey(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Long>.get(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Long",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Long",
      "file": "./java_projects/ActivityPromotion/src/de/Chumper/ActivityPromotion/APPlayer.java",
      "body": "public Long getPassivePeriod(String name){\n  if (this.passivePeriod.containsKey(name))   return passivePeriod.get(name);\n else   return 0L;\n}\n",
      "types": [
        "Object",
        "String",
        "Map",
        "Boolean",
        "Long"
      ],
      "apicalls": [
        "get",
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Long>.containsKey(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Long>.get(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Long>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "util",
        "key",
        "string",
        "object",
        "long",
        "get",
        "map",
        "contains"
      ]
    },
    {
      "method": "initComponent@35",
      "body": "/** \n * Method is called after plugin is already created and configured. Plugin can start to communicate with other plugins only in this method.\n */\npublic void initComponent(){\n  try {\n    XMLInputFactory.newInstance();\n  }\n catch (  Exception e) {\n  }\ncatch (  Throwable e) {\n  }\n  if (form == null) {\n    form=new CodegenFrame();\n    form.setResizable(true);\n    form.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n  if (myIcon == null) {\n    java.net.URL resource=Axis2IdeaPlugin.class.getResource(\"/icons/icon.png\");\n    myIcon=new ImageIcon(resource);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getResource(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URL"
          },
          {
            "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/axis2-java/modules/tool/axis2-idea-plugin/src/main/java/org/apache/ideaplugin/plugin/Axis2IdeaPlugin.java",
      "types": [
        "Class",
        "ImageIcon",
        "String",
        "URL"
      ],
      "apicalls": [
        "getResource"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)"
          ]
        }
      ],
      "keywords": [
        "url",
        "swing",
        "icon",
        "string",
        "image",
        "java",
        "lang",
        "resource",
        "class",
        "get",
        "javax"
      ]
    },
    {
      "method": "getInputStream@70",
      "body": "/** \n * \u53d6\u5f97\u8d44\u6e90\u7684<code>InputStream</code>\u3002 \n */\npublic InputStream getInputStream() throws IOException {\n  if (file != null) {\n    try {\n      return new FileInputStream(file);\n    }\n catch (    FileNotFoundException e) {\n      return null;\n    }\n  }\n else {\n    return url.openStream();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.net.URL.openStream()",
                "node": "DAPICall",
                "_returns": "java.io.InputStream",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.FileNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "InputStream",
      "file": "./java_projects/citrus/service/resource/src/main/java/com/alibaba/citrus/service/resource/support/URLResource.java",
      "types": [
        "IOException",
        "FileNotFoundException",
        "File",
        "InputStream",
        "URL",
        "FileInputStream"
      ],
      "apicalls": [
        "openStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.io.File)"
          ]
        },
        {
          "calls": [
            "java.net.URL.openStream()"
          ]
        }
      ],
      "keywords": [
        "url",
        "stream",
        "found",
        "open",
        "io",
        "input",
        "net",
        "file",
        "exception",
        "java"
      ]
    },
    {
      "method": "cartesianToPolar@595",
      "formalParam": [
        "double",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.sqrt(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.atan2(double,double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.toDegrees(double)",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          }
        ]
      },
      "returnType": "double[]",
      "file": "./java_projects/rpgContest/SpaceRPG/src/Utils.java",
      "body": "/** \n * conversion assumes x and y are coords relative to 0,0 \n */\npublic static double[] cartesianToPolar(double x,double y){\n  double[] polar=new double[2];\n  double radius=Math.sqrt(x * x + y * y);\n  double angle=Math.toDegrees(Math.atan2(y,x));\n  polar[0]=radius;\n  polar[1]=angle;\n  return polar;\n}\n",
      "types": [
        "Double",
        "Math"
      ],
      "apicalls": [
        "atan2",
        "toDegrees",
        "sqrt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.sqrt(double)",
            "java.lang.Math.atan2(double,double)",
            "java.lang.Math.toDegrees(double)"
          ]
        }
      ],
      "keywords": [
        "atan2",
        "double",
        "degrees",
        "math",
        "lang",
        "sqrt",
        "java"
      ]
    },
    {
      "method": "ifExists@207",
      "formalParam": [
        "String",
        "Configuration"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/cdh3u3-with-mesos/hadoop-0.20.2-cdh3u3/src/core/org/apache/hadoop/fs/LocalDirAllocator.java",
      "body": "/** \n * We search through all the configured dirs for the file's existence and return true when we find  \n * @param pathStr the requested file (this will be searched)\n * @param conf the Configuration object\n * @return true if files exist. false otherwise\n * @throws IOException\n */\npublic boolean ifExists(String pathStr,Configuration conf){\n  AllocatorPerContext context=obtainContext(contextCfgItemName);\n  return context.ifExists(pathStr,conf);\n}\n",
      "types": [
        "Map",
        "Object"
      ],
      "apicalls": [
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "put",
        "java",
        "map",
        "get",
        "util",
        "object"
      ]
    },
    {
      "method": "testGetIndexAtPoint@142",
      "body": "public void testGetIndexAtPoint() throws Exception {\n  Runnable test=new Runnable(){\n    public void run(){\n      jtc.setText(\"testGetIndexAtPoint\");\n    }\n  }\n;\n  SwingUtilities.invokeAndWait(test);\n  rect=null;\n  try {\n    rect=jtc.modelToView(1);\n  }\n catch (  BadLocationException e) {\n  }\n  assertNotNull(rect);\n  assertEquals(1,accessible.getIndexAtPoint(new Point(rect.x,rect.y)));\n  rect=null;\n  try {\n    rect=jtc.modelToView(2);\n  }\n catch (  BadLocationException e) {\n  }\n  assertNotNull(rect);\n  assertEquals(2,accessible.getIndexAtPoint(new Point(rect.x,rect.y)));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException",
              "java.lang.reflect.InvocationTargetException"
            ]
          },
          {
            "_call": "javax.swing.text.JTextComponent.modelToView(int)",
            "node": "DAPICall",
            "_returns": "java.awt.Rectangle",
            "_throws": [
              "javax.swing.text.BadLocationException"
            ]
          },
          {
            "_call": "java.awt.Point.Point(int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.text.JTextComponent.modelToView(int)",
            "node": "DAPICall",
            "_returns": "java.awt.Rectangle",
            "_throws": [
              "javax.swing.text.BadLocationException"
            ]
          },
          {
            "_call": "java.awt.Point.Point(int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/JTextComponent_AccessibleJTextComponent_variousTextTest.java",
      "types": [
        "Rectangle",
        "InterruptedException",
        "InvocationTargetException",
        "Point",
        "Integer",
        "JTextComponent",
        "BadLocationException",
        "SwingUtilities",
        "Runnable"
      ],
      "apicalls": [
        "modelToView",
        "invokeAndWait"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)",
            "javax.swing.text.JTextComponent.modelToView(int)",
            "java.awt.Point.Point(int,int)",
            "javax.swing.text.JTextComponent.modelToView(int)",
            "java.awt.Point.Point(int,int)"
          ]
        }
      ],
      "keywords": [
        "view",
        "java",
        "point",
        "j",
        "invoke",
        "utilities",
        "invocation",
        "wait",
        "text",
        "javax",
        "interrupted",
        "runnable",
        "target",
        "model",
        "rectangle",
        "bad",
        "exception",
        "location",
        "awt",
        "component",
        "swing",
        "integer"
      ]
    },
    {
      "method": "route@27",
      "body": "/** \n * This method is called from Apache Camel to route messages to connections or applications.\n * @param exchange\n * @return an Apache Camel endpoint URI.\n */\n@RecipientList public final String route(Exchange exchange){\n  Message message=exchange.getIn().getBody(Message.class);\n  long startTime=new Date().getTime();\n  String route=route(message);\n  long endTime=new Date().getTime();\n  log.trace(\"route took: \" + (endTime - startTime) + \" millis\");\n  return route;\n}\n",
      "formalParam": [
        "Exchange"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/mokai/mokai-core/src/main/java/org/mokai/impl/camel/AbstractRouter.java",
      "types": [
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()",
            "java.util.Date.Date()",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "date",
        "long",
        "get",
        "time",
        "util",
        "java"
      ]
    },
    {
      "method": "testGetSmallImage@307",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.BufferedImage.getWidth()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.image.BufferedImage.getHeight()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Flickr4Java/Flickr4Java/test/src/com/flickr4java/flickr/test/PhotosInterfaceTest.java",
      "body": "@Test public void testGetSmallImage() throws FlickrException, IOException {\n  PhotosInterface iface=flickr.getPhotosInterface();\n  String photoId=testProperties.getPhotoId();\n  Photo photo=iface.getInfo(photoId,null);\n  BufferedImage image=iface.getImage(photo,Size.SMALL);\n  assertNotNull(image);\n  assertNotNull(image.getWidth());\n  assertNotNull(image.getHeight());\n  ImageIO.write(image,\"jpg\",smallFile);\n}\n",
      "types": [
        "RenderedImage",
        "File",
        "IOException",
        "Integer",
        "ImageIO",
        "String",
        "Boolean",
        "BufferedImage"
      ],
      "apicalls": [
        "getHeight",
        "getWidth",
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.BufferedImage.getWidth()",
            "java.awt.image.BufferedImage.getHeight()",
            "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "write",
        "io",
        "string",
        "integer",
        "exception",
        "get",
        "rendered",
        "file",
        "java",
        "height",
        "image",
        "imageio",
        "buffered",
        "width",
        "javax",
        "awt"
      ]
    },
    {
      "method": "testCompareAndSetInMultipleThreads@63",
      "body": "/** \n * compareAndSet in one thread enables another waiting for value to succeed\n */\npublic void testCompareAndSetInMultipleThreads(){\n  final AtomicReference ai=new AtomicReference(one);\n  Thread t=new Thread(new Runnable(){\n    public void run(){\n      while (!ai.compareAndSet(two,three))       Thread.yield();\n    }\n  }\n);\n  try {\n    t.start();\n    assertTrue(ai.compareAndSet(one,two));\n    t.join(LONG_DELAY_MS);\n    assertFalse(t.isAlive());\n    assertEquals(ai.get(),three);\n  }\n catch (  Exception e) {\n    unexpectedException();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicReference.AtomicReference(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.join(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          },
          {
            "_call": "java.lang.Thread.isAlive()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicReference.get()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/concurrent/src/test/java/AtomicReferenceTest.java",
      "types": [
        "Object",
        "Thread",
        "Boolean",
        "Long",
        "Runnable",
        "InterruptedException",
        "concurrent"
      ],
      "apicalls": [
        "get",
        "join",
        "compareAndSet",
        "start",
        "isAlive"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicReference.AtomicReference(java.lang.Object)",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object,java.lang.Object)",
            "java.lang.Thread.join(long)",
            "java.lang.Thread.isAlive()",
            "java.util.concurrent.atomic.AtomicReference.get()"
          ]
        }
      ],
      "keywords": [
        "get",
        "concurrent",
        "boolean",
        "interrupted",
        "start",
        "exception",
        "set",
        "alive",
        "atomic",
        "long",
        "runnable",
        "reference",
        "object",
        "java",
        "compare",
        "thread",
        "join",
        "lang",
        "util"
      ]
    },
    {
      "method": "makeDirectory@121",
      "body": "/** \n * If the directory does not exist, create it. Note this currently only works with file: type URIs\n * @param orig The directory URI to create\n */\npublic static void makeDirectory(URI orig) throws MalformedURLException {\n  checkFileURI(orig);\n  File file=new File(orig.getPath());\n  if (file.isFile()) {\n    throw new MalformedURLException(JSMsg.gettext(\"The URL {0} is a file.\",orig));\n  }\n  if (!file.isDirectory()) {\n    if (!file.mkdirs()) {\n      throw new MalformedURLException(JSMsg.gettext(\"The URL {0} could not be created as a directory.\",orig));\n    }\n  }\n}\n",
      "formalParam": [
        "URI"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URI.getScheme()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.net.URI.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.isFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.isDirectory()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "$NOT$java.io.File.mkdirs()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jsword/src/main/java/org/crosswire/common/util/NetUtil.java",
      "types": [
        "URI",
        "Boolean",
        "Object",
        "String",
        "File"
      ],
      "apicalls": [
        "mkdirs",
        "equals",
        "getScheme",
        "getPath",
        "isFile",
        "isDirectory"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.getScheme()",
            "java.lang.String.equals(java.lang.Object)",
            "java.net.URI.getPath()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.isFile()",
            "$NOT$java.io.File.isDirectory()",
            "$NOT$java.io.File.mkdirs()"
          ]
        },
        {
          "calls": [
            "java.net.URI.getScheme()",
            "java.lang.String.equals(java.lang.Object)",
            "java.net.URI.getPath()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.isFile()",
            "$NOT$java.io.File.isDirectory()"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "directory",
        "scheme",
        "net",
        "file",
        "io",
        "boolean",
        "path",
        "string",
        "java",
        "equals",
        "mkdirs",
        "uri",
        "object"
      ]
    },
    {
      "method": "runInWorkspace@103",
      "body": "public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n  int ticks=fTargetDefinition != null ? 100 : 25;\n  SubMonitor subMon=SubMonitor.convert(monitor,ticks);\n  try {\n    if (subMon.isCanceled()) {\n      return Status.CANCEL_STATUS;\n    }\n    SearchablePluginsManager manager=PDECore.getDefault().getSearchablePluginsManager();\n    if (fTargetDefinition != null) {\n      manager.removeAllFromJavaSearch();\n      if (!fTargetDefinition.isResolved()) {\n        IStatus status=fTargetDefinition.resolve(subMon.newChild(50));\n        if (!status.isOK()) {\n          return status;\n        }\n        subMon.subTask(\"\");\n      }\n else {\n        subMon.worked(50);\n      }\n      if (monitor.isCanceled()) {\n        return Status.CANCEL_STATUS;\n      }\n      IResolvedBundle[] bundles=fTargetDefinition.getBundles();\n      fAdd=true;\n      List models=new ArrayList(bundles.length);\n      for (int index=0; index < bundles.length; index++) {\n        IPluginModelBase model=PluginRegistry.findModel(bundles[index].getBundleInfo().getSymbolicName());\n        if (model != null) {\n          models.add(model);\n        }\n      }\n      subMon.worked(25);\n      fBundles=(IPluginModelBase[])models.toArray(new IPluginModelBase[models.size()]);\n    }\n    if (subMon.isCanceled()) {\n      return Status.CANCEL_STATUS;\n    }\n    if (fAdd) {\n      manager.addToJavaSearch(fBundles);\n    }\n else {\n      if (fBundles != null) {\n        manager.removeFromJavaSearch(fBundles);\n      }\n else {\n        manager.removeAllFromJavaSearch();\n      }\n    }\n    subMon.worked(25);\n    return Status.OK_STATUS;\n  }\n  finally {\n    monitor.done();\n  }\n}\n",
      "formalParam": [
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "IStatus",
      "file": "./java_projects/PDE/org.eclipse.pde.ui/src/org/eclipse/pde/internal/ui/preferences/AddToJavaSearchJob.java",
      "types": [
        "Collection",
        "List",
        "Object",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList(java.util.Collection)",
            "java.util.List.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "collection",
        "util",
        "add",
        "object",
        "boolean",
        "java"
      ]
    },
    {
      "method": "main@41",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.Class.forName(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ]
              },
              {
                "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.Thread.start()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/tomcat60/java/org/apache/jk/apr/TomcatStarter.java",
      "body": "public static void main(String args[]){\n  System.err.println(\"TomcatStarter: main()\");\n  int nClasses=0;\n  try {\n    AprImpl.jniMode();\n    Class c=null;\n    for (int i=0; i < mainClasses.length; i++) {\n      try {\n        System.err.println(\"Try  \" + mainClasses[i]);\n        c=Class.forName(mainClasses[i]);\n      }\n catch (      ClassNotFoundException ex) {\n        continue;\n      }\n      if (c != null) {\n        ++nClasses;\n        Thread startThread=new Thread(new TomcatStarter(c,args));\n        c=null;\n        startThread.start();\n        break;\n      }\n    }\n    if (nClasses == 0)     System.err.println(\"No class found  \");\n  }\n catch (  Throwable t) {\n    t.printStackTrace(System.err);\n  }\n}\n",
      "types": [
        "PrintStream",
        "ClassNotFoundException",
        "Class",
        "Thread",
        "Throwable",
        "Runnable",
        "String"
      ],
      "apicalls": [
        "printStackTrace",
        "forName",
        "println",
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
          ]
        }
      ],
      "keywords": [
        "start",
        "exception",
        "stream",
        "throwable",
        "class",
        "println",
        "thread",
        "name",
        "print",
        "trace",
        "runnable",
        "stack",
        "io",
        "java",
        "string",
        "lang",
        "found"
      ]
    },
    {
      "method": "estimateMemoryUsage@103",
      "body": "public int estimateMemoryUsage(){\n  int sz=BASE_MEMORY_USAGE;\n  if (null != value)   sz+=BIG_DECIMAL_MEMORY_USAGE + (value.unscaledValue().bitLength() + 8) / 8;\n  if (null != rawData)   sz+=rawData.length;\n  return sz;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigDecimal.unscaledValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.math.BigInteger"
          },
          {
            "_call": "java.math.BigInteger.bitLength()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/derby/java/engine/org/apache/derby/iapi/types/SQLDecimal.java",
      "types": [
        "BigInteger",
        "Integer",
        "BigDecimal"
      ],
      "apicalls": [
        "unscaledValue",
        "bitLength"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigDecimal.unscaledValue()",
            "java.math.BigInteger.bitLength()"
          ]
        }
      ],
      "keywords": [
        "unscaled",
        "integer",
        "bit",
        "math",
        "big",
        "decimal",
        "java",
        "value",
        "length"
      ]
    },
    {
      "method": "refreshFinished@422",
      "body": "public void refreshFinished(List<SourceTypeName> list){\n  if (list.contains(getTypeName())) {\n    loadTypesFinished();\n  }\n}\n",
      "formalParam": [
        "List<SourceTypeName>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/vjet/eclipse/plugins/org.ebayopensource.vjet.eclipse.core/model/org/eclipse/dltk/mod/internal/core/VjoSourceModule.java",
      "types": [
        "String",
        "Throwable",
        "LinkedList"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.lang.Throwable.toString()"
          ]
        },
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "throwable",
        "string",
        "util",
        "list",
        "linked",
        "java"
      ]
    },
    {
      "method": "addSettings@636",
      "body": "public void addSettings(SettingsTemplate settingsTemplate,File dirPath) throws PhrescoException {\n  boolean exist=isExist(ServerConstants.SETTINGS_CONFIG_FILE);\n  List<SettingsTemplate> settingsList=null;\n  if (exist) {\n    String settingsJson=getArtifactAsString(ServerConstants.SETTINGS_CONFIG_FILE);\n    Type type=new TypeToken<List<SettingsTemplate>>(){\n    }\n.getType();\n    settingsList=gson.fromJson(settingsJson,type);\n  }\n else {\n    settingsList=new ArrayList<SettingsTemplate>(32);\n  }\n  settingsList.add(settingsTemplate);\n  String json=gson.toJson(settingsList);\n  File tempFile=new File(Utility.getSystemTemp(),\"settings.json\");\n  writeToFile(json,tempFile);\n  ArtifactInfo info=new ArtifactInfo(\"config\",\"settings\",\"\",\"json\",\"1.0\");\n  addArtifact(info,tempFile);\n  FileUtil.delete(tempFile);\n}\n",
      "formalParam": [
        "SettingsTemplate",
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/phresco/service/phresco-service-impl/src/main/java/com/photon/phresco/service/impl/RepositoryManagerImpl.java",
      "types": [
        "File",
        "Integer",
        "ArrayList",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "java.io.File.File(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io",
        "integer",
        "string",
        "java",
        "util",
        "array",
        "file",
        "list"
      ]
    },
    {
      "method": "XMLRPCClient@110",
      "body": "/** \n * Convenience constructor. Creates new instance based on server String address\n * @param XMLRPC server address\n * @param HTTP Server - Basic Authentication - Username\n * @param HTTP Server - Basic Authentication - Password\n */\npublic XMLRPCClient(URI uri,String username,String password){\n  this(uri);\n  ((DefaultHttpClient)client).getCredentialsProvider().setCredentials(new AuthScope(uri.getHost(),uri.getPort(),AuthScope.ANY_REALM),new UsernamePasswordCredentials(username,password));\n}\n",
      "formalParam": [
        "URI",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URI.getHost()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.net.URI.getPort()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/RemindThatMovie/RemindThatMovie/src/org/xmlrpc/android/XMLRPCClient.java",
      "types": [
        "URI",
        "Integer",
        "String"
      ],
      "apicalls": [
        "getHost",
        "getPort"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.getHost()",
            "java.net.URI.getPort()"
          ]
        }
      ],
      "keywords": [
        "port",
        "net",
        "get",
        "string",
        "host",
        "java",
        "integer",
        "uri"
      ]
    },
    {
      "method": "cancelIndexing@137",
      "body": "public void cancelIndexing(){\n  SystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING,\"0\");\n  this.list();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.Integer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          },
          {
            "_call": "java.lang.Long.Long(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          },
          {
            "_call": "java.lang.Integer.Integer(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jforum2/src/net/jforum/view/admin/LuceneStatsAction.java",
      "types": [
        "String",
        "NumberFormatException",
        "File",
        "Long",
        "Boolean",
        "Integer",
        "Date",
        "Object"
      ],
      "apicalls": [
        "equals",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.io.File.getAbsolutePath()",
            "java.util.Date.Date(java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.lang.Integer.Integer(java.lang.String)",
            "java.lang.Long.Long(java.lang.String)",
            "java.lang.Integer.Integer(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "date",
        "lang",
        "number",
        "long",
        "io",
        "equals",
        "util",
        "object",
        "integer",
        "string",
        "path",
        "exception",
        "get",
        "absolute",
        "boolean",
        "file",
        "format",
        "java"
      ]
    },
    {
      "method": "initializeAfterLoad@3525",
      "body": "/** \n * Initializes JavaCore internal structures to allow subsequent operations (such as the ones that need a resolved classpath) to run full speed. A client may choose to call this method in a background thread early after the workspace has started so that the initialization is transparent to the user. <p> However calling this method is optional. Services will lazily perform initialization when invoked. This is only a way to reduce initialization overhead on user actions, if it can be performed before at some appropriate moment. </p><p> This initialization runs accross all Java projects in the workspace. Thus the workspace root scheduling rule is used during this operation. </p><p> This method may return before the initialization is complete. The initialization will then continue in a background thread. </p><p> This method can be called concurrently. </p>\n * @param monitor a progress monitor, or <code>null</code> if progressreporting and cancellation are not desired\n * @exception CoreException if the initialization fails,the status of the exception indicates the reason of the failure\n * @since 3.1\n */\npublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException {\n  try {\n    if (monitor != null) {\n      monitor.beginTask(Messages.javamodel_initialization,100);\n      monitor.subTask(Messages.javamodel_configuring_classpath_containers);\n    }\n    JavaModelManager manager=JavaModelManager.getJavaModelManager();\n    SubProgressMonitor subMonitor=null;\n    try {\n      if (monitor != null) {\n        subMonitor=new SubProgressMonitor(monitor,50);\n        subMonitor.beginTask(\"\",100);\n        subMonitor.worked(5);\n        manager.batchContainerInitializationsProgress.initializeAfterLoadMonitor.set(subMonitor);\n      }\n      if (manager.forceBatchInitializations(true)) {\n        manager.getClasspathContainer(Path.EMPTY,null);\n      }\n else {\n        while (manager.batchContainerInitializations == JavaModelManager.BATCH_INITIALIZATION_IN_PROGRESS) {\n          if (subMonitor != null) {\n            subMonitor.subTask(manager.batchContainerInitializationsProgress.subTaskName);\n            subMonitor.worked(manager.batchContainerInitializationsProgress.getWorked());\n          }\nsynchronized (manager) {\n            try {\n              manager.wait(100);\n            }\n catch (            InterruptedException e) {\n            }\n          }\n        }\n      }\n    }\n  finally {\n      if (subMonitor != null)       subMonitor.done();\n      manager.batchContainerInitializationsProgress.initializeAfterLoadMonitor.set(null);\n    }\n    if (monitor != null)     monitor.subTask(Messages.javamodel_resetting_source_attachment_properties);\n    final IJavaProject[] projects=manager.getJavaModel().getJavaProjects();\n    HashSet visitedPaths=new HashSet();\n    ExternalFoldersManager externalFoldersManager=JavaModelManager.getExternalManager();\n    for (int i=0, length=projects.length; i < length; i++) {\n      JavaProject javaProject=(JavaProject)projects[i];\n      IClasspathEntry[] classpath;\n      try {\n        classpath=javaProject.getResolvedClasspath();\n      }\n catch (      JavaModelException e) {\n        continue;\n      }\n      if (classpath != null) {\n        for (int j=0, length2=classpath.length; j < length2; j++) {\n          IClasspathEntry entry=classpath[j];\n          if (entry.getSourceAttachmentPath() != null) {\n            IPath entryPath=entry.getPath();\n            if (visitedPaths.add(entryPath)) {\n              Util.setSourceAttachmentProperty(entryPath,null);\n            }\n          }\n          if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {\n            IPath entryPath=entry.getPath();\n            if (ExternalFoldersManager.isExternalFolderPath(entryPath) && externalFoldersManager.getFolder(entryPath) == null) {\n              externalFoldersManager.addFolder(entryPath,true);\n            }\n          }\n        }\n      }\n    }\n    try {\n      externalFoldersManager.createPendingFolders(monitor);\n    }\n catch (    JavaModelException jme) {\n      Util.log(jme,\"Error while processing external folders\");\n    }\n    if (monitor != null)     monitor.subTask(Messages.javamodel_initializing_delta_state);\n    manager.deltaState.rootsAreStale=true;\n    manager.deltaState.initializeRoots(true);\n    if (monitor != null)     monitor.subTask(Messages.javamodel_configuring_searchengine);\n    SearchEngine engine=new SearchEngine();\n    IJavaSearchScope scope=SearchEngine.createWorkspaceScope();\n    try {\n      engine.searchAllTypeNames(null,SearchPattern.R_EXACT_MATCH,\"!@$#!@\".toCharArray(),SearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,IJavaSearchConstants.CLASS,scope,new TypeNameRequestor(){\n        public void acceptType(        int modifiers,        char[] packageName,        char[] simpleTypeName,        char[][] enclosingTypeNames,        String path){\n        }\n      }\n,IJavaSearchConstants.CANCEL_IF_NOT_READY_TO_SEARCH,monitor == null ? null : new SubProgressMonitor(monitor,49));\n    }\n catch (    JavaModelException e) {\n    }\ncatch (    OperationCanceledException e) {\n      if (monitor != null && monitor.isCanceled())       throw e;\n    }\n    if (monitor != null)     monitor.subTask(Messages.javamodel_getting_build_state_number);\n    QualifiedName qName=new QualifiedName(JavaCore.PLUGIN_ID,\"stateVersionNumber\");\n    IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();\n    String versionNumber=null;\n    try {\n      versionNumber=root.getPersistentProperty(qName);\n    }\n catch (    CoreException e) {\n    }\n    final JavaModel model=manager.getJavaModel();\n    String newVersionNumber=Byte.toString(State.VERSION);\n    if (!newVersionNumber.equals(versionNumber)) {\n      if (JavaBuilder.DEBUG)       System.out.println(\"Build state version number has changed\");\n      IWorkspaceRunnable runnable=new IWorkspaceRunnable(){\n        public void run(        IProgressMonitor progressMonitor2) throws CoreException {\n          for (int i=0, length=projects.length; i < length; i++) {\n            IJavaProject project=projects[i];\n            try {\n              if (JavaBuilder.DEBUG)               System.out.println(\"Touching \" + project.getElementName());\n              new ClasspathValidation((JavaProject)project).validate();\n              project.getProject().touch(progressMonitor2);\n            }\n catch (            CoreException e) {\n            }\n          }\n        }\n      }\n;\n      if (monitor != null)       monitor.subTask(Messages.javamodel_building_after_upgrade);\n      try {\n        ResourcesPlugin.getWorkspace().run(runnable,monitor);\n      }\n catch (      CoreException e) {\n      }\n      try {\n        root.setPersistentProperty(qName,newVersionNumber);\n      }\n catch (      CoreException e) {\n        Util.log(e,\"Could not persist build state version number\");\n      }\n    }\n    try {\n      if (monitor != null)       monitor.subTask(Messages.javamodel_refreshing_external_jars);\n      model.refreshExternalArchives(null,monitor == null ? null : new SubProgressMonitor(monitor,1));\n    }\n catch (    JavaModelException e) {\n    }\n  }\n  finally {\n    if (monitor != null)     monitor.done();\n  }\n}\n",
      "formalParam": [
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.HashSet()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashSet.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "node": "DAPICall",
            "_returns": "char[]",
            "_throws": []
          },
          {
            "_call": "java.lang.Byte.toString(byte)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/jdt-patch/e37/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java",
      "types": [
        "Byte",
        "String",
        "Boolean",
        "PrintStream",
        "HashSet",
        "Object"
      ],
      "apicalls": [
        "toString",
        "add",
        "toCharArray",
        "equals",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.HashSet()",
            "java.util.HashSet.add(java.lang.Object)",
            "java.lang.String.toCharArray()",
            "java.lang.Byte.toString(byte)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.HashSet.HashSet()",
            "java.util.HashSet.add(java.lang.Object)",
            "java.lang.String.toCharArray()",
            "java.lang.Byte.toString(byte)",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "set",
        "print",
        "equals",
        "byte",
        "add",
        "util",
        "stream",
        "java",
        "hash",
        "string",
        "lang",
        "io",
        "println",
        "char",
        "boolean",
        "object",
        "array"
      ]
    },
    {
      "method": "resetLocalImports@285",
      "body": "@Override public boolean resetLocalImports(){\n  try {\n    this.localImports.clear();\n    return true;\n  }\n catch (  final UnsupportedOperationException uoe) {\n    SpinConstraintRuleImpl.log.debug(\"Could not clear collection\");\n  }\n  this.localImports=new HashSet<String>();\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<java.lang.String>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/queryall/queryall-ext-rule-spin/src/main/java/org/queryall/impl/rdfrule/SpinConstraintRuleImpl.java",
      "types": [
        "Set",
        "HashSet",
        "String"
      ],
      "apicalls": [
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.lang.String>.clear()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()"
          ]
        }
      ],
      "keywords": [
        "set",
        "util",
        "hash",
        "java",
        "string",
        "clear"
      ]
    },
    {
      "method": "getPort@70",
      "body": "/** \n * For the given interface, get the stub implementation. If this service has no port for the given interface, then ServiceException is thrown.\n */\n@Override public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n  try {\n    if (is.fiskistofa.webservices.adili.FSWebServiceADILI_wsdl.FSWebServiceADILI_PortType.class.isAssignableFrom(serviceEndpointInterface)) {\n      is.fiskistofa.webservices.adili.FSWebServiceADILI_wsdl.FSWebServiceADILISoap12HttpStub _stub=new is.fiskistofa.webservices.adili.FSWebServiceADILI_wsdl.FSWebServiceADILISoap12HttpStub(new java.net.URL(FSWebServiceADILISoap12HttpPort_address),this);\n      _stub.setPortName(getFSWebServiceADILISoap12HttpPortWSDDServiceName());\n      return _stub;\n    }\n  }\n catch (  java.lang.Throwable t) {\n    throw new javax.xml.rpc.ServiceException(t);\n  }\n  throw new javax.xml.rpc.ServiceException(\"There is no stub implementation for the interface:  \" + (serviceEndpointInterface == null ? \"null\" : serviceEndpointInterface.getName()));\n}\n",
      "formalParam": [
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "java.rmi.Remote",
      "file": "./java_projects/is.idega.idegaweb.egov.gumbo/src/java/is/fiskistofa/webservices/adili/FSWebServiceADILI_wsdl/FSWebServiceADILI_ServiceLocator.java",
      "types": [
        "String",
        "Boolean",
        "Class",
        "MalformedURLException",
        "URL"
      ],
      "apicalls": [
        "isAssignableFrom"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.net.URL.URL(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "class",
        "net",
        "assignable",
        "java",
        "boolean",
        "lang",
        "url",
        "string",
        "malformed"
      ]
    },
    {
      "method": "sendXMLResponse@238",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.OutputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintWriter.print(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintWriter.flush()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/application/tomcat-main/src/main/java/org/collectionspace/chain/controller/CompositeWebUIRequestPart.java",
      "body": "@Override public void sendXMLResponse(String data) throws UIException {\n  mime_type_out=\"text/xml;charset=UTF-8\";\n  PrintWriter pw=new PrintWriter(body_out);\n  pw.print(data);\n  pw.flush();\n}\n",
      "types": [
        "PrintWriter",
        "String",
        "OutputStream"
      ],
      "apicalls": [
        "flush",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintWriter.PrintWriter(java.io.OutputStream)",
            "java.io.PrintWriter.print(java.lang.String)",
            "java.io.PrintWriter.flush()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "flush",
        "writer",
        "io",
        "java",
        "output",
        "string",
        "print"
      ]
    },
    {
      "method": "switchSerializerIfHTML@137",
      "formalParam": [
        "String",
        "String",
        "Properties",
        "Serializer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "Serializer",
      "file": "./java_projects/lcmc/src/lib/org/apache/xalan/transformer/SerializerSwitcher.java",
      "body": "/** \n * Switch to HTML serializer if element is HTML\n * @param ns Namespace URI of the element\n * @param localName Local part of name of element\n * @throws TransformerException\n * @return new contentHandler.\n */\npublic static Serializer switchSerializerIfHTML(String ns,String localName,Properties props,Serializer oldSerializer) throws TransformerException {\n  Serializer newSerializer=oldSerializer;\n  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase(\"html\")) {\n    if (null != getOutputPropertyNoDefault(OutputKeys.METHOD,props))     return newSerializer;\n    Properties prevProperties=props;\n    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);\n    htmlOutputProperties.copyFrom(prevProperties,true);\n    Properties htmlProperties=htmlOutputProperties.getProperties();\n{\n      if (null != oldSerializer) {\n        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);\n        Writer writer=oldSerializer.getWriter();\n        if (null != writer)         serializer.setWriter(writer);\n else {\n          OutputStream os=serializer.getOutputStream();\n          if (null != os)           serializer.setOutputStream(os);\n        }\n        newSerializer=serializer;\n      }\n    }\n  }\n  return newSerializer;\n}\n",
      "types": [
        "Boolean",
        "String",
        "Integer"
      ],
      "apicalls": [
        "equalsIgnoreCase",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "length",
        "equals",
        "case",
        "ignore",
        "integer",
        "string",
        "lang",
        "boolean"
      ]
    },
    {
      "method": "error@67",
      "body": "/** \n * Log an error message\n */\npublic void error(Object message){\n  System.err.print(\"Error: \");\n  System.err.println(message);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/HealthCheckTool/HealthCheckTool/lib/src/jxl/common/log/SimpleLogger.java",
      "types": [
        "PrintStream",
        "Object",
        "String"
      ],
      "apicalls": [
        "println",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.println(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "println",
        "io",
        "java",
        "print",
        "object",
        "string"
      ]
    },
    {
      "method": "RxdThread@248",
      "body": "public RxdThread(){\n  super(\"MultiCastManager.RxdThread.\" + address + \"#\"+ port);\n  setDaemon(true);\n  bReceiving=true;\n  try {\n    msocket=new MulticastSocket(port);\n    msocket.setInterface(bindAddress);\n    msocket.joinGroup(groupAddr);\n    start();\n    cfcThread=new cfcRunnerThread();\n  }\n catch (  IOException e) {\n    log(\"RxdThread.IOException:\" + e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.setDaemon(boolean)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Thread.start()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Thread.setDaemon(boolean)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Thread.start()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/open-bluedragon/src/com/naryx/tagfusion/cfm/tag/awt/MultiCastManager.java",
      "types": [
        "String",
        "Thread",
        "Throwable",
        "Boolean"
      ],
      "apicalls": [
        "start",
        "getMessage",
        "setDaemon"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()",
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()",
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "start",
        "thread",
        "java",
        "string",
        "boolean",
        "lang",
        "daemon",
        "throwable",
        "get",
        "set",
        "message"
      ]
    },
    {
      "method": "fromJar@23",
      "body": "/** \n * Returns an  {@link InputStream} corresponding to the the file denoted by{@code filePath}.  It will be read from the current set of class resources accessible by the given running class's classpath.  This classpath has access to not only local files via an absolute path, but also files embedded within a jar.\n * @param c The current {@link Class} that requires a resource\n * @param filePath The name of the file which should be read\n * @return A {@link InputStream} for data in {@code filePath}\n */\npublic static InputStream fromJar(Class c,String filePath){\n  return c.getClassLoader().getResourceAsStream(filePath);\n}\n",
      "formalParam": [
        "Class",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          }
        ]
      },
      "returnType": "InputStream",
      "file": "./java_projects/C-Cat/util/src/main/java/gov/llnl/ontology/util/StreamUtil.java",
      "types": [
        "InputStream",
        "String",
        "ClassLoader",
        "Class"
      ],
      "apicalls": [
        "getClassLoader",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResourceAsStream(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "loader",
        "class",
        "stream",
        "input",
        "get",
        "java",
        "string",
        "resource"
      ]
    },
    {
      "method": "testMiniDFSClusterWithMultipleNN@146",
      "body": "@Test public void testMiniDFSClusterWithMultipleNN() throws IOException {\n  Configuration conf=new Configuration();\n  MiniDFSCluster cluster=new MiniDFSCluster(9928,conf,1,true,null,2);\n  Assert.assertNotNull(cluster);\n  Assert.assertEquals(\"(1)Should be 2 namenodes\",2,cluster.getNumNameNodes());\n  cluster.addNameNode(conf,9929);\n  Assert.assertEquals(\"(1)Should be 3 namenodes\",3,cluster.getNumNameNodes());\n  cluster.shutdown();\n  conf=new Configuration();\n  cluster=new MiniDFSCluster(9928,conf,1,true,null,1);\n  Assert.assertNotNull(cluster);\n  Assert.assertEquals(\"(2)Should be 1 namenodes\",1,cluster.getNumNameNodes());\n  cluster.addNameNode(conf,9929);\n  Assert.assertEquals(\"(2)Should be 2 namenodes\",2,cluster.getNumNameNodes());\n  cluster.shutdown();\n  conf=new Configuration();\n  cluster=new MiniDFSCluster(9928,conf,1,true,true,null,null);\n  Assert.assertNotNull(cluster);\n  Assert.assertEquals(\"(2)Should be 1 namenodes\",1,cluster.getNumNameNodes());\n  try {\n    cluster.addNameNode(conf,9929);\n    Assert.fail(\"shouldn't be able to add another NN to non federated cluster\");\n  }\n catch (  IOException e) {\n    Assert.assertTrue(e.getMessage().startsWith(\"cannot add namenode\"));\n    Assert.assertEquals(\"(3)Should be 1 namenodes\",1,cluster.getNumNameNodes());\n  }\n finally {\n    cluster.shutdown();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fb-raid-refactoring/src/test/org/apache/hadoop/hdfs/server/datanode/TestDataNodeMultipleRegistrations.java",
      "types": [
        "Boolean",
        "Throwable",
        "String"
      ],
      "apicalls": [
        "startsWith",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "get",
        "throwable",
        "lang",
        "string",
        "starts",
        "boolean",
        "java",
        "message"
      ]
    },
    {
      "method": "MMesh1D@120",
      "body": "public MMesh1D(BModel model){\n  super(model);\n  BCADGraphCell root=model.getGraph().getRootCell();\n  int edgediscrs=0;\n  for (Iterator<BCADGraphCell> itn=root.shapesExplorer(CADShapeEnum.EDGE); itn.hasNext(); ) {\n    BCADGraphCell cell=itn.next();\n    edgediscrs+=cell.getDiscretizations().size();\n  }\n  if (edgediscrs == 0)   return;\n  mapDiscrToSubMesh1D=new LinkedHashMap<BDiscretization,SubMesh1D>(edgediscrs);\n  edgediscrs=0;\n  for (Iterator<BCADGraphCell> itn=root.shapesExplorer(CADShapeEnum.EDGE); itn.hasNext(); ) {\n    BCADGraphCell cell=itn.next();\n    for (    BDiscretization discr : cell.getDiscretizations()) {\n      if (mapDiscrToSubMesh1D.containsKey(discr))       continue;\n      SubMesh1D submesh1d=new SubMesh1D(discr,this);\n      mapDiscrToSubMesh1D.put(discr,submesh1d);\n      edgediscrs++;\n    }\n  }\n  System.out.println(\"Number of Edge discretizations created in MMesh1D: \" + edgediscrs);\n  Map<BDiscretization,LinkedHashSet<BDiscretization>> mapDiscrToFaces=new HashMap<BDiscretization,LinkedHashSet<BDiscretization>>(edgediscrs);\n  for (  BDiscretization d : mapDiscrToSubMesh1D.keySet()) {\n    mapDiscrToFaces.put(d,new LinkedHashSet<BDiscretization>());\n  }\n  for (Iterator<BCADGraphCell> itp=root.shapesExplorer(CADShapeEnum.FACE); itp.hasNext(); ) {\n    BCADGraphCell pcell=itp.next();\n    for (    BDiscretization pd : pcell.getDiscretizations()) {\n      for (Iterator<BCADGraphCell> itc=pcell.shapesExplorer(CADShapeEnum.EDGE); itc.hasNext(); ) {\n        BCADGraphCell ccell=itc.next();\n        for (        BDiscretization cd : ccell.getDiscretizations()) {\n          if (pd.contained(cd)) {\n            LinkedHashSet<BDiscretization> set=mapDiscrToFaces.get(cd);\n            set.add(pd);\n          }\n        }\n      }\n    }\n  }\n  assert(isValid());\n}\n",
      "formalParam": [
        "BModel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.LinkedHashSet<Tau_E>.LinkedHashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jCAE/amibe/src/org/jcae/mesh/amibe/ds/MMesh1D.java",
      "types": [
        "LinkedHashMap",
        "HashMap",
        "Integer",
        "PrintStream",
        "LinkedHashSet",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap(int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap(int)",
            "java.util.LinkedHashSet<Tau_E>.LinkedHashSet()"
          ]
        }
      ],
      "keywords": [
        "map",
        "io",
        "stream",
        "linked",
        "println",
        "string",
        "integer",
        "set",
        "util",
        "print",
        "hash",
        "java"
      ]
    },
    {
      "method": "getInstance@19",
      "body": "public static TriviaEngine getInstance(){\n  if (sInstance == null)   sInstance=new TriviaEngine();\n  return sInstance;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "TriviaEngine",
      "file": "./java_projects/autobot/src/com/snc/automation/autobot/task/trivia/TriviaEngine.java",
      "types": [
        "ArrayList",
        "Collection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "java",
        "array",
        "list",
        "collection",
        "util"
      ]
    },
    {
      "method": "setEnabled@77",
      "body": "public void setEnabled(boolean enabled){\n  super.setEnabled(enabled);\n  list.setEnabled(enabled);\n  tfield.setEditable(enabled);\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.setEnabled(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.text.JTextComponent.setEditable(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/NearInfinity/infinity/gui/TextListPanel.java",
      "types": [
        "Boolean",
        "JComponent",
        "JTextComponent"
      ],
      "apicalls": [
        "setEnabled",
        "setEditable"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.setEnabled(boolean)",
            "javax.swing.text.JTextComponent.setEditable(boolean)"
          ]
        }
      ],
      "keywords": [
        "enabled",
        "text",
        "boolean",
        "component",
        "javax",
        "j",
        "swing",
        "editable",
        "set"
      ]
    },
    {
      "method": "JXList@283",
      "body": "/** \n * Constructs a <code>JXList</code> with an empty model and filterEnabled property.\n * @param filterEnabled <code>boolean</code> to determine if filtering/sorting is enabled\n */\npublic JXList(boolean filterEnabled){\n  init(filterEnabled);\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JList.getModel()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.ListModel"
          },
          {
            "_call": "javax.swing.ListModel.removeListDataListener(javax.swing.event.ListDataListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.ListModel.addListDataListener(javax.swing.event.ListDataListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.getActionMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.ActionMap"
          },
          {
            "_call": "javax.swing.JComponent.getInputMap(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.InputMap"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/kolmafia/lib/org/jdesktop/swingx/JXList.java",
      "types": [
        "Object",
        "JComponent",
        "AbstractListModel",
        "ActionMap",
        "String",
        "InputMap",
        "Integer",
        "Boolean",
        "ListModel",
        "JList",
        "ListDataListener"
      ],
      "apicalls": [
        "getInputMap",
        "removeListDataListener",
        "addListDataListener",
        "getModel",
        "fireContentsChanged",
        "getActionMap",
        "firePropertyChange"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JList.getModel()",
            "javax.swing.ListModel.removeListDataListener(javax.swing.event.ListDataListener)",
            "javax.swing.ListModel.addListDataListener(javax.swing.event.ListDataListener)",
            "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)",
            "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "javax.swing.JComponent.getActionMap()",
            "javax.swing.JComponent.getInputMap(int)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "fire",
        "javax",
        "object",
        "get",
        "action",
        "input",
        "map",
        "swing",
        "add",
        "change",
        "boolean",
        "string",
        "abstract",
        "model",
        "contents",
        "component",
        "list",
        "j",
        "property",
        "listener",
        "integer",
        "data",
        "changed"
      ]
    },
    {
      "method": "testRefuse1@72",
      "body": "public void testRefuse1(){\n  Properties props=new Properties();\n  props.put(\"instance.name\",\"under-ref1\");\n  ComponentInstance under=null;\n  try {\n    under=refuse1F.createComponentInstance(props);\n  }\n catch (  Exception e) {\n    fail(\"Cannot instantiate under : \" + e.getMessage());\n  }\n  assertTrue(\"Check that under is not valid\",under.getState() == ComponentInstance.INVALID);\n  under.dispose();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/felix/ipojo/tests/composite/service-instance/src/main/java/org/apache/felix/ipojo/test/composite/instantiator/ConfigurableInstantiation.java",
      "types": [
        "Object",
        "Hashtable",
        "Properties",
        "Throwable",
        "String"
      ],
      "apicalls": [
        "put",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "object",
        "java",
        "util",
        "message",
        "lang",
        "throwable",
        "put",
        "string",
        "hashtable",
        "get",
        "properties"
      ]
    },
    {
      "method": "GuiSlotLanguage@17",
      "formalParam": [
        "GuiLanguage"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.TreeMap.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Set.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Pixelmon_2/minecraft/net/minecraft/src/GuiSlotLanguage.java",
      "body": "public GuiSlotLanguage(GuiLanguage par1GuiLanguage){\n  super(par1GuiLanguage.mc,par1GuiLanguage.width,par1GuiLanguage.height,32,par1GuiLanguage.height - 65 + 4,18);\n  this.languageGui=par1GuiLanguage;\n  this.field_77253_h=StringTranslate.getInstance().getLanguageList();\n  this.field_77251_g=new ArrayList();\n  Iterator var2=this.field_77253_h.keySet().iterator();\n  while (var2.hasNext()) {\n    String var3=(String)var2.next();\n    this.field_77251_g.add(var3);\n  }\n}\n",
      "types": [
        "TreeMap",
        "Object",
        "Set",
        "Iterator",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "add",
        "keySet",
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.TreeMap.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "key",
        "object",
        "boolean",
        "set",
        "iterator",
        "next",
        "map",
        "tree",
        "array",
        "list",
        "util",
        "add"
      ]
    },
    {
      "method": "run@44",
      "body": "public void run(){\n  while (mProt != null) {\n    try {\n      mProt.read();\n    }\n catch (    Exception e) {\n      Log.e(XServer.TAG,\"X11Client: terminating on exception: \" + e.toString());\n      e.printStackTrace();\n      close();\n    }\n  }\n  for (  X11Resource r : mResources.values()) {\n    r.destroy();\n  }\n  mServer.clientClosed(this);\n  mServer=null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android-x-server/src/tdm/xserver/X11Client.java",
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.toString()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "string",
        "stack",
        "trace",
        "lang",
        "print",
        "java",
        "throwable"
      ]
    },
    {
      "method": "activate@145",
      "formalParam": [
        "Restrictions"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.reflect.Method.getAnnotation(java.lang.Class)",
            "node": "DAPICall",
            "_returns": "Tau_T",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.sort(T[],java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AU-AD/AE-go_GameServer/src/com/aionemu/gameserver/restrictions/RestrictionsManager.java",
      "body": "public synchronized static void activate(Restrictions restriction){\n  for (  Method method : restriction.getClass().getMethods()) {\n    RestrictionMode mode=RestrictionMode.parse(method);\n    if (mode == null)     continue;\n    if (method.getAnnotation(DisabledRestriction.class) != null)     continue;\n    Restrictions[] restrictions=RESTRICTIONS[mode.ordinal()];\n    if (!ArrayUtils.contains(restrictions,restriction))     restrictions=(Restrictions[])ArrayUtils.add(restrictions,restriction);\n    Arrays.sort(restrictions,mode);\n    RESTRICTIONS[mode.ordinal()]=restrictions;\n  }\n}\n",
      "types": [
        "Class",
        "Arrays",
        "Comparator",
        "Method"
      ],
      "apicalls": [
        "sort",
        "getAnnotation"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.Method.getAnnotation(java.lang.Class)",
            "java.util.Arrays.sort(T[],java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "util",
        "reflect",
        "lang",
        "sort",
        "method",
        "get",
        "comparator",
        "annotation",
        "class",
        "arrays",
        "java"
      ]
    },
    {
      "method": "test_CompositionWithSourceAndTargetNoTransformers@306",
      "body": "/** \n * Checks whether a closed transformer chain can be constructed and executed with a TransformationSource, a Sink and no transformers in between.\n */\n@Test public void test_CompositionWithSourceAndTargetNoTransformers(){\n  ArrayList<Double> input=new ArrayList<Double>(Arrays.asList(88.0,754.8,0.0,123456.2));\n  TransformerSource<Double> initialSource=new DummyTransformerSource<Double>(input);\n  ArrayList<Double> results=new ArrayList<Double>();\n  DummyTransformerSink<Double> sink=new DummyTransformerSink<Double>(results);\n  ClosedTransformerChain chain=TransformerChainFactory.<Double,Double>newChain().add(initialSource).last(sink);\n  chain.run();\n  int count=0;\n  for (  Double i : results) {\n    Assert.assertEquals(input.get(count),i);\n    count++;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Double>.ArrayList<Double>(java.util.Collection)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Double>.ArrayList<Double>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Double>.get(int)",
            "_throws": [],
            "_returns": "java.lang.Double",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geolatte-common/src/test/java/org/geolatte/common/transformer/TransformerChainFactoryTest.java",
      "types": [
        "Collection",
        "ArrayList",
        "Integer",
        "Double",
        "Arrays",
        "List"
      ],
      "apicalls": [
        "get",
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.ArrayList<java.lang.Double>.ArrayList<Double>(java.util.Collection)",
            "java.util.ArrayList<java.lang.Double>.ArrayList<Double>()",
            "java.util.ArrayList<java.lang.Double>.get(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "list",
        "util",
        "double",
        "integer",
        "arrays",
        "get",
        "collection",
        "array"
      ]
    },
    {
      "method": "buildColorTable@251",
      "body": "/** \n * Build the color table.\n * @return the color table\n */\npublic int[] buildColorTable(){\n  int[] table=new int[colors];\n  buildColorTable(root,table,0);\n  return table;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.Vector.removeElement(java.lang.Object)",
                    "_throws": [],
                    "_returns": "boolean",
                    "node": "DAPICall"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Vector.size()",
                    "_throws": [],
                    "_returns": "int",
                    "node": "DAPICall"
                  }
                ]
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "int[]",
      "file": "./java_projects/Saros/trunk/src/de/fu_berlin/inf/dpp/videosharing/encode/tools/OctTreeQuantizer.java",
      "types": [
        "Vector",
        "Integer",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "removeElement",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()"
          ]
        },
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.size()",
            "java.util.Vector.removeElement(java.lang.Object)",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "object",
        "element",
        "vector",
        "boolean",
        "remove",
        "util",
        "size",
        "java",
        "integer"
      ]
    },
    {
      "method": "editPasswordEnabled@94",
      "formalParam": [
        "Region",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Regios/src/couk/Adamki11s/Regios/Mutable/MutableProtectionMisc.java",
      "body": "public void editPasswordEnabled(Region r,boolean val){\n  Configuration c=r.getConfigFile();\n  c.load();\n  Map<String,Object> all=c.getAll();\n  all.remove(\"Region.General.Password.Enabled\");\n  for (  Entry<String,Object> entry : all.entrySet()) {\n    c.setProperty(entry.getKey(),entry.getValue());\n  }\n  c.setProperty(\"Region.General.Password.Enabled\",val);\n  r.setPasswordEnabled(val);\n  c.save();\n}\n",
      "types": [
        "String",
        "Set",
        "Map",
        "Object"
      ],
      "apicalls": [
        "remove",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.entrySet()"
          ]
        }
      ],
      "keywords": [
        "object",
        "entry",
        "util",
        "java",
        "remove",
        "set",
        "string",
        "map"
      ]
    },
    {
      "method": "extractTip@127",
      "body": "public static String extractTip(String htmlTip){\n  if (!htmlTip.startsWith(\"<html>\"))   return htmlTip;\n  String t=htmlTip.substring(htmlPrefix.length());\n  t=t.substring(0,t.indexOf('<'));\n  return t;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/KanonProject/ui/src/main/java/com/projity/menu/HyperLinkToolTip.java",
      "types": [
        "String",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "length",
        "indexOf",
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.indexOf(int)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "length",
        "substring",
        "lang",
        "integer",
        "starts",
        "index",
        "boolean"
      ]
    },
    {
      "method": "addAlias@104",
      "body": "@Override public void addAlias(String ali){\n  if (aliases == null)   aliases=new ArrayList<String>(5);\n  aliases.add(ali);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collection<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AGE/src/uk/ac/ebi/age/model/impl/v1/AgeAnnotationClassImpl.java",
      "types": [
        "ArrayList",
        "String",
        "Integer",
        "Boolean",
        "Collection"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(int)",
            "java.util.Collection<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "array",
        "add",
        "string",
        "boolean",
        "java",
        "list",
        "collection",
        "integer",
        "util"
      ]
    },
    {
      "method": "fromDate@12",
      "body": "public static Date fromDate(Timestamp timestamp){\n  if (timestamp == null)   return null;\n  return new java.util.Date(timestamp.getTime());\n}\n",
      "formalParam": [
        "Timestamp"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Timestamp.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Date",
      "file": "./java_projects/ovirt-engine/backend/manager/modules/dal/src/main/java/org/ovirt/engine/core/dal/dbbroker/DbFacadeUtils.java",
      "types": [
        "Timestamp",
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Timestamp.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "get",
        "date",
        "util",
        "time",
        "timestamp",
        "long",
        "sql",
        "java"
      ]
    },
    {
      "method": "get@63",
      "body": "public Set<V> get(K key){\n  Set<V> ret=map.get(key);\n  if (ret == null) {\n    if (create) {\n      ret=createSet();\n      map.put(key,ret);\n    }\n else {\n      ret=emptySet();\n    }\n  }\n  return ret;\n}\n",
      "formalParam": [
        "K"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "Set<V>",
      "file": "./java_projects/wala-mirror/com.ibm.wala.util/src/com/ibm/wala/util/collections/AbstractMultiMap.java",
      "types": [
        "Object",
        "Map"
      ],
      "apicalls": [
        "put",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "put",
        "object",
        "util",
        "map",
        "get",
        "java"
      ]
    },
    {
      "method": "getWidthWithSpace@57",
      "body": "public int getWidthWithSpace(){\n  g2.setFont(this.getFont());\n  return g2.getFontMetrics().stringWidth(getText() + \" \");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.setFont(java.awt.Font)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.getFontMetrics()",
            "node": "DAPICall",
            "_returns": "java.awt.FontMetrics",
            "_throws": []
          },
          {
            "_call": "java.awt.FontMetrics.stringWidth(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/org.openscada.external/org.openscada.external.jOpenDocument/src/org/jopendocument/renderer/ODTCellTextItem.java",
      "types": [
        "FontMetrics",
        "Graphics",
        "Font",
        "PrintStream",
        "String",
        "Integer"
      ],
      "apicalls": [
        "stringWidth",
        "println",
        "getFontMetrics",
        "setFont"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.awt.Graphics.setFont(java.awt.Font)",
            "java.awt.Graphics.getFontMetrics()",
            "java.awt.FontMetrics.stringWidth(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "awt",
        "set",
        "metrics",
        "java",
        "get",
        "string",
        "print",
        "io",
        "graphics",
        "width",
        "font",
        "println",
        "integer",
        "stream"
      ]
    },
    {
      "method": "destroyIndestructible@167",
      "body": "public BAD_INV_ORDER destroyIndestructible(CompletionStatus cs,Throwable t){\n  BAD_INV_ORDER exc=new BAD_INV_ORDER(DESTROY_INDESTRUCTIBLE,cs);\n  if (t != null)   exc.initCause(t);\n  if (logger.isLoggable(Level.WARNING)) {\n    Object[] parameters=null;\n    doLog(Level.WARNING,\"OMG.destroyIndestructible\",parameters,OMGSystemException.class,exc);\n  }\n  return exc;\n}\n",
      "formalParam": [
        "CompletionStatus",
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "BAD_INV_ORDER",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/OMGSystemException.java",
      "types": [
        "Throwable",
        "Boolean",
        "Level",
        "Logger"
      ],
      "apicalls": [
        "initCause",
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "init",
        "logger",
        "loggable",
        "level",
        "lang",
        "java",
        "throwable",
        "boolean",
        "logging",
        "util",
        "cause"
      ]
    },
    {
      "method": "assertResponseEquals@202",
      "body": "public void assertResponseEquals(String expected,ClientResponse[] responses){\n  StringBuilder result=new StringBuilder();\n  for (  ClientResponse r : responses) {\n    if (r.getStatus() == ClientResponse.Status.OK.getStatusCode()) {\n      result.append(r.getEntity(String.class));\n    }\n else {\n      result.append(r.getStatus());\n    }\n    result.append(\",\");\n  }\n  assertEquals(expected,result.toString());\n}\n",
      "formalParam": [
        "String",
        "ClientResponse[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jersey-1.x/jersey/jersey-tests/src/test/java/com/sun/jersey/impl/container/filter/PostToPutDeleteTest.java",
      "types": [
        "StringBuilder",
        "String",
        "Object"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "lang",
        "object",
        "string",
        "java",
        "append"
      ]
    },
    {
      "method": "deploy@53",
      "body": "public void deploy(Log log,Artifact artifact) throws MojoExecutionException {\n  StringBuilder buffer=new StringBuilder(artifact.getArtifactId());\n  if (!stripVersion) {\n    buffer.append(\"-\");\n    buffer.append(artifact.getVersion());\n  }\n  buffer.append(\".\");\n  buffer.append(artifact.getType());\n  String destFileName=buffer.toString();\n  log.info(\"Adding \" + destFileName);\n  try {\n    FileUtils.copyFile(artifact.getFile(),new File(directory,destFileName));\n  }\n catch (  IOException ex) {\n    throw new MojoExecutionException(\"Error copying \" + destFileName + \": \"+ ex.getMessage(),ex);\n  }\n  files.add(destFileName);\n}\n",
      "formalParam": [
        "Log",
        "Artifact"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/axis2-java/modules/tool/axis2-repo-maven-plugin/src/main/java/org/apache/axis2/maven2/repo/ArchiveDeployer.java",
      "types": [
        "Boolean",
        "StringBuilder",
        "String",
        "List",
        "File",
        "Object"
      ],
      "apicalls": [
        "toString",
        "append",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "add",
        "object",
        "builder",
        "lang",
        "util",
        "io",
        "append",
        "string",
        "java",
        "file",
        "boolean"
      ]
    },
    {
      "method": "acquireToken@234",
      "body": "/** \n * Hook to get the token for our base user\n */\n@Before public void acquireToken() throws Exception {\n  WebApplicationContext context=ContextLoader.getCurrentWebApplicationContext();\n  properties=(Properties)context.getBean(\"properties\");\n  managementService=(ManagementService)context.getBean(\"managementService\");\n  access_token=userToken(\"ed@anuff.com\",\"sesame\");\n  loginClient();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Thread.sleep(long)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.InterruptedException"
                ]
              }
            ],
            "_try": [
              {
                "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/usergrid-stack/rest/src/test/java/org/usergrid/rest/AbstractRestTest.java",
      "types": [
        "Object",
        "HashMap",
        "Thread",
        "InterruptedException",
        "Long",
        "String",
        "Map"
      ],
      "apicalls": [
        "format",
        "sleep",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.Thread.sleep(long)"
          ]
        },
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "long",
        "sleep",
        "thread",
        "exception",
        "string",
        "object",
        "format",
        "map",
        "interrupted",
        "java",
        "put",
        "hash"
      ]
    },
    {
      "method": "setLabels@3470",
      "body": "public void setLabels(){\n  setBorder(BorderFactory.createTitledBorder(app.getMenu(\"PointStyle\")));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.border.TitledBorder"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "types": [
        "String",
        "JComponent",
        "TitledBorder",
        "BorderFactory",
        "Border"
      ],
      "apicalls": [
        "setBorder",
        "createTitledBorder"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "j",
        "component",
        "factory",
        "swing",
        "set",
        "string",
        "border",
        "create",
        "titled"
      ]
    },
    {
      "method": "findDIElement@905",
      "body": "public static DiagramElement findDIElement(BaseElement element){\n  String id=element.getId();\n  if (id == null || id.isEmpty())   return null;\n  List<BPMNDiagram> diagrams=getAll(element.eResource(),BPMNDiagram.class);\n  for (  BPMNDiagram d : diagrams) {\n    BPMNPlane plane=d.getPlane();\n    BaseElement be=plane.getBpmnElement();\n    if (be != null && id.equals(be.getId()))     return plane;\n    List<DiagramElement> planeElement=plane.getPlaneElement();\n    for (    DiagramElement elem : planeElement) {\n      if (elem instanceof BPMNShape && ((BPMNShape)elem).getBpmnElement() != null && id.equals(((BPMNShape)elem).getBpmnElement().getId())) {\n        return (elem);\n      }\n else       if (elem instanceof BPMNEdge && id.equals(((BPMNEdge)elem).getBpmnElement().getId())) {\n        return (elem);\n      }\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "BaseElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "DiagramElement",
      "file": "./java_projects/bpmn2-modeler/org.eclipse.bpmn2.modeler.core/src/org/eclipse/bpmn2/modeler/core/ModelHandler.java",
      "types": [
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "equals",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.isEmpty()",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.isEmpty()",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "empty",
        "lang",
        "java",
        "string",
        "equals",
        "object"
      ]
    },
    {
      "method": "nameCheck@139",
      "body": "/** \n * @ast method \n * @aspect NameCheck\n * @declaredat /Users/eric/Documents/workspaces/clara-soot/JastAddJ/Java1.4Frontend/NameCheck.jrag:333\n */\npublic void nameCheck(){\n  SimpleSet decls=outerScope().lookupVariable(name());\n  for (Iterator iter=decls.iterator(); iter.hasNext(); ) {\n    Variable var=(Variable)iter.next();\n    if (var instanceof VariableDeclaration) {\n      VariableDeclaration decl=(VariableDeclaration)var;\n      if (decl.enclosingBodyDecl() == enclosingBodyDecl())       error(\"duplicate declaration of local variable \" + name());\n    }\n else     if (var instanceof ParameterDeclaration) {\n      ParameterDeclaration decl=(ParameterDeclaration)var;\n      if (decl.enclosingBodyDecl() == enclosingBodyDecl())       error(\"duplicate declaration of local variable \" + name());\n    }\n  }\n  if (!lookupVariable(name()).contains(this)) {\n    error(\"duplicate declaration of parameter \" + name());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/soot/generated/jastadd/soot/JastAddJ/ParameterDeclaration.java",
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next",
        "iterator",
        "util",
        "java",
        "boolean"
      ]
    },
    {
      "method": "testSetBitPositiveInside1@773",
      "body": "/** \n * setBit(int n) inside a positive number\n */\npublic void testSetBitPositiveInside1(){\n  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};\n  int aSign=1;\n  int number=20;\n  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};\n  BigInteger aNumber=new BigInteger(aSign,aBytes);\n  BigInteger result=aNumber.setBit(number);\n  byte resBytes[]=new byte[rBytes.length];\n  resBytes=result.toByteArray();\n  for (int i=0; i < resBytes.length; i++) {\n    assertTrue(resBytes[i] == rBytes[i]);\n  }\n  assertEquals(\"incorrect sign\",1,result.signum());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(int,byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.setBit(int)",
            "node": "DAPICall",
            "_returns": "java.math.BigInteger",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.math.BigInteger.signum()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/math/src/test/java/org/apache/harmony/tests/java/math/BigIntegerOperateBitsTest.java",
      "types": [
        "Integer",
        "Byte",
        "BigInteger"
      ],
      "apicalls": [
        "toByteArray",
        "signum",
        "setBit"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(int,byte[])",
            "java.math.BigInteger.setBit(int)",
            "java.math.BigInteger.toByteArray()",
            "java.math.BigInteger.signum()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "byte",
        "big",
        "set",
        "array",
        "signum",
        "math",
        "bit"
      ]
    },
    {
      "method": "getNameIdentifiers@965",
      "body": "public List<String> getNameIdentifiers(){\n  if ((identifiers == null) || identifiers.isEmpty()) {\n    return null;\n  }\n  List<String> names=new ArrayList<String>();\n  for (  Identifier identifier : identifiers) {\n    if (identifier.isName()) {\n      names.add(identifier.getName());\n    }\n  }\n  return names;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "List<String>",
      "file": "./java_projects/usergrid-stack/core/src/main/java/org/usergrid/mq/Query.java",
      "types": [
        "ArrayList",
        "List",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "add",
        "util",
        "string",
        "java",
        "boolean"
      ]
    },
    {
      "method": "println@208",
      "body": "public static void println(String messageIn){\n  dialog.displayMessage(messageIn);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.TextArea.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java",
      "types": [
        "PrintStream",
        "String",
        "TextArea"
      ],
      "apicalls": [
        "println",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.TextArea.append(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "stream",
        "print",
        "java",
        "text",
        "string",
        "io",
        "append",
        "area",
        "awt"
      ]
    },
    {
      "method": "debug@33",
      "body": "public static void debug(Object object,String text,Object... vars){\n  String message=String.format(text,vars);\n  Logger.getLogger(object.getClass().getName()).fine(message);\n}\n",
      "formalParam": [
        "Object",
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.getLogger(java.lang.String)",
            "_throws": [],
            "_returns": "java.util.logging.Logger",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.fine(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/smajava/src/be/geek/smajava/Log.java",
      "types": [
        "Object",
        "Class",
        "Logger",
        "String"
      ],
      "apicalls": [
        "getLogger",
        "getName",
        "fine",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.Class.getName()",
            "java.util.logging.Logger.getLogger(java.lang.String)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "object",
        "logger",
        "class",
        "string",
        "format",
        "util",
        "java",
        "lang",
        "name",
        "fine",
        "get",
        "logging"
      ]
    },
    {
      "method": "testSendReplyMessageWithReplyMessageCorrelator@73",
      "body": "@Test public void testSendReplyMessageWithReplyMessageCorrelator() throws JMSException {\n  ReplyMessageChannelSender sender=new ReplyMessageChannelSender();\n  sender.setMessagingTemplate(messagingTemplate);\n  ReplyMessageChannelHolder replyChannelHolder=org.easymock.EasyMock.createMock(ReplyMessageChannelHolder.class);\n  sender.setReplyMessageChannelHolder(replyChannelHolder);\n  ReplyMessageCorrelator correlator=new DefaultReplyMessageCorrelator();\n  sender.setCorrelator(correlator);\n  Map<String,Object> headers=new HashMap<String,Object>();\n  headers.put(CitrusMessageHeaders.SYNC_MESSAGE_CORRELATOR,\"123456789\");\n  final Message<String> message=MessageBuilder.withPayload(\"<TestRequest><Message>Hello World!</Message></TestRequest>\").copyHeaders(headers).build();\n  final Message<String> sentMessage=MessageBuilder.fromMessage(message).removeHeader(CitrusMessageHeaders.SYNC_MESSAGE_CORRELATOR).build();\n  reset(messagingTemplate,replyChannel,replyChannelHolder);\n  expect(replyChannelHolder.getReplyMessageChannel(MessageHeaders.ID + \" = '123456789'\")).andReturn(replyChannel).once();\n  messagingTemplate.send(eq(replyChannel),(Message<?>)anyObject());\n  expectLastCall().andAnswer(new IAnswer<Object>(){\n    public Object answer() throws Throwable {\n      Assert.assertEquals(((Message<?>)getCurrentArguments()[1]).getPayload(),sentMessage.getPayload());\n      return null;\n    }\n  }\n).once();\n  replay(messagingTemplate,replyChannel,replyChannelHolder);\n  sender.send(message);\n  verify(messagingTemplate,replyChannel,replyChannelHolder);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/citrus_1/modules/citrus-core/src/test/java/com/consol/citrus/channel/ReplyMessageChannelSenderTest.java",
      "types": [
        "Object",
        "String",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "object",
        "map",
        "hash",
        "util",
        "put"
      ]
    },
    {
      "method": "testMultipleFlattenning@30",
      "body": "public void testMultipleFlattenning() throws InvalidFlatDataException {\n  String fd=new String(originalFlatData);\n  for (int i=0; i < 50; i++) {\n    fd=(new Text(fd).flatten());\n  }\n  if (!fd.equals(originalFlatData)) {\n    fail(\"Failed when flattening and unflattening multiple times\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Siafu/Datatypes/test/de/nec/nle/siafu/types/external/test/TextFlatteningTests.java",
      "types": [
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.String(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "object",
        "lang",
        "equals",
        "string",
        "boolean"
      ]
    },
    {
      "method": "testBasicConnect2@85",
      "body": "@Test public void testBasicConnect2() throws Exception {\n  ObservableFuture<ConnectionHandle> future=signalProvider.connect();\n  future.await();\n  assertSuccess(future);\n  final ConnectionHandle connectionHandle=future.getResult();\n  final CountDownLatch latch=new CountDownLatch(3);\n  connectionHandle.link(new DestroyableBase(){\n    @Override protected void onDestroy(){\n      latch.countDown();\n    }\n  }\n);\n  connectionHandle.getDisconnectFuture().addObserver(new Observer<ObservableFuture<ConnectionHandle>>(){\n    @Override public void notify(    Object sender,    ObservableFuture<ConnectionHandle> item){\n      assertSuccess(item);\n      assertNotNull(item.getResult());\n      assertFalse(signalProvider.getConnectionState() == ConnectionState.CONNECTED);\n      assertFalse(signalProvider.getConnectionState() == ConnectionState.AUTHENTICATED);\n      assertTrue(connectionHandle.isDestroyed());\n      latch.countDown();\n    }\n  }\n);\n  signalProvider.getConnectionChangedEvent().addObserver(new Observer<Boolean>(){\n    @Override public void notify(    Object sender,    Boolean connected){\n      assertFalse(connected);\n      assertFalse(signalProvider.getConnectionState() == ConnectionState.CONNECTED);\n      assertFalse(signalProvider.getConnectionState() == ConnectionState.AUTHENTICATED);\n      assertTrue(connectionHandle.isDestroyed());\n      latch.countDown();\n    }\n  }\n);\n  assertTrue(signalProvider.getConnectionState() == ConnectionState.AUTHENTICATED);\n  TestUtil.awaitAndAssertSuccess(signalProvider.disconnect());\n  assertTrue(connectionHandle.isDestroyed());\n  assertFalse(signalProvider.getConnectionState() == ConnectionState.CONNECTED);\n  assertTrue(latch.await(10,TimeUnit.SECONDS));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/zipwhip-api/src/test/java/com/zipwhip/api/signals/sockets/SignalProviderTests.java",
      "types": [
        "Boolean",
        "TimeUnit",
        "InterruptedException",
        "CountDownLatch",
        "Long",
        "Integer"
      ],
      "apicalls": [
        "await"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)"
          ]
        }
      ],
      "keywords": [
        "long",
        "count",
        "time",
        "exception",
        "integer",
        "boolean",
        "concurrent",
        "java",
        "util",
        "interrupted",
        "latch",
        "unit",
        "await"
      ]
    },
    {
      "method": "getNames@605",
      "body": "/** \n * Get an array of field names from an Object.\n * @return An array of field names, or null if there are no names.\n */\npublic static String[] getNames(Object object){\n  if (object == null) {\n    return null;\n  }\n  Class klass=object.getClass();\n  Field[] fields=klass.getFields();\n  int length=fields.length;\n  if (length == 0) {\n    return null;\n  }\n  String[] names=new String[length];\n  for (int i=0; i < length; i+=1) {\n    names[i]=fields[i].getName();\n  }\n  return names;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getFields()",
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Field[]",
            "_throws": [
              "java.lang.SecurityException"
            ]
          },
          {
            "_call": "java.lang.reflect.Field.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String[]",
      "file": "./java_projects/MineBans/src/main/java/org/json/JSONObject.java",
      "types": [
        "Class",
        "Field",
        "SecurityException",
        "String"
      ],
      "apicalls": [
        "getName",
        "getFields"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getFields()",
            "java.lang.reflect.Field.getName()"
          ]
        }
      ],
      "keywords": [
        "get",
        "security",
        "java",
        "class",
        "name",
        "exception",
        "string",
        "field",
        "fields",
        "reflect",
        "lang"
      ]
    },
    {
      "method": "decrypt@43",
      "body": "public static byte[] decrypt(byte[] cipherBytes,String key,byte[] iv) throws Exception {\n  Cipher cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM);\n  AlgorithmParameters params=AlgorithmParameters.getInstance(\"AES\");\n  params.init(new IvParameterSpec(iv));\n  cipher.init(Cipher.DECRYPT_MODE,getKey(key),params);\n  return cipher.doFinal(cipherBytes);\n}\n",
      "formalParam": [
        "byte[]",
        "String",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.crypto.Cipher.getInstance(java.lang.String)",
            "_throws": [
              "java.security.NoSuchAlgorithmException",
              "javax.crypto.NoSuchPaddingException"
            ],
            "_returns": "javax.crypto.Cipher",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "_returns": "char[]",
            "node": "DAPICall"
          },
          {
            "_call": "javax.crypto.Cipher.init(int,java.security.Key,java.security.AlgorithmParameters)",
            "_throws": [
              "java.security.InvalidKeyException",
              "java.security.InvalidAlgorithmParameterException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.crypto.Cipher.doFinal(byte[])",
            "_throws": [
              "javax.crypto.IllegalBlockSizeException",
              "javax.crypto.BadPaddingException"
            ],
            "_returns": "byte[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/aws-sdk-for-android/samples/S3_SimpleDB_SNS_SQS_DemoTVMIdentity/src/com/amazonaws/tvmclient/AESEncryption.java",
      "types": [
        "NoSuchPaddingException",
        "AlgorithmParameters",
        "Integer",
        "InvalidKeyException",
        "String",
        "Key",
        "InvalidAlgorithmParameterException",
        "Byte",
        "BadPaddingException",
        "NoSuchAlgorithmException",
        "IllegalBlockSizeException",
        "Cipher"
      ],
      "apicalls": [
        "toCharArray",
        "getInstance",
        "doFinal",
        "init"
      ],
      "sequences": [
        {
          "calls": [
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "java.lang.String.toCharArray()",
            "javax.crypto.Cipher.init(int,java.security.Key,java.security.AlgorithmParameters)",
            "javax.crypto.Cipher.doFinal(byte[])"
          ]
        }
      ],
      "keywords": [
        "init",
        "get",
        "string",
        "invalid",
        "final",
        "parameter",
        "size",
        "array",
        "illegal",
        "cipher",
        "integer",
        "algorithm",
        "parameters",
        "java",
        "instance",
        "key",
        "lang",
        "byte",
        "bad",
        "crypto",
        "char",
        "exception",
        "javax",
        "block",
        "padding"
      ]
    },
    {
      "method": "accept@28",
      "body": "public boolean accept(File pathname){\n  if (pathname.isDirectory()) {\n    return true;\n  }\n else {\n    return pathname.getAbsolutePath().endsWith(this.fileext);\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.File.isDirectory()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/izpack/izpack-panel/src/main/java/com/izforge/izpack/panels/userinput/UserInputFileFilter.java",
      "types": [
        "File",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "isDirectory",
        "getAbsolutePath",
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.isDirectory()"
          ]
        },
        {
          "calls": [
            "java.io.File.isDirectory()",
            "java.io.File.getAbsolutePath()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io",
        "path",
        "string",
        "ends",
        "get",
        "boolean",
        "lang",
        "file",
        "java",
        "absolute",
        "directory"
      ]
    },
    {
      "method": "setUp@55",
      "body": "@Before public void setUp() throws IOException {\n  tempDir=util.createTempDir(getClass().getSimpleName() + \"-nexus-logs\");\n  when(config.getWorkingDirectory(\"logs\")).thenReturn(tempDir);\n  logFile=new File(tempDir,\"nexus.log\");\n  Files.write(\"test\".getBytes(\"utf-8\"),logFile);\n  underTest=new LogFilesBundleAssembler(config);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getSimpleName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "_returns": "byte[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/nexus/nexus/nexus-app/src/test/java/org/sonatype/nexus/error/reporting/bundle/LogFilesBundleAssemblerTest.java",
      "types": [
        "File",
        "String",
        "UnsupportedEncodingException",
        "Class"
      ],
      "apicalls": [
        "getBytes",
        "getSimpleName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getSimpleName()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.lang.String.getBytes(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "get",
        "name",
        "encoding",
        "lang",
        "simple",
        "class",
        "bytes",
        "io",
        "java",
        "exception",
        "unsupported",
        "file",
        "string"
      ]
    },
    {
      "method": "internalTrigger@51",
      "body": "public void internalTrigger(final NodeInstance from,String type){\n  if (!Node.CONNECTION_DEFAULT_TYPE.equals(type)) {\n    throw new IllegalArgumentException(\"A SubProcess node only accepts default incoming connections!\");\n  }\n  Map<String,Object> parameters=new HashMap<String,Object>();\n  for (  Map.Entry<String,String> mapping : getSubProcessNode().getInMappings().entrySet()) {\n    VariableScopeInstance variableScopeInstance=(VariableScopeInstance)resolveContextInstance(VariableScope.VARIABLE_SCOPE,mapping.getValue());\n    if (variableScopeInstance != null) {\n      parameters.put(mapping.getKey(),variableScopeInstance.getVariable(mapping.getValue()));\n    }\n else {\n      System.err.println(\"Could not find variable scope for variable \" + mapping.getValue());\n      System.err.println(\"when trying to execute SubProcess node \" + getSubProcessNode().getName());\n      System.err.println(\"Continuing without setting parameter.\");\n    }\n  }\n  ProcessInstance processInstance=getProcessInstance().getWorkingMemory().startProcess(getSubProcessNode().getProcessId(),parameters);\n  if (!getSubProcessNode().isWaitForCompletion() || processInstance.getState() == ProcessInstance.STATE_COMPLETED) {\n    triggerCompleted();\n  }\n else {\n    addEventListeners();\n    this.processInstanceId=processInstance.getId();\n  }\n}\n",
      "formalParam": [
        "NodeInstance",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.println(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-core/src/main/java/org/drools/workflow/instance/node/SubProcessNodeInstance.java",
      "types": [
        "Character",
        "Map",
        "Object",
        "HashMap",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "put",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "print",
        "stream",
        "put",
        "character",
        "java",
        "map",
        "println",
        "object",
        "util",
        "io",
        "string",
        "hash"
      ]
    },
    {
      "method": "reportProgress@246",
      "body": "public void reportProgress(String str){\n  List ref=progress_listeners;\n  for (int i=0; i < ref.size(); i++) {\n    try {\n      ((UpdateProgressListener)ref.get(i)).reportProgress(str);\n    }\n catch (    Throwable e) {\n      Debug.printStackTrace(e);\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/BitMate/azureus2/src/org/gudy/azureus2/pluginsimpl/local/update/UpdateCheckerImpl.java",
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "integer",
        "list",
        "java",
        "util"
      ]
    },
    {
      "method": "init@51",
      "formalParam": [
        "int",
        "byte[]",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.crypto.Cipher.getInstance(java.lang.String)",
            "node": "DAPICall",
            "_returns": "javax.crypto.Cipher",
            "_throws": [
              "java.security.NoSuchAlgorithmException",
              "javax.crypto.NoSuchPaddingException"
            ]
          },
          {
            "_call": "javax.crypto.Cipher.init(int,java.security.Key)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.security.InvalidKeyException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/MineBackup/src/com/jcraft/jsch/jce/ARCFOUR.java",
      "body": "public void init(int mode,byte[] key,byte[] iv) throws Exception {\n  String pad=\"NoPadding\";\n  byte[] tmp;\n  if (key.length > bsize) {\n    tmp=new byte[bsize];\n    System.arraycopy(key,0,tmp,0,tmp.length);\n    key=tmp;\n  }\n  try {\n    cipher=javax.crypto.Cipher.getInstance(\"RC4\");\n    SecretKeySpec _key=new SecretKeySpec(key,\"RC4\");\n    cipher.init((mode == ENCRYPT_MODE ? javax.crypto.Cipher.ENCRYPT_MODE : javax.crypto.Cipher.DECRYPT_MODE),_key);\n  }\n catch (  Exception e) {\n    cipher=null;\n    throw e;\n  }\n}\n",
      "types": [
        "Key",
        "NoSuchPaddingException",
        "Cipher",
        "Object",
        "NoSuchAlgorithmException",
        "Integer",
        "String",
        "InvalidKeyException",
        "System"
      ],
      "apicalls": [
        "arraycopy",
        "getInstance",
        "init"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "javax.crypto.Cipher.init(int,java.security.Key)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "java",
        "object",
        "key",
        "cipher",
        "init",
        "system",
        "algorithm",
        "lang",
        "string",
        "get",
        "arraycopy",
        "instance",
        "invalid",
        "padding",
        "crypto",
        "integer",
        "javax"
      ]
    },
    {
      "method": "getDetailsPanel@23",
      "body": "@Override public AbstractNamedConfigDetailsPanel getDetailsPanel(String className,String id,CompoundPropertyModel<SecurityNamedConfigModelHelper> model){\n  if (JDBCUserGroupService.class.getName().equals(className))   return new JDBCUserGroupConfigDetailsPanel(id,model);\n  if (JDBCRoleService.class.getName().equals(className))   return new JDBCRoleConfigDetailsPanel(id,model);\n  if (JDBCConnectAuthProvider.class.getName().equals(className))   return new JDBCAuthProviderConfigDetailsPanel(id,model);\n  return null;\n}\n",
      "formalParam": [
        "String",
        "String",
        "CompoundPropertyModel<SecurityNamedConfigModelHelper>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "AbstractNamedConfigDetailsPanel",
      "file": "./java_projects/geoserver/src/security/jdbc/src/main/old/org/geoserver/web/security/config/details/JDBCNamedConfigDetailsPanelProvider.java",
      "types": [
        "String",
        "Class",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "getName",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "object",
        "class",
        "java",
        "boolean",
        "equals",
        "get",
        "string",
        "name"
      ]
    },
    {
      "method": "exists@16",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.prepareStatement(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.sql.PreparedStatement",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.PreparedStatement.executeQuery()",
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.ResultSet.next()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.Statement.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.ResultSet.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.Connection.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.sql.SQLException"
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/iConomy/src/com/iConomy/system/Accounts.java",
      "body": "public boolean exists(String name){\n  Connection conn=null;\n  ResultSet rs=null;\n  PreparedStatement ps=null;\n  boolean exists=false;\n  try {\n    conn=iConomy.getiCoDatabase().getConnection();\n    ps=conn.prepareStatement(\"SELECT * FROM \" + Constants.SQLTable + \" WHERE username = ? LIMIT 1\");\n    ps.setString(1,name);\n    rs=ps.executeQuery();\n    exists=rs.next();\n  }\n catch (  Exception ex) {\n    exists=false;\n  }\n finally {\n    if (ps != null)     try {\n      ps.close();\n    }\n catch (    SQLException ex) {\n    }\n    if (rs != null)     try {\n      rs.close();\n    }\n catch (    SQLException ex) {\n    }\n    if (conn != null)     try {\n      conn.close();\n    }\n catch (    SQLException ex) {\n    }\n  }\n  return exists;\n}\n",
      "types": [
        "Statement",
        "Integer",
        "SQLException",
        "Boolean",
        "String",
        "Connection",
        "PreparedStatement",
        "ResultSet"
      ],
      "apicalls": [
        "close",
        "prepareStatement",
        "setString",
        "next",
        "executeQuery"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.executeQuery()",
            "java.sql.ResultSet.next()",
            "java.sql.Statement.close()",
            "java.sql.ResultSet.close()",
            "java.sql.Connection.close()"
          ]
        }
      ],
      "keywords": [
        "string",
        "connection",
        "next",
        "prepare",
        "prepared",
        "integer",
        "sql",
        "set",
        "exception",
        "execute",
        "java",
        "close",
        "result",
        "query",
        "statement",
        "boolean"
      ]
    },
    {
      "method": "solve@211",
      "body": "/** \n * Solve the linear equation given the features (factors) in t and coeffs and factors in the SoP object * if interceptTterm = TRUE solution = coeffs[0] + coeffs[1]*factors[0] + coeffs[2]*factors[1] + ... + coeffs[n]*factors[n-1] if interceptterm = FALSE solution = coeffs[0]*factors[0] + coeffs[1]*factors[1] + ... + coeffs[n]*factors[n]\n */\npublic double solve(Target t,FeatureDefinition feaDef,boolean log){\n  solution=0.0f;\n  double lastPosSolution=0.0;\n  if (interceptTerm) {\n    solution=coeffs[0];\n    for (int i=1; i < coeffs.length; i++) {\n      solution=solution + (coeffs[i] * t.getFeatureVector().getByteFeature(factorsIndex[i]));\n      if (solution > 0.0)       lastPosSolution=solution;\n else       System.out.println(\"WARNING: sop solution negative\");\n    }\n  }\n else {\n    for (int i=0; i < coeffs.length; i++) {\n      solution=solution + (coeffs[i] * t.getFeatureVector().getByteFeature(factorsIndex[i]));\n      if (solution > 0.0)       lastPosSolution=solution;\n else       System.out.println(\"WARNING: sop solution negative\");\n    }\n  }\n  if (solution < 0.0)   solution=lastPosSolution;\n  if (log)   return Math.exp(solution);\n else   return solution;\n}\n",
      "formalParam": [
        "Target",
        "FeatureDefinition",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.lang.Math.exp(double)",
            "_throws": [],
            "_returns": "double",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/marytts/marytts-runtime/src/main/java/marytts/machinelearning/SoP.java",
      "types": [
        "PrintStream",
        "Math",
        "String",
        "Double"
      ],
      "apicalls": [
        "exp",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Math.exp(double)"
          ]
        }
      ],
      "keywords": [
        "print",
        "stream",
        "io",
        "exp",
        "println",
        "double",
        "string",
        "java",
        "lang",
        "math"
      ]
    },
    {
      "method": "sameLocals@723",
      "body": "public void sameLocals(int pos,int offsetDelta,int stackTag,int stackData){\n  offset+=offsetDelta + 1;\n  writer.println(offset + \" same locals: \" + offsetDelta);\n  printTypeInfo(stackTag,stackData);\n}\n",
      "formalParam": [
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintWriter.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/javassist/src/main/javassist/bytecode/StackMapTable.java",
      "types": [
        "String",
        "PrintWriter"
      ],
      "apicalls": [
        "print",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintWriter.println(java.lang.String)",
            "java.io.PrintWriter.print(java.lang.String)",
            "java.io.PrintWriter.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "java",
        "io",
        "println",
        "string",
        "writer"
      ]
    },
    {
      "method": "getTypes@181",
      "body": "/** \n * @see IModelElementRequestor\n */\npublic IType[] getTypes(){\n  if (fTypes == null) {\n    return fgEmptyTypeArray;\n  }\n  int size=fTypes.size();\n  IType[] results=new IType[size];\n  fTypes.toArray(results);\n  return results;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.ArrayList.toArray(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object[]"
          }
        ]
      },
      "returnType": "IType[]",
      "file": "./java_projects/vjet/extmod/dltk/core/org.eclipse.dltk.mod.core/model/org/eclipse/dltk/mod/internal/core/ModelElementRequestor.java",
      "types": [
        "ArrayList",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "size",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.toArray(java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "object",
        "array",
        "size",
        "list",
        "integer",
        "java",
        "util"
      ]
    },
    {
      "method": "sendRejectProposal@482",
      "body": "/** \n * Insert the method's description here. Creation date: (07/04/2003 10:59:11)\n */\npublic void sendRejectProposal(){\n  final InteractiveAgent agent=this.getAgent();\n  final ACLRejectProposal msg=new ACLRejectProposal(this.getConversationId());\n  msg.setProtocol(\"FIPAContractNetProtocol\");\n  final Vector others=new Vector(this.getParticipants());\n  others.remove(this.getAcceptedProposer());\n  if (!others.isEmpty()) {\n    final Enumeration e=others.elements();\n    while (e.hasMoreElements()) {\n      final AgentIdentifier agentId=(AgentIdentifier)e.nextElement();\n      agent.sendMessage(agentId,msg);\n      System.out.println(agent.getIdentifier() + \" --> \" + agentId+ \" : Reject your Proposal.....\");\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Vector.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Vector.elements()",
                "node": "DAPICall",
                "_returns": "java.util.Enumeration",
                "_throws": []
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.io.PrintStream.println(char[])",
                    "node": "DAPICall",
                    "_returns": "void",
                    "_throws": []
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Enumeration.hasMoreElements()",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": []
                  }
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/DimaX/src/dima/kernel/INAF/InteractionProtocols/ContractNetInitiator.java",
      "types": [
        "Boolean",
        "Character",
        "Object",
        "Collection",
        "PrintStream",
        "Vector",
        "Enumeration"
      ],
      "apicalls": [
        "elements",
        "hasMoreElements",
        "isEmpty",
        "remove",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector(java.util.Collection)",
            "java.util.Vector.remove(java.lang.Object)",
            "$NOT$java.util.Vector.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector(java.util.Collection)",
            "java.util.Vector.remove(java.lang.Object)",
            "$NOT$java.util.Vector.isEmpty()",
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.io.PrintStream.println(char[])",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "object",
        "util",
        "empty",
        "elements",
        "character",
        "vector",
        "remove",
        "println",
        "enumeration",
        "java",
        "io",
        "print",
        "collection",
        "boolean"
      ]
    },
    {
      "method": "getCreationDate@88",
      "body": "public Date getCreationDate(){\n  return new Date(creationDate.getTime());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.getTime()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Date",
      "file": "./java_projects/querydsl/querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/UserProp.java",
      "types": [
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "long",
        "time",
        "date",
        "util"
      ]
    },
    {
      "method": "changedUpdate@62",
      "body": "@Override public void changedUpdate(DocumentEvent e){\n  firePropertyChange(e.getDocument());\n}\n",
      "formalParam": [
        "DocumentEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.Document.getLength()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.text.Document.getText(int,int)",
            "_throws": [
              "javax.swing.text.BadLocationException"
            ],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.isEmpty()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/onebusaway-quickstart/onebusaway-quickstart-mains/src/main/java/org/onebusaway/quickstart/bootstrap/gui/widgets/JCustomTextField.java",
      "types": [
        "Boolean",
        "String",
        "Component",
        "Document",
        "Object",
        "BadLocationException",
        "Integer"
      ],
      "apicalls": [
        "getText",
        "getLength",
        "isEmpty",
        "firePropertyChange"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.Document.getLength()",
            "javax.swing.text.Document.getText(int,int)",
            "java.lang.String.isEmpty()",
            "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "property",
        "text",
        "integer",
        "empty",
        "object",
        "swing",
        "get",
        "lang",
        "bad",
        "fire",
        "awt",
        "exception",
        "boolean",
        "location",
        "javax",
        "length",
        "document",
        "java",
        "change",
        "component",
        "string"
      ]
    },
    {
      "method": "sendMail@167",
      "body": "/** \n * Sends the newsletter mails to the recipients.<p>\n */\npublic void sendMail(){\n  Iterator<InternetAddress> i=getRecipients().iterator();\n  int errLogCount=0;\n  while (i.hasNext()) {\n    InternetAddress to=i.next();\n    List<InternetAddress> toList=new ArrayList<InternetAddress>(1);\n    toList.add(to);\n    try {\n      Email mail=getMailData().getEmail();\n      mail.setTo(toList);\n      mail.send();\n    }\n catch (    Exception e) {\n      if (LOG.isErrorEnabled()) {\n        LOG.error(Messages.get().getBundle().key(Messages.LOG_ERROR_NEWSLETTER_EMAIL_SEND_FAILED_2,to.getAddress(),getNewsletterName()));\n      }\n      if (LOG.isDebugEnabled() && (errLogCount < 10)) {\n        LOG.debug(e);\n        errLogCount++;\n      }\n      String errMsg=Messages.get().getBundle().key(Messages.MAIL_ERROR_EMAIL_ADDRESS_1,to.getAddress());\n      if (errLogCount == 10) {\n        errMsg+=\"\\nStack:\\n\" + errMsg + \"\\n\";\n      }\n      getMailErrors().add(errMsg);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/alkacon-oamp/com.alkacon.opencms.newsletter/src/com/alkacon/opencms/newsletter/CmsNewsletterMail.java",
      "types": [
        "ArrayList",
        "List",
        "Boolean",
        "String",
        "Integer"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "add",
        "string",
        "list",
        "array",
        "java",
        "boolean",
        "util",
        "integer"
      ]
    },
    {
      "method": "handlePulses@45",
      "body": "public double[] handlePulses(double[] concs,double time,double step){\n  boolean shocked=false;\n  while (!events.isEmpty() && time >= events.peek().t) {\n    shocked=true;\n    Event poll=events.poll();\n    time=poll.t;\n    concs[v.index]+=poll.amount;\n  }\n  return new double[]{time,shocked ? Math.min(step,1e-4) : step};\n}\n",
      "formalParam": [
        "double[]",
        "double",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Queue<Tau_E>.poll()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.Collection<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "double[]",
      "file": "./java_projects/CircDesigNA/src/circdesigna/TripleSim/PulseEvents.java",
      "types": [
        "Collection",
        "Queue",
        "Boolean"
      ],
      "apicalls": [
        "poll",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Queue<Tau_E>.poll()",
            "$NOT$java.util.Collection<Tau_E>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "empty",
        "util",
        "java",
        "collection",
        "poll",
        "boolean",
        "queue"
      ]
    },
    {
      "method": "testSessionPassivationWithMinIdleTime@121",
      "body": "/** \n * Test that session is not passivated before minimum idle time (passivation-min-idle-time) is reached.\n * @throws Exception\n */\n@Test public void testSessionPassivationWithMinIdleTime(@ArquillianResource @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1) throws Exception {\n  HttpClient client=HttpClientUtils.relaxedCookieHttpClient();\n  try {\n    HttpResponse response=ClusterHttpClientUtil.tryGet(client,baseURL1 + SimpleServlet.URL);\n    Assert.assertFalse(\"Session should not be serialized\",Boolean.valueOf(response.getFirstHeader(SimpleServlet.HEADER_SERIALIZED).getValue()));\n    response.getEntity().getContent().close();\n    Thread.sleep(PASSIVATION_MIN_IDLE_TIME * 1000 - 100);\n    response=ClusterHttpClientUtil.tryGet(client,baseURL1 + SimpleServlet.URL);\n    Assert.assertFalse(\"Session should not have been passivated\",Boolean.valueOf(response.getFirstHeader(SimpleServlet.HEADER_SERIALIZED).getValue()));\n    Assert.assertEquals(2,Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n    response.getEntity().getContent().close();\n  }\n  finally {\n    client.getConnectionManager().shutdown();\n  }\n}\n",
      "formalParam": [
        "URL"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Boolean.valueOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.Boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.lang.InterruptedException"
            ]
          },
          {
            "_call": "java.lang.Boolean.valueOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.Boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jboss-as/testsuite/integration/clust/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionPassivationAbstractCase.java",
      "types": [
        "Boolean",
        "String",
        "NumberFormatException",
        "Long",
        "Thread",
        "Integer",
        "InterruptedException"
      ],
      "apicalls": [
        "parseInt",
        "valueOf",
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Boolean.valueOf(java.lang.String)",
            "java.lang.Thread.sleep(long)",
            "java.lang.Boolean.valueOf(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "value",
        "parse",
        "number",
        "int",
        "string",
        "boolean",
        "integer",
        "long",
        "interrupted",
        "thread",
        "lang",
        "exception",
        "format",
        "java",
        "sleep"
      ]
    },
    {
      "method": "countByG_A@2093",
      "body": "/** \n * Returns the number of journal article resources where groupId = &#63; and articleId = &#63;.\n * @param groupId the group ID\n * @param articleId the article ID\n * @return the number of matching journal article resources\n * @throws SystemException if a system exception occurred\n */\npublic int countByG_A(long groupId,String articleId) throws SystemException {\n  Object[] finderArgs=new Object[]{groupId,articleId};\n  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_BY_G_A,finderArgs,this);\n  if (count == null) {\n    StringBundler query=new StringBundler(3);\n    query.append(_SQL_COUNT_JOURNALARTICLERESOURCE_WHERE);\n    query.append(_FINDER_COLUMN_G_A_GROUPID_2);\n    if (articleId == null) {\n      query.append(_FINDER_COLUMN_G_A_ARTICLEID_1);\n    }\n else {\n      if (articleId.equals(StringPool.BLANK)) {\n        query.append(_FINDER_COLUMN_G_A_ARTICLEID_3);\n      }\n else {\n        query.append(_FINDER_COLUMN_G_A_ARTICLEID_2);\n      }\n    }\n    String sql=query.toString();\n    Session session=null;\n    try {\n      session=openSession();\n      Query q=session.createQuery(sql);\n      QueryPos qPos=QueryPos.getInstance(q);\n      qPos.add(groupId);\n      if (articleId != null) {\n        qPos.add(articleId);\n      }\n      count=(Long)q.uniqueResult();\n    }\n catch (    Exception e) {\n      throw processException(e);\n    }\n finally {\n      if (count == null) {\n        count=Long.valueOf(0);\n      }\n      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_G_A,finderArgs,count);\n      closeSession(session);\n    }\n  }\n  return count.intValue();\n}\n",
      "formalParam": [
        "long",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Long.valueOf(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Long"
          },
          {
            "_call": "java.lang.Long.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/liferay-portal/portal-impl/src/com/liferay/portlet/journal/service/persistence/JournalArticleResourcePersistenceImpl.java",
      "types": [
        "String",
        "Integer",
        "Object",
        "Boolean",
        "Long"
      ],
      "apicalls": [
        "intValue",
        "equals",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Long.valueOf(long)",
            "java.lang.Long.intValue()"
          ]
        }
      ],
      "keywords": [
        "equals",
        "integer",
        "int",
        "boolean",
        "value",
        "lang",
        "long",
        "java",
        "object",
        "string"
      ]
    },
    {
      "method": "testAdd_0@50",
      "body": "/** \n * @throws Exception\n * @author Klaus Meffert\n * @since 2.2\n */\npublic void testAdd_0() throws Exception {\n  WeightedRouletteSelector selector=new WeightedRouletteSelector(conf);\n  Configuration conf=new DefaultConfiguration();\n  Gene gene=new BooleanGene(conf);\n  Chromosome chrom=new Chromosome(conf,gene,5);\n  conf.setFitnessFunction(new TestFitnessFunction());\n  conf.setSampleChromosome(chrom);\n  conf.setPopulationSize(5);\n  selector.add(chrom);\n  Map chromosomes=(Map)privateAccessor.getField(selector,\"m_wheel\");\n  assertEquals(1,chromosomes.size());\n  Iterator it=chromosomes.keySet().iterator();\n  assertEquals(chrom,it.next());\n  selector.add(chrom);\n  assertEquals(1,chromosomes.size());\n  it=chromosomes.keySet().iterator();\n  assertEquals(chrom,it.next());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Map.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "_call": "java.util.Iterator.next()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.Map.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Map.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "_call": "java.util.Iterator.next()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/LFA/jgap_3.6.2_full/tests/org/jgap/impl/WeightedRouletteSelectorTest.java",
      "types": [
        "Iterator",
        "Set",
        "Map",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "next",
        "size",
        "iterator",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.size()",
            "java.util.Map.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.next()",
            "java.util.Map.size()",
            "java.util.Map.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.next()"
          ]
        }
      ],
      "keywords": [
        "util",
        "key",
        "integer",
        "java",
        "next",
        "size",
        "map",
        "set",
        "object",
        "iterator"
      ]
    },
    {
      "method": "getFirst@117",
      "body": "/** \n * returns the first value from the List of String values for the given key (if at least one exists).\n * @param key the key to search for\n * @return the first string value associated with the key\n */\npublic String getFirst(String key){\n  List<String> l=map.get(normalize((String)key));\n  if (l == null) {\n    return null;\n  }\n  return l.get(0);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "node": "DAPICall",
            "_returns": "char[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.List<java.lang.String>",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/com/sun/net/httpserver/Headers.java",
      "types": [
        "Integer",
        "HashMap",
        "Character",
        "List",
        "Object",
        "String"
      ],
      "apicalls": [
        "get",
        "toCharArray",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.toCharArray()",
            "java.lang.String.String(char[])",
            "java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.get(java.lang.Object)",
            "java.util.List<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "character",
        "length",
        "list",
        "integer",
        "lang",
        "get",
        "char",
        "hash",
        "util",
        "map",
        "array",
        "string",
        "java"
      ]
    },
    {
      "method": "EquipmentListFacadeImpl@49",
      "body": "public EquipmentListFacadeImpl(List<Equipment> list){\n  equipmentList=new ArrayList<EquipmentFacade>(list);\n  quantityMap=new HashMap<EquipmentFacade,Integer>();\n  for (  Equipment equipment : list) {\n    quantityMap.put(equipment,equipment.getQty().intValue());\n  }\n}\n",
      "formalParam": [
        "List<Equipment>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/pcgen-svn/code/src/java/pcgen/gui2/facade/EquipmentListFacadeImpl.java",
      "types": [
        "ArrayList",
        "Collection",
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "util",
        "array",
        "list",
        "map",
        "java",
        "collection"
      ]
    },
    {
      "method": "createPage@128",
      "body": "public Page createPage(String wikiType,String wikiOwner,String title,String parentId) throws Exception {\n  String pageId=TitleResolver.getId(title,false);\n  if (isExisting(wikiType,wikiOwner,pageId))   throw new Exception();\n  Model model=getModel();\n  WikiStoreImpl wStore=(WikiStoreImpl)model.getWikiStore();\n  WikiImpl wiki=(WikiImpl)getWiki(wikiType,wikiOwner,model);\n  PageImpl page=wiki.createWikiPage();\n  PageImpl parentPage=null;\n  parentPage=(PageImpl)getPageById(wikiType,wikiOwner,parentId);\n  if (parentPage == null)   throw new IllegalArgumentException(String.format(\"[%s]:[%s]:[%s] is not [wikiType]:[wikiOwner]:[pageId] of an existed page!\",wikiType,wikiOwner,parentId));\n  page.setName(pageId);\n  parentPage.addWikiPage(page);\n  ConversationState conversationState=ConversationState.getCurrent();\n  String creator=null;\n  if (conversationState != null && conversationState.getIdentity() != null) {\n    creator=conversationState.getIdentity().getUserId();\n  }\n  page.setOwner(creator);\n  page.setTitle(title);\n  page.getContent().setText(\"\");\n  page.makeVersionable();\n  LinkRegistry linkRegistry=wiki.getLinkRegistry();\n  String newEntryName=getLinkEntryName(wikiType,wikiOwner,pageId);\n  String newEntryAlias=getLinkEntryAlias(wikiType,wikiOwner,pageId);\n  LinkEntry newEntry=linkRegistry.getLinkEntries().get(newEntryName);\n  if (newEntry == null) {\n    newEntry=linkRegistry.createLinkEntry();\n    linkRegistry.getLinkEntries().put(newEntryName,newEntry);\n    newEntry.setAlias(newEntryAlias);\n  }\n  newEntry.setNewLink(newEntry);\n  model.save();\n  return page;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "Page",
      "file": "./java_projects/ks/eXoApplication/wiki/service/src/main/java/org/exoplatform/wiki/service/impl/WikiServiceImpl.java",
      "types": [
        "Boolean",
        "CharSequence",
        "Object",
        "String"
      ],
      "apicalls": [
        "replace",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "char",
        "sequence",
        "boolean",
        "string",
        "object",
        "lang",
        "java",
        "replace"
      ]
    },
    {
      "method": "run@51",
      "body": "@Override public void run(final String cmd,String parameters){\n  parameters=parameters.trim();\n  if (!parameters.equals(\"get\")) {\n    KoLmafia.updateDisplay(\"Check back in \" + Preferences.getInteger(\"crimboTreeDays\") + \" days.\");\n    return;\n  }\n else   if (parameters.equals(\"get\") && Preferences.getInteger(\"crimboTreeDays\") > 0) {\n    RequestThread.postRequest(new ClanLoungeRequest(ClanLoungeRequest.CRIMBO_TREE));\n    KoLmafia.updateDisplay(\"There's nothing under the Crimbo Tree with your name on it right now. Check back in \" + Preferences.getInteger(\"crimboTreeDays\") + \" days.\");\n    return;\n  }\n  RequestThread.postRequest(new ClanLoungeRequest(ClanLoungeRequest.CRIMBO_TREE));\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/kolmafia/src/net/sourceforge/kolmafia/textui/command/CrimboTreeCommand.java",
      "types": [
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "trim",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.trim()",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "trim",
        "string",
        "equals",
        "lang",
        "object",
        "boolean"
      ]
    },
    {
      "method": "add@523",
      "formalParam": [
        "Component",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getAccessibleContext()",
            "node": "DAPICall",
            "_returns": "javax.accessibility.AccessibleContext",
            "_throws": []
          },
          {
            "_call": "javax.accessibility.AccessibleContext.setAccessibleParent(javax.accessibility.Accessible)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Component",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/alice/authoringtool/util/AliceMenu.java",
      "body": "/** \n * Adds the specified component to this container at the given position. If <code>index</code> equals -1, the component will be appended to the end.\n * @param c the <code>Component</code> to add\n * @param index the position at which to insert the component\n * @return the <code>Component</code> added\n * @see #remove\n * @see java.awt.Container#add(Component,int)\n */\n@Override public Component add(Component c,int index){\n  if (c instanceof JComponent) {\n    AccessibleContext ac=((JComponent)c).getAccessibleContext();\n    if (ac != null) {\n      ac.setAccessibleParent(this);\n    }\n  }\n  ensurePopupMenuCreated();\n  popupMenu.add(c,index);\n  return c;\n}\n",
      "types": [
        "AccessibleContext",
        "Accessible",
        "Component"
      ],
      "apicalls": [
        "setAccessibleParent",
        "getAccessibleContext"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getAccessibleContext()",
            "javax.accessibility.AccessibleContext.setAccessibleParent(javax.accessibility.Accessible)"
          ]
        }
      ],
      "keywords": [
        "get",
        "parent",
        "awt",
        "accessibility",
        "javax",
        "component",
        "set",
        "java",
        "accessible",
        "context"
      ]
    },
    {
      "method": "error@660",
      "body": "public void error(String message){\n  if (logger.isLoggable(Level.SEVERE)) {\n    logger.log(Level.SEVERE,message);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/navajo/tipi/com.dexels.navajo.tipi.swing.cobra/cobrasrc/org/lobobrowser/html/test/SimpleHtmlRendererContext.java",
      "types": [
        "String",
        "Boolean",
        "Logger",
        "Level"
      ],
      "apicalls": [
        "isLoggable",
        "log"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "logging",
        "log",
        "util",
        "java",
        "level",
        "logger",
        "string",
        "loggable"
      ]
    },
    {
      "method": "EquationDisplay@73",
      "body": "public EquationDisplay(double originX,double originY,double minX,double maxX,double minY,double maxY,double majorX,int minorX,double majorY,int minorY){\n  if (minX >= maxX) {\n    throw new IllegalArgumentException(\"minX must be < to maxX\");\n  }\n  if (originX < minX || originX > maxX) {\n    throw new IllegalArgumentException(\"originX must be between minX and maxX\");\n  }\n  if (minY >= maxY) {\n    throw new IllegalArgumentException(\"minY must be < to maxY\");\n  }\n  if (originY < minY || originY > maxY) {\n    throw new IllegalArgumentException(\"originY must be between minY and maxY\");\n  }\n  if (minorX <= 0) {\n    throw new IllegalArgumentException(\"minorX must be > 0\");\n  }\n  if (minorY <= 0) {\n    throw new IllegalArgumentException(\"minorY must be > 0\");\n  }\n  if (majorX <= 0.0) {\n    throw new IllegalArgumentException(\"majorX must be > 0.0\");\n  }\n  if (majorY <= 0.0) {\n    throw new IllegalArgumentException(\"majorY must be > 0.0\");\n  }\n  this.originX=originX;\n  this.originY=originY;\n  this.minX=minX;\n  this.maxX=maxX;\n  this.minY=minY;\n  this.maxY=maxY;\n  this.majorX=majorX;\n  this.minorX=minorX;\n  this.majorY=majorY;\n  this.minorY=minorY;\n  this.equations=new LinkedList<DrawableEquation>();\n  this.formatter=NumberFormat.getInstance();\n  this.formatter.setMaximumFractionDigits(2);\n  panHandler=new PanHandler();\n  addMouseListener(panHandler);\n  panMotionHandler=new PanMotionHandler();\n  addMouseMotionListener(panMotionHandler);\n  zoomHandler=new ZoomHandler();\n  addMouseWheelListener(zoomHandler);\n}\n",
      "formalParam": [
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "int",
        "double",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.NumberFormat.getInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.text.NumberFormat"
          },
          {
            "_call": "java.text.NumberFormat.setMaximumFractionDigits(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/gephi-neo4j-plugin/SplineEditor/src/org/gephi/ui/components/SplineEditor/equation/EquationDisplay.java",
      "types": [
        "LinkedList",
        "MouseMotionListener",
        "MouseListener",
        "MouseWheelListener",
        "Component",
        "Integer",
        "NumberFormat"
      ],
      "apicalls": [
        "getInstance",
        "addMouseWheelListener",
        "setMaximumFractionDigits",
        "addMouseListener",
        "addMouseMotionListener"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.text.NumberFormat.getInstance()",
            "java.text.NumberFormat.setMaximumFractionDigits(int)",
            "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)"
          ]
        }
      ],
      "keywords": [
        "add",
        "integer",
        "get",
        "number",
        "set",
        "format",
        "fraction",
        "awt",
        "motion",
        "linked",
        "java",
        "wheel",
        "util",
        "maximum",
        "list",
        "text",
        "component",
        "listener",
        "instance",
        "digits",
        "mouse"
      ]
    },
    {
      "method": "getFather@202",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.subList(int,int)",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.List<Tau_E>.hashCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "List<T>",
      "file": "./java_projects/replication-benchmarker/src/main/java/crdt/tree/wordtree/Word.java",
      "body": "public List<T> getFather(){\n  return new Word<T>(this,0,bak.size() - 1);\n}\n",
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "subList",
        "size",
        "hashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.subList(int,int)",
            "java.util.List<Tau_E>.hashCode()"
          ]
        }
      ],
      "keywords": [
        "util",
        "hash",
        "sub",
        "integer",
        "size",
        "java",
        "list",
        "code"
      ]
    },
    {
      "method": "deveCriarCandleComSetters@53",
      "body": "@Test public void deveCriarCandleComSetters(){\n  Candle c=new Candle();\n  Calendar data=Calendar.getInstance();\n  c.setAbertura(100.0);\n  c.setFechamento(200.0);\n  c.setMinimo(50.0);\n  c.setMaximo(650.0);\n  c.setData(data);\n  assertEquals(100.0,c.getAbertura(),0);\n  assertEquals(200.0,c.getFechamento(),0);\n  assertEquals(50.0,c.getMinimo(),0);\n  assertEquals(650.0,c.getMaximo(),0);\n  assertEquals(data.getTime(),c.getData().getTime());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "_throws": [],
            "_returns": "java.util.Calendar",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "_returns": "java.util.Date",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Curso-Java/test/CandleTest.java",
      "types": [
        "Calendar",
        "Date"
      ],
      "apicalls": [
        "getTime",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()"
          ]
        }
      ],
      "keywords": [
        "instance",
        "calendar",
        "java",
        "get",
        "time",
        "util",
        "date"
      ]
    },
    {
      "method": "getPreferredSize@237",
      "body": "@Override public Dimension getPreferredSize(){\n  java.awt.Rectangle r=new java.awt.Rectangle();\n  for (  Figure f : model.getFigures()) {\n    r.add(f.getBounds());\n  }\n  Dimension size=new Dimension();\n  size.height=r.height + r.y + BOUNDING_BOX_PADDING;\n  size.width=r.width + r.x + BOUNDING_BOX_PADDING;\n  return size;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Rectangle.Rectangle()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Rectangle.add(java.awt.Point)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Dimension.Dimension()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Dimension",
      "file": "./java_projects/jdraw-assignment/src/jdraw/std/StdDrawView.java",
      "types": [
        "Dimension",
        "Point",
        "Rectangle"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Rectangle.Rectangle()",
            "java.awt.Rectangle.add(java.awt.Point)",
            "java.awt.Dimension.Dimension()"
          ]
        }
      ],
      "keywords": [
        "dimension",
        "java",
        "point",
        "add",
        "rectangle",
        "awt"
      ]
    },
    {
      "method": "run@19",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.util.List.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/i2p/core/java/src/net/i2p/util/Executor.java",
      "body": "public void run(){\n  while (runn.getAnswer()) {\n    SimpleTimer.TimedEvent evt=null;\nsynchronized (_readyEvents) {\n      if (_readyEvents.isEmpty())       try {\n        _readyEvents.wait();\n      }\n catch (      InterruptedException ie) {\n      }\n      if (!_readyEvents.isEmpty())       evt=(SimpleTimer.TimedEvent)_readyEvents.remove(0);\n    }\n    if (evt != null) {\n      long before=_context.clock().now();\n      try {\n        evt.timeReached();\n      }\n catch (      Throwable t) {\n        log(\"Executing task \" + evt + \" exited unexpectedly, please report\",t);\n      }\n      long time=_context.clock().now() - before;\n      if ((time > 1000) && (_log != null) && (_log.shouldLog(Log.WARN)))       _log.warn(\"wtf, event execution took \" + time + \": \"+ evt);\n    }\n  }\n}\n",
      "types": [
        "Boolean",
        "List"
      ],
      "apicalls": [
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.isEmpty()",
            "$NOT$java.util.List.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "list",
        "empty",
        "java",
        "util",
        "boolean"
      ]
    },
    {
      "method": "WallpaperPreference@36",
      "body": "WallpaperPreference(Context context,ColorProfile profile,ZLResource resource,String resourceKey){\n  super(context,resource,resourceKey);\n  myOption=profile.WallpaperOption;\n  final List<ZLFile> predefined=WallpapersUtil.predefinedWallpaperFiles();\n  final List<ZLFile> external=WallpapersUtil.externalWallpaperFiles();\n  final int size=1 + predefined.size() + external.size();\n  final String[] values=new String[size];\n  final String[] texts=new String[size];\n  final ZLResource optionResource=resource.getResource(resourceKey);\n  values[0]=\"\";\n  texts[0]=optionResource.getResource(\"solidColor\").getValue();\n  int index=1;\n  for (  ZLFile f : predefined) {\n    values[index]=f.getPath();\n    final String name=f.getShortName();\n    texts[index]=optionResource.getResource(name.substring(0,name.indexOf(\".\"))).getValue();\n    ++index;\n  }\n  for (  ZLFile f : external) {\n    values[index]=f.getPath();\n    texts[index]=f.getShortName();\n    ++index;\n  }\n  setLists(values,texts);\n  setInitialValue(myOption.getValue());\n}\n",
      "formalParam": [
        "Context",
        "ColorProfile",
        "ZLResource",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/FBReaderJ/src/org/geometerplus/android/fbreader/preferences/WallpaperPreference.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "string",
        "lang",
        "integer",
        "index",
        "java"
      ]
    },
    {
      "method": "prettyPrint@44",
      "formalParam": [
        "Document"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.transform.TransformerFactory.newInstance()",
            "node": "DAPICall",
            "_returns": "javax.xml.transform.TransformerFactory",
            "_throws": [
              "javax.xml.transform.TransformerFactoryConfigurationError"
            ]
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.xml.transform.TransformerFactory.newTransformer()",
            "node": "DAPICall",
            "_returns": "javax.xml.transform.Transformer",
            "_throws": [
              "javax.xml.transform.TransformerConfigurationException"
            ]
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/lyo.server/org.eclipse.lyo.samples.bugzilla/src/main/java/org/eclipse/lyo/samples/bugzilla/utils/XmlUtils.java",
      "body": "public static String prettyPrint(Document doc){\n  TransformerFactory tfactory=TransformerFactory.newInstance();\n  Transformer serializer;\n  StringWriter writer=new StringWriter();\n  try {\n    serializer=tfactory.newTransformer();\n    serializer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n    serializer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n    serializer.transform(new DOMSource(doc),new StreamResult(writer));\n    return writer.toString();\n  }\n catch (  TransformerException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "types": [
        "String",
        "TransformerConfigurationException",
        "Transformer",
        "TransformerFactoryConfigurationError",
        "StringWriter",
        "TransformerFactory"
      ],
      "apicalls": [
        "newInstance",
        "newTransformer",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "java.io.StringWriter.StringWriter()",
            "javax.xml.transform.TransformerFactory.newTransformer()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "xml",
        "java",
        "exception",
        "javax",
        "error",
        "new",
        "string",
        "transform",
        "factory",
        "transformer",
        "io",
        "instance",
        "writer",
        "configuration"
      ]
    },
    {
      "method": "TransformationDictionary@52",
      "formalParam": [
        "Element",
        "Instances"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/Weka-for-Android/src/weka/core/pmml/TransformationDictionary.java",
      "body": "/** \n * Construct a new TransformationDictionary\n * @param dictionary the Element containing the dictionary\n * @param dataDictionary the data dictionary as an Instances object\n * @throws Exception if there is a problem constructing the transformationdictionary\n */\nprotected TransformationDictionary(Element dictionary,Instances dataDictionary) throws Exception {\n  NodeList derivedL=dictionary.getChildNodes();\n  for (int i=0; i < derivedL.getLength(); i++) {\n    Node child=derivedL.item(i);\n    if (child.getNodeType() == Node.ELEMENT_NODE) {\n      String tagName=((Element)child).getTagName();\n      if (tagName.equals(\"DerivedField\")) {\n        DerivedFieldMetaInfo df=new DerivedFieldMetaInfo((Element)child,null,null);\n        m_derivedFields.add(df);\n      }\n else       if (tagName.equals(\"DefineFunction\")) {\n        DefineFunction defF=new DefineFunction((Element)child,null);\n        m_defineFunctions.add(defF);\n      }\n    }\n  }\n}\n",
      "types": [
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "string",
        "java",
        "lang",
        "equals"
      ]
    },
    {
      "method": "getShortName@107",
      "body": "/** \n * Get the short name of a book (e.g. \"Gen\"). Altered by the case setting (see setBookCase())\n * @return The short name of the book\n */\npublic String getShortName(){\n  CaseType caseType=BookName.getDefaultCase();\n  if (caseType == CaseType.LOWER) {\n    return shortName.toLowerCase(locale);\n  }\n  if (caseType == CaseType.UPPER) {\n    return shortName.toUpperCase(locale);\n  }\n  return shortName;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase(java.util.Locale)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toUpperCase(java.util.Locale)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jsword/src/main/java/org/crosswire/jsword/versification/BookName.java",
      "types": [
        "String",
        "Locale"
      ],
      "apicalls": [
        "toLowerCase",
        "toUpperCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase(java.util.Locale)",
            "java.lang.String.toUpperCase(java.util.Locale)"
          ]
        }
      ],
      "keywords": [
        "upper",
        "string",
        "case",
        "lower",
        "java",
        "lang",
        "locale"
      ]
    },
    {
      "method": "getUrdDir@169",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getPath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/maven-ooo-plugin/src/main/java/org/openoffice/maven/ConfigurationManager.java",
      "body": "/** \n * @return the path to the folder where URD files should be generated\n */\npublic static String getUrdDir(){\n  return new File(sOutput,URD_DIR).getPath();\n}\n",
      "types": [
        "String",
        "File"
      ],
      "apicalls": [
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.getPath()"
          ]
        }
      ],
      "keywords": [
        "get",
        "io",
        "string",
        "path",
        "java",
        "file"
      ]
    },
    {
      "method": "testAnonymousAllowed@44",
      "body": "public void testAnonymousAllowed() throws Exception {\n  setAuthenticationHandlerConfig(getAuthenticationHandlerConfiguration(true));\n  start();\n  try {\n    URL url=new URL(getBaseURL());\n    HttpURLConnection conn=(HttpURLConnection)url.openConnection();\n    conn.connect();\n    assertEquals(HttpURLConnection.HTTP_OK,conn.getResponseCode());\n  }\n  finally {\n    stop();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Boolean.toString(boolean)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.net.URLConnection.connect()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.net.HttpURLConnection.getResponseCode()",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/alfredo/alfredo/src/test/java/com/cloudera/alfredo/client/TestPseudoAuthenticator.java",
      "types": [
        "Integer",
        "URL",
        "String",
        "Object",
        "IOException",
        "HttpURLConnection",
        "URLConnection",
        "Properties",
        "MalformedURLException",
        "Boolean"
      ],
      "apicalls": [
        "connect",
        "getResponseCode",
        "toString",
        "setProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.lang.Boolean.toString(boolean)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.net.URL.URL(java.lang.String)",
            "java.net.URLConnection.connect()",
            "java.net.HttpURLConnection.getResponseCode()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "net",
        "response",
        "set",
        "util",
        "io",
        "url",
        "http",
        "connection",
        "property",
        "lang",
        "exception",
        "properties",
        "object",
        "string",
        "boolean",
        "connect",
        "malformed",
        "get",
        "code",
        "java"
      ]
    },
    {
      "method": "getPackage@239",
      "body": "/** \n * Read-only property\n */\npublic String getPackage(){\n  return id.substring(0,getLastDotInId());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/openmicroscopy/components/dsl/src/ome/dsl/SemanticType.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "last",
        "string",
        "lang",
        "substring",
        "java",
        "index",
        "integer"
      ]
    },
    {
      "method": "getSequenceNodes@185",
      "body": "/** \n * Retrieves all nodes with the given sequence number (rank nr. in order of creation)\n * @param seq sequence number\n * @return ArrayList<SGNode>\n */\npublic ArrayList<SGNode> getSequenceNodes(int seq){\n  ArrayList<SGNode> result=new ArrayList<SGNode>();\n  Iterator it=getNodes();\n  while (it.hasNext()) {\n    SGNode n=(SGNode)it.next();\n    if (n.getSequenceNr() == seq)     result.add(n);\n  }\n  return result;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "ArrayList<SGNode>",
      "file": "./java_projects/RDF2TextTranslator/src/NLGService/WYSIWYM/model/SemanticGraph.java",
      "types": [
        "Boolean",
        "Iterator",
        "ArrayList"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "java",
        "iterator",
        "next",
        "util",
        "boolean",
        "list",
        "array"
      ]
    },
    {
      "method": "isInstantiationAuthorized@40",
      "body": "/** \n * Check whether access is allowed to the given wicket component. Uses the @Restrict annotation to control access\n */\npublic boolean isInstantiationAuthorized(Class componentClass){\n  try {\n    WicketComponent instance=WicketComponent.getInstance(componentClass);\n    if (instance != null)     instance.checkRestrictions();\n  }\n catch (  NotLoggedInException e) {\n    log.error(\"Unauthorized access to \" + componentClass.getName() + \", user not logged in\",e);\n    return handleException(componentClass);\n  }\ncatch (  org.jboss.seam.security.AuthorizationException e) {\n    return false;\n  }\n  return true;\n}\n",
      "formalParam": [
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Seam2.3/jboss-seam-wicket/src/main/java/org/jboss/seam/wicket/SeamAuthorizationStrategy.java",
      "types": [
        "Boolean",
        "Class",
        "String"
      ],
      "apicalls": [
        "getName",
        "isAssignableFrom"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "class",
        "name",
        "lang",
        "string",
        "assignable",
        "java",
        "boolean",
        "get"
      ]
    },
    {
      "method": "visit@401",
      "body": "public void visit(ANEW q){\n  if (q == alloc) {\n    Set aliases=new HashSet(get(q.prevEdge(0)));\n    aliases.add(q.dst());\n    raiseValue(q.nextEdge(0),aliases);\n  }\n else {\n    visit((Quad)q);\n  }\n}\n",
      "formalParam": [
        "ANEW"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.HashSet(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Harpoon/Code/Analysis/PreciseGC/DynamicWBQuadPass.java",
      "types": [
        "Collection",
        "Set",
        "Boolean",
        "Object",
        "HashSet"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.HashSet(java.util.Collection)",
            "java.util.Set.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "set",
        "java",
        "collection",
        "util",
        "object",
        "boolean",
        "add"
      ]
    },
    {
      "method": "testEquals@61",
      "body": "@Test public void testEquals(){\n  System.out.println(\"Begin testEquals\");\n  try {\n    Criterion crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit1.setValue(\"Value1\");\n    Criterion crit2=new Criterion();\n    crit2.setKey(\"Key1\");\n    crit2.setValue(\"Value1\");\n    assertTrue(\"Equals - both\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit2=new Criterion();\n    crit2.setKey(\"Key1\");\n    assertTrue(\"Equals - only key\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setValue(\"Value1\");\n    crit2=new Criterion();\n    crit2.setValue(\"Value1\");\n    assertTrue(\"Equals - only value\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit1.setValue(\"Value1\");\n    crit2=new Criterion();\n    crit2.setKey(\"Key2\");\n    crit2.setValue(\"Value1\");\n    assertFalse(\"Not equal - both populated, key different\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit1.setValue(\"Value1\");\n    crit2=new Criterion();\n    crit2.setKey(\"Key1\");\n    crit2.setValue(\"Value2\");\n    assertFalse(\"Not equal - both populated, value different\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit1.setValue(\"Value1\");\n    crit2=new Criterion();\n    crit2.setKey(\"Key1\");\n    assertFalse(\"Not equal - c1 full, c2 key only\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit1.setValue(\"Value1\");\n    crit2=new Criterion();\n    crit2.setValue(\"Value1\");\n    assertFalse(\"Not equal - c1 full, c2 value only\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit2=new Criterion();\n    crit2.setKey(\"Key1\");\n    crit2.setValue(\"Value1\");\n    assertFalse(\"Not equal - c2 full, c1 key only\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setValue(\"Value1\");\n    crit2=new Criterion();\n    crit2.setKey(\"Key1\");\n    crit2.setValue(\"Value1\");\n    assertFalse(\"Not equal - c2 full, c1 value only\",crit1.equals(crit2));\n    crit1=new Criterion();\n    crit1.setKey(\"Key1\");\n    crit1.setValue(\"Value1\");\n    crit2=null;\n    assertFalse(\"Not equal - c1 full, c2 null\",crit1.equals(crit2));\n  }\n catch (  Throwable t) {\n    t.printStackTrace();\n    fail(t.getMessage());\n  }\n  System.out.println(\"Begin testEquals\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/CONNECT/Product/Production/Services/HIEMCore/src/test/java/gov/hhs/fha/nhinc/subscription/repository/data/test/CriterionTest.java",
      "types": [
        "String",
        "Throwable",
        "PrintStream"
      ],
      "apicalls": [
        "printStackTrace",
        "println",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "lang",
        "throwable",
        "io",
        "string",
        "get",
        "stream",
        "trace",
        "message",
        "stack",
        "println",
        "java"
      ]
    },
    {
      "method": "toString@216",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getSimpleName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/geoserver/src/main/src/main/java/org/geoserver/catalog/impl/LayerGroupInfoImpl.java",
      "body": "@Override public String toString(){\n  return new StringBuilder(getClass().getSimpleName()).append('[').append(name).append(']').toString();\n}\n",
      "types": [
        "String",
        "StringBuilder",
        "Character",
        "Class"
      ],
      "apicalls": [
        "append",
        "getSimpleName",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getSimpleName()",
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "java",
        "simple",
        "builder",
        "append",
        "class",
        "string",
        "character",
        "name"
      ]
    },
    {
      "method": "setUp@29",
      "body": "/** \n * @see junit.framework.TestCase#setUp()\n */\npublic void setUp(){\n  InputStream errorXML=null;\n  handler=new HttpResponseCodeErrorHandler();\n  try {\n    errorXML=getClass().getResourceAsStream(\"/xml/twitterapi-error-message.xml\");\n    ParserFactory.getDefaultParser().parse(errorXML,handler);\n  }\n catch (  Exception e) {\n    fail();\n  }\n finally {\n    if (errorXML != null) {\n      try {\n        errorXML.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Twitter-API-ME/test/src/com/twitterapime/io/handler/HttpResponseCodeErrorHandlerTest.java",
      "types": [
        "IOException",
        "String",
        "Class",
        "InputStream"
      ],
      "apicalls": [
        "getResourceAsStream",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "io",
        "lang",
        "string",
        "input",
        "close",
        "class",
        "get",
        "java",
        "exception",
        "resource"
      ]
    },
    {
      "method": "test_forDigitII@697",
      "body": "/** \n * @tests java.lang.Character#forDigit(int, int)\n */\npublic void test_forDigitII(){\n  char hexChars[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n  for (int i=0; i < hexChars.length; i++) {\n    assertTrue(\"Returned incorrect char for \" + Integer.toString(i),Character.forDigit(i,hexChars.length) == hexChars[i]);\n  }\n  char decimalChars[]={'0','1','2','3','4','5','6','7','8','9'};\n  for (int i=0; i < decimalChars.length; i++) {\n    assertTrue(\"Returned incorrect char for \" + Integer.toString(i),Character.forDigit(i,decimalChars.length) == decimalChars[i]);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.forDigit(int,int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.toString(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.forDigit(int,int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/CharacterTest.java",
      "types": [
        "String",
        "Character",
        "Integer"
      ],
      "apicalls": [
        "forDigit",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.lang.Character.forDigit(int,int)",
            "java.lang.Integer.toString(int)",
            "java.lang.Character.forDigit(int,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "character",
        "digit",
        "integer",
        "string",
        "java"
      ]
    },
    {
      "method": "getNormalizedComponents@75",
      "body": "/** \n */\npublic float[] getNormalizedComponents(Object pixel,float[] normComponents,int normOffset){\n  if (normComponents == null) {\n    normComponents=new float[normOffset + 1];\n  }\n  double value=((double[])pixel)[0];\n  if (Double.isNaN(value)) {\n    normComponents[normOffset]=0.0f;\n  }\n else {\n    ColorSpace cs=getColorSpace();\n    float min=cs.getMinValue(0);\n    float max=cs.getMaxValue(0);\n    normComponents[normOffset]=(float)((((value - _min) * _scale) * (max - min)) + min);\n  }\n  return normComponents;\n}\n",
      "formalParam": [
        "Object",
        "float[]",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.awt.image.ColorModel.getColorSpace()",
                "_throws": [],
                "_returns": "java.awt.color.ColorSpace",
                "node": "DAPICall"
              },
              {
                "_call": "java.awt.color.ColorSpace.getMinValue(int)",
                "_throws": [],
                "_returns": "float",
                "node": "DAPICall"
              },
              {
                "_call": "java.awt.color.ColorSpace.getMaxValue(int)",
                "_throws": [],
                "_returns": "float",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Double.isNaN(double)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "float[]",
      "file": "./java_projects/GIS-Extension/src/org/myworldgis/util/ValueColorModel.java",
      "types": [
        "Double",
        "Boolean",
        "Float",
        "ColorSpace",
        "Integer",
        "ColorModel"
      ],
      "apicalls": [
        "getMaxValue",
        "getColorSpace",
        "getMinValue",
        "isNaN"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.isNaN(double)"
          ]
        },
        {
          "calls": [
            "java.lang.Double.isNaN(double)",
            "java.awt.image.ColorModel.getColorSpace()",
            "java.awt.color.ColorSpace.getMinValue(int)",
            "java.awt.color.ColorSpace.getMaxValue(int)"
          ]
        }
      ],
      "keywords": [
        "space",
        "na",
        "get",
        "double",
        "max",
        "model",
        "boolean",
        "image",
        "float",
        "integer",
        "java",
        "n",
        "value",
        "color",
        "lang",
        "min",
        "awt"
      ]
    },
    {
      "method": "getIndexChanges@169",
      "body": "@SuppressWarnings(\"rawtypes\") public ODocument getIndexChanges(){\n  final StringBuilder value=new StringBuilder();\n  final ODocument result=new ODocument();\n  for (  Entry<String,OTransactionIndexChanges> indexEntry : indexEntries.entrySet()) {\n    final ODocument indexDoc=new ODocument().addOwner(result);\n    result.field(indexEntry.getKey(),indexDoc,OType.EMBEDDED);\n    if (indexEntry.getValue().cleared)     indexDoc.field(\"clear\",Boolean.TRUE);\n    final List<ODocument> entries=new ArrayList<ODocument>();\n    indexDoc.field(\"entries\",entries,OType.EMBEDDEDLIST);\n    for (    OTransactionIndexChangesPerKey entry : indexEntry.getValue().changesPerKey.values()) {\n      value.setLength(0);\n      if (entry.key != null) {\n        if (entry.key instanceof OCompositeKey) {\n          final List<Comparable> keys=((OCompositeKey)entry.key).getKeys();\n          ORecordSerializerStringAbstract.fieldTypeToString(value,OType.EMBEDDEDLIST,keys);\n        }\n else         ORecordSerializerStringAbstract.fieldTypeToString(value,OType.getTypeByClass(entry.key.getClass()),entry.key);\n      }\n else       value.append('*');\n      String key=value.toString();\n      final List<ODocument> operations=new ArrayList<ODocument>();\n      if (entry.entries != null && !entry.entries.isEmpty()) {\n        for (        OTransactionIndexEntry e : entry.entries) {\n          final ODocument changeDoc=new ODocument().addOwner(indexDoc);\n          changeDoc.field(\"o\",e.operation.ordinal());\n          if (e.value instanceof ORecord<?> && e.value.getIdentity().isNew())           ((ORecord<?>)e.value).save();\n          changeDoc.field(\"v\",e.value != null ? e.value.getIdentity() : null);\n          operations.add(changeDoc);\n        }\n      }\n      entries.add(new ODocument().addOwner(indexDoc).field(\"k\",OStringSerializerHelper.encode(key)).field(\"ops\",operations,OType.EMBEDDEDLIST));\n    }\n  }\n  indexEntries.clear();\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.setLength(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "ODocument",
      "file": "./java_projects/orientdb_1/core/src/main/java/com/orientechnologies/orient/core/tx/OTransactionRealAbstract.java",
      "types": [
        "Character",
        "Integer",
        "ArrayList",
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "setLength",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.StringBuilder.setLength(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "length",
        "list",
        "append",
        "lang",
        "string",
        "character",
        "util",
        "java",
        "array",
        "builder",
        "set",
        "integer"
      ]
    },
    {
      "method": "testWriteLEUnsignedShort@43",
      "body": "@Test public void testWriteLEUnsignedShort() throws IOException {\n  int unsigned=Short.MAX_VALUE + 5;\n  char testChar='b';\n  ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();\n  EndianSwitchableOutputStream output=new EndianSwitchableOutputStream(rawOutput,ByteOrder.LITTLE_ENDIAN);\n  output.writeShort(unsigned);\n  output.writeChar(testChar);\n  EndianSwitchableInputStream input=new EndianSwitchableInputStream(new ByteArrayInputStream(rawOutput.toByteArray()),ByteOrder.LITTLE_ENDIAN);\n  assertEquals(unsigned,input.readUnsignedShort());\n  assertEquals(testChar,input.readChar());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SimpleNBT/src/test/java/org/spout/nbt/stream/EndianSwitchableStreamTest.java",
      "types": [
        "ByteArrayOutputStream",
        "ByteArrayInputStream",
        "Byte"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "array",
        "stream",
        "io",
        "input",
        "java",
        "byte",
        "output"
      ]
    },
    {
      "method": "PyBeanEventProperty@31",
      "body": "public PyBeanEventProperty(String eventName,Class<?> eventClass,Method addMethod,Method eventMethod){\n  __name__=eventMethod.getName().intern();\n  this.addMethod=addMethod;\n  this.eventName=eventName;\n  this.eventClass=eventClass;\n}\n",
      "formalParam": [
        "String",
        "Class<?>",
        "Method",
        "Method"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.reflect.Method.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.intern()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/jython-on-android/src/org/python/core/PyBeanEventProperty.java",
      "types": [
        "Method",
        "Integer",
        "String"
      ],
      "apicalls": [
        "intern",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.Method.getName()",
            "java.lang.String.intern()"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "reflect",
        "string",
        "lang",
        "intern",
        "method",
        "integer",
        "name"
      ]
    },
    {
      "method": "format@83",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/android_libcore/luni/src/main/java/java/text/Format.java",
      "body": "/** \n * Formats the specified object using the rules of this format.\n * @param object the object to format.\n * @return the formatted string.\n * @throws IllegalArgumentException if the object cannot be formatted by this format.\n */\npublic final String format(Object object){\n  return format(object,new StringBuffer(),new FieldPosition(0)).toString();\n}\n",
      "types": [
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "java",
        "buffer"
      ]
    },
    {
      "method": "testDuplicateSendWithNoAuditEnqueueCountStat@444",
      "body": "public void testDuplicateSendWithNoAuditEnqueueCountStat() throws Exception {\n  broker1=\"BrokerA\";\n  broker2=\"BrokerB\";\n  NetworkConnector networkConnector=bridgeBrokers(broker1,broker2);\n  final AtomicBoolean first=new AtomicBoolean();\n  final CountDownLatch gotMessageLatch=new CountDownLatch(1);\n  BrokerService brokerService=brokers.get(broker2).broker;\n  brokerService.setPersistent(true);\n  brokerService.setDeleteAllMessagesOnStartup(true);\n  brokerService.setPlugins(new BrokerPlugin[]{new BrokerPluginSupport(){\n    @Override public void send(    final ProducerBrokerExchange producerExchange,    org.apache.activemq.command.Message messageSend) throws Exception {\n      super.send(producerExchange,messageSend);\n      if (first.compareAndSet(false,true)) {\n        producerExchange.getConnectionContext().setDontSendReponse(true);\n        Executors.newSingleThreadExecutor().execute(new Runnable(){\n          public void run(){\n            try {\n              LOG.info(\"Waiting for recepit\");\n              assertTrue(\"message received on time\",gotMessageLatch.await(60,TimeUnit.SECONDS));\n              LOG.info(\"Stopping connection post send and receive and multiple producers\");\n              producerExchange.getConnectionContext().getConnection().stop();\n            }\n catch (            Exception e) {\n              e.printStackTrace();\n            }\n          }\n        }\n);\n      }\n    }\n  }\n});\n  ActiveMQDestination dest=createDestination(\"TEST.FOO\",false);\n  networkConnector.addStaticallyIncludedDestination(dest);\n  startAllBrokers();\n  waitForBridgeFormation();\n  sendMessages(\"BrokerA\",dest,1);\n  Wait.waitFor(new Wait.Condition(){\n    @Override public boolean isSatisified() throws Exception {\n      return brokers.get(broker2).broker.getAdminView().getTotalMessageCount() == 1;\n    }\n  }\n);\n  assertEquals(\"messages message still there\",1,brokers.get(broker1).broker.getAdminView().getTotalMessageCount());\n  gotMessageLatch.countDown();\n  assertTrue(\"no messages enqueued on origin\",Wait.waitFor(new Wait.Condition(){\n    @Override public boolean isSatisified() throws Exception {\n      return 0 == brokers.get(broker1).broker.getAdminView().getTotalMessageCount();\n    }\n  }\n));\n  assertEquals(\"one messages pending\",1,brokers.get(broker2).broker.getAdminView().getTotalMessageCount());\n  assertEquals(\"one messages enqueued\",1,brokers.get(broker2).broker.getDestination(dest).getDestinationStatistics().getEnqueues().getCount());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicBoolean.AtomicBoolean()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.CountDownLatch.countDown()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/activemq/activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerQueueClientsReconnectTest.java",
      "types": [
        "concurrent",
        "CountDownLatch",
        "Integer"
      ],
      "apicalls": [
        "countDown"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicBoolean.AtomicBoolean()",
            "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "java.util.concurrent.CountDownLatch.countDown()"
          ]
        }
      ],
      "keywords": [
        "util",
        "concurrent",
        "count",
        "java",
        "latch",
        "atomic",
        "boolean",
        "integer"
      ]
    },
    {
      "method": "taskFinished@305",
      "formalParam": [
        "BuildEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "node": "DAPICall",
            "_returns": "java.lang.Thread",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>",
            "_throws": []
          },
          {
            "_call": "java.util.Stack<Tau_E>.Stack()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "node": "DAPICall",
            "_returns": "java.lang.Thread",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>>.put(java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>)",
            "node": "DAPICall",
            "_returns": "java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Stack<Tau_E>.empty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.Stack<Tau_E>.pop()",
                "node": "DAPICall",
                "_returns": "Tau_E",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ant/src/main/org/apache/tools/ant/XmlLogger.java",
      "body": "/** \n * Fired when a task finishes building, this adds the time taken and any error stacktrace to the appropriate task element in the log.\n * @param event An event with any relevant extra information.Will not be <code>null</code>.\n */\npublic void taskFinished(BuildEvent event){\n  Task task=event.getTask();\n  TimedElement taskElement=(TimedElement)tasks.get(task);\n  if (taskElement == null) {\n    throw new RuntimeException(\"Unknown task \" + task + \" not in \"+ tasks);\n  }\n  long totalTime=System.currentTimeMillis() - taskElement.startTime;\n  taskElement.element.setAttribute(TIME_ATTR,DefaultLogger.formatTime(totalTime));\n  Target target=task.getOwningTarget();\n  TimedElement targetElement=null;\n  if (target != null) {\n    targetElement=(TimedElement)targets.get(target);\n  }\n  if (targetElement == null) {\n    synchronizedAppend(buildElement.element,taskElement.element);\n  }\n else {\n    synchronizedAppend(targetElement.element,taskElement.element);\n  }\n  Stack<TimedElement> threadStack=getStack();\n  if (!threadStack.empty()) {\n    TimedElement poppedStack=threadStack.pop();\n    if (poppedStack != taskElement) {\n      throw new RuntimeException(\"Mismatch - popped element = \" + poppedStack + \" finished task element = \"+ taskElement);\n    }\n  }\n  tasks.remove(task);\n}\n",
      "types": [
        "Hashtable",
        "System",
        "Thread",
        "Long",
        "Stack",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "currentThread",
        "pop",
        "get",
        "currentTimeMillis",
        "put",
        "empty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.currentThread()",
            "java.util.Hashtable<java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>>.get(java.lang.Object)",
            "java.util.Stack<Tau_E>.Stack()",
            "java.lang.Thread.currentThread()",
            "java.util.Hashtable<java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>>.put(java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>)",
            "$NOT$java.util.Stack<Tau_E>.empty()"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.currentThread()",
            "java.util.Hashtable<java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>>.get(java.lang.Object)",
            "java.util.Stack<Tau_E>.Stack()",
            "java.lang.Thread.currentThread()",
            "java.util.Hashtable<java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>>.put(java.lang.Thread,java.util.Stack<org.apache.tools.ant.XmlLogger.TimedElement>)",
            "$NOT$java.util.Stack<Tau_E>.empty()",
            "java.util.Stack<Tau_E>.pop()"
          ]
        }
      ],
      "keywords": [
        "millis",
        "thread",
        "hashtable",
        "put",
        "pop",
        "stack",
        "time",
        "system",
        "get",
        "empty",
        "object",
        "long",
        "current",
        "boolean",
        "java",
        "lang",
        "util"
      ]
    },
    {
      "method": "Models3DScene@41",
      "body": "public Models3DScene(AbstractMTApplication mtApplication,String name){\n  super(mtApplication,name);\n  mtApp=mtApplication;\n  this.setClearColor(new MTColor(40,40,40,255));\n  this.registerGlobalInputProcessor(new CursorTracer(mtApp,this));\n  this.getCanvas().registerInputProcessor(new ZoomProcessor(mtApp));\n  this.getCanvas().addGestureListener(ZoomProcessor.class,new DefaultZoomAction());\n  if (!(MT4jSettings.getInstance().isOpenGlMode())) {\n    System.err.println(this.getClass().getName() + \" example can only be run in OpenGL mode.\");\n    return;\n  }\n  MTLight.enableLightningAndAmbient(mtApplication,150,150,150,255);\n  MTLight light=new MTLight(mtApplication,GL.GL_LIGHT3,new Vector3D(0,-300,0));\n  GLMaterial material=new GLMaterial(PlatformUtil.getGL());\n  material.setAmbient(new float[]{.5f,.5f,.5f,1f});\n  material.setDiffuse(new float[]{.8f,.8f,.8f,1f});\n  material.setEmission(new float[]{.0f,.0f,.0f,1f});\n  material.setSpecular(new float[]{0.9f,0.9f,0.9f,1f});\n  material.setShininess(110);\n  MTComponent group1=new MTComponent(mtApplication);\n  final MTComponent meshGroup=new MTComponent(mtApplication,\"Mesh group\");\n  meshGroup.setLight(light);\n  Vector3D destinationPosition=new Vector3D(mtApplication.width / 2,mtApplication.height / 2,50);\n  float destinationScale=mtApplication.width * 0.85f;\n  MTTriangleMesh[] meshes=ModelImporterFactory.loadModel(mtApplication,modelsPath + \"jazz_Obj\" + AbstractMTApplication.separator+ \"honda_jazz.obj\",180,true,false);\n  final MTTriangleMesh biggestMesh=this.getBiggestMesh(meshes);\n  Vector3D translationToScreenCenter=new Vector3D(destinationPosition);\n  translationToScreenCenter.subtractLocal(biggestMesh.getCenterPointGlobal());\n  Vector3D scalingPoint=new Vector3D(biggestMesh.getCenterPointGlobal());\n  float biggestWidth=biggestMesh.getWidthXY(TransformSpace.GLOBAL);\n  float scale=destinationScale / biggestWidth;\n  group1.scaleGlobal(scale,scale,scale,scalingPoint);\n  group1.translateGlobal(translationToScreenCenter);\n  this.getCanvas().addChild(group1);\n  group1.addChild(meshGroup);\n  boolean invertNormals=true;\n  for (  MTTriangleMesh mesh : meshes) {\n    meshGroup.addChild(mesh);\n    mesh.unregisterAllInputProcessors();\n    mesh.setPickable(true);\n    if (invertNormals) {\n      Vector3D[] normals=mesh.getGeometryInfo().getNormals();\n      for (      Vector3D vector3d : normals) {\n        vector3d.scaleLocal(-1);\n      }\n      mesh.getGeometryInfo().setNormals(mesh.getGeometryInfo().getNormals(),mesh.isUseDirectGL(),mesh.isUseVBOs());\n    }\n    if (mesh.getVertexCount() > 20)     mesh.generateAndUseDisplayLists();\n    if (mesh.getMaterial() == null)     mesh.setMaterial(material);\n    mesh.setDrawNormals(false);\n  }\n  meshGroup.setComposite(true);\n  meshGroup.registerInputProcessor(new ArcballProcessor(mtApplication,biggestMesh));\n  meshGroup.addGestureListener(ArcballProcessor.class,new IGestureEventListener(){\n    public boolean processGestureEvent(    MTGestureEvent ge){\n      ArcBallGestureEvent aEvt=(ArcBallGestureEvent)ge;\n      meshGroup.transform(aEvt.getTransformationMatrix());\n      return false;\n    }\n  }\n);\n  meshGroup.registerInputProcessor(new ScaleProcessor(mtApplication));\n  meshGroup.addGestureListener(ScaleProcessor.class,new IGestureEventListener(){\n    public boolean processGestureEvent(    MTGestureEvent ge){\n      ScaleEvent se=(ScaleEvent)ge;\n      meshGroup.scaleGlobal(se.getScaleFactorX(),se.getScaleFactorY(),se.getScaleFactorX(),biggestMesh.getCenterPointGlobal());\n      return false;\n    }\n  }\n);\n  meshGroup.registerInputProcessor(new RotateProcessor(mtApplication));\n  meshGroup.addGestureListener(RotateProcessor.class,new DefaultRotateAction());\n  meshGroup.registerInputProcessor(new Rotate3DProcessor(mtApplication,meshGroup));\n  meshGroup.addGestureListener(Rotate3DProcessor.class,new Rotate3DAction(mtApplication,meshGroup));\n}\n",
      "formalParam": [
        "AbstractMTApplication",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/GestureChallenge/Imple\u0301mentation/Workspace/mt4j-desktop/examples/advanced/models3D/Models3DScene.java",
      "types": [
        "Class",
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "class",
        "println",
        "io",
        "string",
        "name",
        "get",
        "print",
        "lang",
        "stream",
        "java"
      ]
    },
    {
      "method": "getVectorOfGeneratedHelpset@147",
      "body": "public Vector<DRMHelpSet> getVectorOfGeneratedHelpset(){\n  if (vectorOfGeneratedHelpset == null) {\n    vectorOfGeneratedHelpset=new Vector<DRMHelpSet>();\n    vectorOfGeneratedHelpset.addAll(generatedHelpsets.values());\n    Collections.sort(vectorOfGeneratedHelpset,new Comparator<DRMHelpSet>(){\n      @Override public int compare(      DRMHelpSet o1,      DRMHelpSet o2){\n        int result=o1.getDistributionName().compareTo(o2.getDistributionName());\n        if (result != 0) {\n          return result;\n        }\n        return o1.getLanguage().compareTo(o2.getLanguage());\n      }\n    }\n);\n  }\n  return vectorOfGeneratedHelpset;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.Vector()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Vector<DRMHelpSet>",
      "file": "./java_projects/openflexo/flexodesktop/help/flexodocresourcemanager/src/main/java/org/openflexo/drm/action/GenerateHelpSet.java",
      "types": [
        "Comparator",
        "List",
        "Vector",
        "Collections"
      ],
      "apicalls": [
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.Vector()",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "java",
        "vector",
        "util",
        "sort",
        "comparator",
        "list"
      ]
    },
    {
      "method": "getException@180",
      "body": "public Exception getException(){\n  return exceptions.isEmpty() ? null : exceptions.get(0);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<java.lang.Exception>.get(int)",
                "node": "DAPICall",
                "_returns": "java.lang.Exception",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Exception>.isEmpty()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "Exception",
      "file": "./java_projects/sonatype-aether/aether-util/src/main/java/org/sonatype/aether/util/listener/DefaultRepositoryEvent.java",
      "types": [
        "Exception",
        "List",
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "isEmpty",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Exception>.isEmpty()",
            "java.util.List<java.lang.Exception>.get(int)"
          ]
        },
        {
          "calls": [
            "java.util.List<java.lang.Exception>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "empty",
        "java",
        "list",
        "get",
        "exception",
        "integer",
        "boolean",
        "util"
      ]
    },
    {
      "method": "isThisType@80",
      "body": "public boolean isThisType(RandomAccessInputStream stream) throws IOException {\n  TiffParser tp=new TiffParser(stream);\n  IFD ifd=tp.getFirstIFD();\n  if (ifd == null)   return false;\n  String software=ifd.getIFDTextValue(IFD.SOFTWARE);\n  return software != null && software.toString().indexOf(\"EZ-C1\") != -1;\n}\n",
      "formalParam": [
        "RandomAccessInputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/bioformats/components/bio-formats/src/loci/formats/in/NikonTiffReader.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "indexOf",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toString()",
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "integer",
        "index",
        "java",
        "lang"
      ]
    },
    {
      "method": "testConnectionDataTooLarge@275",
      "body": "@Test public void testConnectionDataTooLarge(){\n  OpenTokException expected=null;\n  String test_string=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" + \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\" + \"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"+ \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"+ \"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"+ \"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"+ \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"+ \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\"+ \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\"+ \"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"+ \"jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\"+ \"kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\"+ \"llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll\"+ \"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\"+ \"nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\"+ \"oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\";\n  try {\n    String s=sdk.create_session().session_id;\n    sdk.generate_token(s,RoleConstants.PUBLISHER,new Date().getTime(),test_string);\n  }\n catch (  OpenTokException e) {\n    expected=e;\n  }\n  Assert.assertNotNull(\"Java SDK tests: connection data over 1000 characters should not be accepted. Test String: \" + test_string,expected);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Opentok-Java-SDK/src/test/java/com/opentok/test/UnitTest.java",
      "types": [
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "java",
        "time",
        "get",
        "util",
        "long",
        "date"
      ]
    },
    {
      "method": "transformerXml@275",
      "body": "public void transformerXml(OutputStream os) throws TransformerException, ParserConfigurationException {\n  final Source source=new DOMSource(document);\n  final Result resultat=new StreamResult(os);\n  final TransformerFactory fabrique=TransformerFactory.newInstance();\n  final Transformer transformer=fabrique.newTransformer();\n  transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n  transformer.setOutputProperty(OutputKeys.ENCODING,\"UTF-8\");\n  transformer.transform(source,resultat);\n}\n",
      "formalParam": [
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.transform.TransformerFactory.newInstance()",
            "_throws": [
              "javax.xml.transform.TransformerFactoryConfigurationError"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.transform.TransformerFactory"
          },
          {
            "_call": "javax.xml.transform.TransformerFactory.newTransformer()",
            "_throws": [
              "javax.xml.transform.TransformerConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.transform.Transformer"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/plantuml/src/net/sourceforge/plantuml/xmi/XmiClassDiagramStar.java",
      "types": [
        "TransformerFactoryConfigurationError",
        "TransformerConfigurationException",
        "TransformerFactory",
        "Transformer"
      ],
      "apicalls": [
        "newInstance",
        "newTransformer"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.transform.TransformerFactory.newInstance()",
            "javax.xml.transform.TransformerFactory.newTransformer()"
          ]
        }
      ],
      "keywords": [
        "instance",
        "new",
        "transformer",
        "error",
        "javax",
        "exception",
        "xml",
        "configuration",
        "transform",
        "factory"
      ]
    },
    {
      "method": "convertStackTraceToString@418",
      "body": "public static String convertStackTraceToString(Exception e){\n  StringWriter sw=null;\n  PrintWriter pw=null;\n  try {\n    sw=new StringWriter();\n    pw=new PrintWriter(sw);\n    e.printStackTrace(pw);\n    return sw.toString();\n  }\n  finally {\n    try {\n      if (pw != null)       pw.close();\n      if (sw != null)       sw.close();\n    }\n catch (    IOException ignore) {\n    }\n  }\n}\n",
      "formalParam": [
        "Exception"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintWriter.close()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/zipwhip-common-util/src/main/java/com/zipwhip/util/StringUtil.java",
      "types": [
        "String",
        "Writer",
        "StringWriter",
        "IOException",
        "Throwable",
        "PrintWriter"
      ],
      "apicalls": [
        "toString",
        "printStackTrace",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
            "java.io.StringWriter.toString()",
            "java.io.PrintWriter.close()",
            "java.io.StringWriter.close()"
          ]
        }
      ],
      "keywords": [
        "print",
        "trace",
        "throwable",
        "io",
        "stack",
        "lang",
        "string",
        "writer",
        "java",
        "close",
        "exception"
      ]
    },
    {
      "method": "SecureMessageServiceClientHelper@69",
      "body": "protected SecureMessageServiceClientHelper(String server_address,int server_port,int timeout_secs,String msg_type_id,RSAPublicKey public_key) throws IOException {\n  try {\n    KeyGenerator secret_key_gen=KeyGenerator.getInstance(\"DESede\");\n    session_key=secret_key_gen.generateKey();\n    byte[] secret_bytes=session_key.getEncoded();\n    try {\n      Cipher rsa_cipher=Cipher.getInstance(\"RSA\");\n      rsa_cipher.init(Cipher.ENCRYPT_MODE,public_key);\n      encryped_session_key=rsa_cipher.doFinal(secret_bytes);\n    }\n catch (    Throwable e) {\n    }\n  }\n catch (  Throwable e) {\n    e.printStackTrace();\n    throw (new IOException(\"Secure client message service initialisation fails - \" + Debug.getNestedExceptionMessage(e)));\n  }\n  delegate=ClientMessageServiceClient.getServerService(server_address,server_port,msg_type_id);\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "String",
        "RSAPublicKey"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "javax.crypto.Cipher.getInstance(java.lang.String)",
                "node": "DAPICall",
                "_returns": "javax.crypto.Cipher",
                "_throws": [
                  "java.security.NoSuchAlgorithmException",
                  "javax.crypto.NoSuchPaddingException"
                ]
              },
              {
                "_call": "javax.crypto.Cipher.init(int,java.security.Key)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.security.InvalidKeyException"
                ]
              },
              {
                "_call": "javax.crypto.Cipher.doFinal(byte[])",
                "node": "DAPICall",
                "_returns": "byte[]",
                "_throws": [
                  "javax.crypto.IllegalBlockSizeException",
                  "javax.crypto.BadPaddingException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/frostwire-android/src/azureus/com/aelitis/azureus/core/clientmessageservice/secure/impl/SecureMessageServiceClientHelper.java",
      "types": [
        "String",
        "NoSuchPaddingException",
        "Cipher",
        "Integer",
        "Throwable",
        "InvalidKeyException",
        "IllegalBlockSizeException",
        "NoSuchAlgorithmException",
        "Byte",
        "Key",
        "BadPaddingException"
      ],
      "apicalls": [
        "printStackTrace",
        "doFinal",
        "init",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "javax.crypto.Cipher.init(int,java.security.Key)",
            "javax.crypto.Cipher.doFinal(byte[])"
          ]
        },
        {
          "calls": [
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "javax.crypto.Cipher.init(int,java.security.Key)",
            "javax.crypto.Cipher.doFinal(byte[])",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "init",
        "integer",
        "javax",
        "illegal",
        "algorithm",
        "exception",
        "throwable",
        "get",
        "java",
        "block",
        "cipher",
        "lang",
        "trace",
        "final",
        "byte",
        "size",
        "instance",
        "print",
        "padding",
        "stack",
        "bad",
        "key",
        "invalid",
        "string",
        "crypto"
      ]
    },
    {
      "method": "testEndTimeExceedsMaximumAllowable@1437",
      "body": "/** \n * Tests when an end time is requested that exceeds the maximum end time as configured in policy that the maximum allowable end time is returned instead of the requested end time. \"The expiration time of the ticket will be set to the earlier of the requested endtime and a time determined by local policy, possibly by using realm- or principal-specific factors.\"\n * @throws Exception\n */\n@Test public void testEndTimeExceedsMaximumAllowable() throws Exception {\n  KerberosPrincipal clientPrincipal=new KerberosPrincipal(\"hnelson@EXAMPLE.COM\");\n  EncTicketPart encTicketPart=getTicketArchetype(clientPrincipal);\n  KerberosPrincipal serverPrincipal=new KerberosPrincipal(\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\");\n  String passPhrase=\"randomKey\";\n  EncryptionKey serverKey=getEncryptionKey(serverPrincipal,passPhrase);\n  Ticket tgt=getTicket(encTicketPart,serverPrincipal,serverKey);\n  KdcReqBody kdcReqBody=new KdcReqBody();\n  kdcReqBody.setSName(getPrincipalName(\"hnelson\"));\n  kdcReqBody.setRealm(\"EXAMPLE.COM\");\n  kdcReqBody.setEType(config.getEncryptionTypes());\n  kdcReqBody.setNonce(random.nextInt());\n  KdcOptions kdcOptions=new KdcOptions();\n  kdcReqBody.setKdcOptions(kdcOptions);\n  long now=System.currentTimeMillis();\n  KerberosTime requestedEndTime=new KerberosTime(now + KerberosTime.WEEK);\n  kdcReqBody.setTill(requestedEndTime);\n  KdcReq message=getKdcRequest(tgt,kdcReqBody);\n  handler.messageReceived(session,message);\n  Object msg=session.getMessage();\n  assertEquals(\"session.getMessage() instanceOf\",TgsRep.class,msg.getClass());\n  TgsRep reply=(TgsRep)msg;\n  KerberosTime expectedEndTime=new KerberosTime(now + KerberosTime.DAY);\n  boolean isClose=Math.abs(reply.getEndTime().getTime() - expectedEndTime.getTime()) < 5000;\n  assertTrue(\"Expected end time\",isClose);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.abs(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/directory-server/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/TicketGrantingServiceTest.java",
      "types": [
        "System",
        "Long",
        "Math",
        "Integer"
      ],
      "apicalls": [
        "currentTimeMillis",
        "abs"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Math.abs(int)"
          ]
        }
      ],
      "keywords": [
        "millis",
        "math",
        "integer",
        "time",
        "system",
        "long",
        "abs",
        "current",
        "java",
        "lang"
      ]
    },
    {
      "method": "getEntry@48",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.zip.ZipFile.getEntry(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.zip.ZipEntry",
            "_throws": []
          },
          {
            "_call": "java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry)",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/rulestudio/Manufacturing/tools/encrypt/src/encrypt/build/EncryptedClassLoader.java",
      "body": "public byte[] getEntry(String eName) throws ClassNotFoundException, IOException, Exception {\n  ZipEntry ent=zip.getEntry(eName);\n  if (ent == null) {\n    return null;\n  }\n  InputStream in=zip.getInputStream(ent);\n  ByteArrayOutputStream bot=new ByteArrayOutputStream((int)ent.getSize());\n  FileEncryption.decrypt(in,bot);\n  byte[] from=bot.toByteArray();\n  return from;\n}\n",
      "types": [
        "ZipFile",
        "Integer",
        "ByteArrayOutputStream",
        "InputStream",
        "ZipEntry",
        "IOException",
        "String"
      ],
      "apicalls": [
        "toByteArray",
        "getInputStream",
        "getEntry"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.zip.ZipFile.getEntry(java.lang.String)",
            "java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry)",
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "output",
        "util",
        "stream",
        "entry",
        "string",
        "zip",
        "file",
        "integer",
        "exception",
        "java",
        "io",
        "input",
        "byte",
        "get",
        "array"
      ]
    },
    {
      "method": "testOptional0202@53",
      "formalParam": [
        "MyMessage02"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          }
        ]
      },
      "returnType": "MyMessage03",
      "file": "./java_projects/msgpack-java/src/test/java/org/msgpack/annotation/TestOptionalBufferPackBufferUnpack.java",
      "body": "public MyMessage03 testOptional0202(MyMessage02 src) throws Exception {\n  MessagePack msgpack=new MessagePack();\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  msgpack.write(out,src);\n  byte[] bytes=out.toByteArray();\n  return msgpack.read(bytes,MyMessage03.class);\n}\n",
      "types": [
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "java",
        "stream",
        "byte",
        "output",
        "array",
        "io"
      ]
    },
    {
      "method": "handleChunk@58",
      "body": "/** \n * Handle a chunk of data.  We're only registered for \"EXIT\".\n */\npublic Chunk handleChunk(Chunk request){\n  if (Config.LOGV)   Log.v(\"ddm-exit\",\"Handling \" + name(request.type) + \" chunk\");\n  ByteBuffer in=wrapChunk(request);\n  int statusCode=in.getInt();\n  Runtime.getRuntime().halt(statusCode);\n  return null;\n}\n",
      "formalParam": [
        "Chunk"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.getInt()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Runtime.getRuntime()",
            "node": "DAPICall",
            "_returns": "java.lang.Runtime",
            "_throws": []
          },
          {
            "_call": "java.lang.Runtime.halt(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Chunk",
      "file": "./java_projects/android_framework_base_1/core/java/android/ddm/DdmHandleExit.java",
      "types": [
        "Runtime",
        "ByteBuffer",
        "Integer"
      ],
      "apicalls": [
        "getInt",
        "getRuntime",
        "halt"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.getInt()",
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.halt(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "get",
        "nio",
        "int",
        "lang",
        "buffer",
        "byte",
        "runtime",
        "halt"
      ]
    },
    {
      "method": "serialize@725",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.ObjectOutputStream.flush()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          }
        ]
      },
      "returnType": "byte[]",
      "file": "./java_projects/salem/src/haven/Utils.java",
      "body": "public static byte[] serialize(Object obj){\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  try {\n    serialize(obj,out);\n  }\n catch (  IOException e) {\n    throw (new RuntimeException(e));\n  }\n  return (out.toByteArray());\n}\n",
      "types": [
        "OutputStream",
        "ObjectOutputStream",
        "IOException",
        "ByteArrayOutputStream",
        "Object"
      ],
      "apicalls": [
        "writeObject",
        "toByteArray",
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "java.io.ObjectOutputStream.flush()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "java",
        "output",
        "flush",
        "byte",
        "io",
        "exception",
        "stream",
        "object",
        "array",
        "write"
      ]
    },
    {
      "method": "deepCopy@20",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.io.ObjectOutputStream.flush()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.io.ObjectOutputStream.close()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              },
              {
                "_call": "java.io.ObjectInputStream.readObject()",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": [
                  "java.io.IOException",
                  "java.lang.ClassNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/salsa_lite/common/DeepCopy.java",
      "body": "/** \n * Returns a copy of the object, or null if the object cannot be serialized.\n */\npublic static final Object deepCopy(Object object){\n  Object obj=null;\n  try {\n    FastByteArrayOutputStream fbos=new FastByteArrayOutputStream();\n    ObjectOutputStream out=new ObjectOutputStream(fbos);\n    out.writeObject(object);\n    out.flush();\n    out.close();\n    ObjectInputStream in=new ObjectInputStream(fbos.getInputStream());\n    obj=in.readObject();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  ClassNotFoundException cnfe) {\n    cnfe.printStackTrace();\n  }\n  return obj;\n}\n",
      "types": [
        "IOException",
        "ObjectInputStream",
        "InputStream",
        "Throwable",
        "OutputStream",
        "Object",
        "ObjectOutputStream",
        "ClassNotFoundException"
      ],
      "apicalls": [
        "readObject",
        "printStackTrace",
        "close",
        "writeObject",
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "java.io.ObjectOutputStream.flush()",
            "java.io.ObjectOutputStream.close()",
            "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
            "java.io.ObjectInputStream.readObject()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "java.io.ObjectOutputStream.flush()",
            "java.io.ObjectOutputStream.close()",
            "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
            "java.io.ObjectInputStream.readObject()"
          ]
        }
      ],
      "keywords": [
        "io",
        "exception",
        "flush",
        "trace",
        "class",
        "java",
        "stack",
        "close",
        "print",
        "output",
        "write",
        "lang",
        "found",
        "object",
        "throwable",
        "input",
        "stream",
        "read"
      ]
    },
    {
      "method": "unresolved_externalF@420",
      "body": "/** \n * External functions that cannot be resolved are replaced with a call to this method. This method will generate a runtime errors. A good stylesheet checks whether the function exists using conditional constructs, and never really tries to call it if it doesn't exist. But simple stylesheets may result in a call to this method. The compiler should generate a warning if it encounters a call to an unresolved external function.\n */\npublic static void unresolved_externalF(String name){\n  runTimeError(EXTERNAL_FUNC_ERR,name);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ResourceBundle.getString(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/org/apache/xalan/internal/xsltc/runtime/BasisLibrary.java",
      "types": [
        "Object",
        "ResourceBundle",
        "String",
        "MessageFormat"
      ],
      "apicalls": [
        "format",
        "getString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ResourceBundle.getString(java.lang.String)",
            "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "text",
        "string",
        "get",
        "resource",
        "object",
        "format",
        "util",
        "java",
        "message",
        "bundle"
      ]
    },
    {
      "method": "toString@11745",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"getTableStats_args(\");\n  boolean first=true;\n  sb.append(\"table:\");\n  if (this.table == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.table);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/blur/interface/gen-java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "builder",
        "append",
        "java"
      ]
    },
    {
      "method": "asynchronousReport@227",
      "body": "public void asynchronousReport(final String cmd,final String callback){\n  final JSObject window=JSObject.getWindow(this);\n  if (SwingUtilities.isEventDispatchThread()) {\n    Thread t=new Thread(\"reporter thread off of EDT\"){\n      public void run(){\n        Object retval=null;\n        try {\n          retval=panel().report(cmd);\n          Object[] args={retval};\n          window.call(callback,args);\n        }\n catch (        CompilerException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n;\n    t.start();\n  }\n else {\n    Object retval=null;\n    try {\n      retval=panel().report(cmd);\n      Object[] args={retval};\n      window.call(callback,args);\n    }\n catch (    CompilerException e) {\n      e.printStackTrace();\n    }\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Thread.start()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "javax.swing.SwingUtilities.isEventDispatchThread()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/NetLogoAppletLiveConnect/src/wisenetlogo/TalkativeApplet.java",
      "types": [
        "Boolean",
        "SwingUtilities",
        "Thread"
      ],
      "apicalls": [
        "start",
        "isEventDispatchThread"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Thread.start()"
          ]
        },
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()"
          ]
        }
      ],
      "keywords": [
        "javax",
        "thread",
        "event",
        "swing",
        "start",
        "lang",
        "boolean",
        "java",
        "dispatch",
        "utilities"
      ]
    },
    {
      "method": "testDecodeAdAndOrNoPaTimestamp@185",
      "body": "@Test(expected=DecoderException.class) public void testDecodeAdAndOrNoPaTimestamp() throws DecoderException {\n  Asn1Decoder krbDecoder=new Asn1Decoder();\n  ByteBuffer stream=ByteBuffer.allocate(0x07);\n  stream.put(new byte[]{0x30,0x05,(byte)0xA1,0x03,0x02,0x01,0x01});\n  stream.flip();\n  PaEncTsEncContainer paEncTsEncContainer=new PaEncTsEncContainer();\n  krbDecoder.decode(stream,paEncTsEncContainer);\n  fail();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.allocate(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.put(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.Buffer.flip()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/directory-server/kerberos-codec/src/test/java/org/apache/directory/shared/kerberos/codec/PaEncTsEncDecoderTest.java",
      "types": [
        "ByteBuffer",
        "Buffer",
        "Byte",
        "Integer"
      ],
      "apicalls": [
        "flip",
        "allocate",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.allocate(int)",
            "java.nio.ByteBuffer.put(byte[])",
            "java.nio.Buffer.flip()"
          ]
        }
      ],
      "keywords": [
        "java",
        "allocate",
        "put",
        "integer",
        "byte",
        "nio",
        "flip",
        "buffer"
      ]
    },
    {
      "method": "SaveAsAction@675",
      "body": "SaveAsAction(SaveAction saveAction){\n  super(\"Save As\");\n  putValue(Action.SHORT_DESCRIPTION,\"Saves Image as PNG to User Selected File.\");\n  setEnabled(false);\n  this.saveAction=saveAction;\n}\n",
      "formalParam": [
        "SaveAction"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.AbstractAction.setEnabled(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/fiji/src-plugins/Siox_Segmentation/src/main/java/org/siox/example/Main.java",
      "types": [
        "AbstractAction",
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "setEnabled",
        "putValue"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)",
            "javax.swing.AbstractAction.setEnabled(boolean)"
          ]
        }
      ],
      "keywords": [
        "value",
        "object",
        "swing",
        "action",
        "enabled",
        "string",
        "set",
        "abstract",
        "put",
        "javax",
        "boolean"
      ]
    },
    {
      "method": "loadJaspi@102",
      "body": "public static JaspiType loadJaspi(Reader in) throws ParserConfigurationException, IOException, SAXException, JAXBException, XMLStreamException {\n  return load(in,JaspiType.class);\n}\n",
      "formalParam": [
        "Reader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.bind.JAXBContext.createUnmarshaller()",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "_returns": "javax.xml.bind.Unmarshaller",
            "node": "DAPICall"
          },
          {
            "_call": "javax.xml.stream.XMLStreamReader.close()",
            "_throws": [
              "javax.xml.stream.XMLStreamException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "JaspiType",
      "file": "./java_projects/geronimo-jaspi/geronimo-jaspi/src/main/java/org/apache/geronimo/components/jaspi/model/JaspiXmlUtil.java",
      "types": [
        "Unmarshaller",
        "XMLStreamReader",
        "JAXBException",
        "JAXBContext",
        "XMLStreamException"
      ],
      "apicalls": [
        "createUnmarshaller",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.bind.JAXBContext.createUnmarshaller()",
            "javax.xml.stream.XMLStreamReader.close()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "jaxb",
        "create",
        "bind",
        "reader",
        "close",
        "context",
        "javax",
        "xml",
        "stream",
        "unmarshaller"
      ]
    },
    {
      "method": "setAcManagementDestNtDomain@1404",
      "body": "public void setAcManagementDestNtDomain(String acManagementDestNtDomain){\n  addPair(AC_MANAGEMENT_DEST_NT_DOMAIN,acManagementDestNtDomain);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SplunkJavaLogging/src/com/dtdsoftware/splunk/logging/SplunkLogEvent.java",
      "types": [
        "Character",
        "StringBuffer",
        "String"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "append",
        "java",
        "string",
        "buffer",
        "character",
        "lang"
      ]
    },
    {
      "method": "test_getAvailableIDs_I@213",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TimeZone.getTimeZone(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.TimeZone",
            "_throws": []
          },
          {
            "_call": "java.util.TimeZone.getRawOffset()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.TimeZone.getAvailableIDs(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.contains(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/TimeZoneTest.java",
      "body": "/** \n * @add test {@link java.util.TimeZone#getAvailableIDs(int)}\n */\npublic void test_getAvailableIDs_I(){\n  TimeZone tz=TimeZone.getTimeZone(\"Asia/Shanghai\");\n  int rawoffset=tz.getRawOffset();\n  String[] ids=TimeZone.getAvailableIDs(rawoffset);\n  List<String> idList=Arrays.asList(ids);\n  assertTrue(\"Asia/shanghai and Hongkong should have the same rawoffset\",idList.contains(\"Hongkong\"));\n}\n",
      "types": [
        "String",
        "Object",
        "Boolean",
        "List",
        "Arrays",
        "Integer",
        "TimeZone"
      ],
      "apicalls": [
        "contains",
        "asList",
        "getRawOffset",
        "getAvailableIDs",
        "getTimeZone"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TimeZone.getTimeZone(java.lang.String)",
            "java.util.TimeZone.getRawOffset()",
            "java.util.TimeZone.getAvailableIDs(int)",
            "java.util.Arrays.asList(T[])",
            "java.util.List<java.lang.String>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "offset",
        "available",
        "raw",
        "contains",
        "get",
        "time",
        "arrays",
        "util",
        "integer",
        "java",
        "object",
        "boolean",
        "zone",
        "list",
        "ds"
      ]
    },
    {
      "method": "BrowserViewCellRenderer@42",
      "body": "/** \n */\npublic BrowserViewCellRenderer(){\n  super();\n  setFont(AdvancedPrefs.getBrowserFont().getFont());\n  if (getBorder() != null) {\n    setBorder(BorderFactory.createCompoundBorder(getBorder(),BorderFactory.createEmptyBorder(0,1,0,0)));\n  }\n else {\n    setBorder(BorderFactory.createEmptyBorder(0,1,0,0));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.tree.DefaultTreeCellRenderer.setFont(java.awt.Font)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.border.Border"
              },
              {
                "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.JComponent.getBorder()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.border.Border"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.getBorder()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.border.Border"
              },
              {
                "_call": "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.border.Border"
              },
              {
                "_call": "javax.swing.BorderFactory.createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.border.CompoundBorder"
              },
              {
                "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexo/src/main/java/org/openflexo/components/browser/view/BrowserViewCellRenderer.java",
      "types": [
        "Integer",
        "BorderFactory",
        "JComponent",
        "Font",
        "Border",
        "DefaultTreeCellRenderer",
        "CompoundBorder"
      ],
      "apicalls": [
        "createCompoundBorder",
        "setFont",
        "setBorder",
        "createEmptyBorder",
        "getBorder"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.tree.DefaultTreeCellRenderer.setFont(java.awt.Font)",
            "javax.swing.JComponent.getBorder()",
            "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        },
        {
          "calls": [
            "javax.swing.tree.DefaultTreeCellRenderer.setFont(java.awt.Font)",
            "javax.swing.JComponent.getBorder()",
            "javax.swing.JComponent.getBorder()",
            "javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)",
            "javax.swing.BorderFactory.createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "create",
        "default",
        "swing",
        "get",
        "factory",
        "component",
        "font",
        "renderer",
        "empty",
        "tree",
        "set",
        "j",
        "border",
        "cell",
        "compound",
        "integer"
      ]
    },
    {
      "method": "loadData@121",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.event.EventListenerList.getListeners(java.lang.Class)",
            "node": "DAPICall",
            "_returns": "T[]",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.event.EventListenerList.getListeners(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "T[]",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.swing.event.EventListenerList.getListeners(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "T[]",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/KinoPOS/src-data/com/openbravo/data/user/BrowsableData.java",
      "body": "public void loadData() throws BasicException {\n  putNewData(m_dataprov == null ? null : m_dataprov.loadData());\n}\n",
      "types": [
        "List",
        "Integer",
        "Comparator",
        "Class",
        "EventListenerList",
        "ArrayList",
        "Collections"
      ],
      "apicalls": [
        "size",
        "getListeners",
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.ArrayList.ArrayList()",
            "java.util.List.size()",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "javax.swing.event.EventListenerList.getListeners(java.lang.Class)",
            "javax.swing.event.EventListenerList.getListeners(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "comparator",
        "listener",
        "event",
        "listeners",
        "collections",
        "array",
        "swing",
        "class",
        "util",
        "sort",
        "get",
        "size",
        "list",
        "java",
        "javax",
        "integer"
      ]
    },
    {
      "method": "invalidatePageLink@441",
      "body": "public boolean invalidatePageLink(IWContext iwc,PageLink l,int userId){\n  try {\n    l.setDeleted(true);\n    l.setDeletedBy(userId);\n    l.setDeletedWhen(IWTimestamp.getTimestampRightNow());\n    l.store();\n    ICDomain domain=getBuilderLogic().getCurrentDomain(iwc);\n    com.idega.builder.business.IBPageHelper.getInstance().deletePage(Integer.toString(l.getPageId()),true,PageTreeNode.getTree(iwc),userId,domain);\n    return true;\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n    return false;\n  }\n}\n",
      "formalParam": [
        "IWContext",
        "PageLink",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Integer.toString(int)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/com.idega.builder/src/java/com/idega/builder/dynamicpagetrigger/business/DPTTriggerBusinessBean.java",
      "types": [
        "Integer",
        "Throwable",
        "String"
      ],
      "apicalls": [
        "toString",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.toString(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "trace",
        "integer",
        "string",
        "throwable",
        "stack",
        "lang",
        "print"
      ]
    },
    {
      "method": "helpUpdateModelContents@133",
      "body": "/** \n * Method which delegates to all handlers the ability to update or perform internal refactoring for the refactored models\n * @param type\n * @param refactoredModelResource\n * @param refactoredPaths\n * @param monitor\n */\npublic static void helpUpdateModelContents(int type,ModelResource refactoredModelResource,Map refactoredPaths,IProgressMonitor monitor){\n  if (!handlersLoaded) {\n    loadExtensions();\n  }\n  try {\n    if (!ModelUtil.isXsdFile(refactoredModelResource.getCorrespondingResource())) {\n      for (      IRefactorModelHandler handler : handlers) {\n        handler.helpUpdateModelContents(type,refactoredModelResource,refactoredPaths,monitor);\n      }\n    }\n  }\n catch (  ModelWorkspaceException theException) {\n    ModelerCore.Util.log(IStatus.ERROR,theException,theException.getMessage());\n  }\n}\n",
      "formalParam": [
        "int",
        "ModelResource",
        "Map",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Object",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap.values()",
            "_throws": [],
            "_returns": "java.util.Collection",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.core/src/org/teiid/designer/core/refactor/RefactorModelExtensionManager.java",
      "types": [
        "Object",
        "Collection",
        "HashMap"
      ],
      "apicalls": [
        "values",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.HashMap.values()"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "hash",
        "map",
        "put",
        "collection",
        "values",
        "java"
      ]
    },
    {
      "method": "getDataStore@51",
      "body": "@Override public DataStore getDataStore(Map<String,String> credentials) throws StoreException {\n  int tenantId=Utils.getTenantIdFromUserName(credentials.get(PersistencyConstants.USER_NAME));\n  List<DataStore> tenantStores=dataStorePool.get(tenantId);\n  if (tenantStores != null) {\n    for (    DataStore store : tenantStores) {\n      if (store.getDataSourceType().equals(DataSourceType.CASSANDRA)) {\n        return store;\n      }\n    }\n  }\n  DataStore store;\nsynchronized (this) {\n    tenantStores=dataStorePool.get(tenantId);\n    if (tenantStores != null) {\n      for (      DataStore tenantStore : tenantStores) {\n        if (tenantStore.getDataSourceType().equals(DataSourceType.CASSANDRA)) {\n          return tenantStore;\n        }\n      }\n    }\n else {\n      tenantStores=new ArrayList<DataStore>();\n    }\n    store=new CassandraDataStore();\n    store.initialize(credentials);\n    tenantStores.add(store);\n    dataStorePool.put(tenantId,tenantStores);\n  }\n  return store;\n}\n",
      "formalParam": [
        "Map<String,String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "DataStore",
      "file": "./java_projects/platform/components/bam2/org.wso2.carbon.bam.core/src/main/java/org/wso2/carbon/bam/core/persistence/cassandra/CassandraStoreFactory.java",
      "types": [
        "Map",
        "Object",
        "String",
        "ArrayList"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "string",
        "list",
        "array",
        "java",
        "get",
        "object",
        "map",
        "util"
      ]
    },
    {
      "method": "addMenu@199",
      "body": "public void addMenu(String nome,String label){\n  addMenu(nome,label,\"\");\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [],
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Timesheet/src/com/rxavier/timesheet/util/Tray.java",
      "types": [
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "equals",
        "lang",
        "java",
        "object",
        "boolean"
      ]
    },
    {
      "method": "testInstallEmptyManifest@196",
      "body": "@Test @SuppressWarnings(\"rawtypes\") public void testInstallEmptyManifest() throws Exception {\n  JavaArchive archive=ShrinkWrap.create(JavaArchive.class,\"empty-manifest\");\n  archive.setManifest(new Asset(){\n    public InputStream openStream(){\n      ManifestBuilder builder=ManifestBuilder.newInstance();\n      return builder.openStream();\n    }\n  }\n);\n  Bundle bundle=installBundle(archive);\n  try {\n    assertBundleState(Bundle.INSTALLED,bundle.getState());\n    Dictionary headers=bundle.getHeaders();\n    assertEquals(1,headers.size());\n    assertEquals(\"1.0\",headers.get(\"manifest-version\"));\n  }\n  finally {\n    bundle.uninstall();\n    assertBundleState(Bundle.UNINSTALLED,bundle.getState());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Dictionary.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Dictionary.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jbosgi-framework/itest/src/test/java/org/jboss/test/osgi/framework/bundle/BundleContextTestCase.java",
      "types": [
        "Object",
        "Integer",
        "Dictionary"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Dictionary.size()",
            "java.util.Dictionary.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "dictionary",
        "get",
        "java",
        "object",
        "size"
      ]
    },
    {
      "method": "getOsisIterator@63",
      "formalParam": [
        "Key",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "Iterator<Content>",
      "file": "./java_projects/jsword/src/main/java/org/crosswire/jsword/book/basic/AbstractPassageBook.java",
      "body": "public Iterator<Content> getOsisIterator(Key key,boolean allowEmpty) throws BookException {\n  Filter filter=getFilter();\n  List<Content> content=new ArrayList<Content>();\n  Passage ref=KeyUtil.getPassage(key);\n  boolean showTitles=ref.hasRanges(RestrictionType.CHAPTER) || !allowEmpty;\n  Iterator<Key> rit=ref.rangeIterator(RestrictionType.CHAPTER);\n  while (rit.hasNext()) {\n    VerseRange range=(VerseRange)rit.next();\n    if (showTitles) {\n      Element title=OSISUtil.factory().createTitle();\n      title.setAttribute(OSISUtil.OSIS_ATTR_TYPE,OSISUtil.GENERATED_CONTENT);\n      title.addContent(range.getName());\n      content.add(title);\n    }\n    for (    Key verse : range) {\n      String txt=getRawText(verse);\n      if (allowEmpty || txt.length() > 0) {\n        List<Content> osisContent=filter.toOSIS(this,verse,txt);\n        addOSIS(verse,content,osisContent);\n      }\n    }\n  }\n  return content.iterator();\n}\n",
      "types": [
        "String",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "java",
        "list",
        "array",
        "string",
        "util",
        "lang",
        "integer",
        "length"
      ]
    },
    {
      "method": "validate@122",
      "body": "/** \n * Validate the index to make sure it holds the following properties for every term - The list of PostingList is not null - The list of PostingList contains only unique document id\n * @return result of the validation\n */\npublic boolean validate(){\n  HashSet<Integer> docSet=new HashSet<Integer>();\n  for (  String term : map.keySet()) {\n    List<Posting> pl=map.get(term);\n    if (pl == null)     return false;\n    docSet.clear();\n    for (    Posting p : pl) {\n      if (docSet.contains(p.getDocumentId()))       return false;\n else       docSet.add(p.getDocumentId());\n    }\n  }\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.lang.Integer>.HashSet<Integer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.Integer>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.HashSet<java.lang.Integer>.add(java.lang.Integer)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.HashSet<java.lang.Integer>.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Simple-Java-Inverted-Index-Generator/src/info/mathieusavard/domain/index/spimi/DefaultInvertedIndex.java",
      "types": [
        "Object",
        "Integer",
        "Boolean",
        "HashSet"
      ],
      "apicalls": [
        "contains",
        "add",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.lang.Integer>.HashSet<Integer>()",
            "java.util.HashSet<java.lang.Integer>.clear()",
            "java.util.HashSet<java.lang.Integer>.contains(java.lang.Object)",
            "java.util.HashSet<java.lang.Integer>.add(java.lang.Integer)"
          ]
        },
        {
          "calls": [
            "java.util.HashSet<java.lang.Integer>.HashSet<Integer>()",
            "java.util.HashSet<java.lang.Integer>.clear()",
            "java.util.HashSet<java.lang.Integer>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "clear",
        "java",
        "util",
        "add",
        "object",
        "set",
        "contains",
        "boolean",
        "integer"
      ]
    },
    {
      "method": "verifyTextInLog@302",
      "body": "/** \n * Throws an exception if the text is not present in the log.\n * @param text\n * @throws VerificationException\n */\npublic void verifyTextInLog(String text) throws VerificationException {\n  List<String> lines;\n  lines=loadFile(getBasedir(),getLogFileName(),false);\n  boolean result=false;\n  for (Iterator<String> i=lines.iterator(); i.hasNext(); ) {\n    String line=i.next();\n    if (line.indexOf(text) >= 0) {\n      result=true;\n      break;\n    }\n  }\n  if (!result) {\n    throw new VerificationException(\"Text not found in log: \" + text);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<java.lang.String>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/flexmojos/flexmojos-testing/flexmojos-test-harness/src/test/java/net/flexmojos/oss/test/FMVerifier.java",
      "types": [
        "List",
        "Boolean",
        "String",
        "Integer",
        "Iterator"
      ],
      "apicalls": [
        "hasNext",
        "iterator",
        "next",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.iterator()",
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.next()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.util.Iterator<java.lang.String>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "lang",
        "integer",
        "next",
        "list",
        "index",
        "string",
        "util",
        "java",
        "iterator"
      ]
    },
    {
      "method": "run@270",
      "body": "public void run(){\n  try {\n    startMs=System.currentTimeMillis();\n    final RowSetManager rowSet=executor.executeQuery(query);\n    status=ProgressIndicatorController.DONE_SUCCESSFULLY;\n    sleep(100,false);\n    ApplicationManager.getApplication().invokeLater(new Runnable(){\n      public void run(){\n        listener.handleQueryResult(rowSet);\n      }\n    }\n);\n  }\n catch (  DBException e) {\n    errorMessage=e.getMessage();\n    status=ProgressIndicatorController.FAILED;\n  }\ncatch (  SyntaxTreeCorruptedException e) {\n    errorMessage=\"Cannot recognize syntax of the statement\";\n    status=ProgressIndicatorController.FAILED;\n  }\ncatch (  Throwable e) {\n    errorMessage=e.getMessage();\n    status=ProgressIndicatorController.FAILED;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SQL-Code-Assistant-/shared/root/java/core/com/deepsky/actions/SqlScriptRunService.java",
      "types": [
        "Throwable",
        "Long",
        "System",
        "String"
      ],
      "apicalls": [
        "currentTimeMillis",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "long",
        "java",
        "get",
        "lang",
        "system",
        "string",
        "message",
        "time",
        "current",
        "millis",
        "throwable"
      ]
    },
    {
      "method": "parse@434",
      "body": "public void parse(String line,int startpos,Stack stack) throws IOException {\n  double value=getDoubleValue(line,startpos);\n  setValue(getContextObject(stack),new Double(value));\n}\n",
      "formalParam": [
        "String",
        "int",
        "Stack"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "$NOT$java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              }
            ]
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Double.parseDouble(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.util.Stack.peek()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Double.Double(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/docx4j/src/main/java/org/docx4j/fonts/fop/fonts/type1/AFMParser.java",
      "types": [
        "Double",
        "Stack",
        "Integer",
        "String",
        "NumberFormatException",
        "Character",
        "Object"
      ],
      "apicalls": [
        "peek",
        "substring",
        "length",
        "charAt",
        "parseDouble"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "$NOT$java.lang.String.charAt(int)",
            "java.lang.String.length()",
            "$NOT$java.lang.String.charAt(int)",
            "java.lang.String.substring(int,int)",
            "java.lang.Double.parseDouble(java.lang.String)",
            "java.util.Stack.peek()",
            "java.lang.Double.Double(double)"
          ]
        }
      ],
      "keywords": [
        "peek",
        "integer",
        "exception",
        "stack",
        "character",
        "string",
        "char",
        "util",
        "number",
        "length",
        "lang",
        "substring",
        "object",
        "parse",
        "format",
        "double",
        "java"
      ]
    },
    {
      "method": "test_Constructor_LStringLStringILThrowable_2@628",
      "body": "/** \n * @test java.sql.SQLTransientException(String, String, int, Throwable)\n */\npublic void test_Constructor_LStringLStringILThrowable_2(){\n  Throwable cause=new Exception(\"MYTHROWABLE\");\n  SQLTransientException sQLTransientException=new SQLTransientException(\"MYTESTSTRING1\",\"MYTESTSTRING2\",0,cause);\n  assertNotNull(sQLTransientException);\n  assertEquals(\"The SQLState of SQLTransientException set and get should be equivalent\",\"MYTESTSTRING2\",sQLTransientException.getSQLState());\n  assertEquals(\"The reason of SQLTransientException set and get should be equivalent\",\"MYTESTSTRING1\",sQLTransientException.getMessage());\n  assertEquals(\"The error code of SQLTransientException should be 0\",sQLTransientException.getErrorCode(),0);\n  assertEquals(\"The cause of SQLTransientException set and get should be equivalent\",cause,sQLTransientException.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Exception.Exception(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.sql.SQLException.getSQLState()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.sql.SQLException.getErrorCode()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/sql/src/test/java/org/apache/harmony/sql/tests/java/sql/SQLTransientExceptionTest.java",
      "types": [
        "Exception",
        "Integer",
        "Throwable",
        "String",
        "SQLException"
      ],
      "apicalls": [
        "getMessage",
        "getSQLState",
        "getErrorCode",
        "getCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Exception.Exception(java.lang.String)",
            "java.sql.SQLException.getSQLState()",
            "java.lang.Throwable.getMessage()",
            "java.sql.SQLException.getErrorCode()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "sql",
        "cause",
        "lang",
        "string",
        "code",
        "message",
        "java",
        "error",
        "state",
        "get",
        "throwable",
        "integer",
        "exception"
      ]
    },
    {
      "method": "RegexTargetResolver@68",
      "body": "public RegexTargetResolver(Map<String,TargetType> patterns){\n  this.patterns=new HashMap<Pattern,TargetType>();\n  this.fields=new HashMap<Pattern,String[]>();\n  for (  String p : patterns.keySet()) {\n    TargetType type=patterns.get(p);\n    setPattern(p,type);\n  }\n}\n",
      "formalParam": [
        "Map<String,TargetType>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<java.util.regex.Pattern,java.lang.String[]>.HashMap<Pattern,String[]>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/abdera/server/src/main/java/org/apache/abdera/protocol/server/impl/RegexTargetResolver.java",
      "types": [
        "Pattern",
        "HashMap",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.HashMap<java.util.regex.Pattern,java.lang.String[]>.HashMap<Pattern,String[]>()"
          ]
        }
      ],
      "keywords": [
        "pattern",
        "map",
        "java",
        "string",
        "util",
        "hash"
      ]
    },
    {
      "method": "testImportExportNonexistentUser@94",
      "body": "/** \n * Tests exporting and import of VFS data with a nonexistent/deleted user.<p> The username of the deleted user should in the export manifest be replaced  by the name of the Admin user.<p>\n * @throws Exception if something goes wrong\n */\npublic void testImportExportNonexistentUser() throws Exception {\n  String zipExportFilename=null;\n  CmsObject cms=getCmsObject();\n  String storedSiteRoot=null;\n  try {\n    String username=\"tempuser\";\n    String password=\"password\";\n    String filename=\"/dummy1.txt\";\n    String contentStr=\"This is a comment. I love comments.\";\n    zipExportFilename=OpenCms.getSystemInfo().getAbsoluteRfsPathRelativeToWebInf(\"packages/testImportExportNonexistentUser.zip\");\n    byte[] content=contentStr.getBytes();\n    CmsProject offlineProject=cms.getRequestContext().getCurrentProject();\n    cms.createUser(username,password,\"Temporary user for import/export test case\",null);\n    cms.addUserToGroup(username,OpenCms.getDefaultUsers().getGroupProjectmanagers());\n    cms.loginUser(username,password);\n    storedSiteRoot=cms.getRequestContext().getSiteRoot();\n    cms.getRequestContext().setSiteRoot(\"/sites/default/\");\n    cms.getRequestContext().setCurrentProject(offlineProject);\n    cms.createResource(filename,CmsResourceTypePlain.getStaticTypeId(),content,null);\n    cms.unlockResource(filename);\n    OpenCms.getPublishManager().publishResource(cms,filename);\n    OpenCms.getPublishManager().waitWhileRunning();\n    cms.loginUser(\"Admin\",\"admin\");\n    cms.getRequestContext().setSiteRoot(\"/sites/default/\");\n    cms.getRequestContext().setCurrentProject(offlineProject);\n    cms.deleteUser(username);\n    List exportPaths=new ArrayList(1);\n    exportPaths.add(filename);\n    CmsVfsImportExportHandler vfsExportHandler=new CmsVfsImportExportHandler();\n    CmsExportParameters params=new CmsExportParameters(zipExportFilename,null,true,false,false,exportPaths,false,true,0,true,false);\n    vfsExportHandler.setExportParams(params);\n    OpenCms.getImportExportManager().exportData(cms,vfsExportHandler,new CmsShellReport(cms.getRequestContext().getLocale()));\n    cms.lockResource(filename);\n    cms.deleteResource(filename,CmsResource.DELETE_REMOVE_SIBLINGS);\n    cms.unlockResource(filename);\n    OpenCms.getPublishManager().publishResource(cms,filename);\n    OpenCms.getPublishManager().waitWhileRunning();\n    OpenCms.getImportExportManager().importData(cms,new CmsShellReport(cms.getRequestContext().getLocale()),new CmsImportParameters(zipExportFilename,\"/\",true));\n  }\n catch (  Exception e) {\n    fail(e.toString());\n  }\n finally {\n    deleteFile(zipExportFilename);\n    if (storedSiteRoot != null) {\n      cms.getRequestContext().setSiteRoot(storedSiteRoot);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.getBytes()",
                "node": "DAPICall",
                "_returns": "byte[]",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList.ArrayList(int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/opencms-core/test/org/opencms/importexport/TestCmsImportExportNonexistentUser.java",
      "types": [
        "Object",
        "Integer",
        "Boolean",
        "List",
        "Throwable",
        "ArrayList",
        "String"
      ],
      "apicalls": [
        "getBytes",
        "toString",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.util.ArrayList.ArrayList(int)",
            "java.util.List.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.util.ArrayList.ArrayList(int)",
            "java.util.List.add(java.lang.Object)",
            "java.lang.Throwable.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "list",
        "array",
        "object",
        "string",
        "add",
        "bytes",
        "get",
        "integer",
        "util",
        "boolean",
        "throwable",
        "java"
      ]
    },
    {
      "method": "getChatTranscript@159",
      "body": "public void getChatTranscript(IQ iq,String sessionID){\n  final IQ reply=IQ.createResultIQ(iq);\n  String transcriptXML=null;\n  try {\n    Element transcript=reply.setChildElement(\"transcript\",\"http://jivesoftware.com/protocol/workgroup\");\n    transcript.addAttribute(\"sessionID\",sessionID);\n    Connection con=null;\n    PreparedStatement pstmt=null;\n    ResultSet rs=null;\n    try {\n      con=DbConnectionManager.getConnection();\n      pstmt=con.prepareStatement(GET_TRANSCRIPT);\n      pstmt.setString(1,sessionID);\n      rs=pstmt.executeQuery();\n      if (rs.next()) {\n        transcriptXML=DbConnectionManager.getLargeTextField(rs,1);\n      }\n    }\n catch (    SQLException sqle) {\n      Log.error(sqle.getMessage(),sqle);\n    }\n finally {\n      DbConnectionManager.closeConnection(rs,pstmt,con);\n    }\n    if (transcriptXML != null) {\n      Document element=DocumentHelper.parseText(transcriptXML);\n      for (Iterator<Element> it=element.getRootElement().elementIterator(); it.hasNext(); ) {\n        Element packet=it.next();\n        transcript.add(packet.createCopy());\n      }\n    }\n    workgroup.send(reply);\n  }\n catch (  Exception ex) {\n    Log.error(\"There was an error retrieving the following transcript. SessionID = \" + sessionID + \" Transcript=\"+ transcriptXML,ex);\n    reply.setChildElement(iq.getChildElement().createCopy());\n    reply.setError(new PacketError(PacketError.Condition.item_not_found));\n    workgroup.send(reply);\n  }\n}\n",
      "formalParam": [
        "IQ",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.prepareStatement(java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.PreparedStatement"
              },
              {
                "_call": "java.sql.PreparedStatement.setString(int,java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.sql.PreparedStatement.executeQuery()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.ResultSet"
              },
              {
                "_call": "java.sql.ResultSet.next()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Openfire/src/plugins/fastpath/src/java/org/jivesoftware/xmpp/workgroup/WorkgroupStats.java",
      "types": [
        "Throwable",
        "PreparedStatement",
        "Connection",
        "String",
        "Boolean",
        "SQLException",
        "Integer",
        "ResultSet"
      ],
      "apicalls": [
        "next",
        "executeQuery",
        "getMessage",
        "prepareStatement",
        "setString"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.executeQuery()",
            "java.sql.ResultSet.next()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.executeQuery()",
            "java.sql.ResultSet.next()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "message",
        "java",
        "prepare",
        "prepared",
        "sql",
        "exception",
        "integer",
        "lang",
        "connection",
        "execute",
        "string",
        "statement",
        "query",
        "boolean",
        "result",
        "next",
        "throwable",
        "get",
        "set"
      ]
    },
    {
      "method": "toString@269",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\n@Override public String toString(){\n  if (eIsProxy()) {\n    return super.toString();\n  }\n  StringBuffer result=new StringBuffer(super.toString());\n  result.append(\" (copies: \");\n  result.append(copies);\n  result.append(')');\n  return result.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/acceleo/tests/org.eclipse.acceleo.parser.tests/src-gen/org/eclipse/acceleo/parser/tests/extlibrary/impl/CirculatingItemImpl.java",
      "types": [
        "Character",
        "Integer",
        "StringBuffer",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(int)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "append",
        "buffer",
        "character",
        "integer",
        "lang"
      ]
    },
    {
      "method": "weaveQuotaRemaining@217",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": [
              "java.lang.NumberFormatException"
            ]
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/android-sync/src/main/java/org/mozilla/gecko/sync/net/SyncResponse.java",
      "body": "public int weaveQuotaRemaining() throws NumberFormatException {\n  return this.getIntegerHeader(\"x-weave-quota-remaining\");\n}\n",
      "types": [
        "NumberFormatException",
        "Integer",
        "String"
      ],
      "apicalls": [
        "trim",
        "parseInt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.Integer.parseInt(java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "exception",
        "lang",
        "length",
        "parse",
        "string",
        "number",
        "int",
        "format",
        "trim",
        "integer"
      ]
    },
    {
      "method": "AbstractTestCase@37",
      "body": "/** \n * Constructor.\n */\npublic AbstractTestCase(String testName){\n  super(testName);\n  testDir=new File(BASEDIR,testDir).getAbsolutePath();\n  sampleDir=new File(BASEDIR,sampleDir).getAbsolutePath();\n  outDir=new File(BASEDIR,outDir).getAbsolutePath();\n  tempDir=new File(BASEDIR,tempDir).getAbsolutePath();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/geronimo/plugins/axis/geronimo-axis/src/test/java/org/apache/geronimo/axis/AbstractTestCase.java",
      "types": [
        "File",
        "String"
      ],
      "apicalls": [
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.getAbsolutePath()",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.getAbsolutePath()"
          ]
        }
      ],
      "keywords": [
        "absolute",
        "file",
        "get",
        "path",
        "string",
        "java",
        "io"
      ]
    },
    {
      "method": "getAlterSequenceSQL@366",
      "body": "/** \n * @see net.sf.hajdbc.SequenceSupport#getAlterSequenceSQL(net.sf.hajdbc.SequenceProperties,long)\n */\n@Override public String getAlterSequenceSQL(SequenceProperties sequence,long value){\n  return MessageFormat.format(this.alterSequenceFormat(),sequence.getName().getDDLName(),String.valueOf(value),String.valueOf(sequence.getIncrement()));\n}\n",
      "formalParam": [
        "SequenceProperties",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.valueOf(long)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.valueOf(char[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ha-jdbc/src/main/java/net/sf/hajdbc/dialect/StandardDialect.java",
      "types": [
        "Object",
        "MessageFormat",
        "Character",
        "Long",
        "String"
      ],
      "apicalls": [
        "valueOf",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.valueOf(long)",
            "java.lang.String.valueOf(char[])",
            "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "long",
        "java",
        "message",
        "value",
        "format",
        "lang",
        "text",
        "object",
        "character",
        "string"
      ]
    },
    {
      "method": "get@20",
      "body": "/** \n * Get an account holder with automatically determined type, based on the owner's name.\n * @param owner\n * @return account holder for the given owner name, or null if none could be determined\n */\npublic AccountHolder get(String owner){\n  OfflinePlayer player=Bukkit.getOfflinePlayer(owner);\n  if (player.isOnline() || player.hasPlayedBefore()) {\n    return new PlayerAccountHolder(player);\n  }\n  if (Dependency.dependency().factions != null && owner.startsWith(\"faction-\")) {\n    String factionTag=owner.substring(8);\n    Faction faction;\n    faction=Factions.i.get(factionTag);\n    if (faction == null)     faction=Factions.i.getByTag(factionTag);\n    if (faction != null)     return new FactionAccountHolder(faction);\n  }\n  return null;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "AccountHolder",
      "file": "./java_projects/Gringotts_1/src/main/java/org/gestern/gringotts/AccountHolderFactory.java",
      "types": [
        "Integer",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "startsWith",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "integer",
        "substring",
        "lang",
        "string",
        "starts",
        "java"
      ]
    },
    {
      "method": "putToSuccess@5893",
      "body": "public void putToSuccess(String key,String val){\n  if (this.success == null) {\n    this.success=new HashMap<String,String>();\n  }\n  this.success.put(key,val);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/messaging-client/messaging-client-scribe/src/main/java/com/facebook/fb303/FacebookService.java",
      "types": [
        "Map",
        "HashMap",
        "String"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "map",
        "util",
        "hash",
        "put",
        "java",
        "string"
      ]
    },
    {
      "method": "computeMemoryBufferSize@1054",
      "body": "public static long computeMemoryBufferSize(Map appContext){\n  if (appContext == null)   return 0;\n  return populateMemBufferSize(appContext.get(DataEngine.MEMORY_BUFFER_SIZE)) * 1024 * 1024;\n}\n",
      "formalParam": [
        "Map"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/birt/data/org.eclipse.birt.report.data.adapter/src/org/eclipse/birt/report/data/adapter/impl/DataRequestSessionImpl.java",
      "types": [
        "Map",
        "Object",
        "Long",
        "String",
        "NumberFormatException"
      ],
      "apicalls": [
        "parseLong",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.get(java.lang.Object)",
            "java.lang.Long.parseLong(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "util",
        "long",
        "number",
        "object",
        "exception",
        "format",
        "string",
        "map",
        "get",
        "parse"
      ]
    },
    {
      "method": "getParameters@24",
      "body": "public static Map<String,String> getParameters(Operator op) throws Exception {\n  Map<String,String> parameters=new LinkedHashMap<String,String>();\n  Parameters params=op.getParameters();\n  for (  String key : params.getKeys()) {\n    try {\n      String value=params.getParameter(key);\n      if (value != null) {\n        parameters.put(key,value);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"Failed to get parameter '{}' from operator {}\",key,op);\n    }\n  }\n  return parameters;\n}\n",
      "formalParam": [
        "Operator"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<java.lang.String,java.lang.String>.LinkedHashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Map<String,String>",
      "file": "./java_projects/streams/stream-plugin/src/main/java/com/rapidminer/stream/util/OperatorUtils.java",
      "types": [
        "String",
        "Map",
        "LinkedHashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<java.lang.String,java.lang.String>.LinkedHashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "linked",
        "util",
        "string",
        "hash",
        "map",
        "java",
        "put"
      ]
    },
    {
      "method": "registerCodec@121",
      "body": "/** \n * Associates an <code>ImageCodec</code> with its format name, as determined by its <code>getFormatName()</code> method. Case is not significant. Any codec previously associated with the name is discarded.\n * @param codec The <code>ImageCodec</code> object to be registered.\n */\npublic static void registerCodec(ImageCodec codec){\n  codecs.put(codec.getFormatName().toLowerCase(),codec);\n}\n",
      "formalParam": [
        "ImageCodec"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/image/codec/ImageCodec.java",
      "types": [
        "Object",
        "Hashtable",
        "String"
      ],
      "apicalls": [
        "toLowerCase",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lower",
        "hashtable",
        "lang",
        "java",
        "string",
        "case",
        "object",
        "util",
        "put"
      ]
    },
    {
      "method": "optArg@48",
      "formalParam": [
        "String",
        "String[]",
        "int",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Boolean.valueOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.Boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.Boolean.booleanValue()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/rabbitmq-java-client/test/src/com/rabbitmq/examples/ProducerMain.java",
      "body": "public static boolean optArg(String name,String[] args,int index,boolean def){\n  return summariseArg(name,(args.length > index) ? Boolean.valueOf(args[index]).booleanValue() : def);\n}\n",
      "types": [
        "Boolean",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "println",
        "booleanValue",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Boolean.valueOf(java.lang.String)",
            "java.lang.Boolean.booleanValue()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "string",
        "print",
        "io",
        "value",
        "println",
        "stream",
        "lang"
      ]
    },
    {
      "method": "addNotify@370",
      "body": "@Override public void addNotify(){\n  toolkit.lockAWT();\n  try {\n    super.addNotify();\n    setSize(getMinimumSize());\n  }\n  finally {\n    toolkit.unlockAWT();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getMinimumSize()",
            "node": "DAPICall",
            "_returns": "java.awt.Dimension",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.setSize(java.awt.Dimension)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/awt/src/main/java/common/java/awt/Choice.java",
      "types": [
        "Component",
        "Dimension"
      ],
      "apicalls": [
        "getMinimumSize",
        "setSize"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getMinimumSize()",
            "java.awt.Component.setSize(java.awt.Dimension)"
          ]
        }
      ],
      "keywords": [
        "size",
        "awt",
        "component",
        "set",
        "get",
        "java",
        "minimum",
        "dimension"
      ]
    },
    {
      "method": "launchTask@936",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "node": "DAPICall",
            "_returns": "java.util.Calendar",
            "_throws": []
          },
          {
            "_call": "java.util.Calendar.getTimeInMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hama/core/src/main/java/org/apache/hama/bsp/GroomServer.java",
      "body": "public void launchTask() throws IOException {\n  localizeTask(task);\n  taskStatus.setRunState(TaskStatus.State.RUNNING);\n  this.runner=task.createRunner(GroomServer.this);\n  this.runner.start();\n  startTime=Calendar.getInstance().getTimeInMillis();\n  LOG.info(\"Task '\" + task.getTaskID().toString() + \"' has started.\");\n}\n",
      "types": [
        "Long",
        "Calendar"
      ],
      "apicalls": [
        "getTimeInMillis",
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTimeInMillis()"
          ]
        }
      ],
      "keywords": [
        "instance",
        "java",
        "util",
        "long",
        "calendar",
        "millis",
        "get",
        "time"
      ]
    },
    {
      "method": "log@73",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Honeypot/src/com/argo/bukkit/honeypot/Honeyfarm.java",
      "body": "public static void log(String line){\n  TextFileHandler r=new TextFileHandler(logPath);\n  try {\n    r.appendLine(\"[\" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()) + \"] \"+ line);\n  }\n catch (  IOException ex) {\n  }\n}\n",
      "types": [
        "Date",
        "String",
        "DateFormat",
        "SimpleDateFormat"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.util.Date.Date()",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "format",
        "date",
        "text",
        "simple",
        "string",
        "util",
        "java"
      ]
    },
    {
      "method": "main@36",
      "body": "public static void main(String... args) throws Exception {\n  JobConf job=new JobConf();\n  job.setJarByClass(LongSleepJob.class);\n  Path input=new Path(args[0]);\n  Path output=new Path(args[1]);\n  output.getFileSystem(job).delete(output,true);\n  job.setMapperClass(Map.class);\n  FileInputFormat.setInputPaths(job,input);\n  FileOutputFormat.setOutputPath(job,output);\n  job.set(\"mapred.task.timeout\",String.valueOf(TimeUnit.MINUTES.toMillis(10)));\n  JobClient.runJob(job);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.TimeUnit.toMillis(long)",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.String.valueOf(long)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-book_1/src/main/java/com/manning/hip/ch6/LongSleepJob.java",
      "types": [
        "TimeUnit",
        "String",
        "Long"
      ],
      "apicalls": [
        "toMillis",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.TimeUnit.toMillis(long)",
            "java.lang.String.valueOf(long)"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "util",
        "long",
        "value",
        "string",
        "lang",
        "millis",
        "time",
        "java",
        "unit"
      ]
    },
    {
      "method": "testGetFlushingModelEditor@157",
      "body": "public void testGetFlushingModelEditor(){\n  PropertyEditor editor=cacheFacade.getFlushingModelEditor();\n  assertNotNull(editor);\n  assertEquals(ReflectionCacheModelEditor.class,editor.getClass());\n  ReflectionCacheModelEditor modelEditor=(ReflectionCacheModelEditor)editor;\n  assertEquals(EhCacheFlushingModel.class,modelEditor.getCacheModelClass());\n  Map propertyEditors=modelEditor.getCacheModelPropertyEditors();\n  assertEquals(1,propertyEditors.size());\n  assertSame(StringArrayPropertyEditor.class,propertyEditors.get(\"cacheNames\").getClass());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Map.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-modules/projects/spring-modules-cache/src/test/java/org/springmodules/cache/provider/ehcache/EhCacheFacadeTests.java",
      "types": [
        "Integer",
        "Object",
        "Map"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.size()",
            "java.util.Map.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "java",
        "util",
        "object",
        "map",
        "integer",
        "size"
      ]
    },
    {
      "method": "renderTime@34",
      "body": "/** \n * render time as string \n */\npublic static String renderTime(final long execTimeInMs,final long usec){\n  final StringBuilder result=new StringBuilder();\n  printTime(execTimeInMs,usec,new AbstractOutputDevice(){\n    @Override public void print(    final String s){\n      result.append(s);\n    }\n  }\n);\n  return result.toString();\n}\n",
      "formalParam": [
        "long",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/henplus/src/henplus/commands/TimeRenderer.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "lang",
        "java",
        "string"
      ]
    },
    {
      "method": "update@5901",
      "body": "public JPanel update(Object[] geos){\n  this.geos=geos;\n  if (!checkGeos(geos))   return null;\n  tfCondition.removeActionListener(this);\n  String strCond=\"\";\n  GeoElement geo0=(GeoElement)geos[0];\n  GeoBoolean cond=geo0.getShowObjectCondition();\n  if (cond != null) {\n    strCond=cond.getLabel();\n  }\n  for (int i=0; i < geos.length; i++) {\n    GeoElement geo=(GeoElement)geos[i];\n    cond=geo.getShowObjectCondition();\n    if (cond != null) {\n      String strCondGeo=cond.getLabel();\n      if (!strCond.equals(strCondGeo))       strCond=\"\";\n    }\n  }\n  tfCondition.setText(strCond);\n  tfCondition.addActionListener(this);\n  return this;\n}\n",
      "formalParam": [
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTextField.removeActionListener(java.awt.event.ActionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JTextField.addActionListener(java.awt.event.ActionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "JPanel",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "types": [
        "JTextField",
        "ActionListener",
        "Object",
        "Boolean",
        "JTextComponent",
        "String"
      ],
      "apicalls": [
        "addActionListener",
        "equals",
        "removeActionListener",
        "setText"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTextField.removeActionListener(java.awt.event.ActionListener)",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.JTextField.addActionListener(java.awt.event.ActionListener)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "field",
        "add",
        "object",
        "equals",
        "javax",
        "set",
        "j",
        "java",
        "lang",
        "listener",
        "action",
        "text",
        "component",
        "swing",
        "string",
        "boolean"
      ]
    },
    {
      "method": "getAuthenticationInfo@53",
      "body": "@SuppressWarnings(\"unchecked\") public Map getAuthenticationInfo(URL serverUrl,String realm,String scheme){\n  ServerAuthenInfo authInfo=serverAuthMaps.get(serverUrl.getHost().toLowerCase());\n  if (authInfo == null) {\n    return null;\n  }\n  return authInfo.getAuthenicationInfo(scheme.toLowerCase());\n}\n",
      "formalParam": [
        "URL",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.getHost()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.String>",
            "_throws": []
          }
        ]
      },
      "returnType": "Map",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-eclipse/org.guvnor.tools/src/org/guvnor/tools/utils/webdav/WebDavSessionAuthenticator.java",
      "types": [
        "HashMap",
        "String",
        "Map",
        "URL",
        "Object"
      ],
      "apicalls": [
        "toLowerCase",
        "get",
        "getHost"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.getHost()",
            "java.lang.String.toLowerCase()",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.lang.String.toLowerCase()",
            "java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "object",
        "string",
        "lang",
        "map",
        "lower",
        "hash",
        "util",
        "url",
        "java",
        "net",
        "host",
        "case"
      ]
    },
    {
      "method": "noInterfaceInIr@2470",
      "body": "public INTF_REPOS noInterfaceInIr(Throwable t){\n  return noInterfaceInIr(CompletionStatus.COMPLETED_NO,t);\n}\n",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "INTF_REPOS",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/OMGSystemException.java",
      "types": [
        "Logger",
        "Boolean",
        "Throwable",
        "Level"
      ],
      "apicalls": [
        "initCause",
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "level",
        "java",
        "throwable",
        "cause",
        "logging",
        "boolean",
        "logger",
        "util",
        "init",
        "lang",
        "loggable"
      ]
    },
    {
      "method": "cannotReadRepositoryDb@62",
      "body": "public INITIALIZE cannotReadRepositoryDb(CompletionStatus cs,Throwable t){\n  INITIALIZE exc=new INITIALIZE(CANNOT_READ_REPOSITORY_DB,cs);\n  if (t != null)   exc.initCause(t);\n  if (logger.isLoggable(Level.WARNING)) {\n    Object[] parameters=null;\n    doLog(Level.WARNING,\"ACTIVATION.cannotReadRepositoryDb\",parameters,ActivationSystemException.class,exc);\n  }\n  return exc;\n}\n",
      "formalParam": [
        "CompletionStatus",
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "INITIALIZE",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/ActivationSystemException.java",
      "types": [
        "Logger",
        "Boolean",
        "Throwable",
        "Level"
      ],
      "apicalls": [
        "isLoggable",
        "initCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "init",
        "level",
        "loggable",
        "cause",
        "boolean",
        "logger",
        "lang",
        "java",
        "logging",
        "util",
        "throwable"
      ]
    },
    {
      "method": "calculate@25",
      "formalParam": [
        "MarkerGraph",
        "RadiiCalculator",
        "Tracer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "List<Integer>",
      "file": "./java_projects/activityinfo/server/src/main/java/org/activityinfo/server/report/generator/map/cluster/genetic/UpperBoundsCalculator.java",
      "body": "/** \n * Calculates the upper bound of the number of clusters per subgraph based on a minimum possible radius \n */\npublic static List<Integer> calculate(MarkerGraph graph,RadiiCalculator radiiCalculator,Tracer tracer){\n  List<Integer> bounds=new ArrayList<Integer>();\n  List<List<MarkerGraph.Node>> subgraphs=graph.getSubgraphs();\n  FitnessFunctor ftor=new BubbleFitnessFunctor();\n  for (  List<MarkerGraph.Node> subgraph : subgraphs) {\n    if (tracer != null) {\n      tracer.onSubgraph(subgraph.size());\n    }\n    bounds.add(calcUpperBound(subgraph,radiiCalculator,ftor,tracer));\n  }\n  return bounds;\n}\n",
      "types": [
        "Boolean",
        "List",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "java.util.List<java.lang.Integer>.add(java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "list",
        "add",
        "boolean",
        "java",
        "array",
        "util",
        "integer"
      ]
    },
    {
      "method": "insMaxCh@271",
      "body": "public void insMaxCh(BNode v){\n  c[numChildren++]=v;\n  width=_width();\n}\n",
      "formalParam": [
        "BNode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/alg-vis/src/algvis/btree/BNode.java",
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [
        "min",
        "max"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "math",
        "min",
        "max",
        "integer"
      ]
    },
    {
      "method": "drawImage@685",
      "body": "/** \n * Draws as much of the specified image as has already been scaled to fit inside the specified rectangle. <p> The image is drawn inside the specified rectangle of this graphics context's coordinate space, and is scaled if necessary. Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient. <p> This method returns immediately in all cases, even if the entire image has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then <code>drawImage</code> returns <code>false</code>. As more of the image becomes available, the process that draws the image notifies the specified image observer. <p> A scaled version of an image will not necessarily be available immediately just because an unscaled version of the image has been constructed for this output device.  Each size of the image may be cached separately and generated from the original data in a separate image production sequence.\n * @param img       the specified image to be drawn.\n * @param x         the <i>x</i> coordinate.\n * @param y         the <i>y</i> coordinate.\n * @param width     the width of the rectangle.\n * @param height    the height of the rectangle.\n * @param bgcolor   the background color to paint under thenon-opaque portions of the image.\n * @param observer    object to be notified as more ofthe image is converted.\n * @see java.awt.Image\n * @see java.awt.image.ImageObserver\n * @see java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)\n */\npublic boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){\n  Paint paint=gc.getPaint();\n  gc.setPaint(bgcolor);\n  fillRect(x,y,width,height);\n  gc.setPaint(paint);\n  drawImage(img,x,y,width,height,observer);\n  return true;\n}\n",
      "formalParam": [
        "Image",
        "int",
        "int",
        "int",
        "int",
        "Color",
        "ImageObserver"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Rectangle.Rectangle(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Graphics2D.fill(java.awt.Shape)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/scriptographer/src/java/com/scratchdisk/awt/AbstractGraphics2D.java",
      "types": [
        "Graphics",
        "Graphics2D",
        "Boolean",
        "Image",
        "ImageObserver",
        "Integer",
        "Rectangle",
        "Shape"
      ],
      "apicalls": [
        "drawImage",
        "fill"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Rectangle.Rectangle(int,int,int,int)",
            "java.awt.Graphics2D.fill(java.awt.Shape)",
            "java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)"
          ]
        }
      ],
      "keywords": [
        "graphics",
        "java",
        "d",
        "fill",
        "draw",
        "observer",
        "boolean",
        "integer",
        "graphics2",
        "image",
        "awt",
        "shape",
        "rectangle"
      ]
    },
    {
      "method": "exists@296",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getPath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/sun/awt/shell/ShellFolder.java",
      "body": "public boolean exists(){\n  return (!isFileSystem() || isFileSystemRoot(this) || super.exists());\n}\n",
      "types": [
        "String",
        "File",
        "Boolean"
      ],
      "apicalls": [
        "startsWith",
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getPath()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "io",
        "boolean",
        "get",
        "file",
        "starts",
        "path",
        "string",
        "lang"
      ]
    },
    {
      "method": "setComboCellSelectedIndex@237",
      "body": "/** \n * Sets the selected index for a cell given cell comboBox\n * @param index\n * @param row\n * @param column\n * @return\n */\npublic boolean setComboCellSelectedIndex(int index,int row,int column){\n  if (comboBoxRendererMap == null)   return false;\n  int modelColumn=myTable.convertColumnIndexToModel(column);\n  Point cell=new Point(row,modelColumn);\n  if (comboBoxEditorMap.keySet().contains(cell)) {\n    comboBoxEditorMap.get(cell).setSelectedIndex(index);\n    return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTable.convertColumnIndexToModel(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Point.Point(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_then": [
              {
                "_call": "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_V"
              },
              {
                "_call": "javax.swing.JComboBox.setSelectedIndex(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.HashMap<Tau_K,Tau_V>.keySet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              },
              {
                "_call": "java.util.Set.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/geogebra/desktop/geogebra/gui/view/data/StatTable.java",
      "types": [
        "JComboBox",
        "Object",
        "Integer",
        "Set",
        "HashMap",
        "JTable",
        "Boolean",
        "Point"
      ],
      "apicalls": [
        "get",
        "keySet",
        "convertColumnIndexToModel",
        "setSelectedIndex",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTable.convertColumnIndexToModel(int)",
            "java.awt.Point.Point(int,int)",
            "java.util.HashMap<Tau_K,Tau_V>.keySet()",
            "java.util.Set.contains(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "javax.swing.JComboBox.setSelectedIndex(int)"
          ]
        },
        {
          "calls": [
            "javax.swing.JTable.convertColumnIndexToModel(int)",
            "java.awt.Point.Point(int,int)",
            "java.util.HashMap<Tau_K,Tau_V>.keySet()",
            "java.util.Set.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "box",
        "model",
        "index",
        "integer",
        "convert",
        "point",
        "j",
        "table",
        "set",
        "object",
        "key",
        "map",
        "column",
        "java",
        "selected",
        "util",
        "javax",
        "get",
        "boolean",
        "swing",
        "awt",
        "combo",
        "hash",
        "contains"
      ]
    },
    {
      "method": "getAncestorOf@811",
      "body": "/** \n * Get the ancestor of a given DN, using the descendant DN. Assuming that a DN has two parts :<br/> DN = [descendant DN][ancestor DN]<br/> To get back the ancestor from the full DN, you just pass the descendant DN as a parameter. Here is a working example : <pre> Dn dn = new Dn( \"cn=test, dc=server, dc=directory, dc=apache, dc=org\" ); Dn ancestor = dn.getAncestorOf( new Dn( \"cn=test, dc=server, dc=directory\" ) ); // At this point, the ancestor contains \"dc=apache, dc=org\" </pre>\n */\npublic Dn getAncestorOf(Dn descendant) throws LdapInvalidDnException {\n  if ((descendant == null) || (descendant.size() == 0)) {\n    return this;\n  }\n  if (rdns.size() == 0) {\n    return EMPTY_DN;\n  }\n  int length=descendant.size();\n  if (length > rdns.size()) {\n    String message=I18n.err(I18n.ERR_04206,length,rdns.size());\n    LOG.error(message);\n    throw new ArrayIndexOutOfBoundsException(message);\n  }\n  Dn newDn=new Dn(schemaManager);\n  List<Rdn> rdnsDescendant=descendant.getRdns();\n  for (int i=0; i < descendant.size(); i++) {\n    Rdn rdn=rdns.get(i);\n    Rdn rdnDescendant=rdnsDescendant.get(i);\n    if (!rdn.equals(rdnDescendant)) {\n      throw new LdapInvalidDnException(ResultCodeEnum.INVALID_DN_SYNTAX);\n    }\n  }\n  for (int i=length; i < rdns.size(); i++) {\n    newDn.rdns.add(rdns.get(i).clone());\n  }\n  newDn.toUpName();\n  newDn.apply(schemaManager,true);\n  return newDn;\n}\n",
      "formalParam": [
        "Dn"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Dn",
      "file": "./java_projects/directory-shared/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
      "types": [
        "String",
        "Object",
        "StringBuffer",
        "Character"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "append",
        "character",
        "string",
        "buffer",
        "object"
      ]
    },
    {
      "method": "getRenderer@57",
      "body": "public Renderer getRenderer(){\n  if (rend == null)   fetchMap();\n  return rend;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Renderer",
      "file": "./java_projects/thredds/ui/src/main/java/ucar/nc2/ui/gis/shapefile/ShapeFileBean.java",
      "types": [
        "System",
        "String",
        "Long",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.System.currentTimeMillis()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "long",
        "millis",
        "print",
        "stream",
        "io",
        "println",
        "system",
        "time",
        "lang",
        "current",
        "java"
      ]
    },
    {
      "method": "append@313",
      "body": "/** \n * @param stringToMatch extends the string which is matched against the patterns of this class.\n */\npublic void append(final String stringToMatch){\n  for (int i=0; i < stringToMatch.length(); i++) {\n    final char c=stringToMatch.charAt(i);\n    extendStringToMatchByOneCharacter(c);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "node": "DAPICall",
                "_returns": "char",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cyberduck/source/org/spearce/jgit/fnmatch/FileNameMatcher.java",
      "types": [
        "Character",
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "character",
        "java",
        "lang",
        "length",
        "char",
        "string"
      ]
    },
    {
      "method": "testError@97",
      "body": "public void testError(ReportEntry report){\n  events.add(TEST_ERROR);\n  data.add(report);\n  testFailed.incrementAndGet();\n}\n",
      "formalParam": [
        "ReportEntry"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.Object>.add(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/maven-surefire/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/booterclient/MockReporter.java",
      "types": [
        "List",
        "Integer",
        "Object",
        "String",
        "concurrent",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "incrementAndGet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.Object>.add(java.lang.Object)",
            "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "add",
        "java",
        "boolean",
        "atomic",
        "object",
        "string",
        "integer",
        "util",
        "get",
        "increment",
        "list"
      ]
    },
    {
      "method": "createVolatileImage@146",
      "body": "/** \n * Creates a compatible volatile image.\n * @param width The width of the new volatile image.\n * @param height The height of the new volatile image.\n * @param transparency The transparency of the new volatile image.\n * @return the new compatible volatile image.\n */\npublic static VolatileImage createVolatileImage(int width,int height,int transparency){\n  return getGC().createCompatibleVolatileImage(width,height,transparency);\n}\n",
      "formalParam": [
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.GraphicsEnvironment"
          },
          {
            "_call": "java.awt.GraphicsEnvironment.getDefaultScreenDevice()",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "java.awt.GraphicsDevice"
          }
        ]
      },
      "returnType": "VolatileImage",
      "file": "./java_projects/gruppe33/src/com/indyforge/twod/engine/graphics/GraphicsRoutines.java",
      "types": [
        "GraphicsDevice",
        "GraphicsEnvironment",
        "HeadlessException"
      ],
      "apicalls": [
        "getDefaultScreenDevice",
        "getLocalGraphicsEnvironment"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
            "java.awt.GraphicsEnvironment.getDefaultScreenDevice()"
          ]
        }
      ],
      "keywords": [
        "local",
        "device",
        "exception",
        "java",
        "screen",
        "get",
        "default",
        "awt",
        "graphics",
        "environment",
        "headless"
      ]
    },
    {
      "method": "toString@3299",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"shardServerList_args(\");\n  boolean first=true;\n  sb.append(\"cluster:\");\n  if (this.cluster == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.cluster);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "builder",
        "append",
        "java",
        "string"
      ]
    },
    {
      "method": "test_removeLast@601",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList.removeLast()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.LinkedList.getLast()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.LinkedList.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.LinkedList.removeLast()",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/tests/api/java/util/LinkedListTest.java",
      "body": "/** \n * @tests java.util.LinkedList#removeLast()\n */\n@TestTargetNew(level=TestLevel.COMPLETE,notes=\"\",method=\"removeLast\",args={}) public void test_removeLast(){\n  ll.removeLast();\n  assertTrue(\"Failed to remove last element\",ll.getLast() != objArray[objArray.length - 1]);\n  ll.clear();\n  try {\n    ll.removeLast();\n    fail(\"NoSuchElementException expected\");\n  }\n catch (  NoSuchElementException e) {\n  }\n}\n",
      "types": [
        "Object",
        "LinkedList"
      ],
      "apicalls": [
        "clear",
        "removeLast",
        "getLast"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList.removeLast()",
            "java.util.LinkedList.getLast()",
            "java.util.LinkedList.clear()",
            "java.util.LinkedList.removeLast()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "util",
        "last",
        "java",
        "linked",
        "get",
        "clear",
        "list",
        "object"
      ]
    },
    {
      "method": "hashCode@990",
      "body": "/** \n * <p>Returns a hashcode compatible with equals.</p>\n * @return a hashcode compatible with equals\n */\npublic int hashCode(){\n  int total=0;\n  total+=mPattern.hashCode();\n  total+=mTimeZone.hashCode();\n  total+=(mTimeZoneForced ? 1 : 0);\n  total+=mLocale.hashCode();\n  total+=(mLocaleForced ? 1 : 0);\n  return total;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.hashCode()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Locale.hashCode()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/Japid/src.japid/cn/bran/japid/util/JapidDateFormat.java",
      "types": [
        "String",
        "Locale",
        "Integer"
      ],
      "apicalls": [
        "hashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.hashCode()",
            "java.util.Locale.hashCode()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "hash",
        "locale",
        "string",
        "code",
        "util",
        "java",
        "integer"
      ]
    },
    {
      "method": "TypeInfoViewer@991",
      "body": "public TypeInfoViewer(Composite parent,int flags,Label progressLabel,IDLTKSearchScope scope,int elementKind,String initialFilter,ITypeInfoFilterExtension filterExtension,ITypeInfoImageProvider imageExtension,IDLTKUILanguageToolkit toolkit){\n  Assert.isNotNull(scope);\n  fToolkit=toolkit;\n  fDisplay=parent.getDisplay();\n  fProgressLabel=progressLabel;\n  fSearchScope=scope;\n  fElementKind=elementKind;\n  fFilterExtension=filterExtension;\n  fFullyQualifySelection=(flags & SWT.MULTI) != 0;\n  fTable=new Table(parent,SWT.V_SCROLL | SWT.H_SCROLL | SWT.BORDER| SWT.FLAT| flags| (VIRTUAL ? SWT.VIRTUAL : SWT.NONE));\n  fTable.setFont(parent.getFont());\n  fLabelProvider=new TypeInfoLabelProvider(imageExtension);\n  fItems=new ArrayList(500);\n  fTable.setHeaderVisible(false);\n  addPopupMenu();\n  fTable.addControlListener(new ControlAdapter(){\n    public void controlResized(    ControlEvent event){\n      int itemHeight=fTable.getItemHeight();\n      Rectangle clientArea=fTable.getClientArea();\n      fNumberOfVisibleItems=(clientArea.height / itemHeight) + 1;\n    }\n  }\n);\n  fTable.addKeyListener(new KeyAdapter(){\n    public void keyPressed(    KeyEvent e){\n      if (e.keyCode == SWT.DEL) {\n        deleteHistoryEntry();\n      }\n else       if (e.keyCode == SWT.ARROW_DOWN) {\n        int index=fTable.getSelectionIndex();\n        if (index == fDashLineIndex - 1) {\n          e.doit=false;\n          setTableSelection(index + 2);\n        }\n      }\n else       if (e.keyCode == SWT.ARROW_UP) {\n        int index=fTable.getSelectionIndex();\n        if (fDashLineIndex != -1 && index == fDashLineIndex + 1) {\n          e.doit=false;\n          setTableSelection(index - 2);\n        }\n      }\n    }\n  }\n);\n  fTable.addSelectionListener(new SelectionAdapter(){\n    public void widgetSelected(    SelectionEvent e){\n      if (fLastSelection != null) {\n        for (int i=0; i < fLastSelection.length; i++) {\n          TableItem item=fLastSelection[i];\n          if (!item.isDisposed())           item.setText(fLastLabels[i]);\n        }\n      }\n      TableItem[] items=fTable.getSelection();\n      fLastSelection=new TableItem[items.length];\n      fLastLabels=new String[items.length];\n      for (int i=0; i < items.length; i++) {\n        TableItem item=items[i];\n        fLastSelection[i]=item;\n        fLastLabels[i]=item.getText();\n        Object data=item.getData();\n        if (data instanceof TypeNameMatch) {\n          String qualifiedText=getQualifiedText((TypeNameMatch)data);\n          if (qualifiedText.length() > fLastLabels[i].length())           item.setText(qualifiedText);\n        }\n      }\n    }\n  }\n);\n  fTable.addDisposeListener(new DisposeListener(){\n    public void widgetDisposed(    DisposeEvent e){\n      stop(true,true);\n      fDashLineColor.dispose();\n      fSeparatorIcon.dispose();\n      fImageManager.dispose();\n      if (fProgressUpdateJob != null) {\n        fProgressUpdateJob.stop();\n        fProgressUpdateJob=null;\n      }\n    }\n  }\n);\n  if (VIRTUAL) {\n    fHistoryMatches=EMTPY_TYPE_INFO_ARRAY;\n    fSearchMatches=EMTPY_TYPE_INFO_ARRAY;\n    fTable.addListener(SWT.SetData,new Listener(){\n      public void handleEvent(      Event event){\n        TableItem item=(TableItem)event.item;\n        setData(item);\n      }\n    }\n);\n  }\n  fDashLineColor=computeDashLineColor();\n  fScrollbarWidth=computeScrollBarWidth();\n  fTableWidthDelta=fTable.computeTrim(0,0,0,0).width - fScrollbarWidth;\n  fSeparatorIcon=DLTKPluginImages.DESC_OBJS_TYPE_SEPARATOR.createImage(fTable.getDisplay());\n  fImageManager=new ImageManager();\n  fHistory=OpenTypeHistory.getInstance(this.fToolkit);\n  if (initialFilter != null && initialFilter.length() > 0)   fTypeInfoFilter=createTypeInfoFilter(initialFilter);\n  GC gc=null;\n  try {\n    gc=new GC(fTable);\n    gc.setFont(fTable.getFont());\n    fDashLine.initialize(gc);\n  }\n  finally {\n    gc.dispose();\n  }\n  if (fTypeInfoFilter == null) {\n    scheduleSyncJob();\n  }\n}\n",
      "formalParam": [
        "Composite",
        "int",
        "Label",
        "IDLTKSearchScope",
        "int",
        "String",
        "ITypeInfoFilterExtension",
        "ITypeInfoImageProvider",
        "IDLTKUILanguageToolkit"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/vjet/extmod/dltk/core/org.eclipse.dltk.mod.ui/src/org/eclipse/dltk/mod/internal/ui/dialogs/TypeInfoViewer.java",
      "types": [
        "String",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "array",
        "util",
        "lang",
        "string",
        "length",
        "list",
        "java",
        "integer"
      ]
    },
    {
      "method": "makeName@78",
      "body": "/** \n * Create standard name from list of axes. Sort the axes first\n * @param axes list of CoordinateAxis\n * @return CoordinateSystem name, created from axes names\n */\nstatic public String makeName(List<CoordinateAxis> axes){\n  List<CoordinateAxis> axesSorted=new ArrayList<CoordinateAxis>(axes);\n  Collections.sort(axesSorted,new CoordinateAxis.AxisComparator());\n  StringBuilder buff=new StringBuilder();\n  for (int i=0; i < axesSorted.size(); i++) {\n    CoordinateAxis axis=axesSorted.get(i);\n    if (i > 0)     buff.append(\" \");\n    buff.append(axis.getFullNameEscaped());\n  }\n  return buff.toString();\n}\n",
      "formalParam": [
        "List<CoordinateAxis>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/thredds/cdm/src/main/java/ucar/nc2/dataset/CoordinateSystem.java",
      "types": [
        "Object",
        "ArrayList",
        "StringBuilder",
        "Collections",
        "List",
        "Comparator",
        "Collection",
        "String"
      ],
      "apicalls": [
        "toString",
        "sort",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "util",
        "builder",
        "collection",
        "array",
        "collections",
        "comparator",
        "list",
        "sort",
        "lang",
        "java",
        "object",
        "string",
        "append"
      ]
    },
    {
      "method": "isDirectory@262",
      "body": "/** \n * Tests whether the file denoted by this abstract pathname is a directory.\n * @param f the file instance\n * @return true if and only if the file denoted by this abstract pathnameexists and is a directory; false otherwise\n */\npublic static boolean isDirectory(final File f){\n  Boolean exists=AccessController.doPrivileged(new PrivilegedAction<Boolean>(){\n    public Boolean run(){\n      boolean exists=f.isDirectory();\n      return Boolean.valueOf(exists);\n    }\n  }\n);\n  return exists.booleanValue();\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
            "_throws": [],
            "_returns": "Tau_T",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Boolean.booleanValue()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/birt/model/org.eclipse.birt.report.model/src/org/eclipse/birt/report/model/util/SecurityUtil.java",
      "types": [
        "PrivilegedAction",
        "Boolean",
        "AccessController"
      ],
      "apicalls": [
        "doPrivileged",
        "booleanValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
            "java.lang.Boolean.booleanValue()"
          ]
        }
      ],
      "keywords": [
        "controller",
        "lang",
        "access",
        "java",
        "privileged",
        "boolean",
        "security",
        "action",
        "value"
      ]
    },
    {
      "method": "forward@56",
      "body": "@Override public void forward() throws MvcException {\n  this.document=DocumentHelper.createDocument();\n  Element root=this.document.addElement(\"message\");\n  root.addAttribute(\"success\",\"false\");\n  Element errors=root.addElement(\"errors\");\n  for (  String id : this.errors.keySet()) {\n    Element field=errors.addElement(\"field\");\n    field.addElement(\"id\").addText(id + \"\");\n    field.addElement(\"msg\").addCDATA(this.errors.get(id) + \"\");\n  }\n  this.xml=this.document.asXML();\n  super.forward();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/zengsource-mvc/src/src/main/java/org/zengsource/mvc/view/XmlErrorView.java",
      "types": [
        "Object",
        "Map",
        "Set",
        "String"
      ],
      "apicalls": [
        "get",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.keySet()",
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "get",
        "map",
        "key",
        "java",
        "util",
        "set",
        "string"
      ]
    },
    {
      "method": "getOsgiService@356",
      "formalParam": [
        "BundleContext",
        "Class<T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "node": "DBranch",
                "_else": [],
                "_cond": [
                  {
                    "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": []
                  }
                ],
                "_then": [
                  {
                    "_call": "java.lang.Class<Tau_T>.getName()",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  },
                  {
                    "_call": "java.util.logging.Logger.fine(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "void",
                    "_throws": []
                  }
                ]
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "OsgiService<T>",
      "file": "./java_projects/cxf-dosgi/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/OsgiUtils.java",
      "body": "@SuppressWarnings(\"unchecked\") public static <T>OsgiService<T> getOsgiService(BundleContext bc,Class<T> serviceClass){\n  try {\n    ServiceReference sr=bc.getServiceReference(serviceClass.getName());\n    if (sr != null) {\n      Object o=bc.getService(sr);\n      if (o != null && serviceClass.isAssignableFrom(o.getClass())) {\n        return new OsgiService(sr,o);\n      }\n    }\n  }\n catch (  Exception ex) {\n    if (LOG.isLoggable(Level.FINE)) {\n      LOG.fine(\"Problem retrieving an OSGI service \" + serviceClass.getName() + \", exception : \"+ ex.getMessage());\n    }\n  }\n  return null;\n}\n",
      "types": [
        "Boolean",
        "Class",
        "Level",
        "String",
        "Logger"
      ],
      "apicalls": [
        "fine",
        "getName",
        "isAssignableFrom",
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.lang.Class<Tau_T>.getName()",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "logger",
        "name",
        "lang",
        "fine",
        "loggable",
        "java",
        "assignable",
        "get",
        "util",
        "level",
        "logging",
        "class",
        "boolean",
        "string"
      ]
    },
    {
      "method": "write@262",
      "body": "@Override public void write(DataOutput out) throws IOException {\n  out.writeLong(firstId);\n  out.writeInt(size);\n}\n",
      "formalParam": [
        "DataOutput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataOutput.writeLong(long)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.DataOutput.writeInt(int)",
            "_throws": [
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/LatentFactorLogLinear/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step0Job.java",
      "types": [
        "DataOutput",
        "IOException",
        "Long",
        "Integer"
      ],
      "apicalls": [
        "writeInt",
        "writeLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.DataOutput.writeLong(long)",
            "java.io.DataOutput.writeInt(int)"
          ]
        }
      ],
      "keywords": [
        "output",
        "data",
        "write",
        "integer",
        "java",
        "exception",
        "io",
        "int",
        "long"
      ]
    },
    {
      "method": "getImageTypes@154",
      "body": "public Iterator getImageTypes(int imageIndex) throws IOException {\n  checkIndex(imageIndex);\n  readHeader();\n  BufferedImage bi=new BufferedImage(1,1,BufferedImage.TYPE_BYTE_BINARY);\n  ArrayList list=new ArrayList(1);\n  list.add(new ImageTypeSpecifier(bi));\n  return list.iterator();\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          }
        ]
      },
      "returnType": "Iterator",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/com/sun/imageio/plugins/wbmp/WBMPImageReader.java",
      "types": [
        "ArrayList",
        "Boolean",
        "Object",
        "Iterator",
        "Integer",
        "BufferedImage"
      ],
      "apicalls": [
        "iterator",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "java.util.ArrayList.ArrayList(int)",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.ArrayList.iterator()"
          ]
        }
      ],
      "keywords": [
        "buffered",
        "object",
        "array",
        "image",
        "awt",
        "list",
        "integer",
        "add",
        "java",
        "iterator",
        "boolean",
        "util"
      ]
    },
    {
      "method": "InventoryListener@26",
      "body": "public InventoryListener(DefaultLoggingPluginInterface plugin){\n  this.plugin=plugin;\n  this.inventories=new HashMap<String,HashMap<Integer,Integer>>();\n  this.containerTypes=new ArrayList<InventoryType>(3);\n  this.containerTypes.add(InventoryType.CHEST);\n  this.containerTypes.add(InventoryType.FURNACE);\n  this.containerTypes.add(InventoryType.DISPENSER);\n}\n",
      "formalParam": [
        "DefaultLoggingPluginInterface"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.Integer,java.lang.Integer>>.HashMap<String,HashMap<Integer,Integer>>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/MineBans/src/main/java/com/minebans/pluginInterfaces/defaultlogging/InventoryListener.java",
      "types": [
        "String",
        "ArrayList",
        "Integer",
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.Integer,java.lang.Integer>>.HashMap<String,HashMap<Integer,Integer>>()",
            "java.util.ArrayList<Tau_E>.ArrayList(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "hash",
        "map",
        "list",
        "integer",
        "string",
        "array"
      ]
    },
    {
      "method": "updateStringWithCurrentOptionChars@786",
      "body": "public String updateStringWithCurrentOptionChars(String currentSymbolCode){\n  try {\n    StringBuffer buf=new StringBuffer(currentSymbolCode);\n    for (int i=0; i < optionChars.length; i++) {\n      Character c=optionChars[i];\n      if (c != null) {\n        buf.setCharAt(i,c.charValue());\n      }\n    }\n    currentSymbolCode=buf.toString();\n  }\n catch (  StringIndexOutOfBoundsException siobe) {\n  }\ncatch (  NullPointerException npe) {\n  }\n  return currentSymbolCode;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Character.charValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.StringBuffer.setCharAt(int,char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/openmap/src/openmap/com/bbn/openmap/tools/symbology/milStd2525/SymbolChooser.java",
      "types": [
        "String",
        "Character",
        "StringBuffer",
        "Integer"
      ],
      "apicalls": [
        "charValue",
        "toString",
        "setCharAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.Character.charValue()",
            "java.lang.StringBuffer.setCharAt(int,char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "value",
        "buffer",
        "character",
        "lang",
        "string",
        "char",
        "set",
        "integer"
      ]
    },
    {
      "method": "testConstructionWithoutFragmentAndNoQueryString@34",
      "body": "public void testConstructionWithoutFragmentAndNoQueryString(){\n  final String url=\"http://localhost:8080/foo\";\n  final Map<String,String> attributes=new HashMap<String,String>();\n  attributes.put(\"ticket\",\"foobar\");\n  final Response response=Response.getRedirectResponse(url,attributes);\n  assertEquals(url + \"?ticket=foobar\",response.getUrl());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cas/cas-server-core/src/test/java/org/jasig/cas/authentication/principal/ResponseTests.java",
      "types": [
        "Map",
        "String",
        "HashMap"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "util",
        "map",
        "hash",
        "java",
        "put"
      ]
    },
    {
      "method": "getField@186",
      "body": "public static Field getField(String field,Class c){\n  Field f=null;\n  try {\n    f=c.getDeclaredField(field);\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n  return f;\n}\n",
      "formalParam": [
        "String",
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getDeclaredField(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.reflect.Field",
                "_throws": [
                  "java.lang.NoSuchFieldException",
                  "java.lang.SecurityException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "Field",
      "file": "./java_projects/PluginsForForestry/minecraft/denoflionsx/denLib/denLib.java",
      "types": [
        "Throwable",
        "String",
        "NoSuchFieldException",
        "Field",
        "Class",
        "SecurityException"
      ],
      "apicalls": [
        "getDeclaredField",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getDeclaredField(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getDeclaredField(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "print",
        "trace",
        "class",
        "stack",
        "security",
        "lang",
        "java",
        "exception",
        "string",
        "declared",
        "field",
        "get"
      ]
    },
    {
      "method": "invoke@102",
      "body": "public Object invoke(final Object thiz,final Object[] args) throws Exception {\n  if (args != null) {\n    final int len=args.length;\n    if (len == 1) {\n      return new Integer(numberOfLogsInFolder(((Integer)args[0]).intValue()));\n    }\n  }\n  return UNDEFINED;\n}\n",
      "formalParam": [
        "Object",
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/WebWorks/api/phone/src/main/java/blackberry/phone/calllog/CallLogNamespace.java",
      "types": [
        "Integer"
      ],
      "apicalls": [
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.intValue()",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "value",
        "int",
        "java",
        "lang"
      ]
    },
    {
      "method": "isEditing@147",
      "body": "/** \n * Invokes the <code>isEditing</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic boolean isEditing(JTree a){\n  boolean returnValue=((TreeUI)(uis.elementAt(0))).isEditing(a);\n  for (int i=1; i < uis.size(); i++) {\n    ((TreeUI)(uis.elementAt(i))).isEditing(a);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JTree"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/multi/MultiTreeUI.java",
      "types": [
        "Vector",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "size",
        "java",
        "vector",
        "util"
      ]
    },
    {
      "method": "mouseClicked@183",
      "body": "public void mouseClicked(MouseEvent e){\n  adaptee.jbParseTypes_mouseClicked(e);\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.getText()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/OOjDREW/src/main/java/org/ruleml/oojdrew/GUI/TypeDefFrame.java",
      "types": [
        "String",
        "Component",
        "Throwable",
        "HeadlessException",
        "Integer",
        "JOptionPane",
        "Object",
        "JTextComponent"
      ],
      "apicalls": [
        "trim",
        "getText",
        "getMessage",
        "showMessageDialog"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.getText()",
            "java.lang.String.trim()",
            "java.lang.Throwable.getMessage()",
            "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "exception",
        "lang",
        "pane",
        "text",
        "throwable",
        "component",
        "show",
        "message",
        "get",
        "headless",
        "swing",
        "object",
        "j",
        "trim",
        "dialog",
        "option",
        "string",
        "javax"
      ]
    },
    {
      "method": "roundDate@264",
      "body": "/** \n * Rounds the given date down to the nearest specified second. The following table shows sample input and expected output values: (Note, only the time portion of the date is shown for brevity) <p> <table border=\"1\"> <tr><th>Date</th><th>Seconds</th><th>Result</th></tr> <tr><td>1:37.48</td><td>5</td><td>1:37.45</td></tr> <tr><td>1:37.48</td><td>10</td><td>1:37.40</td></tr> <tr><td>1:37.48</td><td>30</td><td>1:37.30</td</tr> <tr><td>1:37.48</td><td>60</td><td>1:37.00</td></tr> <tr><td>1:37.48</td><td>120</td><td>1:36.00</td></tr> </table><p> This method is useful when calculating the last post in a forum or the number of new messages from a given date. Using a rounded date allows Jive to internally cache the results of the date query. Here's an example that shows the last posted message in a forum accurate to the last 60 seconds:<p> <pre> SessionResultFilter filter = new SessionResultFilter(); filter.setSortOrder(SessionResultFilter.DESCENDING); filter.setSortField(JiveGlobals.SORT_CREATION_DATE); <b>filter.setCreationDateRangeMin(SessionResultFilter.roundDate(forum.getModificationDate(), 60));</b> filter.setNumResults(1); Iterator messages = forum.messages(filter); ForumMessage lastPost = (ForumMessage)messages.next(); </pre>\n * @param date the <tt>Date</tt> we want to round.\n * @param seconds the number of seconds we want to round the date to.\n * @return the given date, rounded down to the nearest specified number of seconds.\n */\npublic static Date roundDate(Date date,int seconds){\n  return new Date(roundDate(date.getTime(),seconds));\n}\n",
      "formalParam": [
        "Date",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Date",
      "file": "./java_projects/Openfire/src/java/org/jivesoftware/openfire/SessionResultFilter.java",
      "types": [
        "Date",
        "Long"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "long",
        "time",
        "get",
        "date"
      ]
    },
    {
      "method": "setData@338",
      "body": "public void setData(final List<File> data){\n  mData.clear();\n  if (data != null) {\n    mData.addAll(data);\n  }\n  notifyDataSetChanged();\n}\n",
      "formalParam": [
        "List<File>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.io.File>.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.io.File>.addAll(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/twidere/src/org/mariotaku/twidere/activity/FileSaveAsActivity.java",
      "types": [
        "Collection",
        "Boolean",
        "File",
        "List"
      ],
      "apicalls": [
        "addAll",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.io.File>.clear()",
            "java.util.List<java.io.File>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "clear",
        "util",
        "java",
        "add",
        "boolean",
        "list",
        "collection",
        "file"
      ]
    },
    {
      "method": "characters@146",
      "body": "public void characters(char[] ch,int start,int length) throws SAXException {\n  String lecture=new String(ch,start,length);\n  if (buffer != null)   buffer.append(lecture);\n}\n",
      "formalParam": [
        "char[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.String(char[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/simple-app_1/src/fr/arolla/core/ParserXMLHandler.java",
      "types": [
        "Character",
        "StringBuffer",
        "String",
        "Integer"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.String(char[],int,int)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "character",
        "append",
        "string",
        "lang",
        "integer",
        "java",
        "buffer"
      ]
    },
    {
      "method": "editMachine@325",
      "body": "public void editMachine(){\n  Session session=HibernateUtil.getSessionFactory().openSession();\n  Transaction transaction=session.beginTransaction();\n  try {\n    Machine machine=(Machine)session.get(Machine.class,machineId);\n    machine.setMachineName(machineName);\n    machine.setMachineUrl(machineUrl);\n    machine.setVizUrl(machineViz);\n    resetMachineData();\n    log.info(\"Edited machine \" + machine.getMachineId());\n    session.update(machine);\n    transaction.commit();\n  }\n catch (  Exception e) {\n    transaction.rollback();\n    e.printStackTrace();\n    String msg=\"Error : machine not edited \" + e.getMessage();\n    FacesMessage fm=new FacesMessage(FacesMessage.SEVERITY_ERROR,msg,null);\n    FacesContext.getCurrentInstance().addMessage(\"saveMachine\",fm);\n  }\n  session.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/powertac-tournament-scheduler/src/main/java/org/powertac/tourney/actions/ActionAdmin.java",
      "types": [
        "Throwable",
        "String"
      ],
      "apicalls": [
        "printStackTrace",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "string",
        "trace",
        "lang",
        "print",
        "get",
        "message",
        "java",
        "throwable",
        "stack"
      ]
    },
    {
      "method": "TextToString@195",
      "body": "/** \n * converte um valor Texto para String (retira as aspas)\n * @param str string com aspas\n * @return \"conjunto de caracteres\"\n */\npublic static String TextToString(String str){\n  if (str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\"))   return str.substring(1,str.length() - 1);\n  return \"ERRO TEXT TO STRING\";\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/portugol/portugol2.x/Portugol/Language/Utils/Values.java",
      "types": [
        "Boolean",
        "Integer",
        "String"
      ],
      "apicalls": [
        "endsWith",
        "length",
        "startsWith",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "string",
        "java",
        "boolean",
        "lang",
        "integer",
        "length",
        "starts",
        "ends"
      ]
    },
    {
      "method": "getManifest@41",
      "body": "public static Manifest getManifest(File file){\n  try {\n    if (file.isDirectory()) {\n      return getDirectoryManifest(file);\n    }\n else {\n      return getJarManifest(file);\n    }\n  }\n catch (  IOException ignored) {\n    return null;\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.zip.ZipFile.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.File.isDirectory()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.jar.Manifest.Manifest(java.io.InputStream)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileInputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "Manifest",
      "file": "./java_projects/nuxeo-common/src/main/java/org/nuxeo/common/utils/JarUtils.java",
      "types": [
        "InputStream",
        "ZipFile",
        "File",
        "FileInputStream",
        "Boolean",
        "IOException",
        "FileNotFoundException",
        "Manifest",
        "String"
      ],
      "apicalls": [
        "isDirectory",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.isDirectory()",
            "java.util.zip.ZipFile.close()"
          ]
        },
        {
          "calls": [
            "java.io.File.isDirectory()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.util.jar.Manifest.Manifest(java.io.InputStream)",
            "java.io.FileInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "manifest",
        "found",
        "util",
        "file",
        "zip",
        "java",
        "io",
        "stream",
        "string",
        "close",
        "jar",
        "boolean",
        "input",
        "directory"
      ]
    },
    {
      "method": "execute@36",
      "body": "@Override public void execute(Player player,String label,String[] args){\n  String headColor=plugin.getSettingsManager().getPageHeadingsColor();\n  String subColor=plugin.getSettingsManager().getPageSubTitleColor();\n  if (plugin.getPermissionsManager().has(player,\"simpleclans.mod.mostkilled\")) {\n    ClanPlayer cp=plugin.getClanManager().getClanPlayer(player);\n    if (cp != null) {\n      Clan clan=cp.getClan();\n      if (clan.isVerified()) {\n        if (cp.isTrusted()) {\n          ChatBlock chatBlock=new ChatBlock();\n          chatBlock.setFlexibility(true,false,false);\n          chatBlock.setAlignment(\"l\",\"c\",\"l\");\n          chatBlock.addRow(\"  \" + headColor + plugin.getLang(\"victim\"),headColor + plugin.getLang(\"killcount\"),headColor + plugin.getLang(\"attacker\"));\n          HashMap<String,Integer> killsPerPlayerUnordered=plugin.getStorageManager().getMostKilled();\n          if (killsPerPlayerUnordered.isEmpty()) {\n            ChatBlock.sendMessage(player,ChatColor.RED + plugin.getLang(\"nokillsfound\"));\n            return;\n          }\n          Map<String,Integer> killsPerPlayer=Helper.sortByValue(killsPerPlayerUnordered);\n          for (          String attackerVictim : killsPerPlayer.keySet()) {\n            String[] split=attackerVictim.split(\" \");\n            if (split.length < 2) {\n              continue;\n            }\n            int count=killsPerPlayer.get(attackerVictim);\n            String attacker=split[0];\n            String victim=split[1];\n            chatBlock.addRow(\"  \" + ChatColor.WHITE + victim,ChatColor.AQUA + \"\" + count,ChatColor.YELLOW + attacker);\n          }\n          ChatBlock.saySingle(player,plugin.getSettingsManager().getServerName() + subColor + \" \"+ plugin.getLang(\"mostkilled\")+ \" \"+ headColor+ Helper.generatePageSeparator(plugin.getSettingsManager().getPageSep()));\n          ChatBlock.sendBlank(player);\n          boolean more=chatBlock.sendBlock(player,plugin.getSettingsManager().getPageSize());\n          if (more) {\n            plugin.getStorageManager().addChatBlock(player,chatBlock);\n            ChatBlock.sendBlank(player);\n            ChatBlock.sendMessage(player,headColor + MessageFormat.format(plugin.getLang(\"view.next.page\"),plugin.getSettingsManager().getCommandMore()));\n          }\n          ChatBlock.sendBlank(player);\n        }\n else {\n          ChatBlock.sendMessage(player,ChatColor.RED + plugin.getLang(\"only.trusted.players.can.access.clan.stats\"));\n        }\n      }\n else {\n        ChatBlock.sendMessage(player,ChatColor.RED + plugin.getLang(\"clan.is.not.verified\"));\n      }\n    }\n else {\n      ChatBlock.sendMessage(player,ChatColor.RED + plugin.getLang(\"not.a.member.of.any.clan\"));\n    }\n  }\n else {\n    ChatBlock.sendMessage(player,ChatColor.RED + plugin.getLang(\"insufficient.permissions\"));\n  }\n}\n",
      "formalParam": [
        "Player",
        "String",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Integer>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Integer",
            "_throws": []
          },
          {
            "_call": "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SimpleClans/src/main/java/net/sacredlabyrinth/phaed/simpleclans/commands/MostKilledCommand.java",
      "types": [
        "HashMap",
        "Map",
        "Boolean",
        "Object",
        "Integer",
        "MessageFormat",
        "Set",
        "String"
      ],
      "apicalls": [
        "isEmpty",
        "get",
        "format",
        "split",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Integer>.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.Integer>.keySet()",
            "java.lang.String.split(java.lang.String)",
            "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "format",
        "object",
        "key",
        "empty",
        "split",
        "text",
        "set",
        "java",
        "integer",
        "map",
        "message",
        "boolean",
        "string",
        "util",
        "hash"
      ]
    },
    {
      "method": "parseInt@1105",
      "body": "/** \n * Converts a String to an integer of radix 10. <br><br> String constraints are: <li>Number must be less than 10 digits</li> <li>Number must be positive</li>\n * @param s String representation of number\n * @return integer value of number\n * @throws NumberFormatException\n */\npublic static int parseInt(String s) throws NumberFormatException {\n  return parseInt(s,10);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.digit(char,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.Character.digit(char,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/jPOS/jpos/src/main/java/org/jpos/iso/ISOUtil.java",
      "types": [
        "String",
        "Character",
        "Integer"
      ],
      "apicalls": [
        "charAt",
        "digit",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Character.digit(char,int)",
            "java.lang.String.charAt(int)",
            "java.lang.Character.digit(char,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "character",
        "string",
        "integer",
        "length",
        "char",
        "digit",
        "lang"
      ]
    },
    {
      "method": "newWithout@165",
      "body": "public ImmutableBag<T> newWithout(T element){\n  int elementIndex=ArrayIterate.detectIndexWith(this.keys,Predicates2.equal(),element);\n  if (elementIndex > -1) {\n    int distinctItemCount=this.sizeDistinct() - (this.counts[elementIndex] == 1 ? 1 : 0);\n    T[] newKeys=(T[])new Object[distinctItemCount];\n    int[] newCounts=new int[distinctItemCount];\n    if (distinctItemCount == this.sizeDistinct()) {\n      System.arraycopy(this.keys,0,newKeys,0,distinctItemCount);\n      System.arraycopy(this.counts,0,newCounts,0,distinctItemCount);\n      newCounts[elementIndex]--;\n    }\n else {\n      System.arraycopy(this.keys,0,newKeys,0,elementIndex);\n      System.arraycopy(this.counts,0,newCounts,0,elementIndex);\n      System.arraycopy(this.keys,elementIndex + 1,newKeys,elementIndex,newKeys.length - elementIndex);\n      System.arraycopy(this.counts,elementIndex + 1,newCounts,elementIndex,newCounts.length - elementIndex);\n    }\n    return new ImmutableArrayBag<T>(newKeys,newCounts);\n  }\n  return this;\n}\n",
      "formalParam": [
        "T"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "ImmutableBag<T>",
      "file": "./java_projects/gs-collections/collections/src/main/java/com/gs/collections/impl/bag/immutable/ImmutableArrayBag.java",
      "types": [
        "Integer",
        "System",
        "Object"
      ],
      "apicalls": [
        "arraycopy"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "lang",
        "java",
        "system",
        "arraycopy",
        "object"
      ]
    },
    {
      "method": "groupProperty@520",
      "body": "/** \n * Adds a projection that allows the criteria's result to be grouped by a property\n * @param propertyName The name of the property\n */\npublic void groupProperty(String propertyName){\n  groupProperty(propertyName,null);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.String>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.List<java.lang.String>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List<java.lang.String>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/grails-core/grails-hibernate/src/main/groovy/grails/orm/HibernateCriteriaBuilder.java",
      "types": [
        "Integer",
        "String",
        "List"
      ],
      "apicalls": [
        "size",
        "get",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.get(int)",
            "java.lang.String.toString()"
          ]
        },
        {
          "calls": [
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "util",
        "integer",
        "list",
        "size",
        "string",
        "get"
      ]
    },
    {
      "method": "inject@140",
      "body": "/** \n * Inject a value for a Resource from JNDI into an object\n * @param injectable\n * @throws Exception\n */\npublic void inject(Object injectable){\n  Member theTarget=getTarget();\n  if (theTarget instanceof Field) {\n    injectField((Field)theTarget,injectable);\n  }\n else   if (theTarget instanceof Method) {\n    injectMethod((Method)theTarget,injectable);\n  }\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.reflect.AccessibleObject.isAccessible()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
                "_throws": [
                  "java.lang.SecurityException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.naming.InitialContext.InitialContext()",
                "_throws": [
                  "javax.naming.NamingException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.naming.InitialContext.lookup(java.lang.String)",
                "_throws": [
                  "javax.naming.NamingException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)",
                "_throws": [
                  "java.lang.IllegalArgumentException",
                  "java.lang.IllegalAccessException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
                "_throws": [
                  "java.lang.SecurityException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.reflect.AccessibleObject.isAccessible()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
                "_throws": [
                  "java.lang.SecurityException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
                "_throws": [
                  "java.lang.SecurityException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/qedserver/jetty/modules/plus/src/main/java/org/mortbay/jetty/plus/annotation/Injection.java",
      "types": [
        "Object",
        "SecurityException",
        "IllegalAccessException",
        "Field",
        "IllegalArgumentException",
        "String",
        "InvocationTargetException",
        "Method",
        "AccessibleObject",
        "NamingException",
        "Boolean",
        "InitialContext"
      ],
      "apicalls": [
        "isAccessible",
        "lookup",
        "setAccessible",
        "set",
        "invoke"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
          ]
        },
        {
          "calls": [
            "java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "javax.naming.InitialContext.InitialContext()",
            "javax.naming.InitialContext.lookup(java.lang.String)",
            "java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
          ]
        }
      ],
      "keywords": [
        "naming",
        "lookup",
        "lang",
        "javax",
        "invoke",
        "reflect",
        "security",
        "target",
        "invocation",
        "string",
        "argument",
        "access",
        "java",
        "object",
        "context",
        "method",
        "accessible",
        "set",
        "initial",
        "field",
        "exception",
        "illegal",
        "boolean"
      ]
    },
    {
      "method": "paintText@173",
      "body": "public void paintText(SynthContext ss,Graphics g,String text,Rectangle bounds,int mnemonicIndex){\n  Color color=ss.getStyle().getColor(ss,ColorType.TEXT_FOREGROUND);\n  FontMetrics metrics=computeFontMetrics(ss,null);\n  ButtonCommons.paintText(g,metrics,text,mnemonicIndex,bounds,text,color);\n}\n",
      "formalParam": [
        "SynthContext",
        "Graphics",
        "String",
        "Rectangle",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getStyle()",
            "node": "DAPICall",
            "_returns": "javax.swing.plaf.synth.SynthStyle",
            "_throws": []
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
            "node": "DAPICall",
            "_returns": "javax.swing.JComponent",
            "_throws": []
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getStyle()",
            "node": "DAPICall",
            "_returns": "javax.swing.plaf.synth.SynthStyle",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
            "node": "DAPICall",
            "_returns": "java.awt.FontMetrics",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/main/java/common/javax/swing/plaf/synth/SynthGraphicsUtils.java",
      "types": [
        "plaf",
        "JComponent",
        "Font",
        "FontMetrics"
      ],
      "apicalls": [
        "getComponent",
        "getFontMetrics",
        "getStyle"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.synth.SynthContext.getStyle()",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "javax.swing.plaf.synth.SynthContext.getStyle()",
            "javax.swing.JComponent.getFontMetrics(java.awt.Font)"
          ]
        }
      ],
      "keywords": [
        "j",
        "font",
        "metrics",
        "style",
        "plaf",
        "synth",
        "get",
        "component",
        "javax",
        "swing",
        "context"
      ]
    },
    {
      "method": "zinterstore@368",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Double>.HashMap<String,Double>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Double>.put(java.lang.String,java.lang.Double)",
            "node": "DAPICall",
            "_returns": "java.lang.Double",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/rjc/src/test/java/org/idevlab/rjc/ITSortedSetCommandsTest.java",
      "body": "@Test public void zinterstore(){\n  session.zadd(\"foo\",1,\"a\");\n  session.zadd(\"foo\",2,\"b\");\n  session.zadd(\"bar\",2,\"a\");\n  long result=session.zinterstore(\"dst\",\"foo\",\"bar\");\n  assertEquals(1,result);\n  Map<String,Double> expected=new HashMap<String,Double>();\n  expected.put(\"a\",3D);\n  assertEquals(expected,toStrDblMap(session.zrangeWithScores(\"dst\",0,100)));\n}\n",
      "types": [
        "String",
        "Map",
        "HashMap",
        "Double"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Double>.HashMap<String,Double>()",
            "java.util.Map<java.lang.String,java.lang.Double>.put(java.lang.String,java.lang.Double)"
          ]
        }
      ],
      "keywords": [
        "string",
        "util",
        "hash",
        "java",
        "double",
        "map",
        "put"
      ]
    },
    {
      "method": "Execute@1406",
      "body": "@Override public void Execute(Interpreter inI){\n  intStack istack=inI.intStack();\n  ObjectStack estack=inI.execStack();\n  if (_stack.size() > 0 && istack.size() > 1) {\n    int stop=istack.pop();\n    int start=istack.pop();\n    Object code=_stack.pop();\n    if (start == stop) {\n      istack.push(start);\n      estack.push(code);\n    }\n else {\n      istack.push(start);\n      start=(start < stop) ? (start + 1) : (start - 1);\n      try {\n        Program recursiveCallProgram=new Program(inI);\n        recursiveCallProgram.push(Integer.valueOf(start));\n        recursiveCallProgram.push(Integer.valueOf(stop));\n        recursiveCallProgram.push(\"exec.do*range\");\n        recursiveCallProgram.push(code);\n        estack.push(recursiveCallProgram);\n      }\n catch (      Exception e) {\n        System.err.println(\"Error while initializing a program.\");\n      }\n      estack.push(code);\n    }\n  }\n}\n",
      "formalParam": [
        "Interpreter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Integer.valueOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.lang.Integer.valueOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Psh/org/spiderland/Psh/Instructions.java",
      "types": [
        "String",
        "PrintStream",
        "Integer"
      ],
      "apicalls": [
        "valueOf",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.valueOf(int)",
            "java.lang.Integer.valueOf(int)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.valueOf(int)",
            "java.lang.Integer.valueOf(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "lang",
        "stream",
        "value",
        "integer",
        "string",
        "io",
        "println",
        "print"
      ]
    },
    {
      "method": "insertUpdate@108",
      "body": "/** \n * Updates the <code>foreground</code> color depending on the text entered.\n * @see DocumentListener#insertUpdate(DocumentEvent)\n */\npublic void insertUpdate(DocumentEvent e){\n  updateForeground();\n}\n",
      "formalParam": [
        "DocumentEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.getText()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.JComponent.setForeground(java.awt.Color)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.setForeground(java.awt.Color)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.awt.Component.getForeground()",
            "node": "DAPICall",
            "_returns": "java.awt.Color",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openmicroscopy/components/insight/SRC/org/openmicroscopy/shoola/util/ui/OMETextArea.java",
      "types": [
        "Component",
        "JComponent",
        "Boolean",
        "Color",
        "Object",
        "String",
        "JTextComponent"
      ],
      "apicalls": [
        "getForeground",
        "equals",
        "getText",
        "setForeground"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.getText()",
            "java.lang.String.equals(java.lang.Object)",
            "javax.swing.JComponent.setForeground(java.awt.Color)",
            "java.awt.Component.getForeground()"
          ]
        }
      ],
      "keywords": [
        "j",
        "component",
        "java",
        "color",
        "string",
        "swing",
        "get",
        "foreground",
        "set",
        "object",
        "equals",
        "boolean",
        "lang",
        "awt",
        "javax",
        "text"
      ]
    },
    {
      "method": "getState@71",
      "body": "/** \n * Read and return the state of parsing for a particular log file.\n * @param fname the log file for which to read the state\n */\npublic static ParseState getState(String fname){\n  String[] fields=persData.getProperty(fname,\"null\" + SEPARATOR + \"0\").split(SEPARATOR,2);\n  String firstLine;\n  long offset;\n  if (fields.length < 2) {\n    System.err.println(\"Malformed persistent state data found\");\n    Environment.logInfo(\"Malformed persistent state data found\");\n    firstLine=null;\n    offset=0;\n  }\n else {\n    firstLine=(fields[0].equals(\"null\") ? null : fields[0]);\n    offset=Long.parseLong(fields[1]);\n  }\n  return new ParseState(fname,firstLine,offset);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.split(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String[]",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.lang.Long.parseLong(java.lang.String)",
                "node": "DAPICall",
                "_returns": "long",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "ParseState",
      "file": "./java_projects/platform/dependencies/hadoop/src/contrib/failmon/src/java/org/apache/hadoop/contrib/failmon/PersistentState.java",
      "types": [
        "PrintStream",
        "String",
        "NumberFormatException",
        "Long",
        "Integer",
        "Properties",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "getProperty",
        "parseLong",
        "split",
        "println",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "java.lang.String.split(java.lang.String,int)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Long.parseLong(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "java.lang.String.split(java.lang.String,int)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "format",
        "object",
        "println",
        "parse",
        "properties",
        "integer",
        "split",
        "stream",
        "property",
        "util",
        "exception",
        "boolean",
        "java",
        "string",
        "print",
        "equals",
        "get",
        "long",
        "io",
        "lang",
        "number"
      ]
    },
    {
      "method": "getFolderWithName@228",
      "body": "public ViewFolder getFolderWithName(String folderName){\n  for (Enumeration e=allFolders(); e.hasMoreElements(); ) {\n    ViewFolder folder=(ViewFolder)e.nextElement();\n    if (folder.getName().equals(folderName)) {\n      return folder;\n    }\n  }\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"Could not find folder named \" + folderName);\n  }\n  return null;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "ViewFolder",
      "file": "./java_projects/openflexo/flexodesktop/model/flexofoundation/src/main/java/org/openflexo/foundation/view/ViewLibrary.java",
      "types": [
        "Logger",
        "Boolean",
        "Level",
        "String",
        "Enumeration"
      ],
      "apicalls": [
        "isLoggable",
        "fine",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        },
        {
          "calls": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "fine",
        "boolean",
        "level",
        "elements",
        "loggable",
        "logging",
        "logger",
        "util",
        "java",
        "enumeration",
        "string"
      ]
    },
    {
      "method": "testCOPYFolder@164",
      "body": "public void testCOPYFolder() throws IOException, SAXException {\n  ServletUnitClient sc=sr.newClient();\n  sc.setAuthentication(\"V7Files\",\"admin\",\"admin\");\n{\n    WebRequest request=new MkColWebRequest(\"http://test/myServlet/1\");\n    WebResponse resp=sc.getResponse(request);\n    assertEquals(HttpServletResponse.SC_CREATED,resp.getResponseCode());\n  }\n{\n    WebRequest request=new PutMethodWebRequest(\"http://test/myServlet/1/test.txt\",new ByteArrayInputStream(\"testPUT\".getBytes()),\"text/plain\");\n    WebResponse resp=sc.getResponse(request);\n    assertEquals(HttpServletResponse.SC_CREATED,resp.getResponseCode());\n  }\n{\n    WebRequest request=new CopyWebRequest(\"http://test/myServlet/1\",\"/myServlet/2\");\n    WebResponse resp=sc.getResponse(request);\n    assertEquals(HttpServletResponse.SC_CREATED,resp.getResponseCode());\n  }\n  assertExists(sc,\"http://test/myServlet/2/test.txt\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/v7files/src/test/java/v7db/files/milton/MiltonServletTest.java",
      "types": [
        "Byte",
        "String",
        "ByteArrayInputStream"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "string",
        "stream",
        "io",
        "array",
        "get",
        "byte",
        "java",
        "lang",
        "input",
        "bytes"
      ]
    },
    {
      "method": "reloadAllQuests@78",
      "body": "public final void reloadAllQuests(){\n  _log.info(\"Reloading Server Scripts\");\n  try {\n    for (    Quest quest : _quests.values()) {\n      if (quest != null)       quest.unload(false);\n    }\n    _quests.clear();\n    File scripts=new File(Config.DATAPACK_ROOT + \"/data/scripts.cfg\");\n    L2ScriptEngineManager.getInstance().executeScriptList(scripts);\n    QuestManager.getInstance().report();\n  }\n catch (  IOException ioe) {\n    _log.severe(\"Failed loading scripts.cfg, no script going to be loaded\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.logging.Logger.info(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.logging.Logger.severe(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.File(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.logging.Logger.info(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/L2jServer_Core/L2J_Server/java/com/l2jserver/gameserver/instancemanager/QuestManager.java",
      "types": [
        "String",
        "File",
        "Logger"
      ],
      "apicalls": [
        "info",
        "severe"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.info(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.util.logging.Logger.info(java.lang.String)",
            "java.util.logging.Logger.severe(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.info(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.util.logging.Logger.info(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "severe",
        "util",
        "file",
        "info",
        "logger",
        "string",
        "logging",
        "io",
        "java"
      ]
    },
    {
      "method": "setDocumentModalDialog@261",
      "body": "/** \n * Set dialog to be document modal and set property so it will look as native modal dialog on Mac (has no effect on other platforms). Also notifies Integration adapter about this event.\n * @param dialog dialog which should be document modal and Mac nativelooking (only on Mac)\n */\npublic static void setDocumentModalDialog(JDialog dialog){\n  dialog.setModalityType(ModalityType.DOCUMENT_MODAL);\n  dialog.getRootPane().putClientProperty(\"apple.awt.documentModalSheet\",Boolean.TRUE);\n  IntegrationAdapter.getInstance().registerModalSheet(dialog);\n}\n",
      "formalParam": [
        "JDialog"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Dialog.setModalityType(java.awt.Dialog.ModalityType)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/esmska/src/esmska/utils/RuntimeUtils.java",
      "types": [
        "Object",
        "JComponent",
        "ModalityType",
        "Dialog"
      ],
      "apicalls": [
        "putClientProperty",
        "setModalityType"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Dialog.setModalityType(java.awt.Dialog.ModalityType)",
            "javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "put",
        "java",
        "component",
        "j",
        "set",
        "javax",
        "type",
        "object",
        "dialog",
        "awt",
        "property",
        "swing",
        "modality",
        "client"
      ]
    },
    {
      "method": "testJSONCompareActivityUnit@84",
      "body": "@Test public void testJSONCompareActivityUnit(){\n  ActivityUnit act=createTestActivityUnit(\"TestId\");\n  try {\n    byte[] b=ActivityUtil.serializeActivityUnit(act);\n    if (b == null) {\n      fail(\"null returned\");\n    }\n    java.io.InputStream is=ActivityUtilTest.class.getResourceAsStream(\"/json/activity.json\");\n    byte[] inb2=new byte[is.available()];\n    is.read(inb2);\n    is.close();\n    ActivityUnit act2=ActivityUtil.deserializeActivityUnit(inb2);\n    byte[] b2=ActivityUtil.serializeActivityUnit(act2);\n    String s1=new String(b);\n    String s2=new String(b2);\n    if (!s1.equals(s2)) {\n      fail(\"JSON is different: created=\" + s1 + \" stored=\"+ s2);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(\"Failed to serialize: \" + e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
                "_throws": [],
                "_returns": "java.io.InputStream",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.InputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "int",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.String(byte[])",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.String.String(byte[])",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bam/modules/activity-management/activity/src/test/java/org/overlord/bam/activity/util/ActivityUtilTest.java",
      "types": [
        "Class",
        "IOException",
        "Byte",
        "String",
        "Boolean",
        "InputStream",
        "Object",
        "Integer",
        "Throwable"
      ],
      "apicalls": [
        "close",
        "printStackTrace",
        "equals",
        "read",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.io.InputStream.read(byte[])",
            "java.io.InputStream.close()",
            "java.lang.String.String(byte[])",
            "java.lang.String.String(byte[])",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.io.InputStream.read(byte[])",
            "java.io.InputStream.close()",
            "java.lang.String.String(byte[])",
            "java.lang.String.String(byte[])",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "io",
        "stack",
        "equals",
        "exception",
        "stream",
        "trace",
        "get",
        "resource",
        "class",
        "boolean",
        "throwable",
        "read",
        "byte",
        "lang",
        "input",
        "close",
        "print",
        "object",
        "java",
        "string",
        "integer"
      ]
    },
    {
      "method": "createTreeSet@314",
      "body": "/** \n * \u521b\u5efa\u4e00\u4e2a<code>TreeSet</code>\u3002 \n */\npublic static <T>TreeSet<T> createTreeSet(Comparator<? super T> comparator,Iterable<? extends T> c){\n  TreeSet<T> set=new TreeSet<T>(comparator);\n  iterableToCollection(c,set);\n  return set;\n}\n",
      "formalParam": [
        "Comparator<? super T>",
        "Iterable<? extends T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeSet<Tau_E>.TreeSet(java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Collection<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "TreeSet<T>",
      "file": "./java_projects/citrus/common/util/src/main/java/com/alibaba/citrus/util/CollectionUtil.java",
      "types": [
        "Boolean",
        "Comparator",
        "TreeSet",
        "Collection"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet<Tau_E>.TreeSet(java.util.Comparator)",
            "java.util.Collection<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "tree",
        "java",
        "collection",
        "add",
        "util",
        "set",
        "boolean",
        "comparator"
      ]
    },
    {
      "method": "prepare@90",
      "body": "/** \n * {@inheritDoc}\n */\npublic void prepare() throws IOException {\n  if (locks != null) {\n    bckFiles=new File[files.length];\n    for (int i=0, length=files.length; i < length; i++) {\n      File file=files[i];\n      if (file.exists()) {\n        bckFiles[i]=new File(file.getAbsolutePath() + \".\" + System.currentTimeMillis()+ \"_\"+ SEQUENCE.incrementAndGet());\n        move(file,bckFiles[i]);\n      }\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jcr/exo.jcr.component.core/src/main/java/org/exoplatform/services/jcr/impl/storage/value/fs/operations/DeleteValues.java",
      "types": [
        "File",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "getAbsolutePath",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.exists()"
          ]
        },
        {
          "calls": [
            "java.io.File.exists()",
            "java.io.File.getAbsolutePath()",
            "java.io.File.File(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exists",
        "file",
        "boolean",
        "absolute",
        "io",
        "path",
        "string",
        "get",
        "java"
      ]
    },
    {
      "method": "testCreateForSELECT@192",
      "body": "public void testCreateForSELECT(){\n  implTestCreateForTag(HTML.Tag.SELECT,\"javax.swing.text.html.FormView\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.AbstractDocument.writeLock()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/text/html/HTMLEditorKit_HTMLFactoryTest.java",
      "types": [
        "AbstractDocument",
        "String",
        "Class"
      ],
      "apicalls": [
        "getName",
        "writeLock"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.AbstractDocument.writeLock()",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "document",
        "abstract",
        "lang",
        "get",
        "java",
        "swing",
        "class",
        "write",
        "lock",
        "name",
        "javax",
        "text",
        "string"
      ]
    },
    {
      "method": "sfResolve@3886",
      "formalParam": [
        "Reference",
        "double",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Double.doubleValue()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": []
          },
          {
            "_call": "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.DataOutput.writeDouble(double)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.DataOutput.writeBoolean(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.DataInput.readDouble()",
            "node": "DAPICall",
            "_returns": "double",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/jenkins-smartfrog-plugin/etc/terminate-hook/org/jboss/smartfrog/hudsonutils/TerminateHookImpl_Stub.java",
      "body": "public double sfResolve(Reference paramReference,double paramDouble,boolean paramBoolean) throws SmartFrogResolutionException, RemoteException {\n  try {\n    if (useNewInvoke) {\n      localObject1=this.ref.invoke(this,$method_sfResolve_70,new Object[]{paramReference,new Double(paramDouble),paramBoolean ? Boolean.TRUE : Boolean.FALSE},8228713188388847761L);\n      return ((Double)localObject1).doubleValue();\n    }\n    Object localObject1=this.ref.newCall(this,operations,70,95256091449878667L);\n    try {\n      ObjectOutput localObjectOutput=((RemoteCall)localObject1).getOutputStream();\n      localObjectOutput.writeObject(paramReference);\n      localObjectOutput.writeDouble(paramDouble);\n      localObjectOutput.writeBoolean(paramBoolean);\n    }\n catch (    IOException localIOException1) {\n      throw new MarshalException(\"error marshalling arguments\",localIOException1);\n    }\n    this.ref.invoke((RemoteCall)localObject1);\n    double d;\n    try {\n      ObjectInput localObjectInput=((RemoteCall)localObject1).getInputStream();\n      d=localObjectInput.readDouble();\n    }\n catch (    IOException localIOException2) {\n      throw new UnmarshalException(\"error unmarshalling return\",localIOException2);\n    }\n finally {\n      this.ref.done((RemoteCall)localObject1);\n    }\n    return d;\n  }\n catch (  RuntimeException localRuntimeException) {\n    throw localRuntimeException;\n  }\ncatch (  RemoteException localRemoteException) {\n    throw localRemoteException;\n  }\ncatch (  SmartFrogResolutionException localSmartFrogResolutionException) {\n    throw localSmartFrogResolutionException;\n  }\ncatch (  Exception localException) {\n  }\n  throw new UnexpectedException(\"undeclared checked exception\",localException);\n}\n",
      "types": [
        "DataOutput",
        "Object",
        "IOException",
        "DataInput",
        "Double",
        "ObjectOutput",
        "Boolean"
      ],
      "apicalls": [
        "readDouble",
        "doubleValue",
        "writeDouble",
        "writeObject",
        "writeBoolean"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.doubleValue()",
            "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "java.io.DataOutput.writeDouble(double)",
            "java.io.DataOutput.writeBoolean(boolean)",
            "java.io.DataInput.readDouble()"
          ]
        }
      ],
      "keywords": [
        "io",
        "exception",
        "java",
        "lang",
        "object",
        "input",
        "write",
        "double",
        "output",
        "data",
        "read",
        "value",
        "boolean"
      ]
    },
    {
      "method": "eval@68",
      "body": "public Sequence eval(Sequence contextSequence,Item contextItem) throws XPathException {\n  if (context.getProfiler().isEnabled()) {\n    context.getProfiler().start(this);\n    context.getProfiler().message(this,Profiler.DEPENDENCIES,\"DEPENDENCIES\",Dependency.getDependenciesName(this.getDependencies()));\n    if (contextSequence != null)     context.getProfiler().message(this,Profiler.START_SEQUENCES,\"CONTEXT SEQUENCE\",contextSequence);\n    if (contextItem != null)     context.getProfiler().message(this,Profiler.START_SEQUENCES,\"CONTEXT ITEM\",contextItem.toSequence());\n  }\n  Sequence result;\n  Sequence seq=getArgument(0).eval(contextSequence,contextItem);\n  if (seq.isEmpty())   result=Sequence.EMPTY_SEQUENCE;\n else {\n    String str=seq.getStringValue();\n    int count=((IntegerValue)getArgument(1).eval(contextSequence,contextItem).convertTo(Type.INTEGER)).getInt();\n    if (count < 0)     throw new XPathException(this,\"Invalid string-pad count\");\n    if (count == 0)     result=StringValue.EMPTY_STRING;\n else {\n      StringBuilder buf=new StringBuilder(str.length() * count);\n      for (int i=0; i < count; i++)       buf.append(str);\n      result=new StringValue(buf.toString());\n    }\n  }\n  if (context.getProfiler().isEnabled())   context.getProfiler().end(this,\"\",result);\n  return result;\n}\n",
      "formalParam": [
        "Sequence",
        "Item"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "Sequence",
      "file": "./java_projects/eXist-1.4.x/src/org/exist/xquery/functions/FunStringPad.java",
      "types": [
        "Integer",
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.StringBuilder.StringBuilder(int)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "length",
        "java",
        "integer",
        "builder",
        "lang",
        "string"
      ]
    },
    {
      "method": "shouldReturnKeyForPublicKey@142",
      "body": "@Test public void shouldReturnKeyForPublicKey() throws SocketTimeoutException, HttpClientException, Throwable {\n  IOpenShiftSSHKey key=null;\n  try {\n    String keyName=String.valueOf(System.currentTimeMillis());\n    String publicKeyPath=SSHKeyTestUtils.createDsaKeyPair();\n    ISSHPublicKey publicKey=new SSHPublicKey(publicKeyPath);\n    key=user.putSSHKey(keyName,publicKey);\n    IOpenShiftSSHKey keyByPublicKey=user.getSSHKeyByPublicKey(publicKey.getPublicKey());\n    assertThat(key).isEqualTo(keyByPublicKey);\n  }\n  finally {\n    SSHKeyTestUtils.silentlyDestroyKey(key);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.String.valueOf(long)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openshift-java-client/src/test/java/com/openshift/internal/client/SSHKeyIntegrationTest.java",
      "types": [
        "System",
        "Long",
        "String"
      ],
      "apicalls": [
        "currentTimeMillis",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.String.valueOf(long)"
          ]
        }
      ],
      "keywords": [
        "value",
        "time",
        "millis",
        "long",
        "string",
        "current",
        "java",
        "system",
        "lang"
      ]
    },
    {
      "method": "testTest@386",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-clips/src/test/java/org/drools/clips/ClipsShellTest.java",
      "body": "public void testTest(){\n  this.shell.eval(\"(import org.drools.Person)\");\n  this.shell.eval(\"(defrule testRule1 (Person (age ?age1) ) (Person (name ?name) (age ?age2) ) (test(eq ?age1 (+ ?age2 3) )) => (printout t hello) )\");\n  this.shell.eval(\"(assert (Person (name mark) (age 32) ) )\");\n  this.shell.eval(\"(assert (Person (name bob) (age 35) ) )\");\n  this.shell.eval(\"(run)\");\n  assertEquals(\"hello\",new String(this.baos.toByteArray()));\n}\n",
      "types": [
        "String",
        "Byte",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.lang.String.String(byte[])"
          ]
        }
      ],
      "keywords": [
        "array",
        "java",
        "output",
        "stream",
        "io",
        "string",
        "byte",
        "lang"
      ]
    },
    {
      "method": "testByteArray@436",
      "body": "@Override public void testByteArray(byte[] v) throws Exception {\n  MessagePack msgpack=new MessagePack();\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  msgpack.write(out,v);\n  byte[] bytes=out.toByteArray();\n  byte[] ret=msgpack.read(bytes,byte[].class);\n  assertArrayEquals(v,ret);\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "_returns": "byte[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/msgpack-java/src/test/java/org/msgpack/TestMessagePack01.java",
      "types": [
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "io",
        "java",
        "array",
        "stream",
        "output",
        "byte"
      ]
    },
    {
      "method": "toArray@464",
      "body": "/** \n * Returns an array containing all of the elements in this queue, in proper sequence. <p>The returned array will be \"safe\" in that no references to it are maintained by this queue.  (In other words, this method must allocate a new array).  The caller is thus free to modify the returned array. <p>This method acts as bridge between array-based and collection-based APIs.\n * @return an array containing all of the elements in this queue\n */\npublic Object[] toArray(){\n  final E[] items=this.items;\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    Object[] a=new Object[count];\n    int k=0;\n    int i=takeIndex;\n    while (k < count) {\n      a[k++]=items[i];\n      i=inc(i);\n    }\n    return a;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.lock()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.unlock()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Object[]",
      "file": "./java_projects/harmony_1/classlib/modules/concurrent/src/main/java/java/util/concurrent/ArrayBlockingQueue.java",
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "lock",
        "unlock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantLock.lock()",
            "java.util.concurrent.locks.ReentrantLock.unlock()"
          ]
        }
      ],
      "keywords": [
        "lock",
        "concurrent",
        "reentrant",
        "util",
        "unlock",
        "locks",
        "java"
      ]
    },
    {
      "method": "valueOf@55",
      "formalParam": [
        "Number[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Number.intValue()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "Number",
      "file": "./java_projects/JEP/src/org/lsmp/djep/groupJep/groups/PermutationGroup.java",
      "body": "public Number valueOf(Number[] eles){\n  Integer perm[]=new Integer[eles.length];\n  for (int i=0; i < eles.length; ++i)   perm[i]=new Integer(eles[i].intValue());\n  Permutation res=new Permutation(this,perm);\n  return res;\n}\n",
      "types": [
        "Integer",
        "Number"
      ],
      "apicalls": [
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Number.intValue()",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "number",
        "lang",
        "integer",
        "int",
        "value"
      ]
    },
    {
      "method": "removeRow@361",
      "body": "/** \n * Removes a row from this table.\n * @param row the row to delete\n * @return true if the row was successfully deleted, false if therow was already invalid\n */\npublic boolean removeRow(int row){\n  if (m_rows.isValidRow(row)) {\n    fireTableEvent(row,row,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE);\n    m_tuples.invalidate(row);\n    m_rows.releaseRow(row);\n    for (Iterator cols=getColumns(); cols.hasNext(); ) {\n      Column c=(Column)cols.next();\n      c.revertToDefault(row);\n    }\n    return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Prefuse_1/core/src/main/java/prefuse/data/Table.java",
      "types": [
        "Iterator",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "array",
        "iterator",
        "java",
        "util",
        "list",
        "boolean",
        "next"
      ]
    },
    {
      "method": "run@62",
      "body": "public void run(){\n  try {\n    System.out.println(\"Connecting to URL: \" + url);\n    System.out.println(\"Consuming \" + (topic ? \"topic\" : \"queue\") + \": \"+ subject);\n    System.out.println(\"Using \" + (durable ? \"durable\" : \"non-durable\") + \" subscription\");\n    Connection connection=createConnection();\n    Session session=createSession(connection);\n    MessageConsumer consumer=null;\n    if (durable && topic) {\n      consumer=session.createDurableSubscriber((Topic)destination,consumerName);\n    }\n else {\n      consumer=session.createConsumer(destination);\n    }\n    if (maxiumMessages <= 0) {\n      consumer.setMessageListener(this);\n    }\n    connection.start();\n    if (maxiumMessages > 0) {\n      consumeMessagesAndClose(connection,session,consumer);\n    }\n  }\n catch (  Exception e) {\n    System.out.println(\"Caught: \" + e);\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/activemq/activemq-optional/src/main/java/org/apache/activemq/tool/ConsumerTool.java",
      "types": [
        "Character",
        "String",
        "PrintStream",
        "Throwable"
      ],
      "apicalls": [
        "println",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(char[])"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "stack",
        "stream",
        "println",
        "trace",
        "throwable",
        "character",
        "java",
        "io",
        "lang",
        "print",
        "string"
      ]
    },
    {
      "method": "toString@2587",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"shardClusterList_args(\");\n  boolean first=true;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "builder",
        "string",
        "java",
        "append"
      ]
    },
    {
      "method": "outputToPDF@145",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File)",
            "node": "DAPICall",
            "_returns": "java.io.File",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.File.delete()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/SalesCube/WEB/SalesCube/src/main/java/jp/co/arkinfosys/service/ReportTemplateService.java",
      "body": "/** \n * \u5e33\u7968\u3092PDF\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u307e\u3059.\n * @param filePath \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\uff08null\u6307\u5b9a\u306e\u5834\u5408\u306f\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\uff09\n * @return \u51fa\u529b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30eb\u30d1\u30b9\n * @throws ServiceException\n */\npublic String outputToPDF(String filePath) throws ServiceException {\n  try {\n    String path=this.createOutputFilePath(filePath,FileSuffix.PDF);\n    JasperExportManager.exportReportToPdfFile(print,path);\n    return path;\n  }\n catch (  Exception e) {\n    throw new ServiceException(e);\n  }\n}\n",
      "types": [
        "Boolean",
        "String",
        "IOException",
        "File"
      ],
      "apicalls": [
        "createTempFile",
        "getAbsolutePath",
        "delete"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File)",
            "java.io.File.getAbsolutePath()",
            "java.io.File.delete()"
          ]
        }
      ],
      "keywords": [
        "temp",
        "string",
        "java",
        "delete",
        "io",
        "exception",
        "boolean",
        "absolute",
        "file",
        "path",
        "get",
        "create"
      ]
    },
    {
      "method": "testLoadChildren@200",
      "body": "public void testLoadChildren(){\n  assertNull(view.layoutPool);\n  assertNull(view.getViewFactory());\n  view.loadChildren(new ChildrenFactory());\n  assertNotNull(view.layoutPool);\n  assertSame(view,view.layoutPool.getParent());\n  assertSame(root,view.layoutPool.getElement());\n  assertEquals(0,view.layoutPool.getViewCount());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.View.getViewFactory()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.text.ViewFactory"
          },
          {
            "_call": "javax.swing.text.View.getParent()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.text.View"
          },
          {
            "_call": "javax.swing.text.View.getElement()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.text.Element"
          },
          {
            "_call": "javax.swing.text.View.getViewCount()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/test/api/java.injected/javax/swing/text/FlowViewTest.java",
      "types": [
        "View",
        "ViewFactory",
        "Element",
        "Integer"
      ],
      "apicalls": [
        "getParent",
        "getElement",
        "getViewCount",
        "getViewFactory"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.View.getViewFactory()",
            "javax.swing.text.View.getParent()",
            "javax.swing.text.View.getElement()",
            "javax.swing.text.View.getViewCount()"
          ]
        }
      ],
      "keywords": [
        "text",
        "javax",
        "swing",
        "parent",
        "factory",
        "count",
        "element",
        "integer",
        "view",
        "get"
      ]
    },
    {
      "method": "getHandler@48",
      "body": "public static PRUDPPacketHandler getHandler(int port,InetAddress bind_ip,PRUDPRequestHandler request_handler){\n  final Integer f_port=new Integer(port);\n  try {\n    class_mon.enter();\n    non_releasable_set.add(f_port);\n    PRUDPPacketHandlerImpl receiver=(PRUDPPacketHandlerImpl)receiver_map.get(f_port);\n    if (receiver == null) {\n      receiver=new PRUDPPacketHandlerImpl(port,bind_ip);\n      receiver_map.put(f_port,receiver);\n    }\n    if (request_handler != null) {\n      receiver.setRequestHandler(request_handler);\n    }\n    return (receiver);\n  }\n  finally {\n    class_mon.exit();\n  }\n}\n",
      "formalParam": [
        "int",
        "InetAddress",
        "PRUDPRequestHandler"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "PRUDPPacketHandler",
      "file": "./java_projects/OneSwarm/az_src/src/com/aelitis/net/udp/uc/impl/PRUDPPacketHandlerFactoryImpl.java",
      "types": [
        "Integer",
        "Boolean",
        "Map",
        "Object",
        "Set"
      ],
      "apicalls": [
        "add",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Set.add(java.lang.Object)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "add",
        "put",
        "set",
        "java",
        "util",
        "boolean",
        "map",
        "integer",
        "object"
      ]
    },
    {
      "method": "testStaticFlowPush@159",
      "body": "@Test public void testStaticFlowPush() throws IOException {\n  StaticFlowEntryPusher staticFlowEntryPusher=new StaticFlowEntryPusher();\n  IStorageSourceService storage=createStorageWithFlowEntries();\n  long dpid=HexString.toLong(TestSwitch1DPID);\n  IOFSwitch mockSwitch=createNiceMock(IOFSwitch.class);\n  Capture<OFMessage> writeCapture=new Capture<OFMessage>(CaptureType.ALL);\n  Capture<FloodlightContext> contextCapture=new Capture<FloodlightContext>(CaptureType.ALL);\n  Capture<List<OFMessage>> writeCaptureList=new Capture<List<OFMessage>>(CaptureType.ALL);\n  mockSwitch.write(capture(writeCapture),capture(contextCapture));\n  expectLastCall().anyTimes();\n  mockSwitch.write(capture(writeCaptureList),capture(contextCapture));\n  expectLastCall().anyTimes();\n  mockSwitch.flush();\n  expectLastCall().anyTimes();\n  staticFlowEntryPusher.setStorageSource(storage);\n  FloodlightModuleContext fmc=new FloodlightModuleContext();\n  MockFloodlightProvider mockFloodlightProvider=getMockFloodlightProvider();\n  Map<Long,IOFSwitch> switchMap=new HashMap<Long,IOFSwitch>();\n  switchMap.put(dpid,mockSwitch);\n  mockFloodlightProvider.setSwitches(switchMap);\n  staticFlowEntryPusher.setFloodlightProvider(mockFloodlightProvider);\n  RestApiServer restApi=new RestApiServer();\n  try {\n    restApi.init(fmc);\n  }\n catch (  FloodlightModuleException e) {\n    e.printStackTrace();\n  }\n  staticFlowEntryPusher.restApi=restApi;\n  staticFlowEntryPusher.startUp(null);\n  assertEquals(TotalTestRules,staticFlowEntryPusher.countEntries());\n  expect(mockSwitch.getId()).andReturn(dpid).anyTimes();\n  expect(mockSwitch.getStringId()).andReturn(TestSwitch1DPID).anyTimes();\n  replay(mockSwitch);\n  staticFlowEntryPusher.addedSwitch(mockSwitch);\n  verify(mockSwitch);\n  assertEquals(true,writeCapture.hasCaptured());\n  assertEquals(TotalTestRules,writeCapture.getValues().size());\n  OFFlowMod firstFlowMod=(OFFlowMod)writeCapture.getValues().get(2);\n  verifyFlowMod(firstFlowMod,FlowMod1);\n  OFFlowMod secondFlowMod=(OFFlowMod)writeCapture.getValues().get(1);\n  verifyFlowMod(secondFlowMod,FlowMod2);\n  OFFlowMod thirdFlowMod=(OFFlowMod)writeCapture.getValues().get(0);\n  verifyFlowMod(thirdFlowMod,FlowMod3);\n  writeCapture.reset();\n  contextCapture.reset();\n  storage.deleteRow(StaticFlowEntryPusher.TABLE_NAME,\"TestRule1\");\n  storage.deleteRow(StaticFlowEntryPusher.TABLE_NAME,\"TestRule2\");\n  assertEquals(1,staticFlowEntryPusher.countEntries());\n  assertEquals(2,writeCapture.getValues().size());\n  OFFlowMod firstDelete=(OFFlowMod)writeCapture.getValues().get(0);\n  FlowMod1.setCommand(OFFlowMod.OFPFC_DELETE_STRICT);\n  verifyFlowMod(firstDelete,FlowMod1);\n  OFFlowMod secondDelete=(OFFlowMod)writeCapture.getValues().get(1);\n  FlowMod2.setCommand(OFFlowMod.OFPFC_DELETE_STRICT);\n  verifyFlowMod(secondDelete,FlowMod2);\n  writeCapture.reset();\n  FlowMod2.setCommand(OFFlowMod.OFPFC_ADD);\n  storage.insertRow(StaticFlowEntryPusher.TABLE_NAME,TestRule2);\n  assertEquals(2,staticFlowEntryPusher.countEntries());\n  assertEquals(1,writeCaptureList.getValues().size());\n  List<OFMessage> outList=(List<OFMessage>)writeCaptureList.getValues().get(0);\n  assertEquals(1,outList.size());\n  OFFlowMod firstAdd=(OFFlowMod)outList.get(0);\n  verifyFlowMod(firstAdd,FlowMod2);\n  writeCapture.reset();\n  contextCapture.reset();\n  writeCaptureList.reset();\n  TestRule3.put(COLUMN_DL_VLAN,333);\n  storage.updateRow(StaticFlowEntryPusher.TABLE_NAME,TestRule3);\n  assertEquals(2,staticFlowEntryPusher.countEntries());\n  assertEquals(1,writeCaptureList.getValues().size());\n  outList=(List<OFMessage>)writeCaptureList.getValues().get(0);\n  assertEquals(2,outList.size());\n  OFFlowMod removeFlowMod=(OFFlowMod)outList.get(0);\n  FlowMod3.setCommand(OFFlowMod.OFPFC_DELETE_STRICT);\n  verifyFlowMod(removeFlowMod,FlowMod3);\n  FlowMod3.setCommand(OFFlowMod.OFPFC_ADD);\n  FlowMod3.getMatch().fromString(\"dl_dst=00:20:30:40:50:60,dl_vlan=333\");\n  OFFlowMod updateFlowMod=(OFFlowMod)outList.get(1);\n  verifyFlowMod(updateFlowMod,FlowMod3);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ubuntu-packaging-floodlight/src/test/java/net/floodlightcontroller/staticflowentry/StaticFlowTests.java",
      "types": [
        "HashMap",
        "Map",
        "Object",
        "String"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "put",
        "hash",
        "object",
        "java",
        "string",
        "util"
      ]
    },
    {
      "method": "main@44",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.System.exit(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/YouTube-tutorials/src/utility/CameraTest.java",
      "body": "public static void main(String args[]) throws LWJGLException {\n  Display.setVSyncEnabled(true);\n  Display.setDisplayMode(new DisplayMode(640,480));\n  Display.setResizable(true);\n  Display.create();\n  EulerCamera camera=new EulerCamera.Builder().setAspectRatio(640f / 480f).setFieldOfView(60).build();\n  camera.applyPerspectiveMatrix();\n  camera.applyOptimalStates();\n  Mouse.setGrabbed(true);\n  while (!Display.isCloseRequested()) {\n    GL11.glViewport(0,0,Display.getWidth(),Display.getHeight());\n    camera.setAspectRatio((float)Display.getWidth() / Display.getHeight());\n    if (Display.wasResized()) {\n      camera.applyPerspectiveMatrix();\n    }\n    while (Keyboard.next()) {\n      if (Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n        Mouse.setGrabbed(false);\n      }\n    }\n    System.out.println(camera);\n    GL11.glLoadIdentity();\n    camera.applyTranslations();\n    if (Mouse.isGrabbed()) {\n      camera.processMouse();\n      camera.processKeyboard(16);\n    }\n    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);\n    GL11.glRectf(-1,-1,1,1);\n    Display.sync(60);\n    Display.update();\n  }\n  Display.destroy();\n  System.exit(0);\n}\n",
      "types": [
        "PrintStream",
        "Character",
        "Integer",
        "System"
      ],
      "apicalls": [
        "println",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "io",
        "lang",
        "print",
        "character",
        "println",
        "system",
        "exit",
        "integer",
        "stream"
      ]
    },
    {
      "method": "setSelectedFrame@160",
      "body": "/** \n * selects the specified internal frame upon the virtual desktop\n * @param f the internal frame to select\n */\npublic void setSelectedFrame(JInternalFrame f){\n  try {\n    JInternalFrame currentFrame=desktopPane.getSelectedFrame();\n    if (currentFrame != null) {\n      currentFrame.setSelected(false);\n    }\n    f.setSelected(true);\n    f.setIcon(false);\n  }\n catch (  java.beans.PropertyVetoException pve) {\n    System.out.println(pve.getMessage());\n  }\n}\n",
      "formalParam": [
        "JInternalFrame"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "javax.swing.JInternalFrame.setSelected(boolean)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.beans.PropertyVetoException"
                ]
              },
              {
                "_call": "javax.swing.JInternalFrame.setSelected(boolean)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.beans.PropertyVetoException"
                ]
              },
              {
                "_call": "javax.swing.JInternalFrame.setIcon(boolean)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.beans.PropertyVetoException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/lcmc/src/lib/com/tomtessier/scrollabledesktop/DesktopScrollPane.java",
      "types": [
        "Throwable",
        "PropertyVetoException",
        "JInternalFrame",
        "Boolean",
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "setIcon",
        "println",
        "setSelected",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JInternalFrame.setSelected(boolean)",
            "javax.swing.JInternalFrame.setSelected(boolean)",
            "javax.swing.JInternalFrame.setIcon(boolean)",
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "javax.swing.JInternalFrame.setSelected(boolean)",
            "javax.swing.JInternalFrame.setSelected(boolean)",
            "javax.swing.JInternalFrame.setIcon(boolean)"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "swing",
        "selected",
        "exception",
        "print",
        "j",
        "frame",
        "internal",
        "io",
        "veto",
        "println",
        "java",
        "set",
        "javax",
        "lang",
        "boolean",
        "icon",
        "get",
        "message",
        "string",
        "stream",
        "property"
      ]
    },
    {
      "method": "onStart@88",
      "body": "@Override public void onStart(final Intent aIntent,int aStartId){\n  Log.d(TAG,aIntent.getAction());\n  if (aIntent.getAction().equals(\"com.android.music.playbackcomplete\") || aIntent.getAction().equals(\"com.doubleTwist.androidPlayer.playbackcomplete\")) {\n    stopSelf();\n  }\n else   if (aIntent.getAction().equals(\"com.doubleTwist.androidPlayer.playstatechanged\") || aIntent.getAction().equals(\"com.doubleTwist.androidPlayer.metachanged\")) {\n    Log.i(TAG,\"DoubleTwist changed!\");\n    try {\n      mArtist=aIntent.getStringExtra(\"artist\");\n      mTrack=aIntent.getStringExtra(\"track\");\n      setStatus(aIntent.getBooleanExtra(\"playing\",false));\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      Log.e(TAG,e.toString());\n      throw new RuntimeException(e);\n    }\n  }\n else   if (aIntent.getAction().equals(\"com.android.music.playstatechanged\") || aIntent.getAction().equals(\"com.android.music.metachanged\") || aIntent.getAction().equals(\"com.android.music.queuechanged\")) {\n    bindService(new Intent().setClassName(\"com.android.music\",\"com.android.music.MediaPlaybackService\"),new ServiceConnection(){\n      public void onServiceConnected(      ComponentName aName,      IBinder aService){\n        IMediaPlaybackService service=IMediaPlaybackService.Stub.asInterface(aService);\n        try {\n          mArtist=service.getArtistName();\n          mTrack=service.getTrackName();\n          setStatus(service.isPlaying());\n          unbindService(this);\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n          Log.e(TAG,e.toString());\n          throw new RuntimeException(e);\n        }\n      }\n      public void onServiceDisconnected(      ComponentName aName){\n        GTalkStatusApplication.getInstance().getConnector().setStatus(\"\",0);\n      }\n    }\n,0);\n  }\n else   if ((aIntent.getAction().equals(\"com.htc.music.playstatechanged\") && aIntent.getIntExtra(\"id\",-1) != -1) || aIntent.getAction().equals(\"com.htc.music.metachanged\")) {\n    bindService(new Intent().setClassName(\"com.htc.music\",\"com.htc.music.MediaPlaybackService\"),new ServiceConnection(){\n      public void onServiceConnected(      ComponentName aName,      IBinder aService){\n        com.htc.music.IMediaPlaybackService service=com.htc.music.IMediaPlaybackService.Stub.asInterface(aService);\n        try {\n          mArtist=service.getArtistName();\n          mTrack=service.getTrackName();\n          setStatus(service.isPlaying());\n          unbindService(this);\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n          Log.e(TAG,e.toString());\n          throw new RuntimeException(e);\n        }\n      }\n      public void onServiceDisconnected(      ComponentName aName){\n        GTalkStatusApplication.getInstance().getConnector().setStatus(\"\",0);\n      }\n    }\n,0);\n  }\n else   if (aIntent.getAction().equals(\"com.gtalkstatus.android.statusupdate\")) {\n    Log.d(TAG,\"Found Generic Intent\");\n    Bundle extras=aIntent.getExtras();\n    try {\n      mArtist=extras.getString(\"artist\");\n      mTrack=extras.getString(\"track\");\n      setStatus(true);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      Log.e(TAG,e.toString());\n      throw new RuntimeException(e);\n    }\n  }\n}\n",
      "formalParam": [
        "Intent",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.Throwable.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.Throwable.toString()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Android-GTalk-Music-Status/src/com/gtalkstatus/android/GTalkStatusUpdater.java",
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "toString",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.toString()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "lang",
        "stack",
        "string",
        "trace",
        "print",
        "java"
      ]
    },
    {
      "method": "logout@612",
      "body": "/** \n * Logout the <code>Subject</code>. <p> This method invokes the <code>logout</code> method for each <code>LoginModule</code> configured for this <code>LoginContext</code>. Each <code>LoginModule</code> performs its respective logout procedure which may include removing/destroying <code>Principal</code> and <code>Credential</code> information from the <code>Subject</code> and state cleanup. <p> Note that this method invokes all LoginModules configured for the application regardless of their respective <code>Configuration</code> flag parameters.  Essentially this means that <code>Requisite</code> and <code>Sufficient</code> semantics are ignored for this method.  This guarantees that proper cleanup and state restoration can take place. <p>\n * @exception LoginException if the logout fails.\n */\npublic void logout() throws LoginException {\n  if (subject == null) {\n    throw new LoginException(ResourcesMgr.getString(\"null.subject.logout.called.before.login\"));\n  }\n  if (configProvided) {\n    invokeCreatorPriv(LOGOUT_METHOD);\n  }\n else {\n    invokePriv(LOGOUT_METHOD);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)",
                "_throws": [
                  "java.security.PrivilegedActionException"
                ],
                "node": "DAPICall",
                "_returns": "Tau_T"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)",
                "_throws": [
                  "java.security.PrivilegedActionException"
                ],
                "node": "DAPICall",
                "_returns": "Tau_T"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/security/auth/login/LoginContext.java",
      "types": [
        "AccessControlContext",
        "AccessController",
        "PrivilegedActionException",
        "PrivilegedExceptionAction"
      ],
      "apicalls": [
        "doPrivileged"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)"
          ]
        },
        {
          "calls": [
            "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)"
          ]
        }
      ],
      "keywords": [
        "security",
        "java",
        "controller",
        "exception",
        "privileged",
        "access",
        "control",
        "action",
        "context"
      ]
    },
    {
      "method": "initialize@59",
      "body": "@Override public void initialize() throws OperatorException {\n  targetProduct=OperatorUtils.createCompatibleProduct(sourceProduct,\"cloud_distance_\" + sourceProduct.getName(),\"CLOUDD\");\n  final String productType=sourceProduct.getProductType();\n  int sourceExtend;\n  if (productType.contains(\"_RR\")) {\n    sourceExtend=SOURCE_EXTEND_RR;\n  }\n else {\n    sourceExtend=SOURCE_EXTEND_FR;\n  }\n  Band band=targetProduct.addBand(CLOUD_DISTANCE,ProductData.TYPE_INT32);\n  band.setNoDataValue(NO_DATA_VALUE);\n  band.setNoDataValueUsed(true);\n  geocoding=sourceProduct.getGeoCoding();\n  rectCalculator=new RectangleExtender(new Rectangle(sourceProduct.getSceneRasterWidth(),sourceProduct.getSceneRasterHeight()),sourceExtend,sourceExtend);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.contains(java.lang.CharSequence)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Rectangle.Rectangle(java.awt.Point,java.awt.Dimension)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/beam-meris-icol/src/main/java/org/esa/beam/meris/icol/common/CloudDistanceOp.java",
      "types": [
        "Rectangle",
        "Dimension",
        "String",
        "Point",
        "CharSequence",
        "Boolean"
      ],
      "apicalls": [
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.awt.Rectangle.Rectangle(java.awt.Point,java.awt.Dimension)"
          ]
        }
      ],
      "keywords": [
        "point",
        "java",
        "lang",
        "contains",
        "sequence",
        "char",
        "string",
        "boolean",
        "dimension",
        "rectangle",
        "awt"
      ]
    },
    {
      "method": "deepCopy@8019",
      "body": "public cancelQuery_args deepCopy(){\n  return new cancelQuery_args(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "cancelQuery_args",
      "file": "./java_projects/blur/src/blur-thrift/src/main/java/com/nearinfinity/blur/thrift/generated/Blur.java",
      "types": [
        "BitSet"
      ],
      "apicalls": [
        "clear",
        "or"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "java",
        "clear",
        "set",
        "bit",
        "util"
      ]
    },
    {
      "method": "removeObject@122",
      "body": "public boolean removeObject(String key){\n  return getFileForKey(key).delete();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.delete()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/mra-lib/src/com/xoba/util/data/FileCache.java",
      "types": [
        "Boolean",
        "String",
        "File"
      ],
      "apicalls": [
        "delete"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.delete()"
          ]
        }
      ],
      "keywords": [
        "io",
        "file",
        "java",
        "boolean",
        "string",
        "delete"
      ]
    },
    {
      "method": "getNames@555",
      "body": "/** \n * Get an array of field names from an Object.\n * @return An array of field names, or null if there are no names.\n */\npublic static String[] getNames(Object object){\n  if (object == null) {\n    return null;\n  }\n  Class klass=object.getClass();\n  Field[] fields=klass.getFields();\n  int length=fields.length;\n  if (length == 0) {\n    return null;\n  }\n  String[] names=new String[length];\n  for (int i=0; i < length; i+=1) {\n    names[i]=fields[i].getName();\n  }\n  return names;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getFields()",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Field[]"
          },
          {
            "_call": "java.lang.reflect.Field.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String[]",
      "file": "./java_projects/xmlcalabash1/src/org/json/JSONObject.java",
      "types": [
        "Class",
        "Field",
        "SecurityException",
        "String"
      ],
      "apicalls": [
        "getFields",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getFields()",
            "java.lang.reflect.Field.getName()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "fields",
        "exception",
        "name",
        "string",
        "class",
        "security",
        "field",
        "java",
        "reflect",
        "get"
      ]
    },
    {
      "method": "getCounters_result@3382",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic getCounters_result(getCounters_result other){\n  if (other.is_set_success()) {\n    Map<String,Long> __this__success=new HashMap<String,Long>();\n    for (    Map.Entry<String,Long> other_element : other.success.entrySet()) {\n      String other_element_key=other_element.getKey();\n      Long other_element_value=other_element.getValue();\n      String __this__success_copy_key=other_element_key;\n      Long __this__success_copy_value=other_element_value;\n      __this__success.put(__this__success_copy_key,__this__success_copy_value);\n    }\n    this.success=__this__success;\n  }\n}\n",
      "formalParam": [
        "getCounters_result"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Long>.HashMap<String,Long>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Long>.entrySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Long>.put(java.lang.String,java.lang.Long)",
            "_throws": [],
            "_returns": "java.lang.Long",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/storm-contrib/storm-scribe/src/jvm/storm/scribe/generated/FacebookService.java",
      "types": [
        "String",
        "Long",
        "Set",
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "put",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Long>.HashMap<String,Long>()",
            "java.util.Map<java.lang.String,java.lang.Long>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.Long>.put(java.lang.String,java.lang.Long)"
          ]
        }
      ],
      "keywords": [
        "map",
        "long",
        "util",
        "java",
        "hash",
        "entry",
        "set",
        "string",
        "put"
      ]
    },
    {
      "method": "testGetElements024@3704",
      "body": "/** \n * Test method for 'org.apache.harmony.swing.tests.javax.swing.text.parser.ContentModel.getElements(Vector)' ContentModel(0,null) parameter: new Vector() expected: null\n */\npublic void testGetElements024(){\n  cm=new ContentModel(0,null);\n  Vector v=new Vector();\n  cm.getElements(v);\n  assertEquals(\"[null]\",v.toString());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.html.parser.ContentModel.ContentModel(int,javax.swing.text.html.parser.ContentModel)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.text.html.parser.ContentModel.getElements(java.util.Vector)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/test/api/java.injected/org/apache/harmony/swing/tests/javax/swing/text/parser/ContentModelCompatilityTest.java",
      "types": [
        "Integer",
        "text",
        "String",
        "Vector"
      ],
      "apicalls": [
        "toString",
        "getElements"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.html.parser.ContentModel.ContentModel(int,javax.swing.text.html.parser.ContentModel)",
            "java.util.Vector.Vector()",
            "javax.swing.text.html.parser.ContentModel.getElements(java.util.Vector)",
            "java.util.Vector.toString()"
          ]
        }
      ],
      "keywords": [
        "swing",
        "html",
        "elements",
        "javax",
        "vector",
        "java",
        "integer",
        "util",
        "parser",
        "text",
        "model",
        "get",
        "content",
        "string"
      ]
    },
    {
      "method": "fuelleMitZeichen@187",
      "body": "public static String fuelleMitZeichen(String string,String zeichen,boolean vorne,int endlang){\n  String orig=string;\n  String praefi=zeichen;\n  String dummy=\"\";\n  String sret=\"\";\n  int solllang=endlang;\n  int istlang=orig.length();\n  int differenz=solllang - istlang;\n  if (differenz > 0) {\n    for (int i=0; i < differenz; i++) {\n      dummy=dummy + praefi;\n    }\n    if (vorne) {\n      sret=dummy + orig;\n    }\n else {\n      sret=orig + dummy;\n    }\n  }\n else {\n    sret=new String(orig);\n  }\n  return sret;\n}\n",
      "formalParam": [
        "String",
        "String",
        "boolean",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/thera-pi-2/TextB/src/Tools/StringTools.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.String(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "length",
        "string",
        "java",
        "lang",
        "integer"
      ]
    },
    {
      "method": "DockWrapper@89",
      "body": "public DockWrapper(BasicDockPanel dp){\n  dockPanel=dp;\n  setLayout(new BorderLayout());\n  setOpaque(false);\n}\n",
      "formalParam": [
        "BasicDockPanel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.BorderLayout.BorderLayout()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openmap/src/openmap/com/bbn/openmap/gui/dock/DockWrapper.java",
      "types": [
        "LayoutManager",
        "BorderLayout",
        "Boolean",
        "JComponent",
        "Container"
      ],
      "apicalls": [
        "setOpaque",
        "setLayout"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.BorderLayout.BorderLayout()",
            "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "javax.swing.JComponent.setOpaque(boolean)"
          ]
        }
      ],
      "keywords": [
        "component",
        "opaque",
        "set",
        "javax",
        "boolean",
        "manager",
        "layout",
        "swing",
        "container",
        "awt",
        "java",
        "j",
        "border"
      ]
    },
    {
      "method": "badPollAfter@469",
      "body": "public BAD_INV_ORDER badPollAfter(){\n  return badPollAfter(CompletionStatus.COMPLETED_NO,null);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "BAD_INV_ORDER",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/OMGSystemException.java",
      "types": [
        "Boolean",
        "Logger",
        "Throwable",
        "Level"
      ],
      "apicalls": [
        "initCause",
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "init",
        "loggable",
        "util",
        "lang",
        "boolean",
        "java",
        "logging",
        "cause",
        "level",
        "logger",
        "throwable"
      ]
    },
    {
      "method": "valueChanged@132",
      "body": "@Override public void valueChanged(ListSelectionEvent e){\n  final JList list=(JList)e.getSource();\n  selectedCrsInfo=(CrsInfo)list.getSelectedValue();\n  if (selectedCrsInfo != null) {\n    try {\n      setInfoText(selectedCrsInfo.getDescription());\n    }\n catch (    Exception e1) {\n      String message=e1.getMessage();\n      if (message != null) {\n        setInfoText(\"Error while creating CRS:\\n\\n\" + message);\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "ListSelectionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "javax.swing.text.JTextComponent.setCaretPosition(int)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "javax.swing.text.JTextComponent.setCaretPosition(int)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/beam/beam-ui/src/main/java/org/esa/beam/framework/ui/crs/PredefinedCrsPanel.java",
      "types": [
        "String",
        "JTextComponent",
        "Integer",
        "Throwable"
      ],
      "apicalls": [
        "setText",
        "getMessage",
        "setCaretPosition"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.text.JTextComponent.setCaretPosition(int)"
          ]
        },
        {
          "calls": [
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.text.JTextComponent.setCaretPosition(int)",
            "java.lang.Throwable.getMessage()",
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.text.JTextComponent.setCaretPosition(int)"
          ]
        }
      ],
      "keywords": [
        "set",
        "java",
        "string",
        "javax",
        "get",
        "caret",
        "swing",
        "j",
        "message",
        "throwable",
        "integer",
        "lang",
        "text",
        "position",
        "component"
      ]
    },
    {
      "method": "findColumn@48",
      "body": "public int findColumn(final String columnName){\n  int result=-1;\n  for (int i=0; i < columnName.length(); i++) {\n    int index=letterToIndex(columnName.charAt(i));\n    if (index == -1) {\n      return -1;\n    }\n    result=26 * (result + 1) + index;\n  }\n  return result < getColumnCount() ? result : -1;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "javax.swing.table.TableModel.getColumnCount()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/main/java/common/javax/swing/table/AbstractTableModel.java",
      "types": [
        "Character",
        "String",
        "Integer",
        "TableModel"
      ],
      "apicalls": [
        "getColumnCount",
        "charAt",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.String.length()",
            "javax.swing.table.TableModel.getColumnCount()"
          ]
        }
      ],
      "keywords": [
        "string",
        "char",
        "java",
        "lang",
        "integer",
        "model",
        "javax",
        "get",
        "count",
        "table",
        "length",
        "character",
        "swing",
        "column"
      ]
    },
    {
      "method": "testCleanBuild@116",
      "body": "public void testCleanBuild() throws Exception {\n  File file=File.createTempFile(\"index_bp\",\".js\");\n  file.deleteOnExit();\n  final URI uri=file.getParentFile().toURI();\n  final IndexManager indexManager=context.mock(IndexManager.class);\n  IndexBuildParticipant p=new IndexBuildParticipant(){\n    @Override protected URI getURI(    IProject project){\n      return uri;\n    }\n    @Override protected IndexManager getIndexManager(){\n      return indexManager;\n    }\n  }\n;\n  context.checking(new Expectations(){\n{\n      oneOf(indexManager).removeIndex(uri);\n    }\n  }\n);\n  p.clean(null,new NullProgressMonitor());\n  context.assertIsSatisfied();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.deleteOnExit()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getParentFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.toURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/studio3/tests/com.aptana.buildpath.core.tests/src/com/aptana/core/internal/build/IndexBuildParticipantTest.java",
      "types": [
        "URI",
        "String",
        "IOException",
        "File"
      ],
      "apicalls": [
        "createTempFile",
        "deleteOnExit",
        "toURI",
        "getParentFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "java.io.File.deleteOnExit()",
            "java.io.File.getParentFile()",
            "java.io.File.toURI()"
          ]
        }
      ],
      "keywords": [
        "file",
        "exit",
        "create",
        "exception",
        "get",
        "temp",
        "delete",
        "parent",
        "io",
        "uri",
        "java",
        "string"
      ]
    },
    {
      "method": "getElapsed@174",
      "body": "/** \n * Gets elapsed time from the specified parent stopwatch with the specified  task title.\n * @param taskTitle the specified task title\n * @return <ul> <li> {@link Stopwatch#getElapsedTime() elapsed time} of the found task if it  {@link Stopwatch#isEnded() is ended}</li> <li> {@link System#currentTimeMillis() the current time} subtracts{@link Stopwatch#startTime the start time} of the found task if it {@link Stopwatch#isRunning() is running} </li><li> {@code -1} if not found any stopwatch corresponding to the specified task title</li> </ul>\n */\npublic static long getElapsed(final String taskTitle){\n  final long currentTimeMillis=System.currentTimeMillis();\n  if (Strings.isEmptyOrNull(taskTitle)) {\n    return -1;\n  }\n  final Stopwatch root=STOPWATCH.get();\n  if (null == root) {\n    return -1;\n  }\n  final Stopwatch stopwatch=get(root,taskTitle);\n  if (null == stopwatch) {\n    return -1;\n  }\n  if (stopwatch.isEnded()) {\n    return stopwatch.getElapsedTime();\n  }\n  return currentTimeMillis - stopwatch.getStartTime();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.ThreadLocal<Tau_T>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/b3log-latke/latke/src/main/java/org/b3log/latke/util/Stopwatchs.java",
      "types": [
        "Boolean",
        "Collections",
        "String",
        "ThreadLocal",
        "Long",
        "Object",
        "List",
        "System"
      ],
      "apicalls": [
        "unmodifiableList",
        "currentTimeMillis",
        "get",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.ThreadLocal<Tau_T>.get()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "millis",
        "equals",
        "current",
        "unmodifiable",
        "lang",
        "long",
        "object",
        "system",
        "local",
        "get",
        "collections",
        "time",
        "boolean",
        "list",
        "java",
        "thread",
        "util",
        "string"
      ]
    },
    {
      "method": "lastModified@128",
      "body": "public long lastModified(){\n  return getMemoryFile().getLastModified();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          },
          {
            "_call": "java.util.TreeMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "node": "DAPICall",
            "_returns": "Tau_V",
            "_throws": []
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/frostwire-desktop/lib/jars-src/h2-1.3.164/org/h2/store/fs/FilePathMem.java",
      "types": [
        "TreeMap",
        "Object"
      ],
      "apicalls": [
        "get",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.TreeMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "get",
        "util",
        "object",
        "java",
        "map",
        "tree",
        "put"
      ]
    },
    {
      "method": "DefaultValidator@46",
      "body": "public DefaultValidator(){\n  rulesToFixes=new HashMap<Class<? extends Rule>,List<Class<? extends Fix>>>();\n  rulesOrder=new ArrayList<Class<? extends Rule>>();\n  loadDefaultRules();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/any23/core/src/main/java/org/apache/any23/validator/DefaultValidator.java",
      "types": [
        "HashMap",
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "list",
        "util",
        "map",
        "java",
        "hash",
        "array"
      ]
    },
    {
      "method": "AsyncJsonApi@30",
      "body": "/** \n * Creates a new AsyncJsonApi with a given JsonClient and base Url.\n * @param baseUrl the base url of the API\n * @param client the JsonClient to pass calls to.\n */\npublic AsyncJsonApi(String baseUrl,JsonClient client){\n  this.baseUrl=baseUrl;\n  this.client=client;\n  exec=new ThreadPoolExecutor(2,20,60,TimeUnit.MINUTES,new ArrayBlockingQueue<Runnable>(50),new ThreadFactory(){\n    @Override public Thread newThread(    Runnable r){\n      Thread t=new Thread(r);\n      t.setDaemon(true);\n      return t;\n    }\n  }\n);\n  universalCallBacks=new ArrayList<CallBack>();\n  constantParams=new HashMap<String,String>();\n}\n",
      "formalParam": [
        "String",
        "JsonClient"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>.ArrayBlockingQueue<Runnable>(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/CIAPI.Java/src/JsonClient/src/main/java/JsonClient/Java/async/AsyncJsonApi.java",
      "types": [
        "BlockingQueue",
        "String",
        "Integer",
        "Runnable",
        "ThreadPoolExecutor",
        "TimeUnit",
        "HashMap",
        "ArrayList",
        "ThreadFactory",
        "Long",
        "ArrayBlockingQueue"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>.ArrayBlockingQueue<Runnable>(int)",
            "java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()"
          ]
        }
      ],
      "keywords": [
        "executor",
        "unit",
        "concurrent",
        "string",
        "factory",
        "map",
        "list",
        "util",
        "integer",
        "time",
        "blocking",
        "runnable",
        "array",
        "pool",
        "hash",
        "queue",
        "thread",
        "long",
        "java"
      ]
    },
    {
      "method": "logClasses@469",
      "body": "public void logClasses(String title){\n  logln(title);\n  for (int i=0; i < loadedClasses.size(); i++) {\n    logln(\"    \" + loadedClasses.elementAt(i));\n  }\n  logln(\"\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Vector.elementAt(int)",
                "node": "DAPICall",
                "_returns": "java.lang.Object",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/java/util/ResourceBundle/Bug4168625Test.java",
      "types": [
        "Integer",
        "Object",
        "Vector"
      ],
      "apicalls": [
        "size",
        "elementAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.elementAt(int)",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "element",
        "java",
        "integer",
        "vector",
        "size",
        "util",
        "object"
      ]
    },
    {
      "method": "getWidth@262",
      "body": "public int getWidth(LinkedList<Component> list){\n  if (list == null) {\n    return 0;\n  }\n  if (list.size() == 1) {\n    return getDimensions(list.get(0)).width;\n  }\n  int width=0;\n  for (  Component c : list) {\n    if (list.contains(c)) {\n      width+=getDimensions(c).width;\n    }\n  }\n  width+=(list.size() - 1) * hgap;\n  return width;\n}\n",
      "formalParam": [
        "LinkedList<Component>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.awt.Component>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.LinkedList<java.awt.Component>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.LinkedList<java.awt.Component>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "int",
      "file": "./java_projects/IntelliRS/src/com/galkon/swing/impl/RelativeLayout.java",
      "types": [
        "LinkedList",
        "Component",
        "Boolean",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "contains",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.awt.Component>.size()",
            "java.util.LinkedList<java.awt.Component>.contains(java.lang.Object)",
            "java.util.LinkedList<java.awt.Component>.size()"
          ]
        }
      ],
      "keywords": [
        "component",
        "list",
        "size",
        "java",
        "object",
        "contains",
        "integer",
        "util",
        "linked",
        "boolean"
      ]
    },
    {
      "method": "setCustomImageNaming@435",
      "body": "public void setCustomImageNaming(boolean b){\n  if (userPrefs != null)   userPrefs.node(\"UI\").putBoolean(\"customImageNaming\",b);\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.prefs.Preferences.node(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.prefs.Preferences"
          },
          {
            "_call": "java.util.prefs.Preferences.putBoolean(java.lang.String,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openmicroscopy/components/blitz/src/ome/formats/importer/util/IniFileLoader.java",
      "types": [
        "Boolean",
        "Preferences",
        "String"
      ],
      "apicalls": [
        "putBoolean",
        "node"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.prefs.Preferences.node(java.lang.String)",
            "java.util.prefs.Preferences.putBoolean(java.lang.String,boolean)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "preferences",
        "node",
        "prefs",
        "string",
        "put",
        "boolean"
      ]
    },
    {
      "method": "enqueueFile@47",
      "body": "@Override public File enqueueFile(File source,String suffix,boolean regrabbing) throws QueueFileException, InterruptedException {\n  File target=generateUniqueFile(suffix,regrabbing);\n  long size=source.length();\n  try (FileInputStream is=new FileInputStream(source);FileOutputStream os=new FileOutputStream(target)){\n    byte[] buffer=new byte[(int)Math.min(size,8192)];\n    int nosRead;\n    long totalRead=0;\n    while ((nosRead=is.read(buffer,0,buffer.length)) > 0) {\n      os.write(buffer,0,nosRead);\n      totalRead+=nosRead;\n    }\n    if (totalRead != size) {\n      LOG.error(\"Copied file size discrepancy - initial file size was \" + size + \"bytes but we copied \"+ totalRead+ \" bytes\");\n    }\n else     if (size != source.length()) {\n      LOG.error(\"File size changed during copy - initial file size was \" + size + \"bytes and current size is \"+ source.length());\n    }\n    LOG.info(\"Copied \" + totalRead + \" bytes from \"+ source+ \" to \"+ target);\n    return target;\n  }\n catch (  IOException ex) {\n    throw new QueueFileException(\"Problem while copying file to queue\",ex);\n  }\n}\n",
      "formalParam": [
        "File",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.length()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.FileOutputStream.write(byte[],int,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.io.FileInputStream.read(byte[],int,int)",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          },
          {
            "_call": "java.io.File.length()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/CMM-data-grabber/paul/src/main/java/au/edu/uq/cmm/paul/queue/CopyingQueueFileManager.java",
      "types": [
        "Integer",
        "IOException",
        "FileInputStream",
        "File",
        "Byte",
        "Long",
        "FileOutputStream"
      ],
      "apicalls": [
        "length",
        "read",
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.length()",
            "java.io.FileInputStream.read(byte[],int,int)",
            "java.io.FileOutputStream.write(byte[],int,int)",
            "java.io.FileInputStream.read(byte[],int,int)",
            "java.io.File.length()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "length",
        "input",
        "output",
        "byte",
        "java",
        "long",
        "io",
        "exception",
        "read",
        "file",
        "stream",
        "write"
      ]
    },
    {
      "method": "hasNext@47",
      "body": "/** \n * Returns value of  {@link BufferedReader#ready()}. Catches {@link IOException} and returns false.\n * @see java.util.Iterator#hasNext()\n */\n@Override public boolean hasNext(){\n  try {\n    return this.bufferedReader.ready();\n  }\n catch (  final IOException e) {\n    log.log(Level.WARNING,e.getMessage(),e);\n    return false;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.BufferedReader.ready()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ajah/ajah-util/src/main/java/com/ajah/util/io/file/BufferedReaderIterator.java",
      "types": [
        "Throwable",
        "BufferedReader",
        "String",
        "IOException",
        "Boolean"
      ],
      "apicalls": [
        "ready",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedReader.ready()",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.io.BufferedReader.ready()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "lang",
        "reader",
        "java",
        "io",
        "message",
        "boolean",
        "get",
        "buffered",
        "string",
        "ready",
        "exception"
      ]
    },
    {
      "method": "getRelevantSPINPropertiesOfClass@122",
      "body": "public static Set<Property> getRelevantSPINPropertiesOfClass(Resource cls,Set<Object> validFunctionSources){\n  if (SP.exists(cls.getModel())) {\n    List<QueryOrTemplateCall> qots=new ArrayList<QueryOrTemplateCall>();\n    SPINUtil.addQueryOrTemplateCalls(cls,SPIN.constraint,qots);\n    Set<Property> results=new HashSet<Property>();\n    for (    QueryOrTemplateCall qot : qots) {\n      addProperties(qot,results,validFunctionSources);\n    }\n    return results;\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [
        "Resource",
        "Set<Object>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Set<Property>",
      "file": "./java_projects/spin/spin-api/src/main/java/org/topbraid/spin/util/RelevantProperties.java",
      "types": [
        "ArrayList",
        "HashSet"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashSet<Tau_E>.HashSet()"
          ]
        }
      ],
      "keywords": [
        "set",
        "util",
        "list",
        "hash",
        "java",
        "array"
      ]
    },
    {
      "method": "getIds@126",
      "body": "@Override public Object[] getIds(){\n  if (this == thePrototypeInstance)   return super.getIds();\n  return collectIds();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperties()",
            "_throws": [],
            "_returns": "java.util.Properties",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.Object,java.lang.Object>.keySet()",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Set.toArray()",
            "_throws": [],
            "_returns": "java.lang.Object[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Object[]",
      "file": "./java_projects/jermaine/lib/rhino/toolsrc/org/mozilla/javascript/tools/shell/Environment.java",
      "types": [
        "Properties",
        "Map",
        "Set",
        "Object",
        "System"
      ],
      "apicalls": [
        "getProperties",
        "keySet",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperties()",
            "java.util.Map<java.lang.Object,java.lang.Object>.keySet()",
            "java.util.Set.toArray()"
          ]
        }
      ],
      "keywords": [
        "get",
        "java",
        "lang",
        "system",
        "array",
        "util",
        "map",
        "properties",
        "key",
        "set",
        "object"
      ]
    },
    {
      "method": "setAccessibleName@418",
      "body": "/** \n * Sets the localized accessible name of this object.  Changing the name will cause a PropertyChangeEvent to be fired for the ACCESSIBLE_NAME_PROPERTY property.\n * @param s the new localized name of the object.\n * @see #getAccessibleName\n * @see #addPropertyChangeListener\n * @beaninfo preferred:   true description: Sets the accessible name for the component.\n */\npublic void setAccessibleName(String s){\n  String oldName=accessibleName;\n  accessibleName=s;\n  firePropertyChange(ACCESSIBLE_NAME_PROPERTY,oldName,accessibleName);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.beans.PropertyChangeSupport.firePropertyChange(java.beans.PropertyChangeEvent)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [
              {
                "_call": "java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/accessibility/AccessibleContext.java",
      "types": [
        "PropertyChangeSupport",
        "String",
        "Object",
        "PropertyChangeEvent"
      ],
      "apicalls": [
        "firePropertyChange"
      ],
      "sequences": [
        {
          "calls": [
            "java.beans.PropertyChangeSupport.firePropertyChange(java.beans.PropertyChangeEvent)"
          ]
        },
        {
          "calls": [
            "java.beans.PropertyChangeSupport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "event",
        "change",
        "beans",
        "java",
        "property",
        "fire",
        "string",
        "object",
        "support"
      ]
    },
    {
      "method": "testWriteTo@203",
      "body": "public void testWriteTo() throws IOException, InterruptedException {\n  FSInputStream fsin=new MockFSInputStream();\n  ByteArrayOutputStream os=new ByteArrayOutputStream();\n  int[] pairs=new int[]{0,10000,50,100,50,6000,1000,2000,0,1,0,0,5000,0};\n  assertTrue(\"Pairs array must be even\",pairs.length % 2 == 0);\n  for (int i=0; i < pairs.length; i+=2) {\n    StreamFile.writeTo(fsin,os,pairs[i],pairs[i + 1]);\n    assertArrayEquals(\"Reading \" + pairs[i + 1] + \" bytes from offset \"+ pairs[i],getOutputArray(pairs[i],pairs[i + 1]),os.toByteArray());\n    os.reset();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.reset()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-hdfs/src/test/hdfs/org/apache/hadoop/hdfs/server/namenode/TestStreamFile.java",
      "types": [
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "reset",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayOutputStream.reset()"
          ]
        }
      ],
      "keywords": [
        "reset",
        "output",
        "byte",
        "io",
        "java",
        "array",
        "stream"
      ]
    },
    {
      "method": "BenchThroughputLatency@81",
      "body": "public BenchThroughputLatency(int ensemble,int writeQuorumSize,int ackQuorumSize,byte[] passwd,int numberOfLedgers,int sendLimit,ClientConfiguration conf) throws KeeperException, IOException, InterruptedException {\n  this.sem=new Semaphore(conf.getThrottleValue());\n  bk=new BookKeeper(conf);\n  this.counter=new AtomicLong(0);\n  this.numberOfLedgers=numberOfLedgers;\n  this.sendLimit=sendLimit;\n  this.latencies=new long[sendLimit];\n  try {\n    lh=new LedgerHandle[this.numberOfLedgers];\n    for (int i=0; i < this.numberOfLedgers; i++) {\n      lh[i]=bk.createLedger(ensemble,writeQuorumSize,ackQuorumSize,BookKeeper.DigestType.CRC32,passwd);\n      LOG.debug(\"Ledger Handle: \" + lh[i].getId());\n    }\n  }\n catch (  BKException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "int",
        "int",
        "int",
        "byte[]",
        "int",
        "int",
        "ClientConfiguration"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.Semaphore.Semaphore(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicLong.AtomicLong(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/bookkeeper/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java",
      "types": [
        "Integer",
        "Long",
        "concurrent",
        "Semaphore"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.Semaphore.Semaphore(int)",
            "java.util.concurrent.atomic.AtomicLong.AtomicLong(long)"
          ]
        }
      ],
      "keywords": [
        "util",
        "concurrent",
        "java",
        "long",
        "integer",
        "atomic",
        "semaphore"
      ]
    },
    {
      "method": "lookup@183",
      "body": "@Override public Object lookup(Name name) throws NamingException {\n  if (name.isEmpty()) {\n    return this;\n  }\n  Object objectRef=firstLookup(name);\n  if (objectRef instanceof LinkRef) {\n    objectRef=lookup(((LinkRef)objectRef).getLinkName());\n  }\n  if (objectRef instanceof Reference) {\n    try {\n      objectRef=NamingManager.getObjectInstance(objectRef,name,null,getEnvironment());\n    }\n catch (    NamingException ne) {\n      throw ne;\n    }\ncatch (    Exception ex) {\n      throw (NamingException)new NamingException(\"Unable to look up name, \\\"\" + name + \"\\\"\").initCause(ex);\n    }\n  }\n  if (objectRef == null) {\n    throw new NameNotFoundException(\"Could not find name \" + name);\n  }\n  return objectRef;\n}\n",
      "formalParam": [
        "Name"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.naming.Name.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "javax.naming.Context.lookup(javax.naming.Name)",
            "_throws": [
              "javax.naming.NamingException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/repose/project-set/core/core-lib/src/main/java/com/rackspace/papi/service/naming/LocalContext.java",
      "types": [
        "String",
        "Name",
        "Map",
        "NamingException",
        "Object",
        "Boolean",
        "Context"
      ],
      "apicalls": [
        "lookup",
        "get",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "javax.naming.Name.isEmpty()",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "javax.naming.Context.lookup(javax.naming.Name)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "map",
        "util",
        "exception",
        "name",
        "string",
        "java",
        "object",
        "lookup",
        "empty",
        "get",
        "boolean",
        "context",
        "naming"
      ]
    },
    {
      "method": "visitExceptionInfo@349",
      "body": "public void visitExceptionInfo(Clazz clazz,Method method,CodeAttribute codeAttribute,ExceptionInfo exceptionInfo){\n  int startPC=Math.max(exceptionInfo.u2startPC,clipStart);\n  int endPC=Math.min(exceptionInfo.u2endPC,clipEnd);\n  int handlerPC=exceptionInfo.u2handlerPC;\n  int catchType=exceptionInfo.u2catchType;\n  for (int offset=startPC; offset < endPC; offset++) {\n    if (branchTargetFinder.isSubroutineInvocation(offset)) {\n      Instruction instruction=InstructionFactory.create(codeAttribute.code,offset);\n      int instructionLength=instruction.length(offset);\n      if (!exceptionInfo.isApplicable(offset + ((BranchInstruction)instruction).branchOffset)) {\n        if (DEBUG) {\n          System.out.println(\"  Appending extra exception [\" + startPC + \" -> \"+ offset+ \"] -> \"+ handlerPC);\n        }\n        codeAttributeComposer.appendException(new ExceptionInfo(startPC,offset,handlerPC,catchType));\n        startPC=offset + instructionLength;\n      }\n    }\n  }\n  if (DEBUG) {\n    if (startPC == exceptionInfo.u2startPC && endPC == exceptionInfo.u2endPC) {\n      System.out.println(\"  Appending exception [\" + startPC + \" -> \"+ endPC+ \"] -> \"+ handlerPC);\n    }\n else {\n      System.out.println(\"  Appending clipped exception [\" + exceptionInfo.u2startPC + \" -> \"+ exceptionInfo.u2endPC+ \"] ~> [\"+ startPC+ \" -> \"+ endPC+ \"] -> \"+ handlerPC);\n    }\n  }\n  codeAttributeComposer.appendException(new ExceptionInfo(startPC,endPC,handlerPC,catchType));\n}\n",
      "formalParam": [
        "Clazz",
        "Method",
        "CodeAttribute",
        "ExceptionInfo"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.max(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_external_proguard/src/proguard/preverify/CodeSubroutineInliner.java",
      "types": [
        "Integer",
        "String",
        "Math",
        "Character",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "max",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "max",
        "math",
        "io",
        "string",
        "character",
        "println",
        "java",
        "min",
        "print",
        "integer",
        "stream",
        "lang"
      ]
    },
    {
      "method": "testToBigIntegerNeg3@280",
      "body": "/** \n * Convert a negative BigDecimal to BigInteger\n */\npublic void testToBigIntegerNeg3(){\n  String a=\"-123809648392384754573567356745735.63567890295784902768787678287E+45\";\n  BigInteger bNumber=new BigInteger(\"-123809648392384754573567356745735635678902957849027687876782870000000000000000\");\n  BigDecimal aNumber=new BigDecimal(a);\n  BigInteger result=aNumber.toBigInteger();\n  assertTrue(\"incorrect value\",result.equals(bNumber));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigDecimal.BigDecimal(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigDecimal.toBigInteger()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.math.BigInteger"
          },
          {
            "_call": "java.math.BigInteger.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/math/src/test/java/org/apache/harmony/tests/java/math/BigDecimalConvertTest.java",
      "types": [
        "Object",
        "BigInteger",
        "Boolean",
        "BigDecimal",
        "String"
      ],
      "apicalls": [
        "equals",
        "toBigInteger"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(java.lang.String)",
            "java.math.BigDecimal.BigDecimal(java.lang.String)",
            "java.math.BigDecimal.toBigInteger()",
            "java.math.BigInteger.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "big",
        "math",
        "object",
        "boolean",
        "decimal",
        "integer",
        "java",
        "equals"
      ]
    },
    {
      "method": "trainModel@355",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileWriter.FileWriter(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.Writer.write(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.OutputStreamWriter.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/opennlp/opennlp-tools/src/main/java/opennlp/tools/coref/sim/SimilarityModel.java",
      "body": "/** \n * Train a model based on the previously supplied evidence.\n * @see #setExtents(Context[])\n */\npublic void trainModel() throws IOException {\n  if (debugOn) {\n    FileWriter writer=new FileWriter(modelName + \".events\");\n    for (Iterator<Event> ei=events.iterator(); ei.hasNext(); ) {\n      Event e=ei.next();\n      writer.write(e.toString() + \"\\n\");\n    }\n    writer.close();\n  }\n  (new SuffixSensitiveGISModelWriter(GIS.trainModel(new CollectionEventStream(events),100,10),new File(modelName + modelExtension))).persist();\n}\n",
      "types": [
        "OutputStreamWriter",
        "IOException",
        "Writer",
        "Character",
        "String",
        "FileWriter",
        "File"
      ],
      "apicalls": [
        "write",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileWriter.FileWriter(java.lang.String)",
            "java.io.Writer.write(char[])",
            "java.io.OutputStreamWriter.close()",
            "java.io.File.File(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "exception",
        "writer",
        "string",
        "close",
        "file",
        "output",
        "character",
        "io",
        "java",
        "write"
      ]
    },
    {
      "method": "ExtAudioRecorder@185",
      "body": "/** \n * Default constructor Instantiates a new recorder, in case of compressed recording the parameters can be left as 0. In case of errors, no exception is thrown, but the state is set to ERROR\n */\npublic ExtAudioRecorder(boolean uncompressed,int audioSource,int sampleRate,int channelConfig,int audioFormat){\n  try {\n    rUncompressed=uncompressed;\n    if (rUncompressed) {\n      if (audioFormat == AudioFormat.ENCODING_PCM_16BIT) {\n        bSamples=16;\n      }\n else {\n        bSamples=8;\n      }\n      if (channelConfig == AudioFormat.CHANNEL_CONFIGURATION_MONO) {\n        nChannels=1;\n      }\n else {\n        nChannels=2;\n      }\n      aSource=audioSource;\n      sRate=sampleRate;\n      aFormat=audioFormat;\n      framePeriod=sampleRate * TIMER_INTERVAL / 1000;\n      bufferSize=framePeriod * 2 * bSamples* nChannels / 8;\n      if (bufferSize < AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat)) {\n        bufferSize=AudioRecord.getMinBufferSize(sampleRate,channelConfig,audioFormat);\n        framePeriod=bufferSize / (2 * bSamples * nChannels / 8);\n        Log.w(ExtAudioRecorder.class.getName(),\"Increasing buffer size to \" + Integer.toString(bufferSize));\n      }\n      audioRecorder=new AudioRecord(audioSource,sampleRate,channelConfig,audioFormat,bufferSize);\n      if (audioRecorder.getState() != AudioRecord.STATE_INITIALIZED)       throw new Exception(\"AudioRecord initialization failed\");\n      audioRecorder.setRecordPositionUpdateListener(updateListener);\n      audioRecorder.setPositionNotificationPeriod(framePeriod);\n    }\n else {\n      mediaRecorder=new MediaRecorder();\n      mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\n      mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);\n      mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);\n    }\n    cAmplitude=0;\n    filePath=null;\n    state=State.INITIALIZING;\n  }\n catch (  Exception e) {\n    if (e.getMessage() != null) {\n      Log.e(ExtAudioRecorder.class.getName(),e.getMessage());\n    }\n else {\n      Log.e(ExtAudioRecorder.class.getName(),\"Unknown error occured while initializing recording\");\n    }\n    state=State.ERROR;\n  }\n}\n",
      "formalParam": [
        "boolean",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "node": "DBranch",
                "_else": [
                  {
                    "_call": "java.lang.Class<Tau_T>.getName()",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.lang.Throwable.getMessage()",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  }
                ],
                "_then": [
                  {
                    "_call": "java.lang.Class<Tau_T>.getName()",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  },
                  {
                    "_call": "java.lang.Throwable.getMessage()",
                    "node": "DAPICall",
                    "_returns": "java.lang.String",
                    "_throws": []
                  }
                ]
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.Integer.toString(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/mrapp/app/src/info/guardianproject/mrapp/media/ExtAudioRecorder.java",
      "types": [
        "String",
        "Throwable",
        "Integer",
        "Class"
      ],
      "apicalls": [
        "toString",
        "getMessage",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Integer.toString(int)",
            "java.lang.Throwable.getMessage()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Integer.toString(int)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Integer.toString(int)",
            "java.lang.Throwable.getMessage()",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "class",
        "get",
        "java",
        "message",
        "string",
        "lang",
        "name",
        "integer"
      ]
    },
    {
      "method": "columnRemoved@2833",
      "body": "/** \n * Invoked when the column is removed. Revalidates and repains the table.\n */\npublic void columnRemoved(TableColumnModelEvent event){\n  revalidate();\n  repaint();\n}\n",
      "formalParam": [
        "TableColumnModelEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.revalidate()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.repaint()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/classpath/javax/swing/JTable.java",
      "types": [
        "JComponent",
        "Component"
      ],
      "apicalls": [
        "repaint",
        "revalidate"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.revalidate()",
            "java.awt.Component.repaint()"
          ]
        }
      ],
      "keywords": [
        "swing",
        "awt",
        "javax",
        "java",
        "repaint",
        "j",
        "component",
        "revalidate"
      ]
    },
    {
      "method": "testBug37011@1093",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.StringWriter.write(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cdt/core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/scanner/PortedScannerTests.java",
      "body": "public void testBug37011() throws Exception {\n  StringWriter writer=new StringWriter();\n  writer.write(\"#define A \\\"//\\\"\");\n  initializeScanner(writer.toString());\n  validateEOF();\n  validateDefinition(\"A\",\"\\\"//\\\"\");\n}\n",
      "types": [
        "StringWriter",
        "String"
      ],
      "apicalls": [
        "write",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.write(java.lang.String)",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "writer",
        "io",
        "string",
        "write"
      ]
    },
    {
      "method": "listOptions@150",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Vector.elements()",
            "node": "DAPICall",
            "_returns": "java.util.Enumeration",
            "_throws": []
          }
        ]
      },
      "returnType": "Enumeration",
      "file": "./java_projects/weka/weka/src/main/java/weka/attributeSelection/SignificanceAttributeEval.java",
      "body": "/** \n * Returns an enumeration describing the available options.\n * @return an enumeration of all the available options.\n */\npublic Enumeration listOptions(){\n  Vector newVector=new Vector(1);\n  newVector.addElement(new Option(\"\\ttreat missing values as a separate \" + \"value.\",\"M\",0,\"-M\"));\n  return newVector.elements();\n}\n",
      "types": [
        "Vector",
        "Integer",
        "Enumeration",
        "Object"
      ],
      "apicalls": [
        "addElement",
        "elements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector(int)",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.elements()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "enumeration",
        "vector",
        "add",
        "element",
        "elements",
        "object",
        "util",
        "java"
      ]
    },
    {
      "method": "createOrder@249",
      "body": "public OrderDTO createOrder(Integer itemId,Double quantity) throws TaskException {\n  BigDecimal quant=new BigDecimal(quantity).setScale(Constants.BIGDECIMAL_SCALE,Constants.BIGDECIMAL_ROUND);\n  return createOrder(itemId,quant);\n}\n",
      "formalParam": [
        "Integer",
        "Double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigDecimal.BigDecimal(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.math.BigDecimal.setScale(int,java.math.RoundingMode)",
            "node": "DAPICall",
            "_returns": "java.math.BigDecimal",
            "_throws": []
          }
        ]
      },
      "returnType": "OrderDTO",
      "file": "./java_projects/SeavusJB3/src/java/com/sapienter/jbilling/server/item/tasks/RulesItemManager.java",
      "types": [
        "BigDecimal",
        "Integer",
        "Character",
        "RoundingMode"
      ],
      "apicalls": [
        "setScale"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigDecimal.BigDecimal(char[])",
            "java.math.BigDecimal.setScale(int,java.math.RoundingMode)"
          ]
        }
      ],
      "keywords": [
        "scale",
        "math",
        "big",
        "character",
        "rounding",
        "mode",
        "decimal",
        "integer",
        "java",
        "set"
      ]
    },
    {
      "method": "execute@43",
      "body": "public void execute(ConfigurationContext configCtx) throws ClusteringFault {\n  ClusteringAgent clusteringAgent=configCtx.getAxisConfiguration().getClusteringAgent();\n  if (clusteringAgent == null) {\n    return;\n  }\n  StateManager stateManager=clusteringAgent.getStateManager();\n  if (stateManager != null) {\n    Map excludedPropPatterns=stateManager.getReplicationExcludePatterns();\n    List<StateClusteringCommand> cmdList=new ArrayList<StateClusteringCommand>();\n    String[] sgCtxIDs=configCtx.getServiceGroupContextIDs();\n    for (    String sgCtxID : sgCtxIDs) {\n      ServiceGroupContext sgCtx=configCtx.getServiceGroupContext(sgCtxID);\n      StateClusteringCommand updateServiceGroupCtxCmd=StateClusteringCommandFactory.getUpdateCommand(sgCtx,excludedPropPatterns,true);\n      if (updateServiceGroupCtxCmd != null) {\n        cmdList.add(updateServiceGroupCtxCmd);\n      }\n      if (sgCtx.getServiceContexts() != null) {\n        for (Iterator iter2=sgCtx.getServiceContexts(); iter2.hasNext(); ) {\n          ServiceContext serviceCtx=(ServiceContext)iter2.next();\n          StateClusteringCommand updateServiceCtxCmd=StateClusteringCommandFactory.getUpdateCommand(serviceCtx,excludedPropPatterns,true);\n          if (updateServiceCtxCmd != null) {\n            cmdList.add(updateServiceCtxCmd);\n          }\n        }\n      }\n    }\n    StateClusteringCommand updateCmd=StateClusteringCommandFactory.getUpdateCommand(configCtx,excludedPropPatterns,true);\n    if (updateCmd != null) {\n      cmdList.add(updateCmd);\n    }\n    if (!cmdList.isEmpty()) {\n      commands=cmdList.toArray(new StateClusteringCommand[cmdList.size()]);\n    }\n  }\n}\n",
      "formalParam": [
        "ConfigurationContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/axis2-java/modules/clustering/src/org/apache/axis2/clustering/control/GetStateCommand.java",
      "types": [
        "ArrayList",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "array",
        "java",
        "iterator",
        "next",
        "boolean",
        "list",
        "util"
      ]
    },
    {
      "method": "getDoubleProperty@237",
      "body": "/** \n * Returns the specified double property from the specified section.\n * @param pstrSection the INI section name.\n * @param pstrProp the property to be retrieved.\n * @return the double property value.\n */\npublic Double getDoubleProperty(String pstrSection,String pstrProp){\n  Double dblRet=null;\n  String strVal=null;\n  INIProperty objProp=null;\n  INISection objSec=null;\n  objSec=(INISection)this.mhmapSections.get(pstrSection);\n  if (objSec != null) {\n    objProp=objSec.getProperty(pstrProp);\n    try {\n      if (objProp != null) {\n        strVal=objProp.getPropValue();\n        if (strVal != null)         dblRet=new Double(strVal);\n      }\n    }\n catch (    NumberFormatException NFExIgnore) {\n    }\n finally {\n      if (objProp != null)       objProp=null;\n    }\n    objSec=null;\n  }\n  return dblRet;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Double.Double(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "Double",
      "file": "./java_projects/thera-pi-2/GeburtstagsBriefe/src/gBriefe/INIFile.java",
      "types": [
        "Double",
        "Integer",
        "String",
        "Boolean",
        "Object",
        "Properties",
        "HashMap",
        "NumberFormatException"
      ],
      "apicalls": [
        "containsKey",
        "getProperty",
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.containsKey(java.lang.Object)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.substring(int,int)",
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.Double.Double(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "object",
        "properties",
        "hash",
        "index",
        "substring",
        "number",
        "map",
        "key",
        "get",
        "property",
        "lang",
        "util",
        "boolean",
        "contains",
        "java",
        "format",
        "double",
        "string",
        "exception"
      ]
    },
    {
      "method": "testExplicitIterate@27",
      "body": "/** \n * Verify that if we call iterator() explicitly that we get the desired results, instead of cached ones.\n */\n@Test public void testExplicitIterate() throws Exception {\n  DtoDataProviderTestPage page=assertRenderAndClickNext(0);\n  BeanResultProvider provider=page.getProvider();\n  Iterator<? extends Bean> iter=provider.iterator(0,provider.size());\n  List<Bean> list=new ArrayList<Bean>(100);\n  while (iter.hasNext()) {\n    list.add(iter.next());\n  }\n  Assert.assertEquals(100,list.size());\n  Assert.assertEquals(2,provider.getLoadCount());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fiftyfive-wicket/fiftyfive-wicket-core/src/test/java/fiftyfive/wicket/data/DtoDataProviderTest.java",
      "types": [
        "Integer",
        "Iterator",
        "Boolean",
        "ArrayList"
      ],
      "apicalls": [
        "next",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "array",
        "next",
        "util",
        "boolean",
        "list",
        "integer",
        "iterator",
        "java"
      ]
    },
    {
      "method": "main@38",
      "body": "public static void main(String[] args) throws Exception {\n  UIManager.setLookAndFeel(new SynthLookAndFeel());\n  SwingUtilities.invokeAndWait(new Runnable(){\n    public void run(){\n      new JScrollBar().setUI(new SynthScrollBarUI(){\n        protected void configureScrollBarColors(){\n          super.configureScrollBarColors();\n          isMethodCalled=true;\n        }\n      }\n);\n      if (!isMethodCalled) {\n        throw new RuntimeException(\"The configureScrollBarColors was not called\");\n      }\n    }\n  }\n);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.UIManager.setLookAndFeel(javax.swing.LookAndFeel)",
            "_throws": [
              "javax.swing.UnsupportedLookAndFeelException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)",
            "_throws": [
              "java.lang.InterruptedException",
              "java.lang.reflect.InvocationTargetException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/javax/swing/JScrollBar/6924059/bug6924059.java",
      "types": [
        "LookAndFeel",
        "SwingUtilities",
        "Runnable",
        "InterruptedException",
        "UIManager",
        "InvocationTargetException",
        "UnsupportedLookAndFeelException"
      ],
      "apicalls": [
        "setLookAndFeel",
        "invokeAndWait"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.UIManager.setLookAndFeel(javax.swing.LookAndFeel)",
            "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "utilities",
        "runnable",
        "invocation",
        "exception",
        "invoke",
        "look",
        "javax",
        "feel",
        "swing",
        "manager",
        "interrupted",
        "wait",
        "target",
        "ui",
        "set"
      ]
    },
    {
      "method": "suffix@707",
      "body": "/** \n */\npublic String suffix(){\n  return getString(wEnd,end);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(char[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.String(char[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/seph/src/main/org/jregex/Matcher.java",
      "types": [
        "Character",
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int,int)",
            "java.lang.String.String(char[],int,int)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.String(char[],int,int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "character",
        "lang",
        "integer",
        "substring"
      ]
    },
    {
      "method": "getCreationTime@36",
      "body": "public String getCreationTime(){\n  return birthDate < 0 ? \"\" : formatter.format(new Date(birthDate));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/narayana/ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/tools/osb/mbean/StateManagerWrapper.java",
      "types": [
        "Date",
        "String",
        "DateFormat",
        "Long"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date(long)",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "text",
        "date",
        "string",
        "java",
        "format",
        "long",
        "util"
      ]
    },
    {
      "method": "test_isSiteLocalAddress@158",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.net.InetAddress.getByName(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.net.InetAddress",
                "_throws": [
                  "java.net.UnknownHostException"
                ]
              },
              {
                "_call": "$NOT$java.net.InetAddress.isSiteLocalAddress()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/org/apache/harmony/luni/tests/java/net/Inet4AddressTest.java",
      "body": "/** \n * @tests java.net.Inet4Address#isSiteLocalAddress()\n */\n@TestTargetNew(level=TestLevel.COMPLETE,notes=\"\",method=\"isSiteLocalAddress\",args={}) public void test_isSiteLocalAddress(){\n  String addrName=\"\";\n  try {\n    addrName=\"42.42.42.42\";\n    InetAddress addr=Inet4Address.getByName(addrName);\n    assertTrue(\"IPv4 address \" + addrName + \" incorrectly reporting as a site local address.\",!addr.isSiteLocalAddress());\n  }\n catch (  Exception e) {\n    fail(\"Unknown address : \" + e.getMessage());\n  }\n}\n",
      "types": [
        "String",
        "Boolean",
        "InetAddress",
        "UnknownHostException",
        "Throwable"
      ],
      "apicalls": [
        "getByName",
        "getMessage",
        "isSiteLocalAddress"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.InetAddress.getByName(java.lang.String)",
            "$NOT$java.net.InetAddress.isSiteLocalAddress()",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.net.InetAddress.getByName(java.lang.String)",
            "$NOT$java.net.InetAddress.isSiteLocalAddress()"
          ]
        }
      ],
      "keywords": [
        "java",
        "local",
        "lang",
        "exception",
        "name",
        "net",
        "get",
        "string",
        "unknown",
        "address",
        "throwable",
        "boolean",
        "inet",
        "site",
        "host",
        "message"
      ]
    },
    {
      "method": "FileSystemView@104",
      "body": "public FileSystemView(){\n  final WeakReference<FileSystemView> weakReference=new WeakReference<FileSystemView>(this);\n  UIManager.addPropertyChangeListener(new PropertyChangeListener(){\n    public void propertyChange(    PropertyChangeEvent evt){\n      FileSystemView fileSystemView=weakReference.get();\n      if (fileSystemView == null) {\n        UIManager.removePropertyChangeListener(this);\n      }\n else {\n        if (evt.getPropertyName().equals(\"lookAndFeel\")) {\n          fileSystemView.useSystemExtensionHiding=UIManager.getDefaults().getBoolean(\"FileChooser.useSystemExtensionHiding\");\n        }\n      }\n    }\n  }\n);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ref.WeakReference<javax.swing.filechooser.FileSystemView>.WeakReference<FileSystemView>(javax.swing.filechooser.FileSystemView)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/filechooser/FileSystemView.java",
      "types": [
        "PropertyChangeListener",
        "UIManager",
        "WeakReference",
        "FileSystemView"
      ],
      "apicalls": [
        "addPropertyChangeListener"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ref.WeakReference<javax.swing.filechooser.FileSystemView>.WeakReference<FileSystemView>(javax.swing.filechooser.FileSystemView)",
            "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)"
          ]
        }
      ],
      "keywords": [
        "property",
        "file",
        "java",
        "system",
        "javax",
        "reference",
        "lang",
        "weak",
        "view",
        "ui",
        "listener",
        "add",
        "change",
        "manager",
        "swing",
        "ref"
      ]
    },
    {
      "method": "hasFocus@7972",
      "body": "/** \n * Returns <code>true</code> if this <code>Component</code> is the focus owner.  This method is obsolete, and has been replaced by <code>isFocusOwner()</code>.\n * @return <code>true</code> if this <code>Component</code> is thefocus owner; <code>false</code> otherwise\n * @since 1.2\n */\npublic boolean hasFocus(){\n  return (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "node": "DAPICall",
            "_returns": "java.awt.KeyboardFocusManager",
            "_throws": []
          },
          {
            "_call": "java.awt.KeyboardFocusManager.getFocusOwner()",
            "node": "DAPICall",
            "_returns": "java.awt.Component",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/awt/Component.java",
      "types": [
        "Component",
        "KeyboardFocusManager"
      ],
      "apicalls": [
        "getFocusOwner",
        "getCurrentKeyboardFocusManager"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()",
            "java.awt.KeyboardFocusManager.getFocusOwner()"
          ]
        }
      ],
      "keywords": [
        "manager",
        "awt",
        "component",
        "java",
        "current",
        "keyboard",
        "focus",
        "owner",
        "get"
      ]
    },
    {
      "method": "getFreeMemoryMB@48",
      "body": "/** \n * @return free memory available in the VM in megabytes.\n * @author Klaus Meffert\n * @since 3.2 (since 3.0 in GPGenotype)\n */\npublic static double getFreeMemoryMB(){\n  return getFreeMemoryKB() / 1024;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Runtime.getRuntime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Runtime"
          },
          {
            "_call": "java.lang.Runtime.freeMemory()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "returnType": "double",
      "file": "./java_projects/LFA/jgap_3.6.2_full/src/org/jgap/util/SystemKit.java",
      "types": [
        "Long",
        "Runtime"
      ],
      "apicalls": [
        "getRuntime",
        "freeMemory"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.freeMemory()"
          ]
        }
      ],
      "keywords": [
        "long",
        "runtime",
        "free",
        "lang",
        "java",
        "get",
        "memory"
      ]
    },
    {
      "method": "handle@338",
      "body": "@Override public void handle(Message message){\n  fameHandler.handle(message);\n  if (message.involves(player) && !Moved.class.isAssignableFrom(message.getClass())) {\n    messages.add(message);\n    messageLogScreen.record(message);\n  }\n  if (Killed.class.isAssignableFrom(message.getClass()))   addRandomBadGuy();\n}\n",
      "formalParam": [
        "Message"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Math.random()",
                "node": "DAPICall",
                "_returns": "double",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/iryrwarosh/src/iryrwarosh/screens/PlayScreen.java",
      "types": [
        "Double",
        "Class",
        "Boolean",
        "Math"
      ],
      "apicalls": [
        "isAssignableFrom",
        "random"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Math.random()"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "java",
        "boolean",
        "lang",
        "double",
        "assignable",
        "random",
        "class",
        "math"
      ]
    },
    {
      "method": "isRoleProfileExisting@228",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "node": "DAPICall",
            "_returns": "java.util.List",
            "_throws": []
          },
          {
            "_call": "java.util.List.contains(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/platform/components/registry/org.wso2.carbon.registry.info/src/main/java/org/wso2/carbon/registry/info/services/InfoService.java",
      "body": "public boolean isRoleProfileExisting(String role,String sessionId) throws RegistryException {\n  UserRegistry registry=(UserRegistry)getRootRegistry();\n  try {\n    if (registry != null && registry.getUserRealm() != null && registry.getUserRealm().getUserStoreManager() != null) {\n      UserRealm realm=registry.getUserRealm();\n      boolean isAdmin=false;\n      String[] userRoles=realm.getUserStoreManager().getRoleListOfUser(registry.getUserName());\n      for (      String userRole : userRoles) {\n        if (userRole.equals(realm.getRealmConfiguration().getAdminRoleName())) {\n          isAdmin=true;\n          break;\n        }\n      }\n      return Arrays.asList(userRoles).contains(role) || isAdmin;\n    }\n  }\n catch (  UserStoreException ignore) {\n    return false;\n  }\n  return false;\n}\n",
      "types": [
        "String",
        "List",
        "Arrays",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "contains",
        "equals",
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Arrays.asList(T[])",
            "java.util.List.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "list",
        "lang",
        "arrays",
        "equals",
        "string",
        "java",
        "util",
        "contains",
        "boolean",
        "object"
      ]
    },
    {
      "method": "propertyIsGreaterThan@178",
      "body": "public static Element propertyIsGreaterThan(Document document,Node parent){\n  return binaryComparisonOp(document,parent,OGC.PropertyIsGreaterThan);\n}\n",
      "formalParam": [
        "Document",
        "Node"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.namespace.QName.getNamespaceURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "javax.xml.namespace.QName.getLocalPart()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "javax.xml.namespace.QName.getNamespaceURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "javax.xml.namespace.QName.getLocalPart()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "javax.xml.namespace.QName.getNamespaceURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "javax.xml.namespace.QName.getLocalPart()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "Element",
      "file": "./java_projects/geotools/modules/extension/xsd/xsd-filter/src/test/java/org/geotools/filter/v1_1/FilterMockData.java",
      "types": [
        "QName",
        "String"
      ],
      "apicalls": [
        "getLocalPart",
        "getNamespaceURI"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.namespace.QName.getNamespaceURI()",
            "javax.xml.namespace.QName.getLocalPart()",
            "javax.xml.namespace.QName.getNamespaceURI()",
            "javax.xml.namespace.QName.getLocalPart()",
            "javax.xml.namespace.QName.getNamespaceURI()",
            "javax.xml.namespace.QName.getLocalPart()"
          ]
        }
      ],
      "keywords": [
        "javax",
        "namespace",
        "get",
        "local",
        "name",
        "xml",
        "part",
        "string",
        "q",
        "uri"
      ]
    },
    {
      "method": "writeTo@368",
      "body": "public void writeTo(String arg0,Class<?> arg1,Type arg2,Annotation[] arg3,MediaType arg4,MultivaluedMap<String,Object> arg5,OutputStream arg6) throws IOException, WebApplicationException {\n  arg6.write(arg0.getBytes());\n}\n",
      "formalParam": [
        "String",
        "Class<?>",
        "Type",
        "Annotation[]",
        "MediaType",
        "MultivaluedMap<String,Object>",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.OutputStream.write(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jersey_1/jersey/jersey-tests/src/test/java/com/sun/jersey/impl/inject/AllInjectablesTest.java",
      "types": [
        "String",
        "Byte",
        "IOException",
        "OutputStream"
      ],
      "apicalls": [
        "write",
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.io.OutputStream.write(byte[])"
          ]
        }
      ],
      "keywords": [
        "get",
        "write",
        "byte",
        "output",
        "stream",
        "lang",
        "exception",
        "java",
        "io",
        "string",
        "bytes"
      ]
    },
    {
      "method": "getBufferInputStream@40",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "InputStream",
      "file": "./java_projects/cosmo_1/cosmo/src/main/java/org/osaf/cosmo/util/BufferedServletOutputStream.java",
      "body": "/** \n * @return inputstream to buffered data\n */\npublic InputStream getBufferInputStream(){\n  return new ByteArrayInputStream(buffer.toByteArray());\n}\n",
      "types": [
        "ByteArrayInputStream",
        "ByteArrayOutputStream",
        "Byte"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "array",
        "stream",
        "io",
        "input",
        "java",
        "output",
        "byte"
      ]
    },
    {
      "method": "addExpectedNode@178",
      "body": "public PropertyNodesVerifierElem addExpectedNode(String propName,List<String> propValueList,TypeSet paramMap_TYPE){\n  final String propValue=concatinateListWithSemiColon(propValueList);\n  return addExpectedNode(propName,propValue,propValueList,null,null,paramMap_TYPE,null);\n}\n",
      "formalParam": [
        "String",
        "List<String>",
        "TypeSet"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "PropertyNodesVerifierElem",
      "file": "./java_projects/android_framework_base_1/core/tests/coretests/src/android/pim/vcard/test_utils/PropertyNodesVerifierElem.java",
      "types": [
        "StringBuffer",
        "String",
        "Character"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "character",
        "buffer",
        "append",
        "lang"
      ]
    },
    {
      "method": "testTryCatch_04@1606",
      "body": "@Test public void testTryCatch_04() throws Exception {\n  assertEvaluatesWithException(NullPointerException.class,\"try { 'literal' as Object as Boolean } catch(ClassCastException e) throw new NullPointerException()\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.reflect.InvocationTargetException.getCause()",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Class<Tau_T>.isInstance(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xtext/plugins/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/evaluation/AbstractXbaseEvaluationTest.java",
      "types": [
        "InvocationTargetException",
        "Class",
        "Throwable",
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "getCause",
        "isInstance",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.toString()",
            "java.lang.reflect.InvocationTargetException.getCause()",
            "java.lang.Class<Tau_T>.isInstance(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "target",
        "class",
        "boolean",
        "string",
        "java",
        "get",
        "exception",
        "lang",
        "reflect",
        "cause",
        "throwable",
        "object",
        "invocation",
        "instance"
      ]
    },
    {
      "method": "main@182",
      "body": "public static void main(String argv[]) throws ParserConfigurationException, SAXException, IOException {\n  ConfigurationParser parser=new ConfigurationParser();\n  parser.parseFile(new File(\"config.xml\"));\n  parser.getShapeDefinitions();\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newInstance()",
            "_throws": [],
            "_returns": "javax.xml.parsers.SAXParserFactory",
            "node": "DAPICall"
          },
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException",
              "org.xml.sax.SAXException"
            ],
            "_returns": "javax.xml.parsers.SAXParser",
            "node": "DAPICall"
          },
          {
            "_call": "javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.helpers.DefaultHandler)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/plantuml/src/org/stathissideris/ascii2image/core/ConfigurationParser.java",
      "types": [
        "File",
        "String",
        "IOException",
        "ParserConfigurationException",
        "SAXParserFactory",
        "SAXParser"
      ],
      "apicalls": [
        "newSAXParser",
        "newInstance",
        "parse"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "javax.xml.parsers.SAXParserFactory.newInstance()",
            "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.helpers.DefaultHandler)"
          ]
        }
      ],
      "keywords": [
        "sax",
        "parse",
        "factory",
        "io",
        "file",
        "parsers",
        "java",
        "exception",
        "parser",
        "configuration",
        "string",
        "instance",
        "xml",
        "new",
        "javax"
      ]
    },
    {
      "method": "addToKeys@8620",
      "body": "public void addToKeys(ByteBuffer elem){\n  if (this.keys == null) {\n    this.keys=new ArrayList<ByteBuffer>();\n  }\n  this.keys.add(elem);\n}\n",
      "formalParam": [
        "ByteBuffer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "types": [
        "List",
        "ArrayList",
        "ByteBuffer",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
            "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
          ]
        }
      ],
      "keywords": [
        "java",
        "array",
        "list",
        "buffer",
        "util",
        "byte",
        "add",
        "boolean"
      ]
    },
    {
      "method": "doCheckIvyConf@810",
      "body": "/** \n * Check that the Ivy configuration file exists.\n * @param req the file path\n */\npublic FormValidation doCheckIvyConf(@QueryParameter final String value){\n  if (!Hudson.getInstance().hasPermission(Hudson.ADMINISTER))   return FormValidation.ok();\n  if (Util.fixEmpty(value) == null) {\n    return FormValidation.error(Messages.IvyBuildTrigger_CheckIvyConf_PathRequiredError());\n  }\n  File f=new File(value);\n  if (!f.isFile()) {\n    return FormValidation.error(Messages.IvyBuildTrigger_CheckIvyConf_PathNotFileError(f));\n  }\n  return FormValidation.ok();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "$NOT$java.io.File.isFile()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "FormValidation",
      "file": "./java_projects/ivy-plugin/src/main/java/hudson/ivy/IvyBuildTrigger.java",
      "types": [
        "File",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "isFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.isFile()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "java",
        "file",
        "io",
        "string"
      ]
    },
    {
      "method": "JDaveRunner@42",
      "body": "@SuppressWarnings(\"unchecked\") public JDaveRunner(final Class<?> testClass){\n  if (Specification.class.isAssignableFrom(testClass)) {\n    spec=(Class<? extends Specification<?>>)testClass;\n  }\n else   if (isAContext(testClass)) {\n    spec=(Class<? extends Specification<?>>)testClass.getDeclaringClass();\n  }\n else {\n    throw new IllegalArgumentException(\"Testclass is not a Specification or a Context: \" + testClass);\n  }\n  Specification.setStringComparisonFailure(new IStringComparisonFailure(){\n    public void fail(    final String message,    final String expected,    final String actual){\n      throw new ComparisonFailure(message,expected,actual);\n    }\n  }\n);\n  description=DescriptionFactory.create(this.spec);\n}\n",
      "formalParam": [
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Class<Tau_T>.isMemberClass()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.lang.Class<Tau_T>.getModifiers()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.lang.reflect.Modifier.isStatic(int)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.lang.Class<Tau_T>.getDeclaringClass()",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.SecurityException"
                ]
              },
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/JDave/jdave-junit4/src/java/jdave/junit4/JDaveRunner.java",
      "types": [
        "Boolean",
        "Class",
        "SecurityException",
        "Integer",
        "Modifier"
      ],
      "apicalls": [
        "getDeclaringClass",
        "isStatic",
        "isMemberClass",
        "isAssignableFrom",
        "getModifiers"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Class<Tau_T>.isMemberClass()",
            "java.lang.Class<Tau_T>.getModifiers()",
            "java.lang.reflect.Modifier.isStatic(int)",
            "java.lang.Class<Tau_T>.getDeclaringClass()",
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "reflect",
        "modifier",
        "class",
        "security",
        "static",
        "member",
        "modifiers",
        "get",
        "lang",
        "exception",
        "boolean",
        "declaring",
        "java",
        "assignable"
      ]
    },
    {
      "method": "toString@4020",
      "body": "/** \n * Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are separated by the characters <tt>\", \"</tt> (a comma followed by a space).  Elements are converted to strings as by <tt>String.valueOf(float)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt> is <tt>null</tt>.\n * @param a the array whose string representation to return\n * @return a string representation of <tt>a</tt>\n * @since 1.5\n */\npublic static String toString(float[] a){\n  if (a == null)   return \"null\";\n  int iMax=a.length - 1;\n  if (iMax == -1)   return \"[]\";\n  StringBuilder b=new StringBuilder();\n  b.append('[');\n  for (int i=0; ; i++) {\n    b.append(a[i]);\n    if (i == iMax)     return b.append(']').toString();\n    b.append(\", \");\n  }\n}\n",
      "formalParam": [
        "float[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(float)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jop/java/target/src/jdk16/java/util/Arrays.java",
      "types": [
        "Character",
        "String",
        "StringBuilder",
        "Float"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(float)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()",
            "java.lang.StringBuilder.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "builder",
        "float",
        "java",
        "string",
        "append",
        "character"
      ]
    },
    {
      "method": "sublong@61",
      "formalParam": [
        "String",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Long.parseLong(java.lang.String)",
                "node": "DAPICall",
                "_returns": "long",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/Bridging-the-Rural-Divide--Placebooks/placebooks-webapp/src/placebooks/controller/MediaHelper.java",
      "body": "public static final long sublong(final String value,final int beginIndex,final int endIndex){\n  final String substring=value.substring(beginIndex,endIndex);\n  return (substring.length() > 0) ? Long.parseLong(substring) : -1;\n}\n",
      "types": [
        "NumberFormatException",
        "String",
        "Long",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "length",
        "parseLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()",
            "java.lang.Long.parseLong(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "format",
        "java",
        "exception",
        "number",
        "integer",
        "string",
        "substring",
        "parse",
        "lang",
        "length",
        "long"
      ]
    },
    {
      "method": "test_FileUtilities_getUniqueFile@61",
      "body": "public void test_FileUtilities_getUniqueFile(){\n  File tempDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  String prefix=\"README\";\n  String suffix=\".txt\";\n  File uniqueFile=FileUtilities.getUniqueFile(tempDir,prefix,suffix);\n  assertNotNull(uniqueFile);\n  assertFalse(uniqueFile.exists());\n  String fileName=uniqueFile.getName();\n  assertTrue(fileName.startsWith(prefix));\n  assertTrue(fileName.endsWith(suffix));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bleeding_edge/dart/editor/tools/plugins/com.google.dart.tools.core_test/src/com/google/dart/tools/core/utilities/io/FileUtilitiesTest.java",
      "types": [
        "Boolean",
        "File",
        "System",
        "String"
      ],
      "apicalls": [
        "exists",
        "getProperty",
        "endsWith",
        "getName",
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()",
            "java.io.File.getName()",
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "ends",
        "boolean",
        "get",
        "property",
        "system",
        "io",
        "file",
        "lang",
        "starts",
        "string",
        "name",
        "exists"
      ]
    },
    {
      "method": "testGetIndex@111",
      "body": "@TestTargetNew(level=TestLevel.COMPLETE,notes=\"\",method=\"getIndex\",args={}) public void testGetIndex(){\n  DataTruncation aDataTruncation;\n  int[] init1={-2147483648,2147483647,0,-2045829673,1977156911,478985827,1687271915};\n  boolean[] init2={false,true,false,false,true,true,true};\n  boolean[] init3={false,true,false,false,true,true,true};\n  int[] init4={-2147483648,2147483647,0,-631377748,21025030,1215194589,1064137121};\n  int[] init5={-2147483648,2147483647,0,-897998505,997578180,735015866,264619424};\n  int theReturn;\n  int[] theReturns=init1;\n  String[] theFinalStates1={\"01004\",\"01004\",\"01004\",\"01004\",\"01004\",\"01004\",\"01004\"};\n  String state2=\"Data truncation\";\n  String[] theFinalStates2={state2,state2,state2,state2,state2,state2,state2};\n  int[] theFinalStates3={0,0,0,0,0,0,0};\n  int[] theFinalStates4=init1;\n  int[] theFinalStates5=init4;\n  int[] theFinalStates6=init5;\n  boolean[] theFinalStates7=init2;\n  boolean[] theFinalStates8=init3;\n  Exception[] theExceptions={null,null,null,null,null,null,null};\n  int loopCount=1;\n  for (int i=0; i < loopCount; i++) {\n    try {\n      aDataTruncation=new DataTruncation(init1[i],init2[i],init3[i],init4[i],init5[i]);\n      theReturn=aDataTruncation.getIndex();\n      if (theExceptions[i] != null) {\n        fail(i + \"Exception missed\");\n      }\n      assertEquals(i + \"Return value mismatch\",theReturn,theReturns[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getSQLState(),theFinalStates1[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getMessage(),theFinalStates2[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getErrorCode(),theFinalStates3[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getIndex(),theFinalStates4[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getDataSize(),theFinalStates5[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getTransferSize(),theFinalStates6[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getParameter(),theFinalStates7[i]);\n      assertEquals(i + \"  Final state mismatch\",aDataTruncation.getRead(),theFinalStates8[i]);\n    }\n catch (    Exception e) {\n      if (theExceptions[i] == null) {\n        fail(i + \"Unexpected exception\");\n      }\n      assertEquals(i + \"Exception mismatch\",e.getClass(),theExceptions[i].getClass());\n      assertEquals(i + \"Exception mismatch\",e.getMessage(),theExceptions[i].getMessage());\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.SQLException.getSQLState()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.sql.SQLException.getErrorCode()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/org/apache/harmony/sql/tests/java/sql/DataTruncationTest.java",
      "types": [
        "Integer",
        "String",
        "Throwable",
        "SQLException"
      ],
      "apicalls": [
        "getErrorCode",
        "getSQLState",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.SQLException.getSQLState()",
            "java.lang.Throwable.getMessage()",
            "java.sql.SQLException.getErrorCode()"
          ]
        },
        {
          "calls": [
            "java.sql.SQLException.getSQLState()",
            "java.lang.Throwable.getMessage()",
            "java.sql.SQLException.getErrorCode()",
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "state",
        "code",
        "lang",
        "message",
        "error",
        "integer",
        "exception",
        "sql",
        "throwable",
        "string"
      ]
    },
    {
      "method": "toString@301",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\n@Override public String toString(){\n  if (eIsProxy())   return super.toString();\n  StringBuffer result=new StringBuffer(super.toString());\n  result.append(\" (group: \");\n  result.append(group);\n  result.append(')');\n  return result.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/rmf/org.eclipse.rmf.rif12.xsd.model/src/org/eclipse/rmf/rif12/xsd/impl/VALUESTypeImpl.java",
      "types": [
        "String",
        "Object",
        "StringBuffer",
        "Character"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "character",
        "buffer",
        "object",
        "append",
        "lang",
        "java",
        "string"
      ]
    },
    {
      "method": "setUp@112",
      "body": "public void setUp() throws Exception {\n  readTestConfigFile();\n  boolean success=false;\n  conf=new Configuration();\n  conf.setClass(PolicyProvider.POLICY_PROVIDER_CONFIG,HadoopPolicyProvider.class,PolicyProvider.class);\n  conf.setBoolean(ServiceAuthorizationManager.SERVICE_AUTHORIZATION_CONFIG,true);\n  dfsCluster=new MiniDFSCluster(conf,1,true,null);\n  namenode=conf.get(\"fs.default.name\",\"file:///\");\n  clitestDataDir=new File(TEST_CACHE_DATA_DIR).toURI().toString().replace(' ','+');\n  username=System.getProperty(\"user.name\");\n  FileSystem fs=dfsCluster.getFileSystem();\n  assertTrue(\"Not a HDFS: \" + fs.getUri(),fs instanceof DistributedFileSystem);\n  dfs=(DistributedFileSystem)fs;\n  JobConf mrConf=new JobConf(conf);\n  mrCluster=new MiniMRCluster(1,dfsCluster.getFileSystem().getUri().toString(),1,null,null,mrConf);\n  jobtracker=mrCluster.createJobConf().get(\"mapred.job.tracker\",\"local\");\n  success=true;\n  assertTrue(\"Error setting up Mini DFS & MR clusters\",success);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newInstance()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.SAXParserFactory",
            "_throws": []
          },
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.SAXParser",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException",
              "org.xml.sax.SAXException"
            ]
          },
          {
            "_call": "javax.xml.parsers.SAXParser.parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.toURI()",
            "node": "DAPICall",
            "_returns": "java.net.URI",
            "_throws": []
          },
          {
            "_call": "java.net.URI.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.replace(char,char)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/test/org/apache/hadoop/cli/TestCLI.java",
      "types": [
        "File",
        "IOException",
        "ParserConfigurationException",
        "System",
        "String",
        "Character",
        "URI",
        "SAXParserFactory",
        "SAXParser"
      ],
      "apicalls": [
        "getProperty",
        "parse",
        "replace",
        "toString",
        "toURI",
        "newInstance",
        "newSAXParser"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.SAXParserFactory.newInstance()",
            "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "javax.xml.parsers.SAXParser.parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.toURI()",
            "java.net.URI.toString()",
            "java.lang.String.replace(char,char)",
            "java.lang.System.getProperty(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "java",
        "file",
        "system",
        "new",
        "parse",
        "property",
        "string",
        "uri",
        "get",
        "instance",
        "parser",
        "lang",
        "exception",
        "sax",
        "configuration",
        "replace",
        "xml",
        "parsers",
        "character",
        "io",
        "factory",
        "net"
      ]
    },
    {
      "method": "hashPublicKey@1648",
      "body": "public static long hashPublicKey(byte[] data){\n  try {\n    MessageDigest m=MessageDigest.getInstance(\"MD5\");\n    ByteArrayInputStream bais=new ByteArrayInputStream(m.digest(data));\n    DataInputStream dis=new DataInputStream(bais);\n    return dis.readLong();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(e);\n  }\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.security.MessageDigest.getInstance(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.security.MessageDigest",
                "_throws": [
                  "java.security.NoSuchAlgorithmException"
                ]
              },
              {
                "_call": "java.security.MessageDigest.digest(byte[])",
                "node": "DAPICall",
                "_returns": "byte[]",
                "_throws": []
              },
              {
                "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.io.DataInputStream.readLong()",
                "node": "DAPICall",
                "_returns": "long",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "long",
      "file": "./java_projects/dungbeetle/src/edu/stanford/mobisocial/dungbeetle/DBHelper.java",
      "types": [
        "Byte",
        "ByteArrayInputStream",
        "MessageDigest",
        "Throwable",
        "DataInputStream",
        "String",
        "InputStream",
        "Long",
        "NoSuchAlgorithmException",
        "IOException"
      ],
      "apicalls": [
        "printStackTrace",
        "digest",
        "getInstance",
        "readLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.MessageDigest.getInstance(java.lang.String)",
            "java.security.MessageDigest.digest(byte[])",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.DataInputStream.readLong()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.security.MessageDigest.getInstance(java.lang.String)",
            "java.security.MessageDigest.digest(byte[])",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.DataInputStream.readLong()"
          ]
        }
      ],
      "keywords": [
        "array",
        "print",
        "string",
        "digest",
        "long",
        "algorithm",
        "lang",
        "get",
        "message",
        "java",
        "byte",
        "instance",
        "read",
        "stack",
        "stream",
        "trace",
        "io",
        "data",
        "exception",
        "security",
        "throwable",
        "input"
      ]
    },
    {
      "method": "getInitialisationClasses@29",
      "body": "public Class<?>[] getInitialisationClasses(){\n  ClassLoader loader=this.getClass().getClassLoader();\n  Class<?>[] classes=new Class<?>[this.initialisationClasses.size()];\n  try {\n    InitialisationClass theInitialisationClassList=this.initialisationClasses.get(0);\n    int i=0;\n    for (    Param clazz : theInitialisationClassList.getParams()) {\n      classes[i++]=loader.loadClass(clazz.toString());\n    }\n  }\n catch (  ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n  return classes;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "node": "DAPICall",
                "_returns": "Tau_E",
                "_throws": []
              },
              {
                "_call": "java.lang.ClassLoader.loadClass(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "Class<?>[]",
      "file": "./java_projects/substeps-core/src/main/java/com/technophobia/substeps/ant/AntExecutionConfig.java",
      "types": [
        "String",
        "ClassNotFoundException",
        "ClassLoader",
        "Throwable",
        "Class",
        "Integer",
        "List"
      ],
      "apicalls": [
        "printStackTrace",
        "get",
        "getClassLoader",
        "loadClass"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.util.List<Tau_E>.get(int)",
            "java.lang.ClassLoader.loadClass(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.util.List<Tau_E>.get(int)",
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "print",
        "integer",
        "string",
        "class",
        "trace",
        "java",
        "lang",
        "load",
        "get",
        "stack",
        "loader",
        "throwable",
        "found",
        "exception",
        "util",
        "list"
      ]
    },
    {
      "method": "jar@32",
      "body": "public static ResourceLocation jar(String jarPath){\n  try {\n    return new JarResourceLocation(jarPath);\n  }\n catch (  Exception e) {\n    return new ErrorResourceLocation(jarPath);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.zip.ZipEntry.isDirectory()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.zip.ZipEntry.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "ResourceLocation",
      "file": "./java_projects/nutz/src/org/nutz/resource/impl/ResourceLocation.java",
      "types": [
        "Boolean",
        "String",
        "ZipEntry",
        "List"
      ],
      "apicalls": [
        "getName",
        "add",
        "isDirectory"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.zip.ZipEntry.isDirectory()",
            "java.util.zip.ZipEntry.getName()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "entry",
        "string",
        "zip",
        "add",
        "java",
        "list",
        "directory",
        "boolean",
        "name",
        "get",
        "util"
      ]
    },
    {
      "method": "JTextComponent@1315",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.Hashtable()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.setFocusable(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.enableEvents(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/classpath/javax/swing/text/JTextComponent.java",
      "body": "/** \n * Creates a new <code>JTextComponent</code> instance.\n */\npublic JTextComponent(){\n  Keymap defkeymap=getKeymap(DEFAULT_KEYMAP);\n  if (defkeymap == null) {\n    defkeymap=addKeymap(DEFAULT_KEYMAP,null);\n    defkeymap.setDefaultAction(new DefaultEditorKit.DefaultKeyTypedAction());\n  }\n  setFocusable(true);\n  setEditable(true);\n  enableEvents(AWTEvent.KEY_EVENT_MASK);\n  setOpaque(true);\n  updateUI();\n}\n",
      "types": [
        "Object",
        "String",
        "JComponent",
        "Boolean",
        "Hashtable",
        "Long",
        "Component"
      ],
      "apicalls": [
        "enableEvents",
        "setOpaque",
        "firePropertyChange",
        "setFocusable",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.Hashtable()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.awt.Component.setFocusable(boolean)",
            "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "java.awt.Component.enableEvents(long)",
            "javax.swing.JComponent.setOpaque(boolean)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "java",
        "set",
        "property",
        "hashtable",
        "awt",
        "fire",
        "put",
        "string",
        "change",
        "focusable",
        "enable",
        "swing",
        "events",
        "opaque",
        "long",
        "j",
        "util",
        "javax",
        "component"
      ]
    },
    {
      "method": "testMillisecondDatePrecision@46",
      "body": "/** \n * Dates with millisecond precision should come back as given.\n */\n@Test public void testMillisecondDatePrecision() throws Exception {\n  String[] DT={\"1970-01-01T00:00:00.001Z\",\"1970-01-01T00:00:00.010Z\",\"1970-01-01T00:00:00.100Z\"};\n  String[] DT_XSD={\"1970-01-01T00:00:00.001Z\",\"1970-01-01T00:00:00.01Z\",\"1970-01-01T00:00:00.1Z\"};\n  Date[] date={new Date(1L),new Date(10L),new Date(100L)};\n  initRI(1);\n  for (int i=0; i < DT.length; i++) {\n    testDates(DT[i],date[i],\"test:\" + i,DT_XSD[i]);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.DateFormat.parse(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.util.Date",
            "_throws": [
              "java.text.ParseException"
            ]
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fcrepo/fcrepo-server/src/test/java/org/fcrepo/server/resourceIndex/ResourceIndexDatePrecisionIntegrationTest.java",
      "types": [
        "Object",
        "Date",
        "ParseException",
        "String",
        "DateFormat"
      ],
      "apicalls": [
        "parse",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.DateFormat.parse(java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "object",
        "date",
        "java",
        "exception",
        "format",
        "parse",
        "string",
        "text",
        "lang"
      ]
    },
    {
      "method": "testGetSingleKey@1710",
      "body": "@Test public void testGetSingleKey(){\n  try {\n    for (char key='A'; key <= 'Z'; key++) {\n      String keyName=Character.toString(key);\n      OperationResult<ColumnList<String>> result=keyspace.prepareQuery(CF_STANDARD1).getKey(keyName).execute();\n      Assert.assertNotNull(result.getResult());\n      System.out.printf(\"%s executed on %s in %d msec size=%d\\n\",keyName,result.getHost(),result.getLatency(),result.getResult().size());\n    }\n  }\n catch (  ConnectionException e) {\n    LOG.error(e.getMessage());\n    Assert.fail();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Character.toString(char)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.printf(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.io.PrintStream",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/astyanax/src/test/java/com/netflix/astyanax/thrift/ThrifeKeyspaceImplTest.java",
      "types": [
        "Character",
        "Object",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "toString",
        "printf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Character.toString(char)",
            "java.io.PrintStream.printf(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "stream",
        "lang",
        "object",
        "java",
        "io",
        "print",
        "printf",
        "string",
        "character"
      ]
    },
    {
      "method": "addRedirect@700",
      "body": "/** \n * Define a HTTP redirection (to customize URLs)\n * @param from Original URI\n * @param to Destination URI\n */\npublic void addRedirect(String from,String to){\n  if (this.redirects == null)   this.redirects=new HashMap<String,String>();\n  this.redirects.put(from,to);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/petals-dsb/modules/petals-bc-soap/src/main/java/org/ow2/petals/binding/soap/listener/incoming/SoapServerConfig.java",
      "types": [
        "HashMap",
        "String"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.HashMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "hash",
        "put",
        "util",
        "map"
      ]
    },
    {
      "method": "getSelectedLabel@122",
      "body": "@Override public String getSelectedLabel(){\n  return getLabel(getSelectedIndex());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.get(int)",
            "_throws": [],
            "_returns": "java.lang.Integer",
            "node": "DAPICall"
          },
          {
            "_call": "java.text.Format.format(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/ratebeerforandroid/RateBeerForAndroid/src/com/ratebeer/android/gui/wheel/IntegerWheelAdapter.java",
      "types": [
        "Integer",
        "String",
        "ArrayList",
        "Object",
        "Format"
      ],
      "apicalls": [
        "format",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.get(int)",
            "java.text.Format.format(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "text",
        "object",
        "format",
        "integer",
        "java",
        "array",
        "get",
        "list",
        "util",
        "string"
      ]
    },
    {
      "method": "getAccessibleAt@590",
      "body": "public Accessible getAccessibleAt(Point p){\n  return getAccessibleChild(columnAtPoint(p));\n}\n",
      "formalParam": [
        "Point"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "javax.swing.table.TableColumnModel.getColumnIndexAtX(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Component.getBounds()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Rectangle"
              },
              {
                "_call": "java.awt.Rectangle.contains(java.awt.Point)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "Accessible",
      "file": "./java_projects/classpath/javax/swing/table/JTableHeader.java",
      "types": [
        "Integer",
        "Rectangle",
        "Component",
        "TableColumnModel",
        "Point",
        "Boolean"
      ],
      "apicalls": [
        "getBounds",
        "getColumnIndexAtX",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getBounds()",
            "java.awt.Rectangle.contains(java.awt.Point)"
          ]
        },
        {
          "calls": [
            "java.awt.Component.getBounds()",
            "java.awt.Rectangle.contains(java.awt.Point)",
            "javax.swing.table.TableColumnModel.getColumnIndexAtX(int)"
          ]
        }
      ],
      "keywords": [
        "contains",
        "column",
        "awt",
        "java",
        "swing",
        "index",
        "point",
        "table",
        "model",
        "get",
        "boolean",
        "component",
        "bounds",
        "integer",
        "javax",
        "rectangle",
        "x"
      ]
    },
    {
      "method": "testSetConfigDemoOnZebra@26",
      "body": "@Test public void testSetConfigDemoOnZebra() throws Exception {\n  System.setProperty(\"fedoragsearch.clientType\",\"REST\");\n  StringBuffer result=doOp(\"?operation=configure&configName=configDemoOnZebra&restXslt=copyXml\");\n  assertXpathNotExists(\"/resultPage/error\",result.toString());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/gsearch/FedoraGenericSearch/src/test/junit/gsearch/test/zebra/TestConfigDemoOnZebra.java",
      "types": [
        "System",
        "StringBuffer",
        "String"
      ],
      "apicalls": [
        "toString",
        "setProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.setProperty(java.lang.String,java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "system",
        "java",
        "lang",
        "string",
        "property",
        "set"
      ]
    },
    {
      "method": "close@389",
      "body": "@Override public void close() throws IOException {\n  super.close();\n  if (!getUseCaches()) {\n    closed=true;\n    jarFile.close();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.net.URLConnection.getUseCaches()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.util.zip.ZipFile.close()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.IOException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/jar/JarURLConnectionImpl.java",
      "types": [
        "Boolean",
        "URLConnection",
        "IOException",
        "ZipFile"
      ],
      "apicalls": [
        "close",
        "getUseCaches"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.net.URLConnection.getUseCaches()"
          ]
        },
        {
          "calls": [
            "$NOT$java.net.URLConnection.getUseCaches()",
            "java.util.zip.ZipFile.close()"
          ]
        }
      ],
      "keywords": [
        "net",
        "file",
        "boolean",
        "close",
        "caches",
        "get",
        "use",
        "exception",
        "util",
        "connection",
        "url",
        "java",
        "zip",
        "io"
      ]
    },
    {
      "method": "AsynchronousPropertyChangeWrapper@59",
      "body": "/** \n * Constructs from nothing.  The  {@link PropertyChangeEvent} thread will bestarted.\n * @param listener              The listener to be wrapped.\n * @throws NullPointerException if the listener is <code>null</code>.\n */\npublic AsynchronousPropertyChangeWrapper(PropertyChangeListener listener){\n  this.listener=listener;\n  new Thread(this).start();\n}\n",
      "formalParam": [
        "PropertyChangeListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.start()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/IDV/src/ucar/unidata/util/AsynchronousPropertyChangeWrapper.java",
      "types": [
        "Runnable",
        "Thread"
      ],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "start",
        "thread",
        "java",
        "runnable"
      ]
    },
    {
      "method": "GridCoordSys@495",
      "body": "/** \n * Create a GridCoordSys as a section of an existing GridCoordSys. This will create sections of the corresponding CoordinateAxes.\n * @param from     copy this GridCoordSys\n * @param rt_range subset the runtime dimension, or null if you want all of it\n * @param e_range  subset the ensemble dimension, or null if you want all of it\n * @param t_range  subset the time dimension, or null if you want all of it\n * @param z_range  subset the vertical dimension, or null if you want all of it\n * @param y_range  subset the y dimension, or null if you want all of it\n * @param x_range  subset the x dimension, or null if you want all of it\n * @throws InvalidRangeException if any of the ranges are illegal\n */\npublic GridCoordSys(GridCoordSys from,Range rt_range,Range e_range,Range t_range,Range z_range,Range y_range,Range x_range) throws InvalidRangeException {\n  super();\n  CoordinateAxis xaxis=from.getXHorizAxis();\n  CoordinateAxis yaxis=from.getYHorizAxis();\n  if ((xaxis instanceof CoordinateAxis1D) && (yaxis instanceof CoordinateAxis1D)) {\n    CoordinateAxis1D xaxis1=(CoordinateAxis1D)xaxis;\n    CoordinateAxis1D yaxis1=(CoordinateAxis1D)yaxis;\n    horizXaxis=(x_range == null) ? xaxis1 : xaxis1.section(x_range);\n    horizYaxis=(y_range == null) ? yaxis : yaxis1.section(y_range);\n  }\n else   if ((xaxis instanceof CoordinateAxis2D) && (yaxis instanceof CoordinateAxis2D) && from.isLatLon()) {\n    CoordinateAxis2D lon_axis=(CoordinateAxis2D)xaxis;\n    CoordinateAxis2D lat_axis=(CoordinateAxis2D)yaxis;\n    horizXaxis=lon_axis.section(y_range,x_range);\n    horizYaxis=lat_axis.section(y_range,x_range);\n  }\n else   throw new IllegalArgumentException(\"must be 1D or 2D/LatLon \");\n  if (from.isGeoXY()) {\n    xAxis=horizXaxis;\n    yAxis=horizYaxis;\n  }\n else {\n    lonAxis=horizXaxis;\n    latAxis=horizYaxis;\n    isLatLon=true;\n  }\n  coordAxes.add(horizXaxis);\n  coordAxes.add(horizYaxis);\n  ProjectionImpl projOrig=from.getProjection();\n  if (projOrig != null) {\n    proj=projOrig.constructCopy();\n    proj.setDefaultMapArea(getBoundingBox());\n  }\n  CoordinateAxis1D zaxis=from.getVerticalAxis();\n  if (zaxis != null) {\n    vertZaxis=(z_range == null) ? zaxis : zaxis.section(z_range);\n    coordAxes.add(vertZaxis);\n  }\n  if (from.getVerticalCT() != null) {\n    VerticalTransform vtFrom=from.getVerticalTransform();\n    if (vtFrom != null)     vt=vtFrom.subset(t_range,z_range,y_range,x_range);\n    vCT=from.getVerticalCT();\n  }\n  CoordinateAxis1D eaxis=from.getEnsembleAxis();\n  if (eaxis != null) {\n    ensembleAxis=(e_range == null) ? eaxis : (CoordinateAxis1D)eaxis.section(e_range);\n    coordAxes.add(ensembleAxis);\n  }\n  CoordinateAxis taxis=from.getTimeAxis();\n  CoordinateAxis1DTime taxis1D=null;\n  if (taxis != null) {\n    if (taxis instanceof CoordinateAxis1DTime) {\n      taxis1D=(CoordinateAxis1DTime)taxis;\n      tAxis=timeTaxis=(t_range == null) ? taxis1D : (CoordinateAxis1DTime)taxis1D.section(t_range);\n      coordAxes.add(timeTaxis);\n      timeDim=timeTaxis.getDimension(0);\n    }\n else {\n      if ((rt_range == null) && (t_range == null))       tAxis=taxis;\n else {\n        Section timeSection=new Section().appendRange(rt_range).appendRange(t_range);\n        tAxis=(CoordinateAxis)taxis.section(timeSection);\n      }\n      coordAxes.add(tAxis);\n    }\n  }\n  CoordinateAxis1DTime rtaxis=from.getRunTimeAxis();\n  if (rtaxis != null) {\n    if (taxis1D != null) {\n      Dimension tDim=taxis1D.getDimension(0);\n      Dimension rtDim=rtaxis.getDimension(0);\n      if (tDim.getName().equals(rtDim.getName())) {\n        runTimeAxis=(t_range == null) ? rtaxis : (CoordinateAxis1DTime)rtaxis.section(t_range);\n      }\n    }\n    if (runTimeAxis == null)     runTimeAxis=(rt_range == null) ? rtaxis : (CoordinateAxis1DTime)rtaxis.section(rt_range);\n    coordAxes.add(runTimeAxis);\n  }\n  Collections.sort(coordAxes,new CoordinateAxis.AxisComparator());\n  this.name=makeName(coordAxes);\n  this.coordTrans=new ArrayList<CoordinateTransform>(from.getCoordinateTransforms());\n  for (  CoordinateAxis axis : coordAxes) {\n    List<Dimension> dims=axis.getDimensions();\n    for (    Dimension dim : dims) {\n      dim.setShared(true);\n      if (!domain.contains(dim))       domain.add(dim);\n    }\n  }\n  setHorizStaggerType(from.getHorizStaggerType());\n}\n",
      "formalParam": [
        "GridCoordSys",
        "Range",
        "Range",
        "Range",
        "Range",
        "Range",
        "Range"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/thredds/cdm/src/main/java/ucar/nc2/dt/grid/GridCoordSys.java",
      "types": [
        "List",
        "Collections",
        "Collection",
        "ArrayList",
        "Comparator"
      ],
      "apicalls": [
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "util",
        "collection",
        "list",
        "array",
        "java",
        "comparator",
        "sort"
      ]
    },
    {
      "method": "setApplicationClassLoader@317",
      "body": "public void setApplicationClassLoader(final ClassLoader appLoader){\n  if (appLoader == null) {\n    return;\n  }\n  ClassLoader loader=appLoader;\n  try {\n    appLoader.loadClass(\"org.mozilla.javascript.Context\");\n  }\n catch (  ClassNotFoundException e) {\n    loader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){\n      public ClassLoader run(){\n        return new RhinoClassLoaderDecoration(appLoader,JavascriptEngine.class.getClassLoader());\n      }\n    }\n);\n  }\n  context.setApplicationClassLoader(loader);\n}\n",
      "formalParam": [
        "ClassLoader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
                "node": "DAPICall",
                "_returns": "Tau_T",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.ClassLoader.loadClass(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.Class",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/birt/data/org.eclipse.birt.report.engine.script.javascript/src/org/eclipse/birt/report/engine/javascript/JavascriptEngine.java",
      "types": [
        "Class",
        "PrivilegedAction",
        "AccessController",
        "String",
        "ClassNotFoundException",
        "ClassLoader"
      ],
      "apicalls": [
        "doPrivileged",
        "loadClass"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ClassLoader.loadClass(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "lang",
        "controller",
        "access",
        "class",
        "java",
        "found",
        "load",
        "security",
        "string",
        "loader",
        "action",
        "privileged"
      ]
    },
    {
      "method": "MainView@17",
      "body": "public MainView(){\n  setLayout(new MigLayout(\"fill\"));\n  setSize(1280,800);\n  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  setTitle(\"YASL - Yet another shopping list\");\n  mainPanel=new JPanel(new MigLayout(\"fill\"));\n  this.add(mainPanel,\"grow\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JFrame.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Window.setSize(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JFrame.setDefaultCloseOperation(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Frame.setTitle(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JPanel.JPanel(java.awt.LayoutManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/yasl/yasl/src/main/java/qse_sepm_ss12_07/gui/MainView.java",
      "types": [
        "Component",
        "String",
        "Frame",
        "Integer",
        "JPanel",
        "Object",
        "Container",
        "LayoutManager",
        "Window",
        "JFrame"
      ],
      "apicalls": [
        "setDefaultCloseOperation",
        "setSize",
        "setLayout",
        "add",
        "setTitle"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JFrame.setLayout(java.awt.LayoutManager)",
            "java.awt.Window.setSize(int,int)",
            "javax.swing.JFrame.setDefaultCloseOperation(int)",
            "java.awt.Frame.setTitle(java.lang.String)",
            "javax.swing.JPanel.JPanel(java.awt.LayoutManager)",
            "java.awt.Container.add(java.awt.Component,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "manager",
        "set",
        "javax",
        "integer",
        "size",
        "component",
        "swing",
        "title",
        "default",
        "string",
        "frame",
        "awt",
        "j",
        "object",
        "container",
        "window",
        "operation",
        "java",
        "add",
        "layout",
        "close",
        "panel"
      ]
    },
    {
      "method": "canDeserializeDeviceActionQuery4@57",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/4308Cirrus/tendril-domain/src/test/java/edu/colorado/cs/cirrus/domain/model/DeviceActionQueryTest.java",
      "body": "@Test public void canDeserializeDeviceActionQuery4(){\n  Serializer serializer=new Persister();\n  File source=new File(\"src/test/resources/QueryDeviceAction4.xml\");\n  try {\n    DeviceActionQuery exampleUser=serializer.read(DeviceActionQuery.class,source);\n    System.err.println(exampleUser);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail();\n  }\n}\n",
      "types": [
        "PrintStream",
        "Character",
        "Throwable",
        "File",
        "String"
      ],
      "apicalls": [
        "printStackTrace",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.PrintStream.println(char[])",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "string",
        "io",
        "stack",
        "print",
        "lang",
        "trace",
        "println",
        "java",
        "character",
        "throwable",
        "stream",
        "file"
      ]
    },
    {
      "method": "substringBetween@2414",
      "body": "/** \n * <p>Gets the String that is nested in between two Strings. Only the first match is returned.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty (\"\") open and close returns an empty string.</p> <pre> StringUtils.substringBetween(\"wx[b]yz\", \"[\", \"]\") = \"b\" StringUtils.substringBetween(null, *, *)          = null StringUtils.substringBetween(*, null, *)          = null StringUtils.substringBetween(*, *, null)          = null StringUtils.substringBetween(\"\", \"\", \"\")          = \"\" StringUtils.substringBetween(\"\", \"\", \"]\")         = null StringUtils.substringBetween(\"\", \"[\", \"]\")        = null StringUtils.substringBetween(\"yabcz\", \"\", \"\")     = \"\" StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   = \"abc\" StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   = \"abc\" </pre>\n * @param str  the String containing the substring, may be null\n * @param open  the String before the substring, may be null\n * @param close  the String after the substring, may be null\n * @return the substring, {@code null} if no match\n * @since 2.0\n */\npublic static String substringBetween(String str,String open,String close){\n  if (str == null || open == null || close == null) {\n    return null;\n  }\n  int start=str.indexOf(open);\n  if (start != INDEX_NOT_FOUND) {\n    int end=str.indexOf(close,start + open.length());\n    if (end != INDEX_NOT_FOUND) {\n      return str.substring(start + open.length(),end);\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/AnyMemo/src/org/apache/mycommons/lang3/StringUtils.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "substring",
        "integer",
        "index",
        "lang",
        "java",
        "length"
      ]
    },
    {
      "method": "setComponent@192",
      "body": "/** \n * Note: this interface is required to permit the safe association of a DropTarget with a Component in one of two ways, either: <code> component.setDropTarget(droptarget); </code> or <code> droptarget.setComponent(component); </code> <P> The Component will receive drops only if it is enabled.\n * @param c The new <code>Component</code> this <code>DropTarget</code>is to be associated with.<P>\n */\npublic synchronized void setComponent(Component c){\n  if (component == c || component != null && component.equals(c))   return;\n  Component old;\n  ComponentPeer oldPeer=null;\n  if ((old=component) != null) {\n    clearAutoscroll();\n    component=null;\n    if (componentPeer != null) {\n      oldPeer=componentPeer;\n      removeNotify(componentPeer);\n    }\n    old.setDropTarget(null);\n  }\n  if ((component=c) != null)   try {\n    c.setDropTarget(this);\n  }\n catch (  Exception e) {\n    if (old != null) {\n      old.setDropTarget(this);\n      addNotify(oldPeer);\n    }\n  }\n}\n",
      "formalParam": [
        "Component"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.Timer.stop()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.getPeer()",
                "node": "DAPICall",
                "_returns": "java.awt.peer.ComponentPeer",
                "_throws": []
              },
              {
                "_call": "java.awt.Component.getParent()",
                "node": "DAPICall",
                "_returns": "java.awt.Container",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/java/awt/dnd/DropTarget.java",
      "types": [
        "Container",
        "DropTarget",
        "Timer",
        "ComponentPeer",
        "Component"
      ],
      "apicalls": [
        "stop",
        "setDropTarget",
        "getPeer",
        "getParent"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.Timer.stop()",
            "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
            "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)"
          ]
        },
        {
          "calls": [
            "javax.swing.Timer.stop()",
            "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
            "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
            "java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)",
            "java.awt.Component.getPeer()",
            "java.awt.Component.getParent()"
          ]
        }
      ],
      "keywords": [
        "stop",
        "timer",
        "parent",
        "component",
        "swing",
        "awt",
        "java",
        "drop",
        "get",
        "container",
        "target",
        "javax",
        "set",
        "peer"
      ]
    },
    {
      "method": "setAccessible@145",
      "body": "/** \n * Attempts to set the value of the accessible flag. Setting this flag to {@code false} will enable access checks, setting to {@code true} willdisable them. If there is a security manager, checkPermission is called with a  {@code ReflectPermission(\"suppressAccessChecks\")}.\n * @param flag the new value for the accessible flag\n * @throws SecurityException if the request is denied\n * @see ReflectPermission\n */\npublic void setAccessible(boolean flag) throws SecurityException {\n  SecurityManager smgr=System.getSecurityManager();\n  if (smgr != null) {\n    smgr.checkPermission(new ReflectPermission(\"suppressAccessChecks\"));\n  }\n  this.flag=flag;\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getSecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.SecurityManager"
          },
          {
            "_call": "java.lang.SecurityManager.checkPermission(java.security.Permission)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/main/java/java/lang/reflect/AccessibleObject.java",
      "types": [
        "System",
        "Permission",
        "SecurityManager"
      ],
      "apicalls": [
        "checkPermission",
        "getSecurityManager"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.lang.SecurityManager.checkPermission(java.security.Permission)"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "system",
        "permission",
        "check",
        "java",
        "manager",
        "security"
      ]
    },
    {
      "method": "connect@42",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.getFile()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.net.URL.getFile()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.net.URL.getFile()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.lang.String.substring(int)",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/aries/web/web-urlhandler/src/main/java/org/apache/aries/web/url/WARConnection.java",
      "body": "@Override public void connect() throws IOException {\n  int fileNameIndex=url.getFile().lastIndexOf(\"/\") + 1;\n  String warName;\n  if (fileNameIndex != 0)   warName=url.getFile().substring(fileNameIndex);\n else   warName=url.getFile();\n  converter=new WarToWabConverterImpl(new InputStreamProvider(){\n    public InputStream getInputStream() throws IOException {\n      return url.openStream();\n    }\n  }\n,warName,properties);\n}\n",
      "types": [
        "String",
        "Integer",
        "URL"
      ],
      "apicalls": [
        "substring",
        "getFile",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.getFile()",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.net.URL.getFile()"
          ]
        },
        {
          "calls": [
            "java.net.URL.getFile()",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.net.URL.getFile()",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "last",
        "index",
        "url",
        "string",
        "get",
        "java",
        "substring",
        "lang",
        "file",
        "integer",
        "net"
      ]
    },
    {
      "method": "execute@195",
      "body": "public ResultList<ResultItem> execute(){\n  try {\n    final IFastSearchEngine engine=getSearchEngine();\n    final IQuery fastQuery=createQuery();\n    IQueryResult result=null;\n    try {\n      LOG.debug(DEBUG_EXECUTE_QR_URL + queryServerUrl);\n      LOG.debug(DEBUG_EXECUTE_COLLECTIONS + getSearchConfiguration().getCollections());\n      LOG.debug(DEBUG_EXECUTE_QUERY + fastQuery.getQueryString());\n      LOG.debug(DEBUG_EXECUTE_FILTER + getSearchConfiguration().getCollectionFilterString());\n      result=engine.search(fastQuery);\n    }\n catch (    SocketTimeoutException ste) {\n      LOG.error(getSearchConfiguration().getName() + \" --> \" + ste.getMessage());\n      return new FastSearchResult<ResultItem>();\n    }\ncatch (    IOException ioe) {\n      LOG.error(getSearchConfiguration().getName() + ERR_FAST_FAILURE,ioe);\n      return new FastSearchResult<ResultItem>();\n    }\ncatch (    SearchEngineException fe) {\n      LOG.error(getSearchConfiguration().getName() + ERR_FAST_FAILURE + '['+ fe.getErrorCode()+ ']',fe);\n      return new FastSearchResult<ResultItem>();\n    }\n    DUMP.info(fastQuery.toString());\n    final FastSearchResult<ResultItem> searchResult=collectResults(result);\n    if (getSearchConfiguration().isSpellcheck()) {\n      collectSpellingSuggestions(result,searchResult);\n    }\n    if (getSearchConfiguration().isRelevantQueries() && null == getParameter(\"qs\")) {\n      collectRelevantQueries(result,searchResult);\n    }\n    if (getNavigators() != null) {\n      collectModifiers(result,searchResult);\n    }\n    final String collapseId=getParameter(COLLAPSE_PARAMETER);\n    if (getSearchConfiguration().isCollapsing() && getSearchConfiguration().isExpansion()) {\n      if (collapseId != null && !collapseId.equals(\"\")) {\n        if (searchResult.getResults().size() > 0) {\n          final ResultItem itm=searchResult.getResults().get(0);\n          final URL url=new URL(itm.getField(\"url\"));\n          searchResult.addField(\"collapsedDomain\",url.getHost());\n        }\n      }\n    }\n    return searchResult;\n  }\n catch (  ConfigurationException e) {\n    LOG.error(ERR_EXECUTE_FAILURE,e);\n    throw new SearchCommandException(e);\n  }\ncatch (  MalformedURLException e) {\n    LOG.error(ERR_EXECUTE_FAILURE,e);\n    throw new SearchCommandException(e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.net.URL.URL(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.net.MalformedURLException"
                ]
              },
              {
                "_call": "java.net.URL.getHost()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "ResultList<ResultItem>",
      "file": "./java_projects/Possom/generic.sesam/search-command-control/fast/src/main/java/no/sesat/search/mode/command/AbstractFast4SearchCommand.java",
      "types": [
        "URL",
        "String",
        "Object",
        "MalformedURLException",
        "Boolean"
      ],
      "apicalls": [
        "equals",
        "getHost"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.getHost()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "get",
        "host",
        "object",
        "malformed",
        "equals",
        "exception",
        "java",
        "net",
        "boolean",
        "url"
      ]
    },
    {
      "method": "getAcceptMultiparted@48",
      "body": "public Map<String,String> getAcceptMultiparted(){\n  Map<String,String> accept=new HashMap<String,String>();\n  Iterator<?> i=getChildrenWithName(ACCEPT);\n  if (i == null || !i.hasNext())   i=getChildrenWithName(PRE_RFC_ACCEPT);\n  while (i.hasNext()) {\n    Element e=(Element)i.next();\n    String t=e.getText();\n    if (t != null) {\n      if (e.getAttributeValue(ALTERNATE) != null && e.getAttributeValue(ALTERNATE).trim().length() > 0) {\n        accept.put(t.trim(),e.getAttributeValue(ALTERNATE));\n      }\n else {\n        accept.put(t.trim(),null);\n      }\n    }\n  }\n  return accept;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "$NOT$java.util.Iterator<Tau_E>.hasNext()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_then": [
                  {
                    "_call": "java.lang.String.trim()",
                    "_throws": [],
                    "_returns": "java.lang.String",
                    "node": "DAPICall"
                  },
                  {
                    "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
                    "_throws": [],
                    "_returns": "java.lang.String",
                    "node": "DAPICall"
                  }
                ],
                "_else": [
                  {
                    "_call": "java.lang.String.trim()",
                    "_throws": [],
                    "_returns": "java.lang.String",
                    "node": "DAPICall"
                  },
                  {
                    "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
                    "_throws": [],
                    "_returns": "java.lang.String",
                    "node": "DAPICall"
                  }
                ],
                "_cond": [],
                "node": "DBranch"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "Map<String,String>",
      "file": "./java_projects/abdera/parser/src/main/java/org/apache/abdera/parser/stax/FOMMultipartCollection.java",
      "types": [
        "HashMap",
        "Boolean",
        "Map",
        "Iterator",
        "String"
      ],
      "apicalls": [
        "put",
        "trim",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "$NOT$java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.lang.String.trim()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "map",
        "trim",
        "string",
        "next",
        "java",
        "util",
        "put",
        "hash",
        "lang",
        "boolean"
      ]
    },
    {
      "method": "visitListGroup@462",
      "body": "public Object visitListGroup(ListGroupDesign group,Object value){\n  try {\n    bout.reset();\n    writeListGroup(bdos,group);\n    bdos.flush();\n    IOUtil.writeShort(dos,LIST_GROUP_DESIGN);\n    IOUtil.writeBytes(dos,bout.toByteArray());\n    BandDesign header=group.getHeader();\n    IOUtil.writeBool(dos,header != null);\n    if (header != null) {\n      value=header.accept(this,value);\n      if (value != null) {\n        return value;\n      }\n    }\n    BandDesign footer=group.getFooter();\n    IOUtil.writeBool(dos,footer != null);\n    if (footer != null) {\n      value=footer.accept(this,value);\n      if (value != null) {\n        return value;\n      }\n    }\n  }\n catch (  IOException ex) {\n    return ex;\n  }\n  return null;\n}\n",
      "formalParam": [
        "ListGroupDesign",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.reset()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataOutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/birt/engine/org.eclipse.birt.report.engine/src/org/eclipse/birt/report/engine/ir/EngineIRWriter.java",
      "types": [
        "IOException",
        "DataOutputStream",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "reset",
        "flush",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.reset()",
            "java.io.DataOutputStream.flush()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "io",
        "exception",
        "output",
        "data",
        "byte",
        "array",
        "flush",
        "stream",
        "java",
        "reset"
      ]
    },
    {
      "method": "run@123",
      "body": "public void run(){\n  if (getSelectedResources().isEmpty())   return;\n  IResource resource=(IResource)getSelectedResources().get(0);\n  if (resource != null) {\n    if (promptForName) {\n      BookmarkPropertiesDialog dialog=new BookmarkPropertiesDialog(shellProvider.getShell());\n      dialog.setResource(resource);\n      dialog.open();\n    }\n else {\n      Map attrs=new HashMap();\n      attrs.put(IMarker.MESSAGE,resource.getName());\n      CreateMarkersOperation op=new CreateMarkersOperation(IMarker.BOOKMARK,attrs,resource,BookmarkMessages.CreateBookmark_undoText);\n      try {\n        PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,null,WorkspaceUndoUtil.getUIInfoAdapter(shellProvider.getShell()));\n      }\n catch (      ExecutionException e) {\n        IDEWorkbenchPlugin.log(null,e);\n      }\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.ui/bundles/org.eclipse.ui.ide/extensions/org/eclipse/ui/actions/AddBookmarkAction.java",
      "types": [
        "Object",
        "HashMap",
        "Map"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "hash",
        "map",
        "object",
        "put"
      ]
    },
    {
      "method": "equals@7609",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "$NOT$java.nio.ByteBuffer.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/storm/src/jvm/backtype/storm/generated/Nimbus.java",
      "body": "@Override public boolean equals(Object that){\n  if (that == null)   return false;\n  if (that instanceof uploadChunk_args)   return this.equals((uploadChunk_args)that);\n  return false;\n}\n",
      "types": [
        "ByteBuffer",
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.nio.ByteBuffer.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "nio",
        "boolean",
        "string",
        "object",
        "buffer",
        "byte",
        "java",
        "lang"
      ]
    },
    {
      "method": "setFillsViewportHeight@22",
      "body": "/** \n * Sets whether or not this table is always made large enough to fill the height of an enclosing viewport. If the preferred height of the table is smaller than the viewport, then the table will be stretched to fill the viewport. In other words, this ensures the table is never smaller than the viewport. The default for this property is  {@code false}.\n * @param fillsViewportHeight whether or not this table is always made large enough to fill the height of an enclosing viewport\n * @see #getFillsViewportHeight\n * @see #getScrollableTracksViewportHeight\n * @since 1.6\n * @beaninfo bound: true description: Whether or not this table is always made large enough to fill the height of anenclosing viewport\n */\npublic void setFillsViewportHeight(boolean fillsViewportHeight){\n  boolean old=this.fillsViewportHeight;\n  this.fillsViewportHeight=fillsViewportHeight;\n  resizeAndRepaint();\n  firePropertyChange(\"fillsViewportHeight\",old,fillsViewportHeight);\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTable.resizeAndRepaint()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/sherlog/org.javakontor.sherlog.util.ui.table/src/org/javakontor/sherlog/util/ui/table/SherlogTable.java",
      "types": [
        "JTable",
        "String",
        "Boolean",
        "JComponent"
      ],
      "apicalls": [
        "resizeAndRepaint",
        "firePropertyChange"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTable.resizeAndRepaint()",
            "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "javax",
        "property",
        "table",
        "string",
        "resize",
        "fire",
        "change",
        "repaint",
        "component",
        "swing",
        "j"
      ]
    },
    {
      "method": "getText@111",
      "body": "public String getText(){\n  StringBuffer buffer=new StringBuffer(\"[\");\n  boolean first=true;\n  for (  Expression expression : expressions) {\n    if (first) {\n      first=false;\n    }\n else {\n      buffer.append(\", \");\n    }\n    buffer.append(expression.getText());\n  }\n  buffer.append(\"]\");\n  return buffer.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuffer",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/groovy-core/src/main/org/codehaus/groovy/ast/expr/ArrayExpression.java",
      "types": [
        "StringBuffer",
        "String",
        "Object"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "string",
        "append",
        "lang",
        "object",
        "java"
      ]
    },
    {
      "method": "readExternal@49",
      "body": "public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {\n  Vector v=new Vector();\n  long size=ExtUtil.readNumeric(in);\n  for (int i=0; i < size; i++) {\n    v.addElement(ExtUtil.read(in,new ExtWrapTagged(),pf));\n  }\n  val=v;\n}\n",
      "formalParam": [
        "DataInputStream",
        "PrototypeFactory"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/FormDesigner/OpenRosa/src/org/openrosa/client/jr/core/util/externalizable/ExtWrapListPoly.java",
      "types": [
        "Vector",
        "Object"
      ],
      "apicalls": [
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "java",
        "vector",
        "element",
        "util",
        "add"
      ]
    },
    {
      "method": "convert@368",
      "formalParam": [
        "String",
        "String",
        "WordprocessingMLPackage"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "javax.xml.transform.TransformerException.getCause()",
            "node": "DAPICall",
            "_returns": "java.lang.Throwable",
            "_throws": []
          }
        ]
      },
      "returnType": "List<Object>",
      "file": "./java_projects/docx4j/src/main/java/org/docx4j/convert/in/xhtml/XHTMLImporter.java",
      "body": "/** \n * Convert the well formed XHTML contained in the string to a list of WML objects.\n * @param content\n * @param baseUrl\n * @param wordMLPackage\n * @return\n */\npublic static List<Object> convert(String content,String baseUrl,WordprocessingMLPackage wordMLPackage) throws Docx4JException {\n  XHTMLImporter importer=new XHTMLImporter(wordMLPackage);\n  importer.renderer=new DocxRenderer();\n  InputSource is=new InputSource(new BufferedReader(new StringReader(content)));\n  Document dom;\n  try {\n    dom=XMLResource.load(is).getDocument();\n  }\n catch (  org.docx4j.org.xhtmlrenderer.util.XRRuntimeException xre) {\n    Throwable t=xre.getCause();\n    if (t instanceof javax.xml.transform.TransformerException) {\n      Throwable t2=((javax.xml.transform.TransformerException)t).getCause();\n      if (t2 instanceof org.xml.sax.SAXParseException) {\n        throw new Docx4JException(\"issues at Line \" + ((org.xml.sax.SAXParseException)t2).getLineNumber() + \", Col \"+ ((org.xml.sax.SAXParseException)t2).getColumnNumber(),t);\n      }\n      throw new Docx4JException(((javax.xml.transform.TransformerException)t).getLocationAsString(),t);\n    }\n else {\n      throw xre;\n    }\n  }\n  importer.renderer.setDocument(dom,baseUrl);\n  importer.renderer.layout();\n  importer.traverse(importer.renderer.getRootBox(),importer.imports,null);\n  return importer.imports;\n}\n",
      "types": [
        "Throwable",
        "TransformerException",
        "BufferedReader",
        "Reader",
        "StringReader",
        "String"
      ],
      "apicalls": [
        "getCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "javax.xml.transform.TransformerException.getCause()"
          ]
        }
      ],
      "keywords": [
        "java",
        "xml",
        "string",
        "cause",
        "transform",
        "reader",
        "get",
        "throwable",
        "transformer",
        "buffered",
        "javax",
        "exception",
        "io"
      ]
    },
    {
      "method": "getAccessibleChild@196",
      "body": "/** \n * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic Accessible getAccessibleChild(JComponent a,int b){\n  Accessible returnValue=((ComponentUI)(uis.elementAt(0))).getAccessibleChild(a,b);\n  for (int i=1; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).getAccessibleChild(a,b);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JComponent",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "node": "DAPICall",
            "_returns": "javax.accessibility.Accessible",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
                "node": "DAPICall",
                "_returns": "javax.accessibility.Accessible",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "Accessible",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/multi/MultiToolBarUI.java",
      "types": [
        "Accessible",
        "Vector",
        "Integer",
        "JComponent",
        "ComponentUI"
      ],
      "apicalls": [
        "size",
        "getAccessibleChild"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "java.util.Vector.size()",
            "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "plaf",
        "util",
        "vector",
        "size",
        "ui",
        "swing",
        "get",
        "component",
        "java",
        "child",
        "accessible",
        "javax",
        "integer",
        "j"
      ]
    },
    {
      "method": "containsRTLText@52",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "node": "DAPICall",
                "_returns": "char",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ANNIS/annis-interfaces/src/main/java/annis/CommonHelper.java",
      "body": "public static boolean containsRTLText(String str){\n  for (int i=0; i < str.length(); i++) {\n    char cc=str.charAt(i);\n    if (cc >= 1425 && cc <= 1785) {\n      return true;\n    }\n else     if (cc >= 64286 && cc <= 65019) {\n      return true;\n    }\n else     if (cc >= 65136 && cc <= 65276) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "types": [
        "Integer",
        "Character",
        "String"
      ],
      "apicalls": [
        "length",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "char",
        "java",
        "character",
        "lang",
        "length",
        "string",
        "integer"
      ]
    },
    {
      "method": "test_Constructor_LStringLStringLThrowable_3@496",
      "body": "/** \n * @test java.sql.SQLRecoverableException(String, String, Throwable)\n */\npublic void test_Constructor_LStringLStringLThrowable_3(){\n  SQLRecoverableException sQLRecoverableException=new SQLRecoverableException(\"MYTESTSTRING\",null,null);\n  assertNotNull(sQLRecoverableException);\n  assertNull(\"The SQLState of SQLRecoverableException should be null\",sQLRecoverableException.getSQLState());\n  assertEquals(\"The reason of SQLRecoverableException set and get should be equivalent\",\"MYTESTSTRING\",sQLRecoverableException.getMessage());\n  assertEquals(\"The error code of SQLRecoverableException should be 0\",sQLRecoverableException.getErrorCode(),0);\n  assertNull(\"The cause of SQLRecoverableException should be null\",sQLRecoverableException.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.SQLException.getSQLState()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.SQLException.getErrorCode()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/sql/src/test/java/org/apache/harmony/sql/tests/java/sql/SQLRecoverableExceptionTest.java",
      "types": [
        "SQLException",
        "String",
        "Throwable",
        "Integer"
      ],
      "apicalls": [
        "getCause",
        "getMessage",
        "getErrorCode",
        "getSQLState"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.SQLException.getSQLState()",
            "java.lang.Throwable.getMessage()",
            "java.sql.SQLException.getErrorCode()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "code",
        "cause",
        "string",
        "state",
        "error",
        "sql",
        "integer",
        "exception",
        "java",
        "lang",
        "message",
        "get",
        "throwable"
      ]
    },
    {
      "method": "getSubmitters@80",
      "body": "public Object getSubmitters(EntityReference ref,UserRequestParams uparams,Context context){\n  try {\n    List<Object> entities=new ArrayList<Object>();\n    EPerson[] ePersons=ContentHelper.findAllSubmitters(context,uparams.getQuery(),uparams.getStart(),uparams.getLimit(),uparams.getSort().replaceAll(\"_\",\" \"));\n    for (    EPerson e : ePersons) {\n      entities.add(new UserEntityTrim(e));\n    }\n    return entities;\n  }\n catch (  SQLException ex) {\n    throw new EntityException(\"Internal server error\",\"SQL error\",500);\n  }\n}\n",
      "formalParam": [
        "EntityReference",
        "UserRequestParams",
        "Context"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.Object>.add(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/dspace-rest-api/dspace-rest/src/main/java/org/dspace/rest/entities/WorkflowEntity.java",
      "types": [
        "List",
        "Object",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
            "java.util.List<java.lang.Object>.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "list",
        "add",
        "array",
        "util",
        "boolean",
        "java",
        "object"
      ]
    },
    {
      "method": "getDefaultUsingSymbolSpace@129",
      "body": "/** \n * Returns the if symbol space is used by default for given locale.\n * @param locale\n * @return\n */\npublic static boolean getDefaultUsingSymbolSpace(ULocale locale){\n  if (locale == null) {\n    locale=ULocale.getDefault();\n  }\n  Currency currency=Currency.getInstance(locale);\n  if (currency != null) {\n    String symbol=currency.getSymbol();\n    if (symbol == null) {\n      return false;\n    }\n    NumberFormat formater=NumberFormat.getCurrencyInstance(locale);\n    String result=formater.format(1);\n    if (result.endsWith(symbol)) {\n      result=result.substring(0,result.indexOf(symbol));\n      for (int i=result.length() - 1; i >= 0; i--) {\n        if (UCharacter.isSpaceChar(result.codePointAt(i))) {\n          return true;\n        }\n      }\n    }\n else {\n      result=result.substring(result.indexOf(symbol) + symbol.length());\n      for (int i=0; i < result.length(); i++) {\n        if (UCharacter.isSpaceChar(result.codePointAt(i))) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "formalParam": [
        "ULocale"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.codePointAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.lang.String.codePointAt(int)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.lang.String.length()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/birt/UI/org.eclipse.birt.report.designer.core/src/org/eclipse/birt/report/designer/util/FormatCurrencyNumPattern.java",
      "types": [
        "String",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "length",
        "codePointAt",
        "indexOf",
        "endsWith",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.length()",
            "java.lang.String.codePointAt(int)",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()",
            "java.lang.String.codePointAt(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "index",
        "boolean",
        "substring",
        "length",
        "point",
        "ends",
        "integer",
        "string",
        "code",
        "java"
      ]
    },
    {
      "method": "paintToolTipBorder@977",
      "body": "@Override public void paintToolTipBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  findPainter(context.getComponentState(),\"ToolTipBorder\",-1).paintToolTipBorder(context,g,x,y,w,h);\n}\n",
      "formalParam": [
        "SynthContext",
        "Graphics",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getComponentState()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthPainter.paintToolTipBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/main/java/common/javax/swing/plaf/synth/PaintersManager.java",
      "types": [
        "Boolean",
        "Graphics",
        "plaf",
        "String",
        "Integer",
        "Object"
      ],
      "apicalls": [
        "equals",
        "paintToolTipBorder",
        "getComponentState",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.synth.SynthContext.getComponentState()",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "javax.swing.plaf.synth.SynthPainter.paintToolTipBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
          ]
        }
      ],
      "keywords": [
        "state",
        "equals",
        "border",
        "get",
        "paint",
        "boolean",
        "tool",
        "graphics",
        "integer",
        "swing",
        "lang",
        "javax",
        "painter",
        "case",
        "plaf",
        "ignore",
        "component",
        "object",
        "tip",
        "synth",
        "string",
        "context",
        "java"
      ]
    },
    {
      "method": "findHostItemGroup_result@6195",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic findHostItemGroup_result(findHostItemGroup_result other){\n  if (other.isSetSuccess()) {\n    List<String> __this__success=new ArrayList<String>();\n    for (    String other_element : other.success) {\n      __this__success.add(other_element);\n    }\n    this.success=__this__success;\n  }\n}\n",
      "formalParam": [
        "findHostItemGroup_result"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/cloumon/src/java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "String",
        "List",
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "add",
        "array",
        "list",
        "java",
        "boolean",
        "string",
        "util"
      ]
    },
    {
      "method": "setMaskTheT@13536",
      "body": "public void setMaskTheT(NonNegativeInteger theT,int ROIIndex,int shapeIndex){\n  for (Iterator iter=delegates.iterator(); iter.hasNext(); ) {\n    Object o=iter.next();\n    if (o instanceof MetadataStore) {\n      MetadataStore store=(MetadataStore)o;\n      store.setMaskTheT(theT,ROIIndex,shapeIndex);\n    }\n  }\n}\n",
      "formalParam": [
        "NonNegativeInteger",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "_returns": "java.util.Iterator",
            "node": "DAPICall"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/bioformats/components/scifio/src/loci/formats/meta/AggregateMetadata.java",
      "types": [
        "Object",
        "Boolean",
        "Iterator",
        "List"
      ],
      "apicalls": [
        "next",
        "hasNext",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "object",
        "list",
        "java",
        "iterator",
        "boolean",
        "util",
        "next"
      ]
    },
    {
      "method": "getStringAttribute@18",
      "body": "public static String getStringAttribute(PageItem item,String attributeName){\n  Map<String,String> attributes=item.getAttributes();\n  String value=null;\n  if (attributes != null) {\n    if (attributes.containsKey(attributeName)) {\n      value=attributes.get(attributeName);\n    }\n  }\n  return value;\n}\n",
      "formalParam": [
        "PageItem",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/taskhelper/hakken-android-client/src/main/java/uk/co/vurt/hakken/processor/PageItemProcessor.java",
      "types": [
        "Boolean",
        "Map",
        "Object",
        "String"
      ],
      "apicalls": [
        "containsKey",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "get",
        "key",
        "java",
        "string",
        "boolean",
        "map",
        "object",
        "contains"
      ]
    },
    {
      "method": "createBoundaryEvent@577",
      "body": "public Object createBoundaryEvent(Object container){\n  TBoundaryEvent event=new TBoundaryEvent();\n  event.setId(createId());\n  if (container instanceof TProcess) {\n    ((TProcess)container).getFlowElement().add(m_factory.createBoundaryEvent(event));\n  }\n else   if (container instanceof TSubProcess) {\n    ((TSubProcess)container).getFlowElement().add(m_factory.createBoundaryEvent(event));\n  }\n else   if (container instanceof TChoreography) {\n    ((TChoreography)container).getFlowElement().add(m_factory.createBoundaryEvent(event));\n  }\n else   if (container instanceof TSubChoreography) {\n    ((TSubChoreography)container).getFlowElement().add(m_factory.createBoundaryEvent(event));\n  }\n  return (event);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.UUID.randomUUID()",
            "_throws": [],
            "_returns": "java.util.UUID",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.UUID.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Object",
      "file": "./java_projects/savara-core/bundles/org.savara.bpmn2/src/main/java/org/savara/bpmn2/internal/generation/BPMN2ModelFactory.java",
      "types": [
        "UUID",
        "String"
      ],
      "apicalls": [
        "randomUUID",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.UUID.randomUUID()",
            "java.util.UUID.toString()"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "uuid",
        "java",
        "random"
      ]
    },
    {
      "method": "testFillObject@79",
      "body": "@Test public void testFillObject() throws Exception {\n  ExperimenterI ei=new ExperimenterI();\n  ei.setOmeName(rstring(\"name\"));\n  ei.linkExperimenterGroup(new ExperimenterGroupI());\n  Experimenter e=(Experimenter)ei.fillObject(new IceMapper());\n  assertEquals(new Integer(1),new Integer(e.sizeOfGroupExperimenterMap()));\n  PixelsI p=new PixelsI();\n  ImageI i=new ImageI();\n  p.setImage(i);\n  p.getDetails().setOwner(ei);\n  p.fillObject(new IceMapper());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Integer.Integer(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openmicroscopy/components/blitz/test/ome/services/blitz/test/utests/ModelTest.java",
      "types": [
        "NumberFormatException",
        "Integer",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.lang.Integer.Integer(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "integer",
        "java",
        "lang",
        "format",
        "number",
        "string"
      ]
    },
    {
      "method": "encodeReadOnly@173",
      "body": "public void encodeReadOnly(FacesContext context) throws IOException {\n  ResponseWriter writer=context.getResponseWriter();\n  String[] values=(String[])getSubmittedValue();\n  if (values == null) {\n    values=(String[])getValue();\n  }\n  if (values != null) {\n    writer.startElement(\"div\",this);\n    for (    String value : values) {\n      String[] keys=StringUtils.split(value,getKeySeparator());\n      List<DirectoryEntry> nodes=resolveKeys(keys);\n      List<String> labels=new ArrayList<String>();\n      for (      DirectoryEntry node : nodes) {\n        String itemValue=node.getId();\n        String itemLabel=node.getLabel();\n        itemLabel=computeItemLabel(context,itemValue,itemLabel);\n        labels.add(itemLabel);\n      }\n      String concatenatedLabel=StringUtils.join(labels.iterator(),getKeySeparator());\n      writer.startElement(\"div\",this);\n      writer.write(concatenatedLabel);\n      writer.endElement(\"div\");\n    }\n    writer.endElement(\"div\");\n  }\n}\n",
      "formalParam": [
        "FacesContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.iterator()",
            "node": "DAPICall",
            "_returns": "java.util.Iterator",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/nuxeo-jsf/nuxeo-platform-ui-web/src/main/java/org/nuxeo/ecm/platform/ui/web/directory/ChainSelectMany.java",
      "types": [
        "Boolean",
        "Iterator",
        "List",
        "ArrayList",
        "String"
      ],
      "apicalls": [
        "add",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.String>.iterator()"
          ]
        }
      ],
      "keywords": [
        "util",
        "array",
        "boolean",
        "add",
        "java",
        "string",
        "iterator",
        "list"
      ]
    },
    {
      "method": "visit@102",
      "body": "/** \n * Implemented as specified by  {@link ImageDisplayVisitor}. \n * @see ImageDisplayVisitor#visit(ImageSet)\n */\npublic void visit(ImageSet node){\n  if (node.containsImages()) {\n    JComponent desktop=node.getInternalDesktop();\n    ImageDisplay child;\n    if (reset) {\n      desktop.removeAll();\n      Iterator<ImageDisplay> i=nodes.iterator();\n      ImageDisplay parent;\n      DataObject ho;\n      while (i.hasNext()) {\n        child=i.next();\n        parent=child.getParentDisplay();\n        if (parent == null || node == parent) {\n          ho=(DataObject)child.getHierarchyObject();\n          if (!visibleImages.contains(ho)) {\n            visibleImages.add(ho);\n            desktop.add(child);\n          }\n        }\n      }\n    }\n else {\n      Component[] comps=desktop.getComponents();\n      Component comp;\n      for (int i=0; i < comps.length; i++) {\n        comp=comps[i];\n        if (comp instanceof ImageDisplay) {\n          child=(ImageDisplay)comp;\n          visibleImages.add((DataObject)child.getHierarchyObject());\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "ImageSet"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.awt.Container.removeAll()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.awt.Container.add(java.awt.Component)",
                "_throws": [],
                "_returns": "java.awt.Component",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.awt.Container.getComponents()",
                "_throws": [],
                "_returns": "java.awt.Component[]",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openmicroscopy/components/insight/SRC/org/openmicroscopy/shoola/agents/dataBrowser/visitor/ResetNodesVisitor.java",
      "types": [
        "Container",
        "Component"
      ],
      "apicalls": [
        "removeAll",
        "getComponents",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.getComponents()"
          ]
        },
        {
          "calls": [
            "java.awt.Container.removeAll()",
            "java.awt.Container.add(java.awt.Component)"
          ]
        }
      ],
      "keywords": [
        "container",
        "components",
        "remove",
        "awt",
        "java",
        "component",
        "get",
        "add"
      ]
    },
    {
      "method": "listDirectory@507",
      "body": "public void listDirectory(String path){\n  mSoundFiles.clear();\n  byte[] payload=new byte[path.length() + 1];\n  for (int i=0; i < path.length(); ++i) {\n    payload[i]=(byte)path.charAt(i);\n  }\n  payload[path.length()]=0;\n  sendCommand(CMD_FILE_LIST,CMD_FILE_LIST,payload);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.clear()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/iohack/src/org/alljoyn/bus/sample/chat/HomeActivity.java",
      "types": [
        "System",
        "Object",
        "String",
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "arraycopy",
        "clear",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.clear()",
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "util",
        "system",
        "length",
        "object",
        "java",
        "array",
        "arraycopy",
        "lang",
        "clear",
        "list",
        "integer",
        "string"
      ]
    },
    {
      "method": "checkForRollover@208",
      "body": "public static void checkForRollover(Context context){\n  File logFile=getLogFile();\n  if (instance != null) {\n    if (logFile.length() > MAX_LOG_SIZE) {\n      instance.rollover(context);\n    }\n    AlarmManager alartManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);\n    Intent intent=new Intent(INTENT_LOG_ROLLOVER);\n    PendingIntent sender=PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);\n    long nextRunTime=System.currentTimeMillis() + AlarmManager.INTERVAL_DAY;\n    alartManager.set(AlarmManager.RTC_WAKEUP,nextRunTime,sender);\n  }\n}\n",
      "formalParam": [
        "Context"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.length()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/smstimefix/SMSFixLibrary/src/com/mattprecious/smsfix/library/LoggerHelper.java",
      "types": [
        "System",
        "String",
        "File",
        "Long"
      ],
      "apicalls": [
        "length",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.length()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "millis",
        "time",
        "java",
        "file",
        "lang",
        "io",
        "system",
        "length",
        "long",
        "string",
        "current"
      ]
    },
    {
      "method": "setDados@94",
      "body": "@Override public boolean setDados(){\n  List<Integer> fretes=new ArrayList<Integer>();\n  for (  Record rec : gridFrete.getSelectionModel().getSelections()) {\n    fretes.add(rec.getAsInteger(\"comFreteId\"));\n  }\n  spedFiscal.setFretes(fretes.toArray(new Integer[]{}));\n  contexto.put(\"classe\",spedFiscal);\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.Integer>.toArray(T[])",
            "_throws": [],
            "_returns": "T[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/OpenSIG/OpenSigFiscal/src/br/com/opensig/fiscal/client/visao/form/sped/FormularioSpedFiscalFrete.java",
      "types": [
        "List",
        "Boolean",
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "toArray",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "java.util.List<java.lang.Integer>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "list",
        "integer",
        "add",
        "array",
        "boolean",
        "java",
        "util"
      ]
    },
    {
      "method": "main@300",
      "body": "public static void main(String[] args) throws WsdlParseException, IOException, TemplateException {\n  try {\n    run(args);\n  }\n catch (  ToolsException e) {\n    System.out.println(e);\n    System.exit(1);\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.exit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/salesforce-connector/src/main/java/com/sforce/ws/tools/wsdlc.java",
      "types": [
        "Character",
        "Integer",
        "PrintStream",
        "System"
      ],
      "apicalls": [
        "println",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "system",
        "println",
        "io",
        "integer",
        "lang",
        "exit",
        "character",
        "print",
        "java",
        "stream"
      ]
    },
    {
      "method": "getData@94",
      "body": "public DirectByteBuffer[] getData(){\n  if (buffer == null) {\n    if (mCert == null)     return null;\n    try {\n      byte[] mCertBytes=mCert.getEncoded();\n      HashMap test=(new HashMap());\n      test.put(\"cert\",mCertBytes);\n      LocalTopK topK=ReputationDAO.get().get_topK_by_obs();\n      test.put(\"bloom\",ByteManip.objectToBytes(topK.getBloomFilter()));\n      byte b[][]=new byte[mAdvertisements.length][];\n      for (int i=0; i < mAdvertisements.length; i++)       b[i]=mAdvertisements[i].getEncoded();\n      test.put(\"adverts\",ByteManip.objectToBytes(b));\n      buffer=MessagingUtil.convertPayloadToBencodedByteStream(test,DirectByteBuffer.SS_MSG);\n    }\n catch (    Exception e) {\n      System.err.println(\"Couldn't convert non-null cert for exchange: \" + e);\n      e.printStackTrace();\n      return null;\n    }\n  }\n  return new DirectByteBuffer[]{buffer};\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.util.HashMap.HashMap()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "DirectByteBuffer[]",
      "file": "./java_projects/OneSwarm/oneswarm_az_mods/mods_onehop/edu/uw/cse/netlab/reputation/messages/CertificateExchange.java",
      "types": [
        "String",
        "HashMap",
        "Object",
        "Throwable",
        "PrintStream"
      ],
      "apicalls": [
        "printStackTrace",
        "println",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "java",
        "object",
        "hash",
        "print",
        "util",
        "io",
        "string",
        "stream",
        "trace",
        "throwable",
        "println",
        "stack",
        "map",
        "put"
      ]
    },
    {
      "method": "isEmpty@140",
      "body": "/** \n * {@inheritDoc} \n */\npublic boolean isEmpty(){\n  return (size() < 1);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration<java.lang.String>.nextElement()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration<java.lang.String>.hasMoreElements()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/bundlerepo/templates/org.apache.tiles/tiles-current/tiles-servlet/src/main/java/org/apache/tiles/servlet/context/ServletRequestScopeMap.java",
      "types": [
        "Boolean",
        "Enumeration",
        "String"
      ],
      "apicalls": [
        "nextElement",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration<java.lang.String>.hasMoreElements()",
            "java.util.Enumeration<java.lang.String>.nextElement()",
            "java.util.Enumeration<java.lang.String>.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "java",
        "next",
        "enumeration",
        "element",
        "elements",
        "string"
      ]
    },
    {
      "method": "testFacilityList@351",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ]
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ACLS-protocol-library/aclslib/src/test/java/au/edu/uq/cmm/aclslib/message/ResponseReaderTest.java",
      "body": "@Test public void testFacilityList() throws AclsException {\n  Response r=reader().read(source(\"101:;f1;f2;f3;|\\n\"));\n  assertEquals(ResponseType.FACILITY_LIST,r.getType());\n  assertTrue(r instanceof FacilityListResponse);\n  assertEquals(3,((FacilityListResponse)r).getList().size());\n  assertEquals(\"f1\",((FacilityListResponse)r).getList().get(0));\n  assertEquals(\"f2\",((FacilityListResponse)r).getList().get(1));\n  assertEquals(\"f3\",((FacilityListResponse)r).getList().get(2));\n}\n",
      "types": [
        "String",
        "Byte",
        "ByteArrayInputStream",
        "UnsupportedEncodingException"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "string",
        "get",
        "lang",
        "encoding",
        "byte",
        "exception",
        "array",
        "java",
        "io",
        "stream",
        "bytes",
        "input",
        "unsupported"
      ]
    },
    {
      "method": "setRra@324",
      "body": "/** \n * @param index\n * @param vRra\n * @throws java.lang.IndexOutOfBoundsException if the indexgiven is outside the bounds of the collection\n */\npublic void setRra(final int index,final java.lang.String vRra) throws java.lang.IndexOutOfBoundsException {\n  if (index < 0 || index >= this._rraList.size()) {\n    throw new IndexOutOfBoundsException(\"setRra: Index value '\" + index + \"' not in range [0..\"+ (this._rraList.size() - 1)+ \"]\");\n  }\n  this._rraList.set(index,vRra);\n}\n",
      "formalParam": [
        "int",
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.String>.set(int,java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/opennms_dashboard/protocols/xmp/src/main/java/org/opennms/netmgt/config/xmpDataCollection/Rrd.java",
      "types": [
        "Integer",
        "String",
        "List"
      ],
      "apicalls": [
        "size",
        "set"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.set(int,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "integer",
        "list",
        "string",
        "java",
        "set"
      ]
    },
    {
      "method": "stop@136",
      "body": "@Override public void stop() throws Exception {\nsynchronized (this) {\n    this.started=false;\n    stopAllItems();\n  }\n  this.scheduler.shutdown();\n  super.stop();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ExecutorService.shutdown()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/org.openscada.atlantis/org.openscada.da.server.simulation/src/org/openscada/da/server/simulation/scriptomatic/Hive.java",
      "types": [
        "Integer",
        "ExecutorService",
        "Thread"
      ],
      "apicalls": [
        "currentThread",
        "shutdown",
        "interrupt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()",
            "java.util.concurrent.ExecutorService.shutdown()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "concurrent",
        "util",
        "thread",
        "java",
        "service",
        "interrupt",
        "executor",
        "current",
        "shutdown",
        "lang"
      ]
    },
    {
      "method": "hasOutstandingCheckRequestForPiece@461",
      "body": "public boolean hasOutstandingCheckRequestForPiece(int piece_number){\n  if (fully_async) {\n    try {\n      class_mon.enter();\n      for (int i=0; i < async_check_queue.size(); i++) {\n        Object[] entry=(Object[])async_check_queue.get(i);\n        if (entry[0] == this) {\n          DiskManagerCheckRequest request=(DiskManagerCheckRequest)entry[1];\n          if (request.getPieceNumber() == piece_number) {\n            return (true);\n          }\n        }\n      }\n    }\n  finally {\n      class_mon.exit();\n    }\n  }\n  return (false);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/frostwire-desktop/components/azureus/src/main/java/org/gudy/azureus2/core3/disk/impl/access/impl/DMCheckerImpl.java",
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "list",
        "size",
        "java",
        "util",
        "integer"
      ]
    },
    {
      "method": "accept@34",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.isDirectory()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.File.getName()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/jreepad/src/jreepad/ui/ExtensionFileFilter.java",
      "body": "/** \n * Tests whether the given file has the appropriate extension.\n */\npublic boolean accept(File f){\n  if (f == null)   return false;\n  if (f.isDirectory())   return true;\n  String fileName=f.getName();\n  int i=fileName.lastIndexOf('.');\n  if (i <= 0 || i >= fileName.length() - 1)   return false;\n  String fileExtension=fileName.substring(i + 1).toLowerCase();\n  if (fileExtension.equals(lowercaseExtension))   return true;\n  return false;\n}\n",
      "types": [
        "Integer",
        "Object",
        "File",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "length",
        "substring",
        "getName",
        "lastIndexOf",
        "toLowerCase",
        "equals",
        "isDirectory"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.isDirectory()",
            "java.io.File.getName()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "java",
        "name",
        "last",
        "io",
        "file",
        "boolean",
        "length",
        "string",
        "lang",
        "directory",
        "equals",
        "integer",
        "case",
        "index",
        "object",
        "substring",
        "lower"
      ]
    },
    {
      "method": "toString@108",
      "body": "@Override public String toString(){\n  String httpMethodShort=httpMethodName.substring(httpMethodName.lastIndexOf('.') + 1);\n  String str=\"http method: \" + httpMethodShort + \"\\n\";\n  if (StringUtils.isBlank(description))   str+=\"description: \" + description + \"\\n\";\n  if (params != null && !params.isEmpty()) {\n    StringBuilder paramsStr=new StringBuilder();\n    for (    DocParameter param : params) {\n      paramsStr.append(\"   \").append(param).append(\"\\n\");\n    }\n    str+=\"parameters: \\n\" + paramsStr;\n  }\n  str+=\"returns \" + returnDetails;\n  if (jsonResponseExample != null)   str+=\"Response example: \" + jsonResponseExample + \"\\n\";\n  if (jsonRequestExample != null)   str+=\"Request example: \" + jsonRequestExample + \"\\n\";\n  if (possibleResponseStatuses != null) {\n    StringBuilder responseStatusStr=new StringBuilder();\n    for (    DocResponseStatus responseStatus : possibleResponseStatuses) {\n      responseStatusStr.append(\"* \").append(responseStatus).append(\"\\n\");\n    }\n    str+=\"Returns: \" + responseStatusStr;\n  }\n  return str;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/cloudify/tools/src/main/java/org/cloudifysource/restDoclet/docElements/DocHttpMethod.java",
      "types": [
        "StringBuilder",
        "Integer",
        "Object",
        "String"
      ],
      "apicalls": [
        "substring",
        "lastIndexOf",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)",
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "substring",
        "object",
        "index",
        "integer",
        "append",
        "java",
        "last",
        "builder"
      ]
    },
    {
      "method": "testRoles3a@516",
      "body": "@Test public void testRoles3a(){\n  classes(A,B,C,D,E,F,G);\n  objectProperties(p,q,r,s);\n  kb.addSubProperty(list(p,q,r),p);\n  kb.addSubClass(A,some(p,B));\n  kb.addSubClass(B,some(q,C));\n  kb.addSubClass(C,some(r,D));\n  kb.addSubClass(some(p,D),E);\n  Taxonomy<ATermAppl> hierarchy=getHierarchy();\n  assertEquals(singletonSets(E),hierarchy.getSupers(A,true));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.util.Set<T>>.HashSet<Set<T>>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Collections.singleton(Tau_T)",
            "_throws": [],
            "_returns": "java.util.Set",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Set<java.util.Set<T>>.add(java.util.Set<T>)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pellet/pellet-test/src/test/java/com/clarkparsia/pellet/test/el/ELTests.java",
      "types": [
        "Set",
        "Collections",
        "HashSet",
        "Boolean"
      ],
      "apicalls": [
        "add",
        "singleton"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.util.Set<T>>.HashSet<Set<T>>()",
            "java.util.Collections.singleton(Tau_T)",
            "java.util.Set<java.util.Set<T>>.add(java.util.Set<T>)"
          ]
        }
      ],
      "keywords": [
        "util",
        "collections",
        "singleton",
        "java",
        "boolean",
        "add",
        "hash",
        "set"
      ]
    },
    {
      "method": "remove@185",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Object",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Seam2.3/jboss-seam/src/main/java/org/jboss/seam/contexts/ServerConversationContext.java",
      "body": "public void remove(String name){\n  if (Events.exists())   Events.instance().raiseEvent(\"org.jboss.seam.preRemoveVariable.\" + name);\n  additions.remove(name);\n  removals.add(name);\n  if (Events.exists())   Events.instance().raiseEvent(\"org.jboss.seam.postRemoveVariable.\" + name);\n}\n",
      "types": [
        "Object",
        "Set",
        "Boolean",
        "Map",
        "String"
      ],
      "apicalls": [
        "remove",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "remove",
        "map",
        "string",
        "set",
        "object",
        "add",
        "boolean",
        "util"
      ]
    },
    {
      "method": "parseTimeStamp@47",
      "body": "public static Timestamp parseTimeStamp(String time){\n  return parseTime(time,\"dd.MM.yyyy HH:mm\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_try": [
              {
                "_call": "java.text.DateFormat.parse(java.lang.String)",
                "_throws": [
                  "java.text.ParseException"
                ],
                "_returns": "java.util.Date",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.Date.getTime()",
                "_throws": [],
                "_returns": "long",
                "node": "DAPICall"
              },
              {
                "_call": "java.sql.Timestamp.Timestamp(long)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ]
          }
        ]
      },
      "returnType": "Timestamp",
      "file": "./java_projects/radioaine/src/main/java/ohtu/radioaine/tools/Time.java",
      "types": [
        "Date",
        "ParseException",
        "SimpleDateFormat",
        "DateFormat",
        "String",
        "Timestamp",
        "Long",
        "Throwable"
      ],
      "apicalls": [
        "getTime",
        "parse",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.parse(java.lang.String)",
            "java.util.Date.getTime()",
            "java.sql.Timestamp.Timestamp(long)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.parse(java.lang.String)",
            "java.util.Date.getTime()",
            "java.sql.Timestamp.Timestamp(long)"
          ]
        }
      ],
      "keywords": [
        "text",
        "parse",
        "timestamp",
        "java",
        "print",
        "stack",
        "sql",
        "util",
        "get",
        "string",
        "lang",
        "exception",
        "throwable",
        "time",
        "date",
        "trace",
        "simple",
        "format",
        "long"
      ]
    },
    {
      "method": "unavailable@92",
      "body": "public boolean unavailable(int timeBetAlarms){\n  if (canSendEmail(timeBetAlarms)) {\n    lastEmailTime=(new Date()).getTime();\n    return true;\n  }\n else {\n    return false;\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Date.Date()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Date.getTime()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/SeavusJB3/src/java/com/sapienter/jbilling/server/pluggableTask/ProcessorEmailAlarm.java",
      "types": [
        "System",
        "Long",
        "Date"
      ],
      "apicalls": [
        "getTime",
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Date.Date()",
            "java.util.Date.getTime()"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "time",
        "system",
        "long",
        "millis",
        "util",
        "java",
        "date",
        "current",
        "get",
        "lang"
      ]
    },
    {
      "method": "process@10392",
      "body": "final public GeoElement[] process(Command c) throws MyError {\n  int n=c.getArgumentNumber();\n  GeoElement[] arg;\n  arg=resArgs(c);\n  if (n < 2 || n > 9)   throw argNumErr(app,c.getName(),n);\n  for (int i=0; i < Math.min(n,5); i++)   if (!arg[i].isNumberValue())   throw argErr(app,c.getName(),arg[i]);\n  for (int i=5; i < n; i++)   if (!arg[i].isBooleanValue())   throw argErr(app,c.getName(),arg[i]);\n  GeoNumeric slider;\n  if (n > 5 && ((BooleanValue)arg[5]).getBoolean())   slider=new GeoAngle(kernel.getConstruction());\n else   slider=new GeoNumeric(kernel.getConstruction());\n  slider.setIntervalMin((NumberValue)arg[0]);\n  slider.setIntervalMax((NumberValue)arg[1]);\n  if (n > 2)   slider.setAnimationStep((NumberValue)arg[2]);\n  if (n > 3)   slider.setAnimationSpeedObject((NumberValue)arg[3]);\n  if (n > 4)   slider.setSliderWidth(((NumberValue)arg[4]).getDouble());\n  if (n > 6)   slider.setSliderHorizontal(((BooleanValue)arg[6]).getBoolean());\n  if (n > 7)   slider.setAnimating(((BooleanValue)arg[7]).getBoolean());\n  if (n > 8)   slider.setRandom(((BooleanValue)arg[8]).getBoolean());\n  slider.setEuclidianVisible(true);\n  slider.setLabel(c.getLabel());\n  return new GeoElement[]{slider};\n}\n",
      "formalParam": [
        "Command"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "returnType": "GeoElement[]",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/kernel/commands/CommandProcessor.java",
      "types": [
        "Math",
        "Integer"
      ],
      "apicalls": [
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.min(int,int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "math",
        "integer",
        "min",
        "java"
      ]
    },
    {
      "method": "operationCollectionForPreparedStatement@49",
      "body": "@Test public void operationCollectionForPreparedStatement() throws SQLException {\n  Connection c=dataSource.getConnection();\n  String sql=\"select * from appointment where owner = ? and dateTime = ?\";\n  PreparedStatement ps=c.prepareStatement(sql);\n  ps.setString(1,\"Agim\");\n  ps.setDate(2,Date.valueOf(\"2009-06-01\"));\n  ps.execute();\n  Operation operation=getLastEntered();\n  assertEquals(sql,operation.get(\"sql\"));\n  @SuppressWarnings(\"unchecked\") List<String> parameters=(List<String>)operation.asMap().get(\"params\");\n  assertEquals(2,parameters.size());\n  assertArrayEquals(new Object[]{\"Agim\",Date.valueOf(\"2009-06-01\").toString()},parameters.toArray());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.prepareStatement(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.sql.PreparedStatement",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.PreparedStatement.setDate(int,java.sql.Date)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.sql.PreparedStatement.execute()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": [
              "java.sql.SQLException"
            ]
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.List<java.lang.String>.toArray()",
            "node": "DAPICall",
            "_returns": "java.lang.Object[]",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-insight-plugins/collection-plugins/jdbc/src/test/java/com/springsource/insight/plugin/jdbc/JdbcPreparedStatementOperationCollectionAspectTest.java",
      "types": [
        "List",
        "Date",
        "Connection",
        "SQLException",
        "PreparedStatement",
        "String",
        "Object",
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "toArray",
        "setString",
        "setDate",
        "execute",
        "size",
        "prepareStatement"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.setString(int,java.lang.String)",
            "java.sql.PreparedStatement.setDate(int,java.sql.Date)",
            "java.sql.PreparedStatement.execute()",
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.toArray()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "set",
        "sql",
        "size",
        "object",
        "java",
        "statement",
        "execute",
        "exception",
        "connection",
        "util",
        "prepare",
        "integer",
        "prepared",
        "array",
        "list",
        "string",
        "date"
      ]
    },
    {
      "method": "eIsSet@215",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/emf/tests/org.eclipse.emf.test.tools/data/ant.expected/models/1.4/reload/library.xsd/src/org/examples/library/impl/WriterImpl.java",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\npublic boolean eIsSet(int featureID){\nswitch (featureID) {\ncase LibraryPackage.WRITER__NAME:\n    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);\ncase LibraryPackage.WRITER__BOOKS:\n  return books != null && !books.isEmpty();\n}\nreturn super.eIsSet(featureID);\n}\n",
      "types": [
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": []
        }
      ],
      "keywords": [
        "object",
        "equals",
        "boolean",
        "lang",
        "java",
        "string"
      ]
    },
    {
      "method": "read@14425",
      "body": "public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n  org.apache.thrift.protocol.TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == org.apache.thrift.protocol.TType.STOP) {\n      break;\n    }\nswitch (field.id) {\ncase 0:\n      if (field.type == org.apache.thrift.protocol.TType.LIST) {\n{\n          org.apache.thrift.protocol.TList _list56=iprot.readListBegin();\n          this.success=new ArrayList<org.cloumon.thrift.HostInfo>(_list56.size);\n          for (int _i57=0; _i57 < _list56.size; ++_i57) {\n            org.cloumon.thrift.HostInfo _elem58;\n            _elem58=new org.cloumon.thrift.HostInfo();\n            _elem58.read(iprot);\n            this.success.add(_elem58);\n          }\n          iprot.readListEnd();\n        }\n      }\n else {\n        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n      }\n    break;\ndefault :\n  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n}\niprot.readFieldEnd();\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "org.apache.thrift.protocol.TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/cloumon/src/thrift/gen-java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "Collection",
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "array",
        "util",
        "list",
        "java"
      ]
    },
    {
      "method": "topTag@575",
      "body": "public Tag topTag(){\n  if (tag_queue.size() > 0) {\n    return tag_queue.get(0);\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ]
          }
        ]
      },
      "returnType": "Tag",
      "file": "./java_projects/overview-prototype/visualization/src/snappy/graph/TagTable.java",
      "types": [
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "util",
        "integer",
        "java",
        "get",
        "size"
      ]
    },
    {
      "method": "doRun@63",
      "body": "@Override public void doRun(TestCase tc,JCRTestContext context) throws Exception {\n  Node nodeToAdd=rootNode.addNode(context.generateUniqueName(\"node\"),\"nt:file\");\n  Node contentNodeOfNodeToAdd=nodeToAdd.addNode(\"jcr:content\",\"nt:resource\");\n  contentNodeOfNodeToAdd.setProperty(\"jcr:data\",new FileInputStream(\"../resources/benchmark.pdf\"));\n  contentNodeOfNodeToAdd.setProperty(\"jcr:mimeType\",\"application/pdf\");\n  contentNodeOfNodeToAdd.setProperty(\"jcr:lastModified\",Calendar.getInstance());\n  context.getSession().save();\n}\n",
      "formalParam": [
        "TestCase",
        "JCRTestContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.getInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Calendar"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jcr-benchmark/src/main/java/org/exoplatform/jcr/benchmark/usecases/AddNtFileWithMetadataTest.java",
      "types": [
        "Calendar",
        "FileInputStream",
        "FileNotFoundException",
        "String"
      ],
      "apicalls": [
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.util.Calendar.getInstance()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "get",
        "instance",
        "file",
        "found",
        "input",
        "java",
        "string",
        "calendar",
        "stream",
        "io",
        "util"
      ]
    },
    {
      "method": "getRandomString@11",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.util.Random.Random(long)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.Random.nextInt(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "node": "DAPICall",
            "_returns": "char",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/Regimo/regimo-core/src/main/java/au/com/regimo/core/utils/RandomPassword.java",
      "body": "public static String getRandomString(int length){\n  Random rand=new Random(System.currentTimeMillis());\n  StringBuffer sb=new StringBuffer();\n  for (int i=0; i < length; i++) {\n    int pos=rand.nextInt(charset.length());\n    sb.append(charset.charAt(pos));\n  }\n  return sb.toString();\n}\n",
      "types": [
        "Long",
        "Random",
        "StringBuffer",
        "String",
        "System",
        "Integer",
        "Character"
      ],
      "apicalls": [
        "append",
        "toString",
        "length",
        "charAt",
        "currentTimeMillis",
        "nextInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Random.Random(long)",
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.String.length()",
            "java.util.Random.nextInt(int)",
            "java.lang.String.charAt(int)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "next",
        "length",
        "time",
        "random",
        "int",
        "java",
        "buffer",
        "millis",
        "char",
        "long",
        "system",
        "current",
        "string",
        "util",
        "lang",
        "character",
        "integer"
      ]
    },
    {
      "method": "warn@139",
      "body": "public static void warn(String message,String heading){\n  message(\"WARN\",message,heading);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.awt.HeadlessException"
                ]
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Artemis/uk/ac/sanger/artemis/io/UI.java",
      "types": [
        "Object",
        "String",
        "JOptionPane",
        "HeadlessException",
        "PrintStream",
        "Component",
        "Integer"
      ],
      "apicalls": [
        "println",
        "showMessageDialog"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)"
          ]
        }
      ],
      "keywords": [
        "dialog",
        "show",
        "object",
        "java",
        "stream",
        "pane",
        "string",
        "io",
        "j",
        "headless",
        "javax",
        "integer",
        "println",
        "exception",
        "swing",
        "option",
        "print",
        "component",
        "message"
      ]
    },
    {
      "method": "closeAllWindows@326",
      "body": "/** \n * Closes all windows. Stops and returns false if an image or Editor \"save changes\" dialog is canceled. \n */\npublic synchronized static boolean closeAllWindows(){\n  while (imageList.size() > 0) {\n    if (!((ImageWindow)imageList.elementAt(0)).close())     return false;\n    IJ.wait(100);\n  }\n  Frame[] nonImages=getNonImageWindows();\n  for (int i=0; i < nonImages.length; i++) {\n    Frame frame=nonImages[i];\n    if (frame != null && (frame instanceof Editor)) {\n      ((Editor)frame).close();\n      if (((Editor)frame).fileChanged())       return false;\n      IJ.wait(100);\n    }\n  }\n  ImageJ ij=IJ.getInstance();\n  if (ij != null && ij.quitting() && IJ.getApplet() == null)   return true;\n  for (int i=0; i < nonImages.length; i++) {\n    Frame frame=nonImages[i];\n    if ((frame instanceof PlugInFrame) && !(frame instanceof Editor))     ((PlugInFrame)frame).close();\n else     if (frame instanceof TextWindow)     ((TextWindow)frame).close();\n else {\n      frame.dispose();\n    }\n  }\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.Vector.copyInto(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Window.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/ImageJA/src/main/java/ij/WindowManager.java",
      "types": [
        "Vector",
        "Object",
        "Window",
        "Integer"
      ],
      "apicalls": [
        "dispose",
        "copyInto",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.size()",
            "java.util.Vector.copyInto(java.lang.Object[])",
            "java.awt.Window.dispose()"
          ]
        }
      ],
      "keywords": [
        "util",
        "vector",
        "window",
        "dispose",
        "copy",
        "awt",
        "integer",
        "java",
        "object",
        "size"
      ]
    },
    {
      "method": "isDigit@278",
      "body": "/** \n * Check if the given character is a digit or not. Note that only the first  character of the string is checked.\n * @param str The character to test\n * @return <code>true</code> if the character is a digit,<code>false</code> otherwise\n * @see Character#isDigit(char)\n */\npublic boolean isDigit(String str){\n  return Character.isDigit(str.charAt(0));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.Character.isDigit(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/teatrove/teaapps/src/main/java/org/teatrove/teaapps/contexts/StringContext.java",
      "types": [
        "Boolean",
        "Integer",
        "String",
        "Character"
      ],
      "apicalls": [
        "isDigit",
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.charAt(int)",
            "java.lang.Character.isDigit(char)"
          ]
        }
      ],
      "keywords": [
        "digit",
        "lang",
        "java",
        "integer",
        "boolean",
        "string",
        "char",
        "character"
      ]
    },
    {
      "method": "setBoolean@334",
      "body": "public void setBoolean(String propName,boolean b) throws JMSException {\n  checkWritable();\n  checkPropertyName(propName);\n  _map.put(propName,b);\n}\n",
      "formalParam": [
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/qpid/qpid/java/client/src/main/java/org/apache/qpid/client/message/JMSMapMessage.java",
      "types": [
        "Boolean",
        "String",
        "Map",
        "Object"
      ],
      "apicalls": [
        "put",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "object",
        "string",
        "boolean",
        "map",
        "equals",
        "put",
        "java"
      ]
    },
    {
      "method": "TestListarMerchandize@20",
      "body": "@Test public void TestListarMerchandize(){\n  MerchandizeService merchandizeService=(MerchandizeService)contextoSpring.getBean(\"merchandizeService\");\n  try {\n    merchandizeService.listarMerchandize();\n  }\n catch (  Exception e) {\n    System.out.println(e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/faces/Proyectos/cinedayz/src/test/java/pe/joedayz/ejemplos/cinedayz/mantenimiento/MerchandizeServiceTest.java",
      "types": [
        "String",
        "PrintStream",
        "Throwable"
      ],
      "apicalls": [
        "getMessage",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "stream",
        "println",
        "io",
        "string",
        "lang",
        "print",
        "message",
        "get",
        "java"
      ]
    },
    {
      "method": "actionPerformed@231",
      "body": "public void actionPerformed(ActionEvent ae){\n  menu.show(bt,bt.getX(),bt.getY());\n}\n",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.getX()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JComponent.getY()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "javax.swing.JPopupMenu.show(java.awt.Component,int,int)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/VisiCut/src/com/t_oster/visicut/gui/beans/FilterSetCellEditor.java",
      "types": [
        "Integer",
        "JComponent",
        "Component",
        "JPopupMenu"
      ],
      "apicalls": [
        "show",
        "getY",
        "getX"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.getX()",
            "javax.swing.JComponent.getY()",
            "javax.swing.JPopupMenu.show(java.awt.Component,int,int)"
          ]
        }
      ],
      "keywords": [
        "javax",
        "y",
        "j",
        "popup",
        "component",
        "menu",
        "x",
        "show",
        "integer",
        "get",
        "swing"
      ]
    },
    {
      "method": "getContents@78",
      "body": "public InputStream getContents(Object element){\n  try {\n    return new FileInputStream((File)element);\n  }\n catch (  FileNotFoundException e) {\n    IDEWorkbenchPlugin.log(e.getLocalizedMessage(),e);\n    return null;\n  }\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getLocalizedMessage()",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.io.FileNotFoundException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "InputStream",
      "file": "./java_projects/eclipse.platform.ui/bundles/org.eclipse.ui.ide/src/org/eclipse/ui/internal/ide/filesystem/FileSystemStructureProvider.java",
      "types": [
        "FileNotFoundException",
        "File",
        "Throwable",
        "FileInputStream",
        "String"
      ],
      "apicalls": [
        "getLocalizedMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.lang.Throwable.getLocalizedMessage()"
          ]
        },
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "message",
        "exception",
        "stream",
        "found",
        "input",
        "lang",
        "string",
        "java",
        "throwable",
        "get",
        "localized",
        "file",
        "io"
      ]
    },
    {
      "method": "create@58",
      "body": "@Override public Object[] create(ICreateContext context){\n  _hasDoneChanges=false;\n  if (_delegates == null || _delegates.length == 0) {\n    return new Object[0];\n  }\n  List<Object> createdObjects=new ArrayList<Object>();\n  for (  ICreateFeature delegate : _delegates) {\n    if (delegate.canCreate(context)) {\n      Object[] objects=delegate.create(context);\n      _hasDoneChanges=_hasDoneChanges || delegate.hasDoneChanges();\n      if (objects != null) {\n        createdObjects.addAll(Arrays.asList(objects));\n      }\n    }\n  }\n  return createdObjects.toArray();\n}\n",
      "formalParam": [
        "ICreateContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "_returns": "java.util.List",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.Object>.addAll(java.util.Collection)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.Object>.toArray()",
            "_throws": [],
            "_returns": "java.lang.Object[]",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Object[]",
      "file": "./java_projects/tools/eclipse/plugins/org.switchyard.tools.ui.editor/src/org/switchyard/tools/ui/editor/diagram/shared/CompositeCreateFeature.java",
      "types": [
        "List",
        "Collection",
        "Boolean",
        "Object",
        "ArrayList",
        "Arrays"
      ],
      "apicalls": [
        "addAll",
        "asList",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
            "java.util.Arrays.asList(T[])",
            "java.util.List<java.lang.Object>.addAll(java.util.Collection)",
            "java.util.List<java.lang.Object>.toArray()"
          ]
        }
      ],
      "keywords": [
        "object",
        "boolean",
        "array",
        "add",
        "list",
        "arrays",
        "collection",
        "util",
        "java"
      ]
    },
    {
      "method": "setValue@309",
      "body": "/** \n * Sets the value of this scrollbar to the specified value. <p> If the value supplied is less than the current minimum or greater than the current maximum, then one of those values is substituted, as appropriate.\n * @param v the new value of the scrollbar\n */\npublic void setValue(int v){\n  setTypedValue(v,AdjustmentEvent.TRACK);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/awt/ScrollPaneAdjustable.java",
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [
        "max",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)"
          ]
        }
      ],
      "keywords": [
        "min",
        "java",
        "lang",
        "integer",
        "max",
        "math"
      ]
    },
    {
      "method": "setUpstreamError@277",
      "body": "public void setUpstreamError(String message){\n  Log.w(TDDatabase.TAG,String.format(\"Server error: %s\",message));\n  this.error=new Throwable(message);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.Throwable(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/TouchDB-Android/TouchDB-Android/src/com/couchbase/touchdb/replicator/changetracker/TDChangeTracker.java",
      "types": [
        "String",
        "Object",
        "Throwable"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.Throwable.Throwable(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "object",
        "format",
        "lang",
        "string",
        "throwable",
        "java"
      ]
    },
    {
      "method": "addRows@1142",
      "body": "public void addRows(int atIndex,List rowDatas,List<?> rowKeys){\n  for (int i=0; i < rowDatas.size(); i++) {\n    Object newRowData=rowDatas.get(i);\n    extractedRows.add(atIndex + i,new RowInfo(newRowData,-1));\n  }\n  extractedRowKeys.addAll(atIndex,rowKeys);\n}\n",
      "formalParam": [
        "int",
        "List",
        "List<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.get(int)",
                "_throws": [],
                "_returns": "java.lang.Object",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.List<Tau_E>.add(int,Tau_E)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ]
          },
          {
            "_call": "java.util.List<java.lang.Object>.addAll(int,java.util.Collection)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/OpenFaces/openFaces/source/org/openfaces/component/table/impl/TableDataModel.java",
      "types": [
        "Integer",
        "Collection",
        "Boolean",
        "Object",
        "List"
      ],
      "apicalls": [
        "add",
        "size",
        "get",
        "addAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.get(int)",
            "java.util.List<Tau_E>.add(int,Tau_E)",
            "java.util.List.size()",
            "java.util.List<java.lang.Object>.addAll(int,java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "java",
        "get",
        "object",
        "add",
        "util",
        "list",
        "collection",
        "size",
        "boolean",
        "integer"
      ]
    },
    {
      "method": "test_ip@77",
      "body": "public void test_ip() throws Exception {\n  String result=server.ping();\n  assertTrue(result.length() > 0);\n  InetAddress.getByName(result);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.net.InetAddress.getByName(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.net.InetAddress",
            "_throws": [
              "java.net.UnknownHostException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JacORB/test/regression/src/org/jacorb/test/bugs/bugjac166/IPTest.java",
      "types": [
        "String",
        "UnknownHostException",
        "InetAddress",
        "Integer"
      ],
      "apicalls": [
        "getByName",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.net.InetAddress.getByName(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "host",
        "java",
        "net",
        "address",
        "string",
        "exception",
        "name",
        "unknown",
        "inet",
        "length",
        "get",
        "lang",
        "integer"
      ]
    },
    {
      "method": "makeXMLData@81",
      "formalParam": [
        "InstallData",
        "IXMLElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/izpack/izpack-panel/src/main/java/com/izforge/izpack/panels/userinput/UserInputPanelAutomationHelper.java",
      "body": "/** \n * Serialize state to XML and insert under panelRoot.\n * @param idata     The installation installDataGUI.\n * @param panelRoot The XML root element of the panels blackbox tree.\n */\n@Override public void makeXMLData(InstallData idata,IXMLElement panelRoot){\n  IXMLElement userInput;\n  IXMLElement dataElement;\n  userInput=new XMLElementImpl(AUTO_KEY_USER_INPUT,panelRoot);\n  panelRoot.addChild(userInput);\n  for (  String key : this.entries.keySet()) {\n    String value=this.entries.get(key);\n    dataElement=new XMLElementImpl(AUTO_KEY_ENTRY,userInput);\n    dataElement.setAttribute(AUTO_ATTRIBUTE_KEY,key);\n    dataElement.setAttribute(AUTO_ATTRIBUTE_VALUE,value);\n    userInput.addChild(dataElement);\n  }\n}\n",
      "types": [
        "Set",
        "String",
        "Object",
        "Map"
      ],
      "apicalls": [
        "keySet",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.keySet()",
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "set",
        "key",
        "java",
        "string",
        "map",
        "get"
      ]
    },
    {
      "method": "removeRateLimiter@1417",
      "body": "public void removeRateLimiter(LimitedRateGroup group,boolean upload){\n  PEPeerManager pm;\n  try {\n    control_mon.enter();\n    if (external_rate_limiters_cow != null) {\n      ArrayList new_limiters=new ArrayList(external_rate_limiters_cow.size() - 1);\n      for (int i=0; i < external_rate_limiters_cow.size(); i++) {\n        Object[] entry=(Object[])external_rate_limiters_cow.get(i);\n        if (entry[0] != group) {\n          new_limiters.add(entry);\n        }\n      }\n      if (new_limiters.size() == 0) {\n        external_rate_limiters_cow=null;\n      }\n else {\n        external_rate_limiters_cow=new_limiters;\n      }\n    }\n    pm=peer_manager;\n  }\n  finally {\n    control_mon.exit();\n  }\n  if (pm != null) {\n    pm.removeRateLimiter(group,upload);\n  }\n}\n",
      "formalParam": [
        "LimitedRateGroup",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.ArrayList.size()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frostwire-android/src/azureus/org/gudy/azureus2/core3/download/impl/DownloadManagerController.java",
      "types": [
        "Integer",
        "Boolean",
        "Object",
        "List",
        "ArrayList"
      ],
      "apicalls": [
        "size",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.ArrayList.ArrayList(int)",
            "java.util.List.size()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.List.size()",
            "java.util.ArrayList.size()"
          ]
        }
      ],
      "keywords": [
        "array",
        "boolean",
        "object",
        "list",
        "util",
        "size",
        "java",
        "add",
        "integer"
      ]
    },
    {
      "method": "isSet@2583",
      "formalParam": [
        "_Fields"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.get(int)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/indextank-engine/gen-java/com/flaptor/indextank/rpc/Controller.java",
      "body": "/** \n * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise \n */\npublic boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase SUCCESS:\n    return is_set_success();\ncase NE:\n  return is_set_ne();\n}\nthrow new IllegalStateException();\n}\n",
      "types": [
        "Boolean",
        "Integer",
        "BitSet"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.get(int)"
          ]
        }
      ],
      "keywords": [
        "get",
        "boolean",
        "bit",
        "set",
        "java",
        "util",
        "integer"
      ]
    },
    {
      "method": "testCheckLHSLocationDetermination_BEGIN_OF_CONDITION_EXISTS4@942",
      "body": "public void testCheckLHSLocationDetermination_BEGIN_OF_CONDITION_EXISTS4(){\n  String input=\"rule MyRule \\n\" + \"\twhen \\n\" + \"\t\texists Cl\";\n  DRLParser parser=getParser(input);\n  parser.enableEditorInterface();\n  try {\n    parser.compilation_unit();\n  }\n catch (  Exception ex) {\n  }\n  assertEquals(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS,getLastIntegerValue(parser.getEditorInterface().get(0).getContent()));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.AbstractCollection.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0.x/drools-compiler/src/test/java/org/drools/lang/DRLContextTest.java",
      "types": [
        "String",
        "PrintStream",
        "AbstractCollection"
      ],
      "apicalls": [
        "println",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.AbstractCollection.toString()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "print",
        "io",
        "java",
        "stream",
        "util",
        "abstract",
        "string",
        "println"
      ]
    },
    {
      "method": "abstractFromNonAbstract@1168",
      "body": "public BAD_PARAM abstractFromNonAbstract(CompletionStatus cs){\n  return abstractFromNonAbstract(cs,null);\n}\n",
      "formalParam": [
        "CompletionStatus"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "_returns": "java.lang.Throwable",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "BAD_PARAM",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/ORBUtilSystemException.java",
      "types": [
        "Throwable",
        "Level",
        "Logger",
        "Boolean"
      ],
      "apicalls": [
        "isLoggable",
        "initCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "cause",
        "util",
        "logger",
        "logging",
        "boolean",
        "loggable",
        "java",
        "init",
        "throwable",
        "level",
        "lang"
      ]
    },
    {
      "method": "getGroups@102",
      "body": "public List<GroupCount> getGroups(){\n  return new ArrayList<GroupCount>(groupMap.values());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.values()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Collection"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "List<GroupCount>",
      "file": "./java_projects/lucene-solr/lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector.java",
      "types": [
        "Collection",
        "Map",
        "ArrayList"
      ],
      "apicalls": [
        "values"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.values()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "list",
        "values",
        "array",
        "collection",
        "java",
        "util",
        "map"
      ]
    },
    {
      "method": "sendEmail@44",
      "body": "@RequestMapping(value=\"/send\") public void sendEmail(HttpServletRequest request,HttpServletResponse response) throws Exception {\n  StringBuilder builder=new StringBuilder(\"<html>\\n<head>\\n<title>E-Mail Web Module</title>\\n</head>\\n<body>\\n\").append(\"<h2>E-Mail Web Module</h2>\\n\").append(\"<p>\" + sendMail(ServletRequestUtils.getRequiredStringParameter(request,\"subject\")) + \"</p>\\n\").append(\"</body>\\n</html>\\n\");\n  response.getWriter().write(builder.toString());\n}\n",
      "formalParam": [
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/virgo.web/test-apps/email-standard-war/src/main/java/example/web/EmailController.java",
      "types": [
        "StringBuilder",
        "PrintStream",
        "String",
        "Object"
      ],
      "apicalls": [
        "append",
        "println",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "println",
        "append",
        "string",
        "object",
        "lang",
        "print",
        "io",
        "java",
        "builder",
        "stream"
      ]
    },
    {
      "method": "importItems@342",
      "body": "public void importItems(String fileName){\n  SAXParserFactory spf=SAXParserFactory.newInstance();\n  try {\n    SAXParser sp=spf.newSAXParser();\n    sp.parse(new FileInputStream(fileName),new GameObjectsParser());\n    GameObjectsParser parser=new GameObjectsParser();\n    this.itemMap=parser.itemMap();\n  }\n catch (  ParserConfigurationException e) {\n  }\ncatch (  SAXException e) {\n  }\ncatch (  FileNotFoundException e) {\n  }\ncatch (  IOException e) {\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newInstance()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.SAXParserFactory",
            "_throws": []
          },
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.SAXParser",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException",
              "org.xml.sax.SAXException"
            ]
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.FileNotFoundException"
            ]
          },
          {
            "_call": "javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Novikov/prjRPG/src/com/rpg/utils/collectors/CollectorImpl.java",
      "types": [
        "ParserConfigurationException",
        "FileNotFoundException",
        "FileInputStream",
        "SAXParser",
        "SAXParserFactory",
        "IOException",
        "InputStream",
        "String"
      ],
      "apicalls": [
        "newSAXParser",
        "parse",
        "newInstance"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.SAXParserFactory.newInstance()",
            "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "javax.xml.parsers.SAXParser.parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)"
          ]
        }
      ],
      "keywords": [
        "new",
        "stream",
        "sax",
        "input",
        "xml",
        "configuration",
        "exception",
        "java",
        "parsers",
        "instance",
        "file",
        "parser",
        "factory",
        "javax",
        "found",
        "string",
        "parse",
        "io"
      ]
    },
    {
      "method": "JarClassPath@127",
      "body": "JarClassPath(String pathname) throws NotFoundException {\n  try {\n    jarfile=new JarFile(pathname);\n    jarfileURL=new File(pathname).getCanonicalFile().toURI().toURL().toString();\n    return;\n  }\n catch (  IOException e) {\n  }\n  throw new NotFoundException(pathname);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getCanonicalFile()",
            "node": "DAPICall",
            "_returns": "java.io.File",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.File.toURI()",
            "node": "DAPICall",
            "_returns": "java.net.URI",
            "_throws": []
          },
          {
            "_call": "java.net.URI.toURL()",
            "node": "DAPICall",
            "_returns": "java.net.URL",
            "_throws": [
              "java.net.MalformedURLException"
            ]
          },
          {
            "_call": "java.net.URL.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/javassist/src/main/javassist/ClassPoolTail.java",
      "types": [
        "MalformedURLException",
        "IOException",
        "URL",
        "String",
        "URI",
        "File"
      ],
      "apicalls": [
        "toURL",
        "toURI",
        "toString",
        "getCanonicalFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getCanonicalFile()",
            "java.io.File.toURI()",
            "java.net.URI.toURL()",
            "java.net.URL.toString()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "canonical",
        "java",
        "uri",
        "file",
        "malformed",
        "io",
        "get",
        "net",
        "url",
        "string"
      ]
    },
    {
      "method": "iterator@114",
      "body": "@Override public Iterator<String> iterator(){\n  return Collections.unmodifiableSet(fieldToTerms.keySet()).iterator();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Collections.unmodifiableSet(java.util.Set)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          }
        ]
      },
      "returnType": "Iterator<String>",
      "file": "./java_projects/lucene-solr/lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.java",
      "types": [
        "Map",
        "Collections",
        "Iterator",
        "Set"
      ],
      "apicalls": [
        "keySet",
        "unmodifiableSet",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.keySet()",
            "java.util.Collections.unmodifiableSet(java.util.Set)",
            "java.util.Set.iterator()"
          ]
        }
      ],
      "keywords": [
        "java",
        "unmodifiable",
        "map",
        "set",
        "iterator",
        "collections",
        "util",
        "key"
      ]
    },
    {
      "method": "testFlagFManifestE@1754",
      "body": "@LargeTest public void testFlagFManifestE(){\n  installFromRawResource(\"install.apk\",R.raw.install_loc_sdcard,PackageManager.INSTALL_EXTERNAL,true,false,-1,PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Runtime.getRuntime()",
            "_throws": [],
            "_returns": "java.lang.Runtime",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Runtime.gc()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.io.File.delete()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/android_framework_base_1/core/tests/coretests/src/android/content/pm/PackageManagerTests.java",
      "types": [
        "String",
        "Boolean",
        "File",
        "Runtime"
      ],
      "apicalls": [
        "delete",
        "gc",
        "getRuntime",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.gc()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()",
            "java.io.File.delete()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.gc()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "file",
        "get",
        "runtime",
        "lang",
        "string",
        "java",
        "delete",
        "boolean",
        "gc",
        "io",
        "exists"
      ]
    },
    {
      "method": "subList@82",
      "body": "public static <T>List<T> subList(List<T> parentList,int size){\n  return subList(parentList,0,size - 1);\n}\n",
      "formalParam": [
        "List<T>",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<Tau_E>.get(int)",
            "_throws": [],
            "_returns": "Tau_E",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "List<T>",
      "file": "./java_projects/candlepin/src/main/java/org/candlepin/util/Util.java",
      "types": [
        "Boolean",
        "Integer",
        "List",
        "ArrayList"
      ],
      "apicalls": [
        "add",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.get(int)",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "java",
        "get",
        "boolean",
        "add",
        "array",
        "util",
        "list"
      ]
    },
    {
      "method": "saveCommonProperties@99",
      "body": "public static void saveCommonProperties(@NotNull Properties properties){\n  try {\n    properties.store(new FileOutputStream(getDefaultPropertiesFileName()),COMMENTS);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "Properties"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/IASKDaoGenerator/src/main/java/com/kreig133/daogenerator/settings/PropertiesFileController.java",
      "types": [
        "Throwable",
        "String",
        "Properties",
        "FileOutputStream",
        "IOException",
        "FileNotFoundException",
        "OutputStream"
      ],
      "apicalls": [
        "store",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "print",
        "throwable",
        "stack",
        "stream",
        "properties",
        "output",
        "lang",
        "string",
        "java",
        "io",
        "store",
        "exception",
        "trace",
        "util",
        "found",
        "file"
      ]
    },
    {
      "method": "toString@1831",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"getName_result(\");\n  boolean first=true;\n  sb.append(\"success:\");\n  if (this.success == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.success);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuilder",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuilder",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "_returns": "java.lang.StringBuilder",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/messaging-client/messaging-client-scribe/src/main/java/com/facebook/fb303/FacebookService.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "string",
        "lang",
        "java",
        "append"
      ]
    },
    {
      "method": "start@360",
      "body": "/** \n * \u5f00\u59cb\u8fdb\u7a0b\uff0c\u81ea\u52a8\u5411\u540e\u53f0\u53d1\u9001\u961f\u5217\u4e2d\u7684message\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u624b\u52a8\u542f\u52a8\uff0c\u53ea\u8981\u6709message\u63a8\u5165\u961f\u5217\uff0c\u5b83\u4fbf\u53ef\u4ee5\u542f\u52a8\n */\nsynchronized public void start(){\n  if (enableQueued) {\n    doExecute();\n  }\n else {\n    if (_started == true)     return;\n    _started=true;\n    if (timer == null)     timer=new Timer();\n    timer.schedule(new TimerTask(){\n      public void run(){\n        if (_paused)         return;\n        if (_messages == null || _messages.size() == 0)         return;\n        doExecute();\n      }\n    }\n,0,minPeriod);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Timer.Timer()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Timer.schedule(java.util.TimerTask,long,long)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.lang.String.valueOf(char[])",
                "node": "DAPICall",
                "_returns": "java.lang.String",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              },
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/AndroidSDK/src/com/xingcloud/users/MessagingManager.java",
      "types": [
        "ArrayList",
        "Boolean",
        "String",
        "TimerTask",
        "Long",
        "Timer",
        "Character",
        "Object"
      ],
      "apicalls": [
        "add",
        "schedule",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.ArrayList.ArrayList()",
            "java.lang.String.valueOf(char[])",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Timer.Timer()",
            "java.util.Timer.schedule(java.util.TimerTask,long,long)"
          ]
        }
      ],
      "keywords": [
        "array",
        "schedule",
        "timer",
        "task",
        "string",
        "boolean",
        "character",
        "value",
        "util",
        "lang",
        "list",
        "object",
        "add",
        "java",
        "long"
      ]
    },
    {
      "method": "isValid@25",
      "body": "public boolean isValid(String cpf,ConstraintValidatorContext context){\n  if (cpf != null) {\n    if (cpf.trim().length() == 0) {\n      return true;\n    }\n else {\n      return stellaValidator.invalidMessagesFor(cpf).isEmpty();\n    }\n  }\n else {\n    return true;\n  }\n}\n",
      "formalParam": [
        "String",
        "ConstraintValidatorContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/caelum-stella/stella-bean-validation/src/main/java/br/com/caelum/stella/bean/validation/logic/StellaCPFValidator.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "trim",
        "integer",
        "lang",
        "string",
        "java",
        "length"
      ]
    },
    {
      "method": "replace@72",
      "body": "public static void replace(ConnectionResult connectionResult,final ExternalContext.Response response) throws IOException {\n  if (response == null)   return;\n  response.setContentType(connectionResult.getResponseContentType());\n  connectionResult.forwardHeaders(response);\n  final OutputStream outputStream=response.getOutputStream();\n  NetUtils.copyStream(connectionResult.getResponseInputStream(),outputStream);\n  outputStream.flush();\n  outputStream.close();\n}\n",
      "formalParam": [
        "ConnectionResult",
        "ExternalContext.Response"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStream.flush()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.OutputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/orbeon-forms/src/java/org/orbeon/oxf/xforms/submission/AllReplacer.java",
      "types": [
        "IOException",
        "OutputStream"
      ],
      "apicalls": [
        "close",
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.flush()",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "java",
        "flush",
        "io",
        "stream",
        "output",
        "close"
      ]
    },
    {
      "method": "exec@130",
      "body": "public void exec() throws Exception {\n  boolean success=false;\n  result=new ExecData();\n  for (int attempt=0; !success; attempt++) {\n    IProcess p=null;\n    PerishableReader reader=null;\n    try {\n      p=session.createProcess(cmd,env);\n      p.start();\n      reader=PerishableReader.newInstance(p.getInputStream(),readTimeout);\n      reader.setLogger(session.getLogger());\n      if (session instanceof IIosSession) {\n        reader.readLine();\n      }\n      ByteArrayOutputStream out=new ByteArrayOutputStream();\n      byte[] buff=new byte[512];\n      int len=0;\n      while ((len=reader.read(buff)) > 0) {\n        out.write(buff,0,len);\n      }\n      result.data=out.toByteArray();\n      try {\n        p.waitFor(session.getTimeout(IBaseSession.Timeout.M));\n        result.exitCode=p.exitValue();\n        success=true;\n      }\n catch (      InterruptedException e) {\n      }\n    }\n catch (    IOException e) {\n      if (e instanceof InterruptedIOException || e instanceof EOFException) {\n        if (attempt > execRetries) {\n          session.getLogger().warn(JOVALMsg.ERROR_PROCESS_RETRY,cmd,attempt);\n          throw e;\n        }\n else {\n          p.destroy();\n          p=null;\n          session.getLogger().info(JOVALMsg.STATUS_PROCESS_RETRY,cmd);\n        }\n      }\n else {\n        throw e;\n      }\n    }\ncatch (    SessionException e) {\n      if (attempt > execRetries) {\n        session.getLogger().warn(JOVALMsg.ERROR_PROCESS_RETRY,cmd,attempt);\n        throw e;\n      }\n else {\n        session.getLogger().warn(JOVALMsg.ERROR_SESSION_INTEGRITY,e.getMessage());\n        session.getLogger().info(JOVALMsg.STATUS_PROCESS_RETRY,cmd);\n        session.disconnect();\n      }\n    }\n finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        }\n catch (        IOException e) {\n        }\n      }\n      if (p != null) {\n        try {\n          InputStream err=p.getErrorStream();\n          if (err != null) {\n            err.close();\n          }\n        }\n catch (        IOException e) {\n        }\n        if (p.isRunning()) {\n          p.destroy();\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.write(byte[],int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "node": "DAPICall",
            "_returns": "byte[]",
            "_throws": []
          },
          {
            "_call": "java.io.InputStream.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jOVAL/src/org/joval/util/SafeCLI.java",
      "types": [
        "Integer",
        "InputStream",
        "IOException",
        "Byte",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "write",
        "close",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.write(byte[],int,int)",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "io",
        "output",
        "array",
        "stream",
        "exception",
        "close",
        "integer",
        "write",
        "java",
        "input",
        "byte"
      ]
    },
    {
      "method": "test3CheckoutProject@146",
      "body": "/** \n * Now checkout in a new location\n */\npublic void test3CheckoutProject(){\n  log(\"test3CheckoutProject\");\n  File checkoutDirectory=null;\n  try {\n    File tempFile=File.createTempFile(\"tempFile\",\"\");\n    checkoutDirectory=new File(tempFile.getParentFile(),\"Checkout\");\n    tempFile.delete();\n    if (!checkoutDirectory.exists()) {\n      checkoutDirectory.mkdirs();\n    }\n  }\n catch (  IOException e) {\n    fail();\n  }\n  CVSModule moduleToCheckout=_workingCVSRepository.getModuleNamed(_projectName);\n  assertNotNull(moduleToCheckout);\n  CheckoutProject checkoutProject=CheckoutProject.actionType.makeNewAction(moduleToCheckout,null,EDITOR);\n  checkoutProject.setLocalDirectory(checkoutDirectory);\n  assertTrue(checkoutProject.doAction().hasActionExecutionSucceeded());\n  _project2=checkoutProject.getCheckoutedProject();\n  assertAllFilesAreUpToDateOrCVSIgnored(_project2);\n  assertEquals(_project2.getCVSFile(\".cvsrepository\").getStatus(),CVSStatus.CVSIgnored);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.getParentFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.delete()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_then": [
              {
                "_call": "java.io.File.mkdirs()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openflexo/flexodesktop/externalmodels/flexoprjsharing/src/test/java/org/openflexo/fps/TestFPS.java",
      "types": [
        "IOException",
        "Boolean",
        "String",
        "File"
      ],
      "apicalls": [
        "delete",
        "getParentFile",
        "createTempFile",
        "exists",
        "mkdirs"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "java.io.File.getParentFile()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.delete()",
            "$NOT$java.io.File.exists()"
          ]
        },
        {
          "calls": [
            "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "java.io.File.getParentFile()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.delete()",
            "$NOT$java.io.File.exists()",
            "java.io.File.mkdirs()"
          ]
        }
      ],
      "keywords": [
        "exists",
        "io",
        "parent",
        "delete",
        "mkdirs",
        "get",
        "create",
        "boolean",
        "file",
        "string",
        "temp",
        "exception",
        "java"
      ]
    },
    {
      "method": "onDisconnect@407",
      "body": "@Override public void onDisconnect(){\n  if (disconnected) {\n    return;\n  }\n  for (  RelayConnectionHandler rch : connectionHandlers) {\n    rch.onDisconnect();\n  }\n  disconnected=true;\n  if (!shutdown && prefs.getBoolean(\"reconnect\",true)) {\n    reconnect();\n    showNotification(\"Reconnecting...\",\"Reconnecting...\");\n  }\n else {\n    showNotification(\"Disconnected\",\"Disconnected\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Thread.isAlive()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Thread.start()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.System.currentTimeMillis()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/weechat-android/weechat-android/src/com/ubergeek42/WeechatAndroid/service/RelayService.java",
      "types": [
        "Runnable",
        "Thread",
        "Long",
        "Boolean",
        "System"
      ],
      "apicalls": [
        "start",
        "currentTimeMillis",
        "isAlive"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.isAlive()",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "system",
        "runnable",
        "thread",
        "java",
        "millis",
        "lang",
        "alive",
        "long",
        "start",
        "time",
        "current",
        "boolean"
      ]
    },
    {
      "method": "visit@96",
      "body": "@Override public void visit(cb.petal.Class obj){\n  String className=getLabel(obj);\n  orderedClasses.add(obj);\n  classes.put(className,obj);\n  String superClass=getSuperClassLabel(obj);\n  System.out.println(\"Class:\" + className + (superClass.length() > 0 ? \" extends \" + superClass : \"\"));\n  System.out.println(\"Description:\" + obj.getDocumentation());\n  List classAttributes=obj.getClassAttributeList();\n  if (classAttributes != null && classAttributes.getChildCount() > 0) {\n    for (int j=0; j < classAttributes.getChildCount(); j++) {\n      ClassAttribute attrib=(ClassAttribute)classAttributes.get(j);\n      String attributeName=getLabel(attrib);\n      System.out.println(\"\\tAttribute:\" + attributeName);\n      System.out.println(\"\\tDescription:\" + attrib.getDocumentation());\n    }\n  }\n  visitObject(obj);\n}\n",
      "formalParam": [
        "cb.petal.Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<java.lang.Class>.add(java.lang.Class)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/openflexo/flexodesktop/externalmodels/flexocrazybean/src/main/java/cb/parser/EOModelExtractor.java",
      "types": [
        "Character",
        "Vector",
        "Boolean",
        "PrintStream",
        "Class",
        "String"
      ],
      "apicalls": [
        "add",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<java.lang.Class>.add(java.lang.Class)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "class",
        "stream",
        "add",
        "vector",
        "boolean",
        "io",
        "util",
        "character",
        "java",
        "println",
        "print",
        "string"
      ]
    },
    {
      "method": "testDynamicRules@359",
      "body": "public void testDynamicRules() throws Exception {\n  final RuleBase ruleBase=getRuleBase();\n  final WorkingMemory workingMemory=ruleBase.newStatefulSession();\n  final Cheese a=new Cheese(\"stilton\",10);\n  final Cheese b=new Cheese(\"stilton\",15);\n  final Cheese c=new Cheese(\"stilton\",20);\n  workingMemory.insert(a);\n  workingMemory.insert(b);\n  workingMemory.insert(c);\n  final PackageBuilder builder=new PackageBuilder();\n  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream(\"test_DynamicRules.drl\")));\n  final Package pkg=builder.getPackage();\n  ruleBase.addPackage(serialisePackage(pkg));\n  workingMemory.fireAllRules();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutput.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/4.0.x/drools-compiler/src/test/java/org/drools/integrationtests/DynamicRulesTest.java",
      "types": [
        "Class",
        "OutputStream",
        "InputStream",
        "String",
        "ObjectOutputStream",
        "ByteArrayOutputStream",
        "InputStreamReader",
        "ObjectOutput",
        "IOException",
        "Object"
      ],
      "apicalls": [
        "writeObject",
        "getResourceAsStream",
        "close",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutput.writeObject(java.lang.Object)",
            "java.io.ObjectOutput.close()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "resource",
        "exception",
        "stream",
        "input",
        "reader",
        "get",
        "io",
        "string",
        "java",
        "array",
        "output",
        "lang",
        "byte",
        "class",
        "close",
        "object",
        "write"
      ]
    },
    {
      "method": "InvitationGuestActionsPage@55",
      "body": "public InvitationGuestActionsPage(String messageContent,Action action){\n  confirm=new InvitationActionConfirmationElement();\n  int start=messageContent.indexOf(getUtil().getURL(\"Invitation\",\"InvitationGuestActions\",\"view\",\"doAction_\" + action.toString().toLowerCase()));\n  int end=messageContent.indexOf(\"\\\"\",start);\n  getDriver().get(messageContent.substring(start,end).replaceAll(\"&amp;\",\"&\"));\n  if (action.label != null && !confirm.getLabel().equalsIgnoreCase(action.label)) {\n    throw new WebDriverException(\"Not on correct page, expecting memo label to say \\\"\" + action.label + \"\\\"\");\n  }\n}\n",
      "formalParam": [
        "String",
        "Action"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/xwiki-platform/xwiki-platform-core/xwiki-platform-invitation/xwiki-platform-invitation-test-pageobject/src/main/java/org/xwiki/invitation/test/po/InvitationGuestActionsPage.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "indexOf",
        "replaceAll",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "lang",
        "index",
        "string",
        "integer",
        "replace",
        "java"
      ]
    },
    {
      "method": "parsePID@68",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.toCharArray()",
                "node": "DAPICall",
                "_returns": "char[]",
                "_throws": []
              },
              {
                "_call": "$NOT$java.lang.Character.isDigit(char)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Integer.Integer(java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": [
                  "java.lang.NumberFormatException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "Integer",
      "file": "./java_projects/linuxtools/valgrind/org.eclipse.linuxtools.valgrind.core/src/org/eclipse/linuxtools/valgrind/core/ValgrindParserUtils.java",
      "body": "/** \n * Retrieves PID from filename with format [PREFIX][PID].[EXTENSION]\n * @param filename - the file name to parse\n * @param prefix - the prefix of the filename up to the PID\n * @return - the PID portion of the filename as an Integer\n * @throws IOException\n */\npublic static Integer parsePID(String filename,String prefix) throws IOException {\n  String pidstr=filename.substring(prefix.length(),filename.lastIndexOf(DOT));\n  if (isNumber(pidstr)) {\n    return new Integer(pidstr);\n  }\n else {\n    throw new IOException(\"Cannot parse PID from output file\");\n  }\n}\n",
      "types": [
        "Character",
        "NumberFormatException",
        "Integer",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "toCharArray",
        "lastIndexOf",
        "length",
        "isDigit",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.toCharArray()",
            "$NOT$java.lang.Character.isDigit(char)",
            "java.lang.Integer.Integer(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.toCharArray()",
            "$NOT$java.lang.Character.isDigit(char)"
          ]
        }
      ],
      "keywords": [
        "char",
        "lang",
        "string",
        "length",
        "exception",
        "last",
        "format",
        "array",
        "boolean",
        "number",
        "index",
        "substring",
        "character",
        "integer",
        "java",
        "digit"
      ]
    },
    {
      "method": "getenv@890",
      "body": "/** \n * Returns an unmodifiable string map view of the current system environment. The environment is a system-dependent mapping from names to values which is passed from parent to child processes. <p>If the system does not support environment variables, an empty map is returned. <p>The returned map will never contain null keys or values. Attempting to query the presence of a null key or value will throw a  {@link NullPointerException}.  Attempting to query the presence of a key or value which is not of type {@link String} will throw a {@link ClassCastException}. <p>The returned map and its collection views may not obey the general contract of the  {@link Object#equals} and{@link Object#hashCode} methods.<p>The returned map is typically case-sensitive on all platforms. <p>If a security manager exists, its {@link SecurityManager#checkPermission checkPermission}method is called with a <code> {@link RuntimePermission}(\"getenv.*\")</code> permission.  This may result in a  {@link SecurityException} beingthrown. <p>When passing information to a Java subprocess, <a href=#EnvironmentVSSystemProperties>system properties</a> are generally preferred over environment variables.\n * @return the environment as a map of variable names to values\n * @throws SecurityException if a security manager exists and its {@link SecurityManager#checkPermission checkPermission}method doesn't allow access to the process environment\n * @see #getenv(String)\n * @see ProcessBuilder#environment()\n * @since  1.5\n */\npublic static java.util.Map<String,String> getenv(){\n  SecurityManager sm=getSecurityManager();\n  if (sm != null) {\n    sm.checkPermission(new RuntimePermission(\"getenv.*\"));\n  }\n  return ProcessEnvironment.getenv();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.SecurityManager.checkPermission(java.security.Permission)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "java.util.Map<String,String>",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/lang/System.java",
      "types": [
        "String",
        "Permission",
        "SecurityManager",
        "RuntimePermission"
      ],
      "apicalls": [
        "checkPermission"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
            "java.lang.SecurityManager.checkPermission(java.security.Permission)"
          ]
        }
      ],
      "keywords": [
        "java",
        "manager",
        "permission",
        "string",
        "runtime",
        "check",
        "security",
        "lang"
      ]
    },
    {
      "method": "setEnabled@117",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Container.getComponents()",
            "node": "DAPICall",
            "_returns": "java.awt.Component[]",
            "_throws": []
          },
          {
            "_call": "java.awt.Component.setEnabled(boolean)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/alice/authoringtool/viewcontroller/ResponsePrintViewController.java",
      "body": "@Override public void setEnabled(boolean b){\n  super.setEnabled(b);\n  java.awt.Component[] children=subPanel.getComponents();\n  for (  Component element : children) {\n    element.setEnabled(b);\n  }\n}\n",
      "types": [
        "Component",
        "Boolean",
        "Container"
      ],
      "apicalls": [
        "getComponents",
        "setEnabled"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.getComponents()",
            "java.awt.Component.setEnabled(boolean)"
          ]
        }
      ],
      "keywords": [
        "get",
        "awt",
        "component",
        "boolean",
        "container",
        "components",
        "enabled",
        "java",
        "set"
      ]
    },
    {
      "method": "setAttachments@183",
      "formalParam": [
        "Map<String,InputStream>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.io.InputStream>.isEmpty()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.io.InputStream>.keySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.io.InputStream>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.io.InputStream",
            "_throws": []
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.util.ArrayList<java.io.File>.ArrayList<File>()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "java.util.Collection<java.io.File>.add(java.io.File)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/com.idega.core/src/java/com/idega/core/messaging/EmailMessage.java",
      "body": "public void setAttachments(Map<String,InputStream> attachments){\n  if (attachments == null || attachments.isEmpty()) {\n    return;\n  }\n  for (  String name : attachments.keySet()) {\n    File attachment=null;\n    InputStream stream=attachments.get(name);\n    try {\n      attachment=FileUtil.getFileAndCreateIfNotExists(name);\n      FileUtil.streamToFile(stream,attachment);\n      addAttachment(attachment);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n finally {\n      IOUtil.closeInputStream(stream);\n    }\n  }\n}\n",
      "types": [
        "String",
        "Collection",
        "Set",
        "ArrayList",
        "InputStream",
        "Object",
        "Throwable",
        "Boolean",
        "File",
        "Map"
      ],
      "apicalls": [
        "isEmpty",
        "add",
        "get",
        "printStackTrace",
        "keySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.io.InputStream>.isEmpty()",
            "java.util.Map<java.lang.String,java.io.InputStream>.keySet()",
            "java.util.Map<java.lang.String,java.io.InputStream>.get(java.lang.Object)",
            "java.util.ArrayList<java.io.File>.ArrayList<File>()",
            "java.util.Collection<java.io.File>.add(java.io.File)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.io.InputStream>.isEmpty()",
            "java.util.Map<java.lang.String,java.io.InputStream>.keySet()",
            "java.util.Map<java.lang.String,java.io.InputStream>.get(java.lang.Object)",
            "java.util.ArrayList<java.io.File>.ArrayList<File>()",
            "java.util.Collection<java.io.File>.add(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "java",
        "collection",
        "get",
        "key",
        "input",
        "throwable",
        "set",
        "list",
        "file",
        "object",
        "array",
        "trace",
        "add",
        "empty",
        "stream",
        "lang",
        "print",
        "stack",
        "string",
        "boolean",
        "util",
        "map"
      ]
    },
    {
      "method": "hasProjectSpecificTempates@75",
      "body": "public static boolean hasProjectSpecificTempates(IProject project){\n  if (project == null) {\n    return false;\n  }\n  String pref=new ProjectScope(project).getNode(SymfonyUiPlugin.PLUGIN_ID).get(KEY,null);\n  if (pref != null && pref.trim().length() > 0) {\n    Reader input=new StringReader(pref);\n    TemplateReaderWriter reader=new TemplateReaderWriter();\n    TemplatePersistenceData[] datas;\n    try {\n      datas=reader.read(input);\n      return datas.length > 0;\n    }\n catch (    IOException e) {\n    }\n  }\n  return false;\n}\n",
      "formalParam": [
        "IProject"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.trim()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.io.StringReader.StringReader(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/Symfony-2-Eclipse-Plugin/com.dubture.symfony.ui/src/com/dubture/symfony/ui/viewsupport/ProjectTemplateStore.java",
      "types": [
        "String",
        "Integer",
        "StringReader"
      ],
      "apicalls": [
        "trim",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.io.StringReader.StringReader(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "reader",
        "string",
        "java",
        "lang",
        "io",
        "trim",
        "length"
      ]
    },
    {
      "method": "set@73",
      "body": "public void set(Object obj,Object value) throws IllegalArgumentException, IllegalAccessException {\n  if (isReadOnly) {\n    throwFinalFieldIllegalAccessException(value);\n  }\n  if (value == null) {\n    throwSetIllegalArgumentException(value);\n  }\n  if (value instanceof Byte) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Byte)value).byteValue());\n    return;\n  }\n  if (value instanceof Short) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Short)value).shortValue());\n    return;\n  }\n  if (value instanceof Character) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Character)value).charValue());\n    return;\n  }\n  if (value instanceof Integer) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Integer)value).intValue());\n    return;\n  }\n  if (value instanceof Long) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Long)value).longValue());\n    return;\n  }\n  if (value instanceof Float) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Float)value).floatValue());\n    return;\n  }\n  if (value instanceof Double) {\n    unsafe.putDoubleVolatile(base,fieldOffset,((Double)value).doubleValue());\n    return;\n  }\n  throwSetIllegalArgumentException(value);\n}\n",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Byte.byteValue()",
            "_throws": [],
            "_returns": "byte",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Short.shortValue()",
            "_throws": [],
            "_returns": "short",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Character.charValue()",
            "_throws": [],
            "_returns": "char",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Long.longValue()",
            "_throws": [],
            "_returns": "long",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Float.floatValue()",
            "_throws": [],
            "_returns": "float",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Double.doubleValue()",
            "_throws": [],
            "_returns": "double",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/sun/reflect/UnsafeQualifiedStaticDoubleFieldAccessorImpl.java",
      "types": [
        "Integer",
        "Byte",
        "Float",
        "Character",
        "Long",
        "Double",
        "Short"
      ],
      "apicalls": [
        "intValue",
        "shortValue",
        "byteValue",
        "charValue",
        "longValue",
        "doubleValue",
        "floatValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Byte.byteValue()",
            "java.lang.Short.shortValue()",
            "java.lang.Character.charValue()",
            "java.lang.Integer.intValue()",
            "java.lang.Long.longValue()",
            "java.lang.Float.floatValue()",
            "java.lang.Double.doubleValue()"
          ]
        }
      ],
      "keywords": [
        "character",
        "float",
        "int",
        "byte",
        "short",
        "char",
        "java",
        "integer",
        "value",
        "lang",
        "double",
        "long"
      ]
    },
    {
      "method": "sort@227",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<Tau_E>.add(Tau_E)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "List<T>",
      "file": "./java_projects/lambdaj/src/main/java/ch/lambdaj/Lambda.java",
      "body": "/** \n * Sorts all the items in the given iterable on the respective values of the given argument. Actually it handles also Maps, Arrays and Iterator by collecting their values. Note that this method accepts an Object in order to be used in conjunction with the  {@link Lambda#forEach(Iterable)}.\n * @param iterable The iterable of objects to be sorted\n * @param argument An argument defined using the {@link Lambda#on(Class)} method \n * @return A List with the same items of the given iterable sorted on the respective value of the given argument\n */\npublic static <T>List<T> sort(Object iterable,Object argument){\n  return sort(iterable,argument,0);\n}\n",
      "types": [
        "Collections",
        "LinkedList",
        "Boolean",
        "Comparator",
        "List",
        "Iterator"
      ],
      "apicalls": [
        "sort",
        "hasNext",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.List<Tau_E>.add(Tau_E)",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "boolean",
        "next",
        "add",
        "iterator",
        "collections",
        "sort",
        "linked",
        "comparator",
        "java"
      ]
    },
    {
      "method": "it@5",
      "body": "public static String it(String string,Object... args){\n  java.util.Formatter formatter=new java.util.Formatter();\n  return formatter.format(string,args).toString();\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Formatter.Formatter()",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Formatter.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "_returns": "java.util.Formatter",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Formatter.toString()",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/DirectMemory/DirectMemory-Cache/src/main/java/org/directmemory/misc/Format.java",
      "types": [
        "String",
        "Object",
        "Formatter"
      ],
      "apicalls": [
        "toString",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Formatter.Formatter()",
            "java.util.Formatter.format(java.lang.String,java.lang.Object[])",
            "java.util.Formatter.toString()"
          ]
        }
      ],
      "keywords": [
        "formatter",
        "java",
        "string",
        "util",
        "object",
        "format"
      ]
    },
    {
      "method": "register@163",
      "body": "public void register(Topic topic){\n  if (!messagesMap.containsKey(topic)) {\n    List messages=new ArrayList();\n    messagesMap.put(topic,messages);\n  }\n}\n",
      "formalParam": [
        "Topic"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Map.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/geronimo/plugins/activemq/activemq-portlets/src/main/java/org/apache/geronimo/console/jmsmanager/renderers/ViewMessagesRenderer.java",
      "types": [
        "ArrayList",
        "Map",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "containsKey",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map.containsKey(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.Map.containsKey(java.lang.Object)",
            "java.util.ArrayList.ArrayList()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "java",
        "boolean",
        "list",
        "map",
        "put",
        "util",
        "contains",
        "key",
        "array"
      ]
    },
    {
      "method": "startAnimation@86",
      "body": "public void startAnimation(){\n  logger.fine(\"Starting animation for \" + getName());\n  timer.restart();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.logging.Logger.fine(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.Timer.restart()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Promasi-V2/org.promasi.desktop_swing/Libs/jide.3.3.3/examples/R1.Charts/CyclicalChartDemo.java",
      "types": [
        "Timer",
        "String",
        "Logger"
      ],
      "apicalls": [
        "fine",
        "restart"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.fine(java.lang.String)",
            "javax.swing.Timer.restart()"
          ]
        }
      ],
      "keywords": [
        "javax",
        "fine",
        "logging",
        "timer",
        "java",
        "restart",
        "string",
        "swing",
        "util",
        "logger"
      ]
    },
    {
      "method": "getClusterId@148",
      "body": "public String getClusterId(String nodeId){\n  if (nodeId == null) {\n    return null;\n  }\n  int dot=nodeId.lastIndexOf('.');\n  return (dot > 0) ? nodeId.substring(0,dot) : nodeId;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/jetty-nosql-memcached/jetty-nosql-kvs/src/main/java/org/eclipse/jetty/nosql/kvs/KeyValueStoreSessionIdManager.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "last",
        "string",
        "index",
        "substring",
        "java",
        "lang",
        "integer"
      ]
    },
    {
      "method": "mousePressed@213",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Component.isEnabled()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.awt.event.MouseEvent.getX()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "java.awt.event.MouseEvent.getY()",
                "node": "DAPICall",
                "_returns": "int",
                "_throws": []
              },
              {
                "_call": "$NOT$java.awt.Component.getComponentOrientation()",
                "node": "DAPICall",
                "_returns": "java.awt.ComponentOrientation",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/colorchooser/DefaultSwatchChooserPanel.java",
      "body": "public void mousePressed(MouseEvent e){\n  if (isEnabled()) {\n    Color color=recentSwatchPanel.getColorForLocation(e.getX(),e.getY());\n    setSelectedColor(color);\n  }\n}\n",
      "types": [
        "ComponentOrientation",
        "Component",
        "Boolean",
        "Integer",
        "MouseEvent"
      ],
      "apicalls": [
        "getX",
        "getComponentOrientation",
        "isEnabled",
        "getY"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.isEnabled()",
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "$NOT$java.awt.Component.getComponentOrientation()"
          ]
        },
        {
          "calls": [
            "java.awt.Component.isEnabled()"
          ]
        }
      ],
      "keywords": [
        "component",
        "awt",
        "orientation",
        "x",
        "java",
        "event",
        "integer",
        "mouse",
        "get",
        "enabled",
        "boolean",
        "y"
      ]
    },
    {
      "method": "noteStopWakeFromSourceLocked@1539",
      "body": "public void noteStopWakeFromSourceLocked(WorkSource ws,int pid,String name,int type){\n  int N=ws.size();\n  for (int i=0; i < N; i++) {\n    noteStopWakeLocked(ws.get(i),pid,name,type);\n  }\n}\n",
      "formalParam": [
        "WorkSource",
        "int",
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toHexString(int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "Tau_V",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "Tau_V",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "_throws": [],
            "_returns": "Tau_V",
            "node": "DAPICall"
          },
          {
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.get(int)",
                "_throws": [],
                "_returns": "Tau_E",
                "node": "DAPICall"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.remove(java.lang.Object)",
                "_throws": [],
                "_returns": "boolean",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "_throws": [],
                "_returns": "int",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/frameworks_base/core/java/com/android/internal/os/BatteryStatsImpl.java",
      "types": [
        "HashMap",
        "String",
        "Boolean",
        "Object",
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "put",
        "toHexString",
        "remove",
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toHexString(int)",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.size()",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.get(int)",
            "java.util.ArrayList<Tau_E>.remove(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.toHexString(int)",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.size()",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "java.util.ArrayList<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "array",
        "boolean",
        "list",
        "map",
        "get",
        "hex",
        "lang",
        "hash",
        "util",
        "put",
        "size",
        "integer",
        "java",
        "remove",
        "object",
        "string"
      ]
    },
    {
      "method": "getDate@696",
      "body": "public Date getDate(String columnLabel,Calendar cal) throws SQLException {\n  Long time=ConvertUtil.getTimeFromString(this.getString(this.findColumn(columnLabel)),cal);\n  return time == null ? null : new Date(time);\n}\n",
      "formalParam": [
        "String",
        "Calendar"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.Map<java.lang.String,java.lang.Integer>.containsKey(java.lang.Object)",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "_throws": [],
            "_returns": "java.lang.Integer",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "Date",
      "file": "./java_projects/ADFS/adfs-hdfs-project/adfs-hdfs/src/main/java/com/taobao/adfs/database/tdhsocket/client/response/TDHSResutSet.java",
      "types": [
        "String",
        "Map",
        "List",
        "Integer",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "containsKey",
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.String,java.lang.Integer>.containsKey(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": [
        "get",
        "contains",
        "list",
        "map",
        "java",
        "size",
        "integer",
        "util",
        "key",
        "string",
        "boolean",
        "object"
      ]
    },
    {
      "method": "convertCRemoteHttpProxySettings@532",
      "formalParam": [
        "org.sonatype.nexus.configuration.model.v1_4_3.CRemoteHttpProxySettings",
        "org.sonatype.nexus.configuration.model.v1_4_4.CRemoteHttpProxySettings"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "org.sonatype.nexus.configuration.model.v1_4_4.CRemoteHttpProxySettings",
      "file": "./java_projects/nexus/nexus/nexus-configuration/src/main/java/org/sonatype/nexus/configuration/model/v1_4_4/upgrade/BasicVersionConverter.java",
      "body": "/** \n * Method convertCRemoteHttpProxySettings.\n * @param cRemoteHttpProxySettings\n * @param value\n * @return CRemoteHttpProxySettings\n */\npublic org.sonatype.nexus.configuration.model.v1_4_4.CRemoteHttpProxySettings convertCRemoteHttpProxySettings(org.sonatype.nexus.configuration.model.v1_4_3.CRemoteHttpProxySettings cRemoteHttpProxySettings,org.sonatype.nexus.configuration.model.v1_4_4.CRemoteHttpProxySettings value){\n  if (cRemoteHttpProxySettings == null) {\n    return null;\n  }\n  value.setBlockInheritance(cRemoteHttpProxySettings.isBlockInheritance());\n  value.setProxyHostname(cRemoteHttpProxySettings.getProxyHostname());\n  value.setProxyPort(cRemoteHttpProxySettings.getProxyPort());\n  value.setAuthentication(convertCRemoteAuthentication(cRemoteHttpProxySettings.getAuthentication()));\n{\n    java.util.List list=new java.util.ArrayList();\n    for (java.util.Iterator i=cRemoteHttpProxySettings.getNonProxyHosts().iterator(); i.hasNext(); ) {\n      String v=(String)i.next();\n      list.add(v);\n    }\n    value.setNonProxyHosts(list);\n  }\n  return value;\n}\n",
      "types": [
        "List",
        "ArrayList",
        "Boolean",
        "Object",
        "Iterator"
      ],
      "apicalls": [
        "hasNext",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Iterator.hasNext()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "add",
        "java",
        "next",
        "boolean",
        "util",
        "list",
        "array",
        "object"
      ]
    },
    {
      "method": "getAliceHomeDirectory@530",
      "body": "public static java.io.File getAliceHomeDirectory(){\n  if (aliceHomeDirectory == null) {\n    if (System.getProperty(\"alice.home\") != null) {\n      setAliceHomeDirectory(new java.io.File(System.getProperty(\"alice.home\")).getAbsoluteFile());\n    }\n else {\n      setAliceHomeDirectory(new java.io.File(System.getProperty(\"user.dir\")).getAbsoluteFile());\n    }\n  }\n  return aliceHomeDirectory;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.System.getProperty(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.File.getAbsoluteFile()",
                "_throws": [],
                "_returns": "java.io.File",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.System.getProperty(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "_returns": "void",
                "node": "DAPICall"
              },
              {
                "_call": "java.io.File.getAbsoluteFile()",
                "_throws": [],
                "_returns": "java.io.File",
                "node": "DAPICall"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.System.getProperty(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.String",
                "node": "DAPICall"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "java.io.File",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/alice/authoringtool/JAlice.java",
      "types": [
        "System",
        "String",
        "File"
      ],
      "apicalls": [
        "getProperty",
        "getAbsoluteFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.getAbsoluteFile()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "java",
        "property",
        "absolute",
        "io",
        "get",
        "system",
        "file"
      ]
    },
    {
      "method": "stop@83",
      "body": "/** \n * Equivalent to stop(false)\n */\npublic void stop(){\n  this.stop(false);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Thread.isAlive()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Thread.interrupt()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DExcept",
                "_catch": [
                  {
                    "_call": "java.io.PrintStream.println(java.lang.String)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ],
                "_try": [
                  {
                    "_call": "java.lang.Thread.join()",
                    "_throws": [
                      "java.lang.InterruptedException"
                    ],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/FRC-Team-3676-Robot-Code/src/net/aisd/martin/frc/AISDCompressor.java",
      "types": [
        "Boolean",
        "InterruptedException",
        "Thread",
        "PrintStream",
        "String",
        "Integer"
      ],
      "apicalls": [
        "join",
        "println",
        "interrupt",
        "isAlive"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.isAlive()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.isAlive()",
            "java.lang.Thread.interrupt()",
            "java.lang.Thread.join()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.isAlive()",
            "java.lang.Thread.interrupt()",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "alive",
        "join",
        "thread",
        "string",
        "java",
        "boolean",
        "interrupt",
        "lang",
        "exception",
        "print",
        "interrupted",
        "stream",
        "io",
        "println"
      ]
    },
    {
      "method": "getFontMetrics@776",
      "body": "public FontMetrics getFontMetrics(){\n  if (this.fontMetrics != null) {\n    return this.fontMetrics;\n  }\n  return this.fontMetrics=FontDesignMetrics.getMetrics(font,getFontRenderContext());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.geom.AffineTransform.getScaleX()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.awt.geom.AffineTransform.getShearY()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.awt.geom.AffineTransform.getShearX()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.awt.geom.AffineTransform.getScaleY()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.awt.geom.AffineTransform.AffineTransform(double,double,double,double,double,double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.awt.geom.AffineTransform.getTranslateX()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.awt.geom.AffineTransform.getTranslateY()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "FontMetrics",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/java2d/SunGraphics2D.java",
      "types": [
        "AffineTransform",
        "Double"
      ],
      "apicalls": [
        "getTranslateX",
        "getShearY",
        "getScaleX",
        "getTranslateY",
        "getScaleY",
        "getShearX"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.AffineTransform.getTranslateX()",
            "java.awt.geom.AffineTransform.getTranslateY()",
            "java.awt.geom.AffineTransform.getScaleX()",
            "java.awt.geom.AffineTransform.getShearY()",
            "java.awt.geom.AffineTransform.getShearX()",
            "java.awt.geom.AffineTransform.getScaleY()",
            "java.awt.geom.AffineTransform.AffineTransform(double,double,double,double,double,double)"
          ]
        },
        {
          "calls": [
            "java.awt.geom.AffineTransform.getTranslateX()",
            "java.awt.geom.AffineTransform.getTranslateY()"
          ]
        }
      ],
      "keywords": [
        "shear",
        "double",
        "y",
        "x",
        "affine",
        "translate",
        "geom",
        "scale",
        "awt",
        "java",
        "get",
        "transform"
      ]
    },
    {
      "method": "testHashCode@104",
      "body": "@Test public void testHashCode(){\n  final MutableFloat mutNumA=new MutableFloat(0f);\n  final MutableFloat mutNumB=new MutableFloat(0f);\n  final MutableFloat mutNumC=new MutableFloat(1f);\n  assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n  assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n  assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n  assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Float.valueOf(float)",
            "_throws": [],
            "_returns": "java.lang.Float",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.Float.hashCode()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/commons-lang/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java",
      "types": [
        "Integer",
        "Float"
      ],
      "apicalls": [
        "hashCode",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Float.valueOf(float)",
            "java.lang.Float.hashCode()"
          ]
        }
      ],
      "keywords": [
        "value",
        "lang",
        "hash",
        "float",
        "code",
        "integer",
        "java"
      ]
    },
    {
      "method": "run@22",
      "body": "public void run(Stack inStack) throws ParseException {\n  checkStack(inStack);\n  Object param=inStack.pop();\n  if (param instanceof Number) {\n    int r=(((Number)param).doubleValue() == 0) ? 1 : 0;\n    inStack.push(new Double(r));\n  }\n else   if (param instanceof Boolean) {\n    int r=(((Boolean)param).booleanValue()) ? 0 : 1;\n    inStack.push(new Double(r));\n  }\n else   throw new ParseException(\"Invalid parameter type\");\n  return;\n}\n",
      "formalParam": [
        "Stack"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Stack.pop()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Boolean.booleanValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.Double.Double(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Stack.push(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Number.doubleValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Double.Double(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Stack.push(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/fiji/src-plugins/jep/src/main/java/org/nfunk/jep/function/Not.java",
      "types": [
        "Double",
        "Object",
        "Number",
        "Stack",
        "Boolean"
      ],
      "apicalls": [
        "doubleValue",
        "booleanValue",
        "pop",
        "push"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Stack.pop()",
            "java.lang.Number.doubleValue()",
            "java.lang.Double.Double(double)",
            "java.util.Stack.push(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Stack.pop()",
            "java.lang.Boolean.booleanValue()",
            "java.lang.Double.Double(double)",
            "java.util.Stack.push(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "boolean",
        "number",
        "double",
        "push",
        "pop",
        "lang",
        "object",
        "value",
        "stack"
      ]
    },
    {
      "method": "export@18",
      "formalParam": [
        "OutputArtifact"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.getParentFile()",
            "node": "DAPICall",
            "_returns": "java.io.File",
            "_throws": []
          },
          {
            "_call": "java.io.File.mkdirs()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.io.FileWriter.FileWriter(java.io.File)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.Writer.write(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          },
          {
            "_call": "java.io.OutputStreamWriter.close()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": [
              "java.io.IOException"
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/surveys-flex2java/as3-codegenerator/src/main/java/org/adaptiveplatform/codegenerator/export/FileExporter.java",
      "body": "@Override public void export(OutputArtifact outputArtifact){\n  if (shouldWrite(outputArtifact)) {\n    File baseDirectory=outputArtifact.isPersistent() ? persistentOutputFolder : transientOutputFolder;\n    File targetFile=createTargetFile(baseDirectory,outputArtifact.getDirectory(),outputArtifact.getFileName());\n    write(targetFile,outputArtifact.getContent());\n  }\n}\n",
      "types": [
        "OutputStreamWriter",
        "Boolean",
        "File",
        "Writer",
        "String",
        "IOException",
        "FileWriter"
      ],
      "apicalls": [
        "write",
        "getParentFile",
        "mkdirs",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.getParentFile()",
            "java.io.File.mkdirs()",
            "java.io.FileWriter.FileWriter(java.io.File)",
            "java.io.Writer.write(java.lang.String)",
            "java.io.OutputStreamWriter.close()"
          ]
        }
      ],
      "keywords": [
        "string",
        "exception",
        "java",
        "output",
        "write",
        "file",
        "mkdirs",
        "close",
        "stream",
        "get",
        "parent",
        "writer",
        "io",
        "boolean"
      ]
    },
    {
      "method": "splitText@72",
      "body": "/** \n * Split this text node into two nodes at the specified string offset. After splitting, this node will contain the original text up to the offset, and will have a new text node sibling containing the text after the offset.\n * @param offset string offset point to split node at.\n * @return the newly created text node containing the text after the offset.\n */\npublic TextNode splitText(int offset){\n  Validate.isTrue(offset >= 0,\"Split offset must be not be negative\");\n  Validate.isTrue(offset < text.length(),\"Split offset must not be greater than current text length\");\n  String head=getWholeText().substring(0,offset);\n  String tail=getWholeText().substring(offset);\n  text(head);\n  TextNode tailNode=new TextNode(tail,this.baseUri());\n  if (parent() != null)   parent().addChildren(siblingIndex() + 1,tailNode);\n  return tailNode;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "TextNode",
      "file": "./java_projects/jsoup/src/main/java/org/jsoup/nodes/TextNode.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "substring",
        "length",
        "java",
        "integer"
      ]
    },
    {
      "method": "responderSugestaoPontoEncontro@239",
      "body": "public void responderSugestaoPontoEncontro(String idSessao,String idCarona,String idSugestao,String pontos){\n  try {\n    if (pontos.contains(\";\")) {\n      String[] pontoSugeridos=pontos.split(\"; \");\n      for (      String point : pontoSugeridos) {\n        controller.responderSugestaoPontoEncontro(idSessao,idCarona,idSugestao,point);\n      }\n    }\n else {\n      controller.responderSugestaoPontoEncontro(idSessao,idCarona,idSugestao,pontos);\n    }\n  }\n catch (  InvalidAttributeValueException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.contains(java.lang.CharSequence)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.split(java.lang.String)",
                "node": "DAPICall",
                "_returns": "java.lang.String[]",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SigaBemCaroneiro/src/main/java/grupo3si/server/SigaBemServerImpl.java",
      "types": [
        "CharSequence",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "split",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.String.split(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "contains",
        "lang",
        "java",
        "string",
        "sequence",
        "char",
        "split"
      ]
    },
    {
      "method": "residentFriendRemove@382",
      "body": "public void residentFriendRemove(Player player,Resident resident,List<Resident> kicking){\n  List<Resident> remove=new ArrayList<Resident>();\n  List<Resident> toKick=new ArrayList<Resident>(kicking);\n  for (  Resident friend : toKick) {\n    try {\n      resident.removeFriend(friend);\n      plugin.deleteCache(friend.getName());\n    }\n catch (    NotRegisteredException e) {\n      remove.add(friend);\n    }\n  }\n  if (remove.size() > 0)   for (  Resident friend : remove)   toKick.remove(friend);\n  if (toKick.size() > 0) {\n    String msg=TownySettings.getLangString(\"msg_removed\");\n    Player p;\n    for (    Resident member : toKick) {\n      msg+=member.getName() + \", \";\n      p=plugin.getServer().getPlayer(member.getName());\n      if (p != null)       TownyMessaging.sendMsg(p,String.format(TownySettings.getLangString(\"msg_friend_remove\"),player.getName()));\n    }\n    msg=msg.substring(0,msg.length() - 2);\n    msg+=TownySettings.getLangString(\"msg_from_list\");\n    ;\n    TownyMessaging.sendMsg(player,msg);\n    TownyUniverse.getDataSource().saveResident(resident);\n  }\n else   TownyMessaging.sendErrorMsg(player,TownySettings.getLangString(\"msg_invalid_name\"));\n}\n",
      "formalParam": [
        "Player",
        "Resident",
        "List<Resident>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.length()",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Towny/src/com/palmergames/bukkit/towny/command/ResidentCommand.java",
      "types": [
        "Object",
        "Collection",
        "String",
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "format",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "length",
        "integer",
        "lang",
        "java",
        "substring",
        "array",
        "string",
        "object",
        "format",
        "list",
        "collection",
        "util"
      ]
    },
    {
      "method": "testCanConvertAnotherInstance@60",
      "body": "public void testCanConvertAnotherInstance() throws TransformerException {\n  XStream x=createXStream();\n  final String xml=normalizedXStreamXML(xstream.toXML(x));\n  final XStream serialized=(XStream)xstream.fromXML(xml);\n  final String xmlSerialized=normalizedXStreamXML(xstream.toXML(serialized));\n  assertEquals(xml,xmlSerialized);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/xstream/xstream/src/test/com/thoughtworks/acceptance/XStreamerTest.java",
      "types": [
        "StringWriter",
        "String",
        "StringReader"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.StringWriter.toString()",
            "java.io.StringWriter.StringWriter()",
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "io",
        "writer",
        "java",
        "reader"
      ]
    },
    {
      "method": "resetWorld@129",
      "body": "public void resetWorld(){\n  partsTable=new Hashtable();\n  textureLayers=new java.awt.Image[10];\n  makeNewPerson();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.Hashtable()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/caitlin/personbuilder/ModelWrapper.java",
      "types": [
        "Throwable",
        "Hashtable"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.Hashtable()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "hashtable",
        "util",
        "throwable",
        "java",
        "lang",
        "print",
        "trace",
        "stack"
      ]
    },
    {
      "method": "setUserInfoUpdatesAffectedUserGroup@2305",
      "body": "public void setUserInfoUpdatesAffectedUserGroup(String userInfoUpdatesAffectedUserGroup){\n  addPair(USER_INFO_UPDATES_AFFECTED_USER_GROUP,userInfoUpdatesAffectedUserGroup);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              }
            ],
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "_returns": "java.lang.StringBuffer",
                "node": "DAPICall"
              }
            ],
            "_cond": [],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/SplunkJavaLogging/src/com/dtdsoftware/splunk/logging/SplunkLogEvent.java",
      "types": [
        "String",
        "Character",
        "StringBuffer"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "append",
        "string",
        "lang",
        "java",
        "character",
        "buffer"
      ]
    },
    {
      "method": "getCurrentTabTag@261",
      "body": "public String getCurrentTabTag(){\n  if (mCurrentTab >= 0 && mCurrentTab < mTabSpecs.size()) {\n    return mTabSpecs.get(mCurrentTab).getTag();\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/frameworks_base/core/java/android/widget/TabHost.java",
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "list",
        "java",
        "integer",
        "get",
        "util"
      ]
    },
    {
      "method": "decode@316",
      "body": "/** \n * Converts the provided byte array to a String using the UTF-8 encoding. If the input is malformed, replace by a default value.\n */\npublic static String decode(byte[] utf8) throws CharacterCodingException {\n  return decode(ByteBuffer.wrap(utf8),true);\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.lang.ThreadLocal<java.nio.charset.CharsetDecoder>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer)",
            "_throws": [
              "java.nio.charset.CharacterCodingException"
            ],
            "node": "DAPICall",
            "_returns": "java.nio.CharBuffer"
          },
          {
            "_call": "java.nio.CharBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/hdfs-cloudera-cdh3u3-production/src/core/org/apache/hadoop/io/Text.java",
      "types": [
        "CodingErrorAction",
        "CharsetDecoder",
        "String",
        "CharBuffer",
        "CharacterCodingException",
        "Character",
        "Byte",
        "ThreadLocal",
        "ByteBuffer"
      ],
      "apicalls": [
        "get",
        "onMalformedInput",
        "toString",
        "wrap",
        "onUnmappableCharacter",
        "decode"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.lang.ThreadLocal<java.nio.charset.CharsetDecoder>.get()",
            "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
            "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
            "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer)",
            "java.nio.CharBuffer.toString()",
            "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
            "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)"
          ]
        }
      ],
      "keywords": [
        "local",
        "action",
        "character",
        "error",
        "nio",
        "java",
        "wrap",
        "lang",
        "thread",
        "buffer",
        "malformed",
        "coding",
        "exception",
        "byte",
        "string",
        "decoder",
        "decode",
        "charset",
        "unmappable",
        "char",
        "get",
        "input"
      ]
    },
    {
      "method": "parseLine@69",
      "body": "@Override public void parseLine(LoadContext context,String inputLine,URI sourceURI) throws PersistenceLayerException {\n  final int idxColon=inputLine.indexOf(':');\n  if (idxColon < 0) {\n    Logging.errorPrint(\"Unparsed line: \" + inputLine + \" in \"+ sourceURI.toString());\n    return;\n  }\n  final String key=inputLine.substring(0,idxColon);\n  final String value=inputLine.substring(idxColon + 1);\n  Map<String,LstToken> tokenMap=TokenStore.inst().getTokenMap(InstallLstToken.class);\n  InstallLstToken token=(InstallLstToken)tokenMap.get(key);\n  if (token != null) {\n    LstUtils.deprecationCheck(token,campaign,value);\n    if (!token.parse(campaign,value,sourceURI)) {\n      Logging.errorPrint(\"Error parsing install \" + campaign.getDisplayName() + ':'+ inputLine);\n    }\n  }\n else {\n    Logging.errorPrint(\"Unparsed line: \" + inputLine + \" in \"+ sourceURI.toString());\n  }\n}\n",
      "formalParam": [
        "LoadContext",
        "String",
        "URI"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(int)",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "_returns": "java.lang.String",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/pcgen-svn/code/src/java/pcgen/persistence/lst/InstallLoader.java",
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "index",
        "lang",
        "java",
        "substring"
      ]
    },
    {
      "method": "test_writeObject_Collections_EmptyList@1367",
      "body": "public void test_writeObject_Collections_EmptyList(){\n  Object objToSave=null;\n  Object objLoaded=null;\n  try {\n    objToSave=java.util.Collections.EMPTY_LIST;\n    if (DEBUG)     System.out.println(\"Obj = \" + objToSave);\n    objLoaded=dumpAndReload(objToSave);\n    boolean equals;\n    equals=objToSave.equals(objLoaded);\n    if (equals)     equals=((List)objLoaded).size() == 0;\n    assertTrue(MSG_TEST_FAILED + objToSave,equals);\n  }\n catch (  IOException e) {\n    fail(\"Exception serializing \" + objToSave + \" : \"+ e.getMessage());\n  }\ncatch (  ClassNotFoundException e) {\n    fail(\"ClassNotFoundException reading Object type: \" + e.getMessage());\n  }\ncatch (  Error err) {\n    System.out.println(\"Error when obj = \" + objToSave);\n    throw err;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "_returns": "void",
            "node": "DAPICall"
          },
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "_returns": "int",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/SerializationStressTest4.java",
      "types": [
        "List",
        "PrintStream",
        "String",
        "Integer"
      ],
      "apicalls": [
        "size",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "println",
        "print",
        "list",
        "string",
        "io",
        "integer",
        "size",
        "java",
        "stream"
      ]
    },
    {
      "method": "main@31",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/rampart/1.6.1-wso2v4/modules/rampart-samples/basic/sample06/src/org/apache/rampart/samples/sample06/Client.java",
      "body": "public static void main(String[] args) throws Exception {\n  if (args.length != 2) {\n    System.out.println(\"Usage: $java Client endpoint_address client_repo_path\");\n  }\n  ConfigurationContext ctx=ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[1],args[1] + \"/conf/axis2.xml\");\n  ServiceClient client=new ServiceClient(ctx,null);\n  Options options=new Options();\n  options.setAction(\"urn:echo\");\n  options.setTo(new EndpointReference(args[0]));\n  client.setOptions(options);\n  OMElement response=client.sendReceive(getPayload(\"Hello world\"));\n  System.out.println(response);\n}\n",
      "types": [
        "String",
        "Character",
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "java",
        "print",
        "character",
        "println",
        "io",
        "stream",
        "string"
      ]
    },
    {
      "method": "setUp@54",
      "body": "public void setUp() throws Exception {\n  String conf=getClass().getResource(\"/conf/standalone/test-configuration.xml\").toString();\n  StandaloneContainer.setConfigurationURL(conf);\n  container=StandaloneContainer.getInstance();\n  applicationRegistry=(ApplicationRegistry)container.getComponentInstanceOfType(ApplicationRegistry.class);\n  binder=(ResourceBinder)container.getComponentInstanceOfType(ResourceBinder.class);\n  requestHandler=(RequestHandlerImpl)container.getComponentInstanceOfType(RequestHandlerImpl.class);\n  providersRegistry=(ProvidersRegistry)container.getComponentInstanceOfType(ProvidersRegistry.class);\n  DependencySupplier dependencySupplier=(DependencySupplier)container.getComponentInstanceOfType(DependencySupplier.class);\n  ProviderBinder.setInstance(new ProviderBinder());\n  providers=ProviderBinder.getInstance();\n  binder.clear();\n  ApplicationContextImpl.setCurrent(new ApplicationContextImpl(null,null,providers,dependencySupplier));\n  launcher=new ResourceLauncher(requestHandler);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResource(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.net.URL",
            "_throws": []
          },
          {
            "_call": "java.net.URL.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ws/exo.ws.rest.core/src/test/java/org/exoplatform/services/rest/BaseTest.java",
      "types": [
        "String",
        "Class",
        "URL"
      ],
      "apicalls": [
        "getResource",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResource(java.lang.String)",
            "java.net.URL.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "class",
        "get",
        "resource",
        "lang",
        "net",
        "url",
        "string"
      ]
    },
    {
      "method": "drawBackground@39",
      "body": "public static void drawBackground(Graphics g,CheckboxState s,Rectangle focusRect,WinTheme t){\n  Dimension size=s.getSize();\n  int y=size.height / 2 - CB_SIZE / 2;\n  Rectangle bounds=new Rectangle(ABS_MARGIN,y,CB_SIZE,CB_SIZE);\n  g.setColor(s.getBackground());\n  g.fillRect(0,0,size.width,size.height);\n  WinThemeGraphics wgr=new WinThemeGraphics(g);\n  wgr.fillBackground(size,s.getBackground(),true);\n  if (t.isXpThemeActive()) {\n    wgr.setTheme(t.getXpTheme(\"Button\"));\n    wgr.drawXpBackground(bounds,getXpType(s),getXpState(s));\n  }\n else {\n    wgr.drawClassicBackground(bounds,WindowsDefs.DFC_BUTTON,getClassicState(s));\n  }\n  if (s.isFocused()) {\n    wgr.drawFocusRect(focusRect,-1);\n  }\n  wgr.dispose();\n}\n",
      "formalParam": [
        "Graphics",
        "CheckboxState",
        "Rectangle",
        "WinTheme"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Rectangle.Rectangle(int,int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.setColor(java.awt.Color)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.fillRect(int,int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/awt/src/main/java/windows/org/apache/harmony/awt/theme/windows/WinCheckbox.java",
      "types": [
        "Graphics",
        "Rectangle",
        "Integer",
        "Color"
      ],
      "apicalls": [
        "fillRect",
        "setColor"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Rectangle.Rectangle(int,int,int,int)",
            "java.awt.Graphics.setColor(java.awt.Color)",
            "java.awt.Graphics.fillRect(int,int,int,int)"
          ]
        }
      ],
      "keywords": [
        "graphics",
        "java",
        "awt",
        "rect",
        "rectangle",
        "integer",
        "set",
        "fill",
        "color"
      ]
    },
    {
      "method": "alterMapTransform@126",
      "body": "/** \n * Alters the underlying map transformation by changing the values of the transform parameters named \"semi_major\" and \"semi_minor\" (if any) to the ones of the supplied ellipsoid.\n * @param ellipsoid the ellipsoid\n */\npublic void alterMapTransform(Ellipsoid ellipsoid){\n  final MapTransform oldTransform=getMapTransform();\n  final Parameter[] parameters=oldTransform.getDescriptor().getParameters();\n  final double[] parameterValues=oldTransform.getParameterValues();\n  boolean altered=false;\n  for (int i=0; i < parameters.length; i++) {\n    if (\"semi_minor\".equals(parameters[i].getName())) {\n      parameterValues[i]=ellipsoid.getSemiMinor();\n      altered=true;\n    }\n else     if (\"semi_major\".equals(parameters[i].getName())) {\n      parameterValues[i]=ellipsoid.getSemiMajor();\n      altered=true;\n    }\n  }\n  if (altered) {\n    final MapTransform newTransform=oldTransform.getDescriptor().createTransform(parameterValues);\n    setMapTransform(newTransform);\n  }\n}\n",
      "formalParam": [
        "Ellipsoid"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/beam/beam-core/src/main/java/org/esa/beam/framework/dataop/maptransf/MapProjection.java",
      "types": [
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "boolean",
        "java",
        "string",
        "object",
        "lang"
      ]
    },
    {
      "method": "getSQLXML@3251",
      "body": "/** \n * {@inheritDoc}\n */\npublic SQLXML getSQLXML(String columnLabel) throws SQLException {\n  ResultSet resultSet=getUnderlyingResultSet();\n  try {\n    if (spy)     spyLogger.debugf(\"%s [%s] getSQLXML(%s)\",jndiName,Constants.SPY_LOGGER_PREFIX_RESULTSET,columnLabel);\n    return resultSet.getSQLXML(columnLabel);\n  }\n catch (  Throwable t) {\n    throw checkException(t);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicBoolean.get()",
            "_throws": [],
            "_returns": "boolean",
            "node": "DAPICall"
          },
          {
            "_call": "java.sql.ResultSet.getSQLXML(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "_returns": "java.sql.SQLXML",
            "node": "DAPICall"
          }
        ]
      },
      "returnType": "SQLXML",
      "file": "./java_projects/IronJacamar/adapters/src/main/java/org/jboss/jca/adapters/jdbc/WrappedResultSet.java",
      "types": [
        "ResultSet",
        "String",
        "SQLException",
        "SQLXML",
        "Boolean",
        "concurrent"
      ],
      "apicalls": [
        "getSQLXML",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicBoolean.get()",
            "java.sql.ResultSet.getSQLXML(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "atomic",
        "concurrent",
        "get",
        "java",
        "set",
        "sql",
        "boolean",
        "sqlxml",
        "result",
        "util",
        "exception",
        "string"
      ]
    },
    {
      "method": "ReadAnnotationReader@39",
      "body": "public ReadAnnotationReader(BufferedReader bufferedReader) throws IOException {\n  this.bufferedReader=bufferedReader;\n  String dictionaryLine=bufferedReader.readLine();\n  for (  String key : dictionaryLine.split(DLM))   key2ReadAnnotationMap.put(key,new ReadAnnotation(key));\n  this.annnotations=Collections.unmodifiableSet(new TreeSet<ReadAnnotation>(key2ReadAnnotationMap.values()));\n}\n",
      "formalParam": [
        "BufferedReader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.BufferedReader.readLine()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.util.TreeSet<Tau_E>.TreeSet(java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.unmodifiableSet(java.util.Set)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/crammer/src/main/java/uk/ac/ebi/ena/sra/cram/impl/ReadAnnotationReader.java",
      "types": [
        "Set",
        "TreeSet",
        "String",
        "BufferedReader",
        "Collections",
        "IOException",
        "Comparator"
      ],
      "apicalls": [
        "readLine",
        "split",
        "unmodifiableSet"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedReader.readLine()",
            "java.lang.String.split(java.lang.String)",
            "java.util.TreeSet<Tau_E>.TreeSet(java.util.Comparator)",
            "java.util.Collections.unmodifiableSet(java.util.Set)"
          ]
        }
      ],
      "keywords": [
        "string",
        "java",
        "buffered",
        "comparator",
        "unmodifiable",
        "reader",
        "read",
        "lang",
        "line",
        "exception",
        "io",
        "set",
        "collections",
        "util",
        "split",
        "tree"
      ]
    },
    {
      "method": "addComponent@35",
      "body": "public void addComponent(JPanelMenu menu){\n  JLabel lbl=new JLabel(AppLocal.getIntString(KeyText));\n  lbl.applyComponentOrientation(menu.getComponentOrientation());\n  lbl.setBorder(new MatteBorder(new Insets(0,0,1,0),new Color(0,0,0)));\n  menu.addTitle(lbl);\n}\n",
      "formalParam": [
        "JPanelMenu"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JLabel.JLabel(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Insets.Insets(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Color.Color(int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/KinoPOS/src-pos/com/openbravo/pos/forms/MenuTitleDefinition.java",
      "types": [
        "JLabel",
        "Insets",
        "JComponent",
        "Integer",
        "String",
        "Container",
        "Border",
        "Color",
        "ComponentOrientation"
      ],
      "apicalls": [
        "setBorder",
        "applyComponentOrientation"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JLabel.JLabel(java.lang.String)",
            "java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)",
            "java.awt.Insets.Insets(int,int,int,int)",
            "java.awt.Color.Color(int,int,int)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "label",
        "integer",
        "swing",
        "j",
        "apply",
        "component",
        "insets",
        "container",
        "color",
        "javax",
        "set",
        "awt",
        "border",
        "java",
        "string",
        "orientation"
      ]
    },
    {
      "method": "test@11",
      "body": "public void test(){\n  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(1);\n  try {\n    Send actor=new Send();\n    actor.initialize(mailboxFactory.createMailbox());\n    JAFuture future=new JAFuture();\n    System.out.println(SimpleRequest.req.send(future,actor));\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    mailboxFactory.close();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/JActor/src/test/java/org/agilewiki/jactor/simpleMachine/SendFVTest.java",
      "types": [
        "PrintStream",
        "Throwable",
        "Character"
      ],
      "apicalls": [
        "printStackTrace",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "print",
        "throwable",
        "java",
        "stack",
        "println",
        "lang",
        "character",
        "trace",
        "io",
        "stream"
      ]
    },
    {
      "method": "getString@38",
      "body": "public static String getString(String Variable){\n  if (LV.containsKey(Variable)) {\n    return LV.get(Variable);\n  }\n  return Variable;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/MyWolf/src/de/Keyle/MyWolf/util/MyWolfLanguage.java",
      "types": [
        "Boolean",
        "String",
        "Object",
        "Map"
      ],
      "apicalls": [
        "containsKey",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "java",
        "boolean",
        "map",
        "key",
        "contains",
        "string",
        "object",
        "get"
      ]
    },
    {
      "method": "Resource@23",
      "body": "Resource(Process creator,int[] msg,String type){\n  message=Arrays.copyOf(msg,msg.length);\n  process=creator;\n  this.type=type;\n  if ((target=registered.get(type)) != null) {\n    target.addResource(this);\n  }\n  resources.add(this);\n}\n",
      "formalParam": [
        "Process",
        "int[]",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.copyOf(int[],int)",
            "node": "DAPICall",
            "_returns": "int[]",
            "_throws": []
          },
          {
            "_call": "java.util.Hashtable<java.lang.String,java.lang.Process>.get(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "java.lang.Process",
            "_throws": []
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/mifOS/mifOS/src/RealMachine/Resource.java",
      "types": [
        "Object",
        "Arrays",
        "ArrayList",
        "Process",
        "Integer",
        "String",
        "Boolean",
        "Hashtable"
      ],
      "apicalls": [
        "copyOf",
        "get",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.copyOf(int[],int)",
            "java.util.Hashtable<java.lang.String,java.lang.Process>.get(java.lang.Object)",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "process",
        "add",
        "string",
        "arrays",
        "copy",
        "java",
        "util",
        "integer",
        "array",
        "boolean",
        "get",
        "hashtable",
        "object",
        "list"
      ]
    },
    {
      "method": "testAppFinishedOnRunningContainers@158",
      "body": "@Test @SuppressWarnings(\"unchecked\") public void testAppFinishedOnRunningContainers(){\n  WrappedApplication wa=null;\n  try {\n    wa=new WrappedApplication(4,314159265358979L,\"yak\",3);\n    wa.initApplication();\n    wa.initContainer(-1);\n    assertEquals(ApplicationState.INITING,wa.app.getApplicationState());\n    wa.applicationInited();\n    assertEquals(ApplicationState.RUNNING,wa.app.getApplicationState());\n    wa.containerFinished(0);\n    assertEquals(ApplicationState.RUNNING,wa.app.getApplicationState());\n    assertEquals(2,wa.app.getContainers().size());\n    wa.appFinished();\n    assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT,wa.app.getApplicationState());\n    assertEquals(2,wa.app.getContainers().size());\n    for (int i=1; i < wa.containers.size(); i++) {\n      verify(wa.containerBus).handle(argThat(new ContainerKillMatcher(wa.containers.get(i).getContainerID())));\n    }\n    wa.containerFinished(1);\n    assertEquals(ApplicationState.FINISHING_CONTAINERS_WAIT,wa.app.getApplicationState());\n    assertEquals(1,wa.app.getContainers().size());\n    reset(wa.localizerBus);\n    wa.containerFinished(2);\n    assertEquals(ApplicationState.APPLICATION_RESOURCES_CLEANINGUP,wa.app.getApplicationState());\n    assertEquals(0,wa.app.getContainers().size());\n    verify(wa.localizerBus).handle(refEq(new ApplicationLocalizationEvent(LocalizationEventType.DESTROY_APPLICATION_RESOURCES,wa.app)));\n    verify(wa.auxBus).handle(refEq(new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP,wa.appId)));\n    wa.appResourcesCleanedup();\n    assertEquals(ApplicationState.FINISHED,wa.app.getApplicationState());\n  }\n  finally {\n    if (wa != null)     wa.finished();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-common/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/TestApplication.java",
      "types": [
        "ArrayList",
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
          ]
        }
      ],
      "keywords": [
        "java",
        "util",
        "array",
        "list",
        "hash",
        "map"
      ]
    },
    {
      "method": "uncaughtException@20",
      "body": "/** \n * Called when an uncaught exception is thrown. Will display the error message in a dialog box.\n * @param t the thread where the exception was throws.\n * @param e the thrown exception.\n */\n@Override public void uncaughtException(final Thread t,final Throwable e){\n  try {\n    if (SwingUtilities.isEventDispatchThread()) {\n      showException(t,e);\n    }\n else {\n      SwingUtilities.invokeLater(new Runnable(){\n        public void run(){\n          showException(t,e);\n        }\n      }\n);\n    }\n  }\n catch (  Exception excpt) {\n    LOGGER.error(\"\",excpt);\n  }\n}\n",
      "formalParam": [
        "Thread",
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_then": [
              {
                "_call": "java.lang.Thread.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)",
                "_throws": [
                  "java.awt.HeadlessException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_else": [
              {
                "_call": "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.SwingUtilities.isEventDispatchThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/FakeSMTP/src/main/java/com/nilhcem/fakesmtp/core/exception/UncaughtExceptionHandler.java",
      "types": [
        "Locale",
        "String",
        "Object",
        "Throwable",
        "SwingUtilities",
        "Boolean",
        "Thread",
        "HeadlessException",
        "Runnable",
        "Component",
        "JOptionPane"
      ],
      "apicalls": [
        "showMessageDialog",
        "format",
        "getName",
        "getMessage",
        "invokeLater",
        "isEventDispatchThread"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Thread.getName()",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
          ]
        }
      ],
      "keywords": [
        "string",
        "pane",
        "utilities",
        "locale",
        "name",
        "invoke",
        "lang",
        "format",
        "dispatch",
        "boolean",
        "get",
        "object",
        "runnable",
        "swing",
        "headless",
        "exception",
        "show",
        "option",
        "java",
        "component",
        "j",
        "dialog",
        "javax",
        "event",
        "throwable",
        "later",
        "thread",
        "message"
      ]
    },
    {
      "method": "setAsyncAnnotationType@93",
      "formalParam": [
        "Class<? extends Annotation>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.lang.Class<? extends java.lang.annotation.Annotation>>.HashSet<Class<? extends Annotation>>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>.add(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/spring-js/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java",
      "body": "/** \n * Set the 'async' annotation type. <p>The default async annotation type is the  {@link Async} annotation, as wellas the EJB 3.1 <code>javax.ejb.Asynchronous</code> annotation (if present). <p>This setter property exists so that developers can provide their own (non-Spring-specific) annotation type to indicate that a method is to be executed asynchronously.\n * @param asyncAnnotationType the desired annotation type\n */\npublic void setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType){\n  Assert.notNull(asyncAnnotationType,\"'asyncAnnotationType' must not be null\");\n  Set<Class<? extends Annotation>> asyncAnnotationTypes=new HashSet<Class<? extends Annotation>>();\n  asyncAnnotationTypes.add(asyncAnnotationType);\n  this.pointcut=buildPointcut(asyncAnnotationTypes);\n}\n",
      "types": [
        "Set",
        "Boolean",
        "Annotation",
        "HashSet",
        "Class"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.lang.Class<? extends java.lang.annotation.Annotation>>.HashSet<Class<? extends Annotation>>()",
            "java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>.add(java.lang.Class<? extends java.lang.annotation.Annotation>)"
          ]
        }
      ],
      "keywords": [
        "set",
        "class",
        "util",
        "annotation",
        "java",
        "hash",
        "boolean",
        "add"
      ]
    },
    {
      "method": "testBuildInvokerObject@185",
      "body": "@Test public void testBuildInvokerObject(){\n  try {\n    TestInvoker tInvoker=new TestInvoker();\n    Method m=TestInvoker.class.getMethod(\"m1\",ATest.class,VTest.class,I0Test.class,J0Test.class);\n    MethodInvoker invoker=MethodInvoker.buildInvoker(m,new Class[]{ATest.class,VTest.class,I0Test.class,J0Test.class});\n    assertEquals(0,invoker.getCost());\n    assertNull(invoker.getConverters());\n    assertNull(invoker.invoke(tInvoker,new Object[]{new ATest(),new VTest(),new I0Test(){\n    }\n,new J0Test(){\n    }\n}));\n    invoker=MethodInvoker.buildInvoker(m,new Class[]{BTest.class,WTest.class,I2Test.class,J0Test.class});\n    assertEquals(400,invoker.getCost());\n    assertNull(invoker.getConverters());\n    assertNull(invoker.invoke(tInvoker,new Object[]{new BTest(),new WTest(),new I2Test(){\n    }\n,new J0Test(){\n    }\n}));\n    m=TestInvoker.class.getMethod(\"m2\",String.class,Object.class);\n    invoker=MethodInvoker.buildInvoker(m,new Class[]{String.class,String.class});\n    assertEquals(100,invoker.getCost());\n    assertNull(invoker.getConverters());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
                "node": "DAPICall",
                "_returns": "java.lang.reflect.Method",
                "_throws": [
                  "java.lang.NoSuchMethodException",
                  "java.lang.SecurityException"
                ]
              },
              {
                "_call": "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
                "node": "DAPICall",
                "_returns": "java.lang.reflect.Method",
                "_throws": [
                  "java.lang.NoSuchMethodException",
                  "java.lang.SecurityException"
                ]
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/py4j/py4j-java/test/py4j/reflection/MethodInvokerTest.java",
      "types": [
        "String",
        "Class",
        "Method",
        "NoSuchMethodException",
        "SecurityException",
        "Throwable"
      ],
      "apicalls": [
        "getMethod",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])"
          ]
        }
      ],
      "keywords": [
        "string",
        "exception",
        "stack",
        "get",
        "lang",
        "throwable",
        "class",
        "method",
        "java",
        "trace",
        "print",
        "security"
      ]
    },
    {
      "method": "get@115",
      "body": "public final char[] get(int capacity){\n  if (capacity > MAX_CACHE_CAPACITY) {\n    return new char[capacity];\n  }\n  long currentThread=Thread.currentThread().getId();\n  char[] result=cachedResult;\n  if (cachedThread != currentThread) {\n    cachedThread=currentThread;\n    result=get();\n  }\n  if (result.length < capacity) {\n    result=new char[capacity];\n    set(result);\n  }\n  return cachedResult=result;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "node": "DAPICall",
            "_returns": "java.lang.Thread",
            "_throws": []
          },
          {
            "_call": "java.lang.Thread.getId()",
            "node": "DAPICall",
            "_returns": "long",
            "_throws": []
          },
          {
            "_call": "java.lang.ThreadLocal<Tau_T>.get()",
            "node": "DAPICall",
            "_returns": "Tau_T",
            "_throws": []
          },
          {
            "_call": "java.lang.ThreadLocal<Tau_T>.set(Tau_T)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "char[]",
      "file": "./java_projects/emf/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/xml/type/util/XMLTypeUtil.java",
      "types": [
        "ThreadLocal",
        "Thread",
        "Long"
      ],
      "apicalls": [
        "currentThread",
        "set",
        "getId",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getId()",
            "java.lang.ThreadLocal<Tau_T>.get()",
            "java.lang.ThreadLocal<Tau_T>.set(Tau_T)"
          ]
        }
      ],
      "keywords": [
        "thread",
        "set",
        "current",
        "id",
        "long",
        "get",
        "lang",
        "java",
        "local"
      ]
    },
    {
      "method": "printSolution@30",
      "body": "public static void printSolution(int s[],int length){\n  while (length > 0) {\n    System.out.print(s[length] + \" \");\n    length=length - s[length];\n  }\n  System.out.println();\n}\n",
      "formalParam": [
        "int[]",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/Interview/Interview/src/th/DP/RobCutting.java",
      "types": [
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.println()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "print",
        "io",
        "java",
        "string",
        "println"
      ]
    },
    {
      "method": "toString@8965",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"modifyHostMonitorItem_result(\");\n  boolean first=true;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/cloumon/src/java/org/cloumon/thrift/MonitorService.java",
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "lang",
        "builder",
        "append"
      ]
    },
    {
      "method": "testReadFully@229",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.mkdirs()",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/hadoop-20/src/contrib/raid/src/test/org/apache/hadoop/hdfs/TestRaidDfs.java",
      "body": "/** \n * Test DistributedRaidFileSystem.readFully()\n */\npublic void testReadFully() throws Exception {\n  code=ErasureCodeType.XOR;\n  stripeLength=3;\n  mySetup(\"xor\",1);\n  try {\n    Path file=new Path(\"/user/raid/raidtest/file1\");\n    long crc=createTestFile(fileSys,file,1,8,8192L);\n    FileStatus stat=fileSys.getFileStatus(file);\n    LOG.info(\"Created \" + file + \", crc=\"+ crc+ \", len=\"+ stat.getLen());\n    byte[] filebytes=new byte[(int)stat.getLen()];\n    DistributedRaidFileSystem raidfs=getRaidFS();\n    FSDataInputStream stm=raidfs.open(file);\n    stm.readFully(0,filebytes);\n    assertEquals(crc,bufferCRC(filebytes));\n    stm.close();\n    RaidNode.doRaid(conf,fileSys.getFileStatus(file),new Path(\"/destraid\"),code,new RaidNode.Statistics(),RaidUtils.NULL_PROGRESSABLE,false,1,1,stripeLength);\n    int[] corrupt={0,4,7};\n    for (    int blockIdx : corrupt) {\n      LOG.info(\"Corrupt block \" + blockIdx + \" of file \"+ file);\n      LocatedBlocks locations=getBlockLocations(file);\n      corruptBlock(file,locations.get(blockIdx).getBlock(),NUM_DATANODES,true,dfs);\n    }\n    stm=raidfs.open(file);\n    stm.readFully(0,filebytes);\n    assertEquals(crc,bufferCRC(filebytes));\n  }\n  finally {\n    myTearDown();\n  }\n}\n",
      "types": [
        "Boolean",
        "String",
        "Object",
        "File"
      ],
      "apicalls": [
        "equals",
        "mkdirs"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.mkdirs()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "mkdirs",
        "java",
        "equals",
        "file",
        "lang",
        "object",
        "string",
        "io",
        "boolean"
      ]
    },
    {
      "method": "getPermissions@6650",
      "body": "/** \n * Auto generated method signature\n * @see org.wso2.carbon.registry.resource.services.ResourceAdminService#getPermissions\n * @param getPermissions324\n * @throws org.wso2.carbon.registry.resource.services.ExceptionException : \n */\npublic org.wso2.carbon.registry.resource.beans.xsd.PermissionBean getPermissions(java.lang.String path325) throws java.rmi.RemoteException, org.wso2.carbon.registry.resource.services.ExceptionException {\n  org.apache.axis2.context.MessageContext _messageContext=null;\n  try {\n    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[29].getName());\n    _operationClient.getOptions().setAction(\"urn:getPermissions\");\n    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);\n    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,\"&\");\n    _messageContext=new org.apache.axis2.context.MessageContext();\n    org.apache.axiom.soap.SOAPEnvelope env=null;\n    org.wso2.carbon.registry.resource.services.GetPermissions dummyWrappedType=null;\n    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),path325,dummyWrappedType,optimizeContent(new javax.xml.namespace.QName(\"http://services.resource.registry.carbon.wso2.org\",\"getPermissions\")));\n    _serviceClient.addHeadersToEnvelope(env);\n    _messageContext.setEnvelope(env);\n    _operationClient.addMessageContext(_messageContext);\n    _operationClient.execute(true);\n    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();\n    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.wso2.carbon.registry.resource.services.GetPermissionsResponse.class,getEnvelopeNamespaces(_returnEnv));\n    return getGetPermissionsResponse_return((org.wso2.carbon.registry.resource.services.GetPermissionsResponse)object);\n  }\n catch (  org.apache.axis2.AxisFault f) {\n    org.apache.axiom.om.OMElement faultElt=f.getDetail();\n    if (faultElt != null) {\n      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {\n        try {\n          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());\n          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);\n          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();\n          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());\n          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);\n          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);\n          java.lang.reflect.Method m=exceptionClass.getMethod(\"setFaultMessage\",new java.lang.Class[]{messageClass});\n          m.invoke(ex,new java.lang.Object[]{messageObject});\n          if (ex instanceof org.wso2.carbon.registry.resource.services.ExceptionException) {\n            throw (org.wso2.carbon.registry.resource.services.ExceptionException)ex;\n          }\n          throw new java.rmi.RemoteException(ex.getMessage(),ex);\n        }\n catch (        java.lang.ClassCastException e) {\n          throw f;\n        }\ncatch (        java.lang.ClassNotFoundException e) {\n          throw f;\n        }\ncatch (        java.lang.NoSuchMethodException e) {\n          throw f;\n        }\ncatch (        java.lang.reflect.InvocationTargetException e) {\n          throw f;\n        }\ncatch (        java.lang.IllegalAccessException e) {\n          throw f;\n        }\ncatch (        java.lang.InstantiationException e) {\n          throw f;\n        }\n      }\n else {\n        throw f;\n      }\n    }\n else {\n      throw f;\n    }\n  }\n finally {\n    _messageContext.getTransportOut().getSender().cleanup(_messageContext);\n  }\n}\n",
      "formalParam": [
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "node": "DBranch",
                "_else": [],
                "_cond": [
                  {
                    "_call": "java.util.HashMap.containsKey(java.lang.Object)",
                    "node": "DAPICall",
                    "_returns": "boolean",
                    "_throws": []
                  }
                ],
                "_then": [
                  {
                    "_call": "java.lang.Class.forName(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "java.lang.Class",
                    "_throws": [
                      "java.lang.ClassNotFoundException"
                    ]
                  },
                  {
                    "_call": "java.lang.Class.forName(java.lang.String)",
                    "node": "DAPICall",
                    "_returns": "java.lang.Class",
                    "_throws": [
                      "java.lang.ClassNotFoundException"
                    ]
                  },
                  {
                    "_call": "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
                    "node": "DAPICall",
                    "_returns": "java.lang.reflect.Method",
                    "_throws": [
                      "java.lang.NoSuchMethodException",
                      "java.lang.SecurityException"
                    ]
                  },
                  {
                    "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                    "node": "DAPICall",
                    "_returns": "java.lang.Object",
                    "_throws": [
                      "java.lang.IllegalAccessException",
                      "java.lang.IllegalArgumentException",
                      "java.lang.reflect.InvocationTargetException"
                    ]
                  }
                ]
              }
            ],
            "_try": [
              {
                "_call": "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
                "node": "DAPICall",
                "_returns": "void",
                "_throws": []
              },
              {
                "_call": "javax.xml.namespace.QName.equals(java.lang.Object)",
                "node": "DAPICall",
                "_returns": "boolean",
                "_throws": []
              }
            ]
          }
        ]
      },
      "returnType": "org.wso2.carbon.registry.resource.beans.xsd.PermissionBean",
      "file": "./java_projects/platform/components/registry/org.wso2.carbon.registry.samples.ws-client/src/org/wso2/carbon/registry/resource/services/ResourceAdminServiceStub.java",
      "types": [
        "IllegalAccessException",
        "Class",
        "NoSuchMethodException",
        "InvocationTargetException",
        "IllegalArgumentException",
        "Object",
        "SecurityException",
        "String",
        "Boolean",
        "HashMap",
        "ClassNotFoundException",
        "Method",
        "QName"
      ],
      "apicalls": [
        "forName",
        "getMethod",
        "invoke",
        "equals",
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
            "javax.xml.namespace.QName.equals(java.lang.Object)",
            "java.util.HashMap.containsKey(java.lang.Object)",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class.forName(java.lang.String)",
            "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        },
        {
          "calls": [
            "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
            "javax.xml.namespace.QName.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
            "javax.xml.namespace.QName.equals(java.lang.Object)",
            "java.util.HashMap.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "target",
        "reflect",
        "equals",
        "util",
        "method",
        "get",
        "security",
        "name",
        "hash",
        "key",
        "lang",
        "namespace",
        "q",
        "invocation",
        "access",
        "java",
        "argument",
        "object",
        "invoke",
        "javax",
        "map",
        "exception",
        "xml",
        "contains",
        "illegal",
        "class",
        "found",
        "string"
      ]
    },
    {
      "method": "execute@58",
      "body": "@Override public final void execute() throws MojoExecutionException, MojoFailureException {\n  LOGGER.debug(\"starting report execution...\");\n  MojoLogAppender.beginLogging(this);\n  try {\n    ReportGenerator.extractJSDocToolkit(getToolkitExtractDirectory());\n    Set<File> sourceFiles=getSourceFiles();\n    List<String> args=createArgumentStack(sourceFiles);\n    ReportGenerator.executeJSDocToolkit(getJsDocAppLocation(),args,getToolkitExtractDirectory());\n    File innerDestDir=getOutputDirectory();\n    String destFileName=getFinalName() + \"-\" + getClassifier()+ \".\"+ getExtensionFormat();\n    File destFile=null;\n    if (innerDestDir.exists()) {\n      destFile=AbstractJsDocsMojo.generateArchive(this,innerDestDir,destFileName);\n    }\n    getProjectHelper().attachArtifact(getProject(),getExtensionFormat(),getClassifier(),destFile);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"There was an error in the execution of the report: \" + e.getMessage(),e);\n    throw new MojoExecutionException(e.getMessage(),e);\n  }\n finally {\n    MojoLogAppender.endLogging();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/ClosureJavascriptFramework/jsdocs-maven-plugin/src/main/java/com/github/jlgrock/javascriptframework/jsdocs/AggregatorJsDocsJsarMojo.java",
      "types": [
        "String",
        "Throwable",
        "Boolean",
        "File"
      ],
      "apicalls": [
        "exists",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.exists()"
          ]
        },
        {
          "calls": [
            "java.io.File.exists()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "get",
        "file",
        "lang",
        "throwable",
        "message",
        "exists",
        "java",
        "string",
        "io"
      ]
    },
    {
      "method": "getParentFile@92",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getPath()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "node": "DAPICall",
            "_returns": "boolean",
            "_throws": []
          }
        ]
      },
      "returnType": "File",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/sun/awt/shell/ShellFolder.java",
      "body": "/** \n * Returns a File object representing this object's parent, or <code>null</code> if this object does not name a parent folder.\n * @return  a File object representing this object's parent,or <code>null</code> if this object does not name a parent folder\n * @see java.io.File#getParentFile()\n * @since 1.4\n */\npublic File getParentFile(){\n  if (parent != null) {\n    return parent;\n  }\n else   if (isFileSystem()) {\n    return super.getParentFile();\n  }\n else {\n    return null;\n  }\n}\n",
      "types": [
        "String",
        "File",
        "Boolean"
      ],
      "apicalls": [
        "getPath",
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getPath()",
            "java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "file",
        "java",
        "string",
        "lang",
        "get",
        "boolean",
        "path",
        "io",
        "starts"
      ]
    },
    {
      "method": "parseDrl@23",
      "body": "/** \n * parseDrl uses the drools drl parser to read the drl and return object description\n */\npublic final static PackageDescr parseDrl(String file) throws RuleTestLanguageException {\n  DrlParser drlParser=new DrlParser();\n  try {\n    Reader reader=new InputStreamReader(RuleSetTest.class.getResourceAsStream(file));\n    return drlParser.parse(reader);\n  }\n catch (  Exception e) {\n    throw new TransformerServiceException(\"Exception ocurred \",e);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "returnType": "PackageDescr",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/4.0.x/experimental/drools-testing/src/org/drools/testing/core/main/TransformerService.java",
      "types": [
        "InputStreamReader",
        "String",
        "InputStream",
        "Class"
      ],
      "apicalls": [
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "java",
        "string",
        "lang",
        "reader",
        "stream",
        "resource",
        "io",
        "get",
        "class",
        "input"
      ]
    },
    {
      "method": "deepCopy@9123",
      "body": "public get_stats_result deepCopy(){\n  return new get_stats_result(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "node": "DAPICall",
            "_returns": "java.util.Set",
            "_throws": []
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "get_stats_result",
      "file": "./java_projects/indextank-engine/gen-java/com/flaptor/indextank/rpc/Indexer.java",
      "types": [
        "HashMap",
        "String",
        "Map",
        "Set"
      ],
      "apicalls": [
        "entrySet",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.Map<java.lang.String,java.lang.String>.entrySet()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "put",
        "entry",
        "set",
        "map",
        "hash",
        "util",
        "string",
        "java"
      ]
    },
    {
      "method": "clickRoot@428",
      "body": "/** \n * Clicks the DTM at its root point.\n * @param left <tt>true</tt> for left click; <tt>false</tt> for right click.\n * @return <tt>true</tt> if DTM found and clicked; otherwise <tt>false</tt>.\n */\npublic boolean clickRoot(boolean left){\n  final Point point=getPoint();\n  if (point != null) {\n    Mouse.click(point,left);\n    return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.awt.Point>.LinkedList<Point>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.LinkedList<java.awt.Point>.add(java.awt.Point)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_then": [
              {
                "_call": "java.util.List<java.awt.Point>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List<java.awt.Point>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Point"
              }
            ],
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<java.awt.Point>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "node": "DBranch"
          }
        ]
      },
      "returnType": "boolean",
      "file": "./java_projects/XotikColor/src/net/xotiksys/api/wrappers/DTM.java",
      "types": [
        "Boolean",
        "Point",
        "Integer",
        "List",
        "LinkedList"
      ],
      "apicalls": [
        "get",
        "size",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.awt.Point>.LinkedList<Point>()",
            "java.util.LinkedList<java.awt.Point>.add(java.awt.Point)",
            "java.util.List<java.awt.Point>.size()"
          ]
        },
        {
          "calls": [
            "java.util.LinkedList<java.awt.Point>.LinkedList<Point>()",
            "java.util.LinkedList<java.awt.Point>.add(java.awt.Point)",
            "java.util.List<java.awt.Point>.size()",
            "java.util.List<java.awt.Point>.size()",
            "java.util.List<java.awt.Point>.get(int)"
          ]
        }
      ],
      "keywords": [
        "java",
        "linked",
        "add",
        "point",
        "get",
        "list",
        "integer",
        "boolean",
        "size",
        "util"
      ]
    },
    {
      "method": "toString@4405",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"getCounter_result(\");\n  boolean first=true;\n  sb.append(\"success:\");\n  sb.append(this.success);\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(long)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder",
            "_throws": []
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "node": "DAPICall",
            "_returns": "java.lang.String",
            "_throws": []
          }
        ]
      },
      "returnType": "String",
      "file": "./java_projects/messaging-client-scribe/src/main/java/com/facebook/fb303/FacebookService.java",
      "types": [
        "String",
        "StringBuilder",
        "Long"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(long)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "long",
        "string",
        "lang",
        "java",
        "append"
      ]
    },
    {
      "method": "FlexoProjectFile@95",
      "body": "public FlexoProjectFile(String relativePathToProject){\n  super();\n  if (relativePathToProject.indexOf(\":\") > -1) {\n    repositoryName=relativePathToProject.substring(0,relativePathToProject.lastIndexOf(\":\"));\n    relativePathToProject=relativePathToProject.substring(relativePathToProject.lastIndexOf(\":\") + 1);\n  }\n  relativePath=FileUtils.convertBackslashesToSlash(relativePathToProject);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.lastIndexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.lastIndexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "returnType": "None",
      "file": "./java_projects/openflexo/flexodesktop/model/flexofoundation/src/main/java/org/openflexo/foundation/utils/FlexoProjectFile.java",
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "substring",
        "indexOf",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "java",
        "last",
        "string",
        "substring",
        "index",
        "lang",
        "integer"
      ]
    },
    {
      "method": "paintGripper@888",
      "formalParam": [
        "JComponent",
        "Graphics",
        "Rectangle",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "node": "DAPICall",
            "_returns": "int",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.setColor(java.awt.Color)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.fillRect(int,int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.setColor(java.awt.Color)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.awt.Graphics.fillRect(int,int,int,int)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/jide-oss/src/com/jidesoft/plaf/office2003/Office2003Painter.java",
      "body": "@Override public void paintGripper(JComponent c,Graphics g,Rectangle rect,int orientation,int state){\n  if (rect.width > 30) {\n    orientation=SwingConstants.VERTICAL;\n  }\n else   if (rect.height > 30) {\n    orientation=SwingConstants.HORIZONTAL;\n  }\n  int h=(orientation == SwingConstants.HORIZONTAL) ? rect.height : rect.width;\n  int count=Math.min(9,(h - 6) / 4);\n  int y=rect.y;\n  int x=rect.x;\n  if (orientation == SwingConstants.HORIZONTAL) {\n    y+=rect.height / 2 - count * 2;\n    x+=rect.width / 2 - 1;\n  }\n else {\n    x+=rect.width / 2 - count * 2;\n    y+=rect.height / 2 - 1;\n  }\n  for (int i=0; i < count; i++) {\n    g.setColor(getGripperForegroundLt());\n    g.fillRect(x + 1,y + 1,2,2);\n    g.setColor(getGripperForeground());\n    g.fillRect(x,y,2,2);\n    if (orientation == SwingConstants.HORIZONTAL) {\n      y+=4;\n    }\n else {\n      x+=4;\n    }\n  }\n}\n",
      "types": [
        "Integer",
        "Graphics",
        "Color",
        "Math"
      ],
      "apicalls": [
        "setColor",
        "fillRect",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.awt.Graphics.setColor(java.awt.Color)",
            "java.awt.Graphics.fillRect(int,int,int,int)",
            "java.awt.Graphics.setColor(java.awt.Color)",
            "java.awt.Graphics.fillRect(int,int,int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "awt",
        "color",
        "graphics",
        "rect",
        "fill",
        "math",
        "lang",
        "java",
        "min",
        "set"
      ]
    },
    {
      "method": "testDeleteMediaFolder@43",
      "body": "public void testDeleteMediaFolder(){\n  assertEquals(\"Wrong number of music folders.\",0,mediaFolderDao.getAllMediaFolders().size());\n  mediaFolderDao.createMediaFolder(new MediaFolder(new File(\"path\"),\"name\",true,new Date()));\n  assertEquals(\"Wrong number of music folders.\",1,mediaFolderDao.getAllMediaFolders().size());\n  mediaFolderDao.createMediaFolder(new MediaFolder(new File(\"path\"),\"name\",true,new Date()));\n  assertEquals(\"Wrong number of music folders.\",2,mediaFolderDao.getAllMediaFolders().size());\n  mediaFolderDao.deleteMediaFolder(mediaFolderDao.getAllMediaFolders().get(0).getId());\n  assertEquals(\"Wrong number of music folders.\",1,mediaFolderDao.getAllMediaFolders().size());\n  mediaFolderDao.deleteMediaFolder(mediaFolderDao.getAllMediaFolders().get(0).getId());\n  assertEquals(\"Wrong number of music folders.\",0,mediaFolderDao.getAllMediaFolders().size());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          },
          {
            "_call": "java.util.Date.Date()",
            "node": "DAPICall",
            "_returns": "void",
            "_throws": []
          }
        ]
      },
      "returnType": "void",
      "file": "./java_projects/subsonic/subsonic-main/src/test/java/net/sourceforge/subsonic/dao/MediaFolderDaoTestCase.java",
      "types": [
        "String",
        "Date",
        "File"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.Date.Date()",
            "java.io.File.File(java.lang.String)",
            "java.util.Date.Date()"
          ]
        }
      ],
      "keywords": [
        "date",
        "file",
        "io",
        "string",
        "java",
        "util"
      ]
    }
  ]
}
